
IMU_TESTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d5c  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  08010fb0  08010fb0  00011fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011978  08011978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011980  08011980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011984  08011984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000000  08011988  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a8  200001ec  08011b74  000131ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000594  08011b74  00013594  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000131ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c07f  00000000  00000000  00013222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d24  00000000  00000000  0003f2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027b8  00000000  00000000  00042fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001ee8  00000000  00000000  00045780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039a1e  00000000  00000000  00047668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027df4  00000000  00000000  00081086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00174ad2  00000000  00000000  000a8e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021d94c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c3c0  00000000  00000000  0021d990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00229d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001ec 	.word	0x200001ec
 800026c:	00000000 	.word	0x00000000
 8000270:	08010f94 	.word	0x08010f94

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001f0 	.word	0x200001f0
 800028c:	08010f94 	.word	0x08010f94

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9e6 	b.w	800108c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	2200      	movs	r2, #0
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d4a:	4688      	mov	r8, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	468e      	mov	lr, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d95f      	bls.n	8000e1a <__udivmoddi4+0xd6>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b4      	lsls	r4, r6
 8000d6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d70:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	0c23      	lsrs	r3, r4, #16
 8000d7e:	fbbe f1f8 	udiv	r1, lr, r8
 8000d82:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d86:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x5e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x5c>
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	f200 8154 	bhi.w	8001048 <__udivmoddi4+0x304>
 8000da0:	4601      	mov	r1, r0
 8000da2:	1a9b      	subs	r3, r3, r2
 8000da4:	b2a2      	uxth	r2, r4
 8000da6:	fbb3 f0f8 	udiv	r0, r3, r8
 8000daa:	fb08 3310 	mls	r3, r8, r0, r3
 8000dae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000db2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000db6:	4594      	cmp	ip, r2
 8000db8:	d90b      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dba:	18ba      	adds	r2, r7, r2
 8000dbc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000dc0:	bf2c      	ite	cs
 8000dc2:	2401      	movcs	r4, #1
 8000dc4:	2400      	movcc	r4, #0
 8000dc6:	4594      	cmp	ip, r2
 8000dc8:	d902      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dca:	2c00      	cmp	r4, #0
 8000dcc:	f000 813f 	beq.w	800104e <__udivmoddi4+0x30a>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba2 020c 	sub.w	r2, r2, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c5 2300 	strd	r2, r3, [r5]
 8000de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d14e      	bne.n	8000ea0 <__udivmoddi4+0x15c>
 8000e02:	4543      	cmp	r3, r8
 8000e04:	f0c0 8112 	bcc.w	800102c <__udivmoddi4+0x2e8>
 8000e08:	4282      	cmp	r2, r0
 8000e0a:	f240 810f 	bls.w	800102c <__udivmoddi4+0x2e8>
 8000e0e:	4608      	mov	r0, r1
 8000e10:	2d00      	cmp	r5, #0
 8000e12:	d0e8      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e14:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e18:	e7e5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	f000 80ac 	beq.w	8000f78 <__udivmoddi4+0x234>
 8000e20:	fab2 f682 	clz	r6, r2
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	f040 80bb 	bne.w	8000fa0 <__udivmoddi4+0x25c>
 8000e2a:	1a8b      	subs	r3, r1, r2
 8000e2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e30:	b2bc      	uxth	r4, r7
 8000e32:	2101      	movs	r1, #1
 8000e34:	0c02      	lsrs	r2, r0, #16
 8000e36:	b280      	uxth	r0, r0
 8000e38:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e40:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e44:	fb04 f20c 	mul.w	r2, r4, ip
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d90e      	bls.n	8000e6a <__udivmoddi4+0x126>
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e52:	bf2c      	ite	cs
 8000e54:	f04f 0901 	movcs.w	r9, #1
 8000e58:	f04f 0900 	movcc.w	r9, #0
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d903      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e60:	f1b9 0f00 	cmp.w	r9, #0
 8000e64:	f000 80ec 	beq.w	8001040 <__udivmoddi4+0x2fc>
 8000e68:	46c4      	mov	ip, r8
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e70:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e74:	fb04 f408 	mul.w	r4, r4, r8
 8000e78:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e7c:	4294      	cmp	r4, r2
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x154>
 8000e80:	18ba      	adds	r2, r7, r2
 8000e82:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000e86:	bf2c      	ite	cs
 8000e88:	2001      	movcs	r0, #1
 8000e8a:	2000      	movcc	r0, #0
 8000e8c:	4294      	cmp	r4, r2
 8000e8e:	d902      	bls.n	8000e96 <__udivmoddi4+0x152>
 8000e90:	2800      	cmp	r0, #0
 8000e92:	f000 80d1 	beq.w	8001038 <__udivmoddi4+0x2f4>
 8000e96:	4698      	mov	r8, r3
 8000e98:	1b12      	subs	r2, r2, r4
 8000e9a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e9e:	e79d      	b.n	8000ddc <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa08 f401 	lsl.w	r4, r8, r1
 8000eaa:	fa00 f901 	lsl.w	r9, r0, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	fa28 f806 	lsr.w	r8, r8, r6
 8000eb6:	408a      	lsls	r2, r1
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	fa20 f306 	lsr.w	r3, r0, r6
 8000ebe:	0c38      	lsrs	r0, r7, #16
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	fbb8 fef0 	udiv	lr, r8, r0
 8000ecc:	fb00 881e 	mls	r8, r0, lr, r8
 8000ed0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ed4:	fb0e f80c 	mul.w	r8, lr, ip
 8000ed8:	45a0      	cmp	r8, r4
 8000eda:	d90e      	bls.n	8000efa <__udivmoddi4+0x1b6>
 8000edc:	193c      	adds	r4, r7, r4
 8000ede:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ee2:	bf2c      	ite	cs
 8000ee4:	f04f 0b01 	movcs.w	fp, #1
 8000ee8:	f04f 0b00 	movcc.w	fp, #0
 8000eec:	45a0      	cmp	r8, r4
 8000eee:	d903      	bls.n	8000ef8 <__udivmoddi4+0x1b4>
 8000ef0:	f1bb 0f00 	cmp.w	fp, #0
 8000ef4:	f000 80b8 	beq.w	8001068 <__udivmoddi4+0x324>
 8000ef8:	46d6      	mov	lr, sl
 8000efa:	eba4 0408 	sub.w	r4, r4, r8
 8000efe:	fa1f f883 	uxth.w	r8, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d90e      	bls.n	8000f34 <__udivmoddi4+0x1f0>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f1c:	bf2c      	ite	cs
 8000f1e:	f04f 0801 	movcs.w	r8, #1
 8000f22:	f04f 0800 	movcc.w	r8, #0
 8000f26:	45a4      	cmp	ip, r4
 8000f28:	d903      	bls.n	8000f32 <__udivmoddi4+0x1ee>
 8000f2a:	f1b8 0f00 	cmp.w	r8, #0
 8000f2e:	f000 809f 	beq.w	8001070 <__udivmoddi4+0x32c>
 8000f32:	4603      	mov	r3, r0
 8000f34:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f38:	eba4 040c 	sub.w	r4, r4, ip
 8000f3c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f40:	4564      	cmp	r4, ip
 8000f42:	4673      	mov	r3, lr
 8000f44:	46e0      	mov	r8, ip
 8000f46:	d302      	bcc.n	8000f4e <__udivmoddi4+0x20a>
 8000f48:	d107      	bne.n	8000f5a <__udivmoddi4+0x216>
 8000f4a:	45f1      	cmp	r9, lr
 8000f4c:	d205      	bcs.n	8000f5a <__udivmoddi4+0x216>
 8000f4e:	ebbe 0302 	subs.w	r3, lr, r2
 8000f52:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f56:	3801      	subs	r0, #1
 8000f58:	46e0      	mov	r8, ip
 8000f5a:	b15d      	cbz	r5, 8000f74 <__udivmoddi4+0x230>
 8000f5c:	ebb9 0203 	subs.w	r2, r9, r3
 8000f60:	eb64 0408 	sbc.w	r4, r4, r8
 8000f64:	fa04 f606 	lsl.w	r6, r4, r6
 8000f68:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	431e      	orrs	r6, r3
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e736      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f78:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7c:	0c01      	lsrs	r1, r0, #16
 8000f7e:	4614      	mov	r4, r2
 8000f80:	b280      	uxth	r0, r0
 8000f82:	4696      	mov	lr, r2
 8000f84:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f88:	2620      	movs	r6, #32
 8000f8a:	4690      	mov	r8, r2
 8000f8c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f90:	4610      	mov	r0, r2
 8000f92:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f96:	eba3 0308 	sub.w	r3, r3, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e74b      	b.n	8000e38 <__udivmoddi4+0xf4>
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	f1c6 0320 	rsb	r3, r6, #32
 8000fa6:	fa01 f206 	lsl.w	r2, r1, r6
 8000faa:	fa21 f803 	lsr.w	r8, r1, r3
 8000fae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fb2:	fa20 f303 	lsr.w	r3, r0, r3
 8000fb6:	b2bc      	uxth	r4, r7
 8000fb8:	40b0      	lsls	r0, r6
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	0c02      	lsrs	r2, r0, #16
 8000fbe:	0c19      	lsrs	r1, r3, #16
 8000fc0:	b280      	uxth	r0, r0
 8000fc2:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fc6:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fca:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fce:	fb09 f804 	mul.w	r8, r9, r4
 8000fd2:	4588      	cmp	r8, r1
 8000fd4:	d951      	bls.n	800107a <__udivmoddi4+0x336>
 8000fd6:	1879      	adds	r1, r7, r1
 8000fd8:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000fdc:	bf2c      	ite	cs
 8000fde:	f04f 0a01 	movcs.w	sl, #1
 8000fe2:	f04f 0a00 	movcc.w	sl, #0
 8000fe6:	4588      	cmp	r8, r1
 8000fe8:	d902      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000fea:	f1ba 0f00 	cmp.w	sl, #0
 8000fee:	d031      	beq.n	8001054 <__udivmoddi4+0x310>
 8000ff0:	eba1 0108 	sub.w	r1, r1, r8
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	fb0e 1119 	mls	r1, lr, r9, r1
 8001000:	b29b      	uxth	r3, r3
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	4543      	cmp	r3, r8
 8001008:	d235      	bcs.n	8001076 <__udivmoddi4+0x332>
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001010:	bf2c      	ite	cs
 8001012:	f04f 0a01 	movcs.w	sl, #1
 8001016:	f04f 0a00 	movcc.w	sl, #0
 800101a:	4543      	cmp	r3, r8
 800101c:	d2bb      	bcs.n	8000f96 <__udivmoddi4+0x252>
 800101e:	f1ba 0f00 	cmp.w	sl, #0
 8001022:	d1b8      	bne.n	8000f96 <__udivmoddi4+0x252>
 8001024:	f1a9 0102 	sub.w	r1, r9, #2
 8001028:	443b      	add	r3, r7
 800102a:	e7b4      	b.n	8000f96 <__udivmoddi4+0x252>
 800102c:	1a84      	subs	r4, r0, r2
 800102e:	eb68 0203 	sbc.w	r2, r8, r3
 8001032:	2001      	movs	r0, #1
 8001034:	4696      	mov	lr, r2
 8001036:	e6eb      	b.n	8000e10 <__udivmoddi4+0xcc>
 8001038:	443a      	add	r2, r7
 800103a:	f1a8 0802 	sub.w	r8, r8, #2
 800103e:	e72b      	b.n	8000e98 <__udivmoddi4+0x154>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e710      	b.n	8000e6a <__udivmoddi4+0x126>
 8001048:	3902      	subs	r1, #2
 800104a:	443b      	add	r3, r7
 800104c:	e6a9      	b.n	8000da2 <__udivmoddi4+0x5e>
 800104e:	443a      	add	r2, r7
 8001050:	3802      	subs	r0, #2
 8001052:	e6be      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8001054:	eba7 0808 	sub.w	r8, r7, r8
 8001058:	f1a9 0c02 	sub.w	ip, r9, #2
 800105c:	4441      	add	r1, r8
 800105e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001062:	fb09 f804 	mul.w	r8, r9, r4
 8001066:	e7c9      	b.n	8000ffc <__udivmoddi4+0x2b8>
 8001068:	f1ae 0e02 	sub.w	lr, lr, #2
 800106c:	443c      	add	r4, r7
 800106e:	e744      	b.n	8000efa <__udivmoddi4+0x1b6>
 8001070:	3b02      	subs	r3, #2
 8001072:	443c      	add	r4, r7
 8001074:	e75e      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8001076:	4649      	mov	r1, r9
 8001078:	e78d      	b.n	8000f96 <__udivmoddi4+0x252>
 800107a:	eba1 0108 	sub.w	r1, r1, r8
 800107e:	46cc      	mov	ip, r9
 8001080:	fbb1 f9fe 	udiv	r9, r1, lr
 8001084:	fb09 f804 	mul.w	r8, r9, r4
 8001088:	e7b8      	b.n	8000ffc <__udivmoddi4+0x2b8>
 800108a:	bf00      	nop

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <ADXL362_CS_Low>:

/**
 * @brief  Assert chip select (active low)
 */
static void ADXL362_CS_Low(adxl362_ctx_t *ctx)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6858      	ldr	r0, [r3, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	891b      	ldrh	r3, [r3, #8]
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	f003 ff06 	bl	8004eb4 <HAL_GPIO_WritePin>
  /* Delay for CS setup time (tCSS min 5ns, using ~2us for safety) */
  for (volatile int i = 0; i < 32; i++);  // ~2us delay
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	e002      	b.n	80010b4 <ADXL362_CS_Low+0x24>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b1f      	cmp	r3, #31
 80010b8:	ddf9      	ble.n	80010ae <ADXL362_CS_Low+0x1e>
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <ADXL362_CS_High>:

/**
 * @brief  Deassert chip select
 */
static void ADXL362_CS_High(adxl362_ctx_t *ctx)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Delay for CS hold time (tCSH min 10ns, using ~2us for safety) */
  for (volatile int i = 0; i < 32; i++);  // ~2us delay
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e002      	b.n	80010d8 <ADXL362_CS_High+0x14>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b1f      	cmp	r3, #31
 80010dc:	ddf9      	ble.n	80010d2 <ADXL362_CS_High+0xe>
  HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6858      	ldr	r0, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	891b      	ldrh	r3, [r3, #8]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	f003 fee3 	bl	8004eb4 <HAL_GPIO_WritePin>
  /* Additional delay between transactions */
  for (volatile int i = 0; i < 32; i++);  // ~2us delay after CS goes high
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	e002      	b.n	80010fa <ADXL362_CS_High+0x36>
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	ddf9      	ble.n	80010f4 <ADXL362_CS_High+0x30>
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <ADXL362_ReadReg>:

/**
 * @brief  Read single register from ADXL362
 */
static uint8_t ADXL362_ReadReg(adxl362_ctx_t *ctx, uint8_t reg)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af02      	add	r7, sp, #8
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	70fb      	strb	r3, [r7, #3]
  /* ADXL362 requires continuous SPI transaction: send command+addr, then receive data */
  uint8_t tx_buf[3] = {ADXL362_READ_REG, reg, 0x00};  // 0x00 is dummy byte to clock out data
 8001116:	230b      	movs	r3, #11
 8001118:	733b      	strb	r3, [r7, #12]
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	737b      	strb	r3, [r7, #13]
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
  uint8_t rx_buf[3] = {0};
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2100      	movs	r1, #0
 8001128:	460a      	mov	r2, r1
 800112a:	801a      	strh	r2, [r3, #0]
 800112c:	460a      	mov	r2, r1
 800112e:	709a      	strb	r2, [r3, #2]

  ADXL362_CS_Low(ctx);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ffad 	bl	8001090 <ADXL362_CS_Low>
  HAL_SPI_TransmitReceive(ctx->hspi, tx_buf, rx_buf, 3, 100);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	f107 0208 	add.w	r2, r7, #8
 800113e:	f107 010c 	add.w	r1, r7, #12
 8001142:	2364      	movs	r3, #100	@ 0x64
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2303      	movs	r3, #3
 8001148:	f009 fc5e 	bl	800aa08 <HAL_SPI_TransmitReceive>
  ADXL362_CS_High(ctx);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffb9 	bl	80010c4 <ADXL362_CS_High>

  return rx_buf[2];  // Data is received on the 3rd byte
 8001152:	7abb      	ldrb	r3, [r7, #10]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <ADXL362_ReadRegs>:

/**
 * @brief  Read multiple registers from ADXL362
 */
static void ADXL362_ReadRegs(adxl362_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t len)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b099      	sub	sp, #100	@ 0x64
 8001160:	af02      	add	r7, sp, #8
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	461a      	mov	r2, r3
 8001168:	460b      	mov	r3, r1
 800116a:	72fb      	strb	r3, [r7, #11]
 800116c:	4613      	mov	r3, r2
 800116e:	72bb      	strb	r3, [r7, #10]
  /* ADXL362 requires continuous SPI transaction */
  /* Allocate buffer for command (2 bytes) + data (len bytes) */
  uint8_t tx_buf[32] = {0};  // Max buffer size (sufficient for typical reads)
 8001170:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001174:	2220      	movs	r2, #32
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f00d f935 	bl	800e3e8 <memset>
  uint8_t rx_buf[32] = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2220      	movs	r2, #32
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f00d f92e 	bl	800e3e8 <memset>

  if (len > 30) return;  // Safety check: ensure we don't overflow buffer
 800118c:	7abb      	ldrb	r3, [r7, #10]
 800118e:	2b1e      	cmp	r3, #30
 8001190:	d834      	bhi.n	80011fc <ADXL362_ReadRegs+0xa0>

  tx_buf[0] = ADXL362_READ_REG;
 8001192:	230b      	movs	r3, #11
 8001194:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  tx_buf[1] = reg;
 8001198:	7afb      	ldrb	r3, [r7, #11]
 800119a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  /* Rest of tx_buf is already zeroed (dummy bytes to clock out data) */

  ADXL362_CS_Low(ctx);
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ff76 	bl	8001090 <ADXL362_CS_Low>
  HAL_SPI_TransmitReceive(ctx->hspi, tx_buf, rx_buf, 2 + len, 100);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	7abb      	ldrb	r3, [r7, #10]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3302      	adds	r3, #2
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f107 0214 	add.w	r2, r7, #20
 80011b4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80011b8:	2464      	movs	r4, #100	@ 0x64
 80011ba:	9400      	str	r4, [sp, #0]
 80011bc:	f009 fc24 	bl	800aa08 <HAL_SPI_TransmitReceive>
  ADXL362_CS_High(ctx);
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff ff7f 	bl	80010c4 <ADXL362_CS_High>

  /* Copy received data (skip first 2 bytes which are command echo) */
  for (uint8_t i = 0; i < len; i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80011cc:	e010      	b.n	80011f0 <ADXL362_ReadRegs+0x94>
  {
    data[i] = rx_buf[2 + i];
 80011ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011d2:	1c9a      	adds	r2, r3, #2
 80011d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	440b      	add	r3, r1
 80011dc:	3258      	adds	r2, #88	@ 0x58
 80011de:	443a      	add	r2, r7
 80011e0:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80011e4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < len; i++)
 80011e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011ea:	3301      	adds	r3, #1
 80011ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80011f0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80011f4:	7abb      	ldrb	r3, [r7, #10]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3e9      	bcc.n	80011ce <ADXL362_ReadRegs+0x72>
 80011fa:	e000      	b.n	80011fe <ADXL362_ReadRegs+0xa2>
  if (len > 30) return;  // Safety check: ensure we don't overflow buffer
 80011fc:	bf00      	nop
  }
}
 80011fe:	375c      	adds	r7, #92	@ 0x5c
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}

08001204 <ADXL362_WriteReg>:

/**
 * @brief  Write single register to ADXL362
 */
static uint8_t ADXL362_WriteReg(adxl362_ctx_t *ctx, uint8_t reg, uint8_t value)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
 8001210:	4613      	mov	r3, r2
 8001212:	70bb      	strb	r3, [r7, #2]
  uint8_t cmd[3] = {ADXL362_WRITE_REG, reg, value};
 8001214:	230a      	movs	r3, #10
 8001216:	733b      	strb	r3, [r7, #12]
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	737b      	strb	r3, [r7, #13]
 800121c:	78bb      	ldrb	r3, [r7, #2]
 800121e:	73bb      	strb	r3, [r7, #14]

  ADXL362_CS_Low(ctx);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff35 	bl	8001090 <ADXL362_CS_Low>
  HAL_StatusTypeDef status = HAL_SPI_Transmit(ctx->hspi, cmd, 3, 100);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	2364      	movs	r3, #100	@ 0x64
 8001230:	2203      	movs	r2, #3
 8001232:	f009 f9d5 	bl	800a5e0 <HAL_SPI_Transmit>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]
  ADXL362_CS_High(ctx);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff42 	bl	80010c4 <ADXL362_CS_High>

  return (status == HAL_OK) ? 1 : 0;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf0c      	ite	eq
 8001246:	2301      	moveq	r3, #1
 8001248:	2300      	movne	r3, #0
 800124a:	b2db      	uxtb	r3, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <ADXL362_SoftReset>:

/**
 * @brief  Soft reset ADXL362
 */
uint8_t ADXL362_SoftReset(adxl362_ctx_t *ctx)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if (!ADXL362_WriteReg(ctx, ADXL362_REG_SOFT_RESET, ADXL362_RESET_KEY))
 800125c:	2252      	movs	r2, #82	@ 0x52
 800125e:	211f      	movs	r1, #31
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffcf 	bl	8001204 <ADXL362_WriteReg>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <ADXL362_SoftReset+0x1c>
  {
    return 0;
 800126c:	2300      	movs	r3, #0
 800126e:	e011      	b.n	8001294 <ADXL362_SoftReset+0x40>
  }

  /* Wait for reset to complete (datasheet: 0.5ms required) */
  HAL_Delay(10);
 8001270:	200a      	movs	r0, #10
 8001272:	f003 f9ff 	bl	8004674 <HAL_Delay>

  /* Verify reset by checking register is readable (not stuck at 0x00 or 0xFF)
   * Note: Reset default value varies by chip revision (0x13 on some, different on others)
   * As long as we can read a valid value, reset was successful */
  uint8_t filter_ctl = ADXL362_ReadReg(ctx, ADXL362_REG_FILTER_CTL);
 8001276:	212c      	movs	r1, #44	@ 0x2c
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff46 	bl	800110a <ADXL362_ReadReg>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
  if (filter_ctl == 0x00 || filter_ctl == 0xFF)
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <ADXL362_SoftReset+0x3a>
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2bff      	cmp	r3, #255	@ 0xff
 800128c:	d101      	bne.n	8001292 <ADXL362_SoftReset+0x3e>
  {
    return 0;  // Communication error
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <ADXL362_SoftReset+0x40>
  }

  return 1;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <ADXL362_ReadDeviceIDs>:

/**
 * @brief  Read device ID registers for debugging
 */
void ADXL362_ReadDeviceIDs(adxl362_ctx_t *ctx, uint8_t *devid_ad, uint8_t *devid_mst, uint8_t *partid)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	603b      	str	r3, [r7, #0]
  *devid_ad = ADXL362_ReadReg(ctx, ADXL362_REG_DEVID_AD);
 80012aa:	2100      	movs	r1, #0
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f7ff ff2c 	bl	800110a <ADXL362_ReadReg>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	701a      	strb	r2, [r3, #0]
  *devid_mst = ADXL362_ReadReg(ctx, ADXL362_REG_DEVID_MST);
 80012ba:	2101      	movs	r1, #1
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7ff ff24 	bl	800110a <ADXL362_ReadReg>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	701a      	strb	r2, [r3, #0]
  *partid = ADXL362_ReadReg(ctx, ADXL362_REG_PARTID);
 80012ca:	2102      	movs	r1, #2
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f7ff ff1c 	bl	800110a <ADXL362_ReadReg>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	701a      	strb	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <ADXL362_CheckDevice>:

/**
 * @brief  Check if ADXL362 device is present
 */
uint8_t ADXL362_CheckDevice(adxl362_ctx_t *ctx)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  uint8_t devid_ad = ADXL362_ReadReg(ctx, ADXL362_REG_DEVID_AD);
 80012ea:	2100      	movs	r1, #0
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff0c 	bl	800110a <ADXL362_ReadReg>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
  uint8_t devid_mst = ADXL362_ReadReg(ctx, ADXL362_REG_DEVID_MST);
 80012f6:	2101      	movs	r1, #1
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff06 	bl	800110a <ADXL362_ReadReg>
 80012fe:	4603      	mov	r3, r0
 8001300:	73bb      	strb	r3, [r7, #14]
  uint8_t partid = ADXL362_ReadReg(ctx, ADXL362_REG_PARTID);
 8001302:	2102      	movs	r1, #2
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff00 	bl	800110a <ADXL362_ReadReg>
 800130a:	4603      	mov	r3, r0
 800130c:	737b      	strb	r3, [r7, #13]

  /* Check analog device ID and manufacturer ID (these are fixed) */
  if (devid_ad != ADXL362_DEVICE_AD)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2bad      	cmp	r3, #173	@ 0xad
 8001312:	d001      	beq.n	8001318 <ADXL362_CheckDevice+0x36>
    return 0;
 8001314:	2300      	movs	r3, #0
 8001316:	e00d      	b.n	8001334 <ADXL362_CheckDevice+0x52>
  if (devid_mst != ADXL362_DEVICE_MST)
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	2b1d      	cmp	r3, #29
 800131c:	d001      	beq.n	8001322 <ADXL362_CheckDevice+0x40>
    return 0;
 800131e:	2300      	movs	r3, #0
 8001320:	e008      	b.n	8001334 <ADXL362_CheckDevice+0x52>

  /* PARTID can vary between chip revisions (0xF2, 0xF7, etc.)
   * Just verify it's not 0x00 or 0xFF (communication error) */
  if (partid == 0x00 || partid == 0xFF)
 8001322:	7b7b      	ldrb	r3, [r7, #13]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <ADXL362_CheckDevice+0x4c>
 8001328:	7b7b      	ldrb	r3, [r7, #13]
 800132a:	2bff      	cmp	r3, #255	@ 0xff
 800132c:	d101      	bne.n	8001332 <ADXL362_CheckDevice+0x50>
    return 0;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <ADXL362_CheckDevice+0x52>

  return 1;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <ADXL362_Init>:
 * @note   Mode 0: Ultra-low power wakeup mode (6 Hz, ultralow noise)
 *         Mode 1: Moderate performance measurement mode (50 Hz, normal noise)
 *         Mode 2: High performance measurement mode (100 Hz, normal noise)
 */
uint8_t ADXL362_Init(adxl362_ctx_t *ctx)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Perform soft reset */
  if (!ADXL362_SoftReset(ctx))
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff85 	bl	8001254 <ADXL362_SoftReset>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <ADXL362_Init+0x18>
  {
    return 0;
 8001350:	2300      	movs	r3, #0
 8001352:	e025      	b.n	80013a0 <ADXL362_Init+0x64>
  }

  /* Check device ID */
  if (!ADXL362_CheckDevice(ctx))
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ffc4 	bl	80012e2 <ADXL362_CheckDevice>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <ADXL362_Init+0x28>
  {
    return 0;
 8001360:	2300      	movs	r3, #0
 8001362:	e01d      	b.n	80013a0 <ADXL362_Init+0x64>
  }

#if (IMU_PERFORMANCE_MODE == 0)
  /* Mode 0: Absolute Lowest Power - Wakeup mode (6 Hz) with ultralow noise */
  uint8_t filter_ctl = ADXL362_FILTER_CTL_RANGE(ADXL362_RANGE_2G) |
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
                       ADXL362_FILTER_CTL_ODR(ADXL362_ODR_12_5_HZ);
  if (!ADXL362_WriteReg(ctx, ADXL362_REG_FILTER_CTL, filter_ctl))
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	461a      	mov	r2, r3
 800136c:	212c      	movs	r1, #44	@ 0x2c
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff48 	bl	8001204 <ADXL362_WriteReg>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <ADXL362_Init+0x42>
  {
    return 0;
 800137a:	2300      	movs	r3, #0
 800137c:	e010      	b.n	80013a0 <ADXL362_Init+0x64>
  }

  /* Wakeup mode: ultra-low power ~0.27µA, 6 Hz sampling, ultralow noise */
  uint8_t power_ctl = ADXL362_POWER_CTL_WAKEUP |
 800137e:	232a      	movs	r3, #42	@ 0x2a
 8001380:	73bb      	strb	r3, [r7, #14]
                      ADXL362_POWER_CTL_LOW_NOISE(ADXL362_NOISE_MODE_ULTRALOW) |
                      ADXL362_POWER_CTL_MEASURE(ADXL362_MEASURE_ON);
  if (!ADXL362_WriteReg(ctx, ADXL362_REG_POWER_CTL, power_ctl))
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	461a      	mov	r2, r3
 8001386:	212d      	movs	r1, #45	@ 0x2d
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff3b 	bl	8001204 <ADXL362_WriteReg>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <ADXL362_Init+0x5c>
  {
    return 0;
 8001394:	2300      	movs	r3, #0
 8001396:	e003      	b.n	80013a0 <ADXL362_Init+0x64>
    return 0;
  }
#endif

  /* Small delay for sensor to stabilize */
  HAL_Delay(10);
 8001398:	200a      	movs	r0, #10
 800139a:	f003 f96b 	bl	8004674 <HAL_Delay>

  return 1;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <ADXL362_ReadData>:
 * @brief  Read acceleration data from ADXL362 (full 12-bit resolution)
 * @param  accel_raw: Array to store X, Y, Z values [3]
 * @note   ADXL362 12-bit data is positioned in upper bits [15:4] of 16-bit registers
 */
void ADXL362_ReadData(adxl362_ctx_t *ctx, int16_t *accel_raw)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint8_t data[6];

  /* Read 6 bytes starting from XDATA_L: X_L, X_H, Y_L, Y_H, Z_L, Z_H */
  ADXL362_ReadRegs(ctx, ADXL362_REG_XDATA_L, data, 6);
 80013b2:	f107 020c 	add.w	r2, r7, #12
 80013b6:	2306      	movs	r3, #6
 80013b8:	210e      	movs	r1, #14
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fece 	bl	800115c <ADXL362_ReadRegs>

  /* Combine bytes - note: byte order may be implementation-specific
   * for this particular SPI configuration */
  int16_t x_raw = (int16_t)((data[0] << 8) | data[1]);
 80013c0:	7b3b      	ldrb	r3, [r7, #12]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	7b7b      	ldrb	r3, [r7, #13]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	82fb      	strh	r3, [r7, #22]
  int16_t y_raw = (int16_t)((data[2] << 8) | data[3]);
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	82bb      	strh	r3, [r7, #20]
  int16_t z_raw = (int16_t)((data[4] << 8) | data[5]);
 80013e0:	7c3b      	ldrb	r3, [r7, #16]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7c7b      	ldrb	r3, [r7, #17]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	827b      	strh	r3, [r7, #18]

  /* ADXL362 places 12-bit data in bits [15:4] with LSBs in [3:0]
   * Shift right by 4 to extract the meaningful 12-bit value
   * This aligns the scale with 1 mg/LSB sensitivity */
  accel_raw[0] = x_raw >> 4;
 80013f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013f4:	111b      	asrs	r3, r3, #4
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	801a      	strh	r2, [r3, #0]
  accel_raw[1] = y_raw >> 4;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	3302      	adds	r3, #2
 8001400:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001404:	1112      	asrs	r2, r2, #4
 8001406:	b212      	sxth	r2, r2
 8001408:	801a      	strh	r2, [r3, #0]
  accel_raw[2] = z_raw >> 4;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3304      	adds	r3, #4
 800140e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001412:	1112      	asrs	r2, r2, #4
 8001414:	b212      	sxth	r2, r2
 8001416:	801a      	strh	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <ADXL362_RawToMg>:

/**
 * @brief  Convert raw value to millig (mg)
 */
float ADXL362_RawToMg(int16_t raw_value, uint8_t range)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]
  float sensitivity;

  switch (range)
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d00e      	beq.n	8001454 <ADXL362_RawToMg+0x34>
 8001436:	2b02      	cmp	r3, #2
 8001438:	dc10      	bgt.n	800145c <ADXL362_RawToMg+0x3c>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <ADXL362_RawToMg+0x24>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d004      	beq.n	800144c <ADXL362_RawToMg+0x2c>
 8001442:	e00b      	b.n	800145c <ADXL362_RawToMg+0x3c>
  {
    case ADXL362_RANGE_2G:
      sensitivity = ADXL362_2G_SENSITIVITY;
 8001444:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001448:	60fb      	str	r3, [r7, #12]
      break;
 800144a:	e00b      	b.n	8001464 <ADXL362_RawToMg+0x44>
    case ADXL362_RANGE_4G:
      sensitivity = ADXL362_4G_SENSITIVITY;
 800144c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001450:	60fb      	str	r3, [r7, #12]
      break;
 8001452:	e007      	b.n	8001464 <ADXL362_RawToMg+0x44>
    case ADXL362_RANGE_8G:
      sensitivity = ADXL362_8G_SENSITIVITY;
 8001454:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001458:	60fb      	str	r3, [r7, #12]
      break;
 800145a:	e003      	b.n	8001464 <ADXL362_RawToMg+0x44>
    default:
      sensitivity = ADXL362_2G_SENSITIVITY;
 800145c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001460:	60fb      	str	r3, [r7, #12]
      break;
 8001462:	bf00      	nop
  }

  return (float)raw_value * sensitivity;
 8001464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001470:	edd7 7a03 	vldr	s15, [r7, #12]
 8001474:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8001486:	b590      	push	{r4, r7, lr}
 8001488:	b087      	sub	sp, #28
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	460b      	mov	r3, r1
 8001494:	72fb      	strb	r3, [r7, #11]
 8001496:	4613      	mov	r3, r2
 8001498:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <lis2dw12_read_reg+0x20>
  {
    return -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a4:	e009      	b.n	80014ba <lis2dw12_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	685c      	ldr	r4, [r3, #4]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	68d8      	ldr	r0, [r3, #12]
 80014ae:	893b      	ldrh	r3, [r7, #8]
 80014b0:	7af9      	ldrb	r1, [r7, #11]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	47a0      	blx	r4
 80014b6:	6178      	str	r0, [r7, #20]

  return ret;
 80014b8:	697b      	ldr	r3, [r7, #20]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}

080014c2 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80014c2:	b590      	push	{r4, r7, lr}
 80014c4:	b087      	sub	sp, #28
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	461a      	mov	r2, r3
 80014ce:	460b      	mov	r3, r1
 80014d0:	72fb      	strb	r3, [r7, #11]
 80014d2:	4613      	mov	r3, r2
 80014d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <lis2dw12_write_reg+0x20>
  {
    return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e0:	e009      	b.n	80014f6 <lis2dw12_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681c      	ldr	r4, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	68d8      	ldr	r0, [r3, #12]
 80014ea:	893b      	ldrh	r3, [r7, #8]
 80014ec:	7af9      	ldrb	r1, [r7, #11]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	47a0      	blx	r4
 80014f2:	6178      	str	r0, [r7, #20]

  return ret;
 80014f4:	697b      	ldr	r3, [r7, #20]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	371c      	adds	r7, #28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd90      	pop	{r4, r7, pc}
	...

08001500 <lis2dw12_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lis2dw12_from_fs4_to_mg(int16_t lsb)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 800150a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001516:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800152c <lis2dw12_from_fs4_to_mg+0x2c>
 800151a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	3df9db23 	.word	0x3df9db23

08001530 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(const stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800153c:	f107 0210 	add.w	r2, r7, #16
 8001540:	2301      	movs	r3, #1
 8001542:	2120      	movs	r1, #32
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff9e 	bl	8001486 <lis2dw12_read_reg>
 800154a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d118      	bne.n	8001584 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	b2da      	uxtb	r2, r3
 800155c:	7c3b      	ldrb	r3, [r7, #16]
 800155e:	f362 0383 	bfi	r3, r2, #2, #2
 8001562:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	b2da      	uxtb	r2, r3
 800156c:	7c3b      	ldrb	r3, [r7, #16]
 800156e:	f362 0301 	bfi	r3, r2, #0, #2
 8001572:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001574:	f107 0210 	add.w	r2, r7, #16
 8001578:	2301      	movs	r3, #1
 800157a:	2120      	movs	r1, #32
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ffa0 	bl	80014c2 <lis2dw12_write_reg>
 8001582:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d107      	bne.n	800159a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	2301      	movs	r3, #1
 8001590:	2125      	movs	r1, #37	@ 0x25
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff77 	bl	8001486 <lis2dw12_read_reg>
 8001598:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d110      	bne.n	80015c2 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	f362 0382 	bfi	r3, r2, #2, #1
 80015b0:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80015b2:	f107 020c 	add.w	r2, r7, #12
 80015b6:	2301      	movs	r3, #1
 80015b8:	2125      	movs	r1, #37	@ 0x25
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff81 	bl	80014c2 <lis2dw12_write_reg>
 80015c0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80015c2:	697b      	ldr	r3, [r7, #20]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(const stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80015d8:	f107 0210 	add.w	r2, r7, #16
 80015dc:	2301      	movs	r3, #1
 80015de:	2120      	movs	r1, #32
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff50 	bl	8001486 <lis2dw12_read_reg>
 80015e6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10f      	bne.n	800160e <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	7c3b      	ldrb	r3, [r7, #16]
 80015f8:	f362 1307 	bfi	r3, r2, #4, #4
 80015fc:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80015fe:	f107 0210 	add.w	r2, r7, #16
 8001602:	2301      	movs	r3, #1
 8001604:	2120      	movs	r1, #32
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff5b 	bl	80014c2 <lis2dw12_write_reg>
 800160c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d107      	bne.n	8001624 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001614:	f107 020c 	add.w	r2, r7, #12
 8001618:	2301      	movs	r3, #1
 800161a:	2122      	movs	r1, #34	@ 0x22
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff32 	bl	8001486 <lis2dw12_read_reg>
 8001622:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d110      	bne.n	800164c <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	b2da      	uxtb	r2, r3
 8001634:	7b3b      	ldrb	r3, [r7, #12]
 8001636:	f362 0301 	bfi	r3, r2, #0, #2
 800163a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800163c:	f107 020c 	add.w	r2, r7, #12
 8001640:	2301      	movs	r3, #1
 8001642:	2122      	movs	r1, #34	@ 0x22
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff3c 	bl	80014c2 <lis2dw12_write_reg>
 800164a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800164c:	697b      	ldr	r3, [r7, #20]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8001662:	f107 0208 	add.w	r2, r7, #8
 8001666:	2301      	movs	r3, #1
 8001668:	2121      	movs	r1, #33	@ 0x21
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff0b 	bl	8001486 <lis2dw12_read_reg>
 8001670:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10f      	bne.n	8001698 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	7a3b      	ldrb	r3, [r7, #8]
 8001682:	f362 03c3 	bfi	r3, r2, #3, #1
 8001686:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	2301      	movs	r3, #1
 800168e:	2121      	movs	r1, #33	@ 0x21
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff16 	bl	80014c2 <lis2dw12_write_reg>
 8001696:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001698:	68fb      	ldr	r3, [r7, #12]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(const stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	2301      	movs	r3, #1
 80016b4:	2125      	movs	r1, #37	@ 0x25
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fee5 	bl	8001486 <lis2dw12_read_reg>
 80016bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10f      	bne.n	80016e4 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	7a3b      	ldrb	r3, [r7, #8]
 80016ce:	f362 1305 	bfi	r3, r2, #4, #2
 80016d2:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80016d4:	f107 0208 	add.w	r2, r7, #8
 80016d8:	2301      	movs	r3, #1
 80016da:	2125      	movs	r1, #37	@ 0x25
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fef0 	bl	80014c2 <lis2dw12_write_reg>
 80016e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016e4:	68fb      	ldr	r3, [r7, #12]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <lis2dw12_status_reg_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_status_reg_get(const stmdev_ctx_t *ctx,
                                lis2dw12_status_t *val)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS, (uint8_t *) val, 1);
 80016f8:	2301      	movs	r3, #1
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	2127      	movs	r1, #39	@ 0x27
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fec1 	bl	8001486 <lis2dw12_read_reg>
 8001704:	60f8      	str	r0, [r7, #12]

  return ret;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800171a:	f107 020c 	add.w	r2, r7, #12
 800171e:	2306      	movs	r3, #6
 8001720:	2128      	movs	r1, #40	@ 0x28
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff feaf 	bl	8001486 <lis2dw12_read_reg>
 8001728:	6178      	str	r0, [r7, #20]

  if (ret != 0) { return ret; }
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <lis2dw12_acceleration_raw_get+0x24>
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	e036      	b.n	80017a2 <lis2dw12_acceleration_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 8001734:	7b7b      	ldrb	r3, [r7, #13]
 8001736:	b21a      	sxth	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001742:	b29b      	uxth	r3, r3
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b29b      	uxth	r3, r3
 8001748:	7b3a      	ldrb	r2, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	b21a      	sxth	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001754:	7bfa      	ldrb	r2, [r7, #15]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	3302      	adds	r3, #2
 800175a:	b212      	sxth	r2, r2
 800175c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	3302      	adds	r3, #2
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	b29b      	uxth	r3, r3
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b29b      	uxth	r3, r3
 800176c:	7bba      	ldrb	r2, [r7, #14]
 800176e:	4413      	add	r3, r2
 8001770:	b29a      	uxth	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3302      	adds	r3, #2
 8001776:	b212      	sxth	r2, r2
 8001778:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800177a:	7c7a      	ldrb	r2, [r7, #17]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	3304      	adds	r3, #4
 8001780:	b212      	sxth	r2, r2
 8001782:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3304      	adds	r3, #4
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	b29b      	uxth	r3, r3
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b29b      	uxth	r3, r3
 8001792:	7c3a      	ldrb	r2, [r7, #16]
 8001794:	4413      	add	r3, r2
 8001796:	b29a      	uxth	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3304      	adds	r3, #4
 800179c:	b212      	sxth	r2, r2
 800179e:	801a      	strh	r2, [r3, #0]

  return ret;
 80017a0:	697b      	ldr	r3, [r7, #20]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80017b4:	2301      	movs	r3, #1
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	210f      	movs	r1, #15
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fe63 	bl	8001486 <lis2dw12_read_reg>
 80017c0:	60f8      	str	r0, [r7, #12]

  return ret;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80017d8:	f107 0208 	add.w	r2, r7, #8
 80017dc:	2301      	movs	r3, #1
 80017de:	2121      	movs	r1, #33	@ 0x21
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fe50 	bl	8001486 <lis2dw12_read_reg>
 80017e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10f      	bne.n	800180e <lis2dw12_reset_set+0x42>
  {
    reg.soft_reset = val;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	7a3b      	ldrb	r3, [r7, #8]
 80017f8:	f362 1386 	bfi	r3, r2, #6, #1
 80017fc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80017fe:	f107 0208 	add.w	r2, r7, #8
 8001802:	2301      	movs	r3, #1
 8001804:	2121      	movs	r1, #33	@ 0x21
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fe5b 	bl	80014c2 <lis2dw12_write_reg>
 800180c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8001822:	f107 0208 	add.w	r2, r7, #8
 8001826:	2301      	movs	r3, #1
 8001828:	2121      	movs	r1, #33	@ 0x21
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fe2b 	bl	8001486 <lis2dw12_read_reg>
 8001830:	60f8      	str	r0, [r7, #12]

  if (ret != 0) { return ret; }
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <lis2dw12_reset_get+0x24>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	e007      	b.n	800184c <lis2dw12_reset_get+0x34>

  *val = reg.soft_reset;
 800183c:	7a3b      	ldrb	r3, [r7, #8]
 800183e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	701a      	strb	r2, [r3, #0]

  return ret;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <lsm6dsv_read_reg>:
  *
  */
int32_t __weak lsm6dsv_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	72fb      	strb	r3, [r7, #11]
 8001864:	4613      	mov	r3, r2
 8001866:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <lsm6dsv_read_reg+0x20>
  {
    return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001872:	e009      	b.n	8001888 <lsm6dsv_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685c      	ldr	r4, [r3, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	68d8      	ldr	r0, [r3, #12]
 800187c:	893b      	ldrh	r3, [r7, #8]
 800187e:	7af9      	ldrb	r1, [r7, #11]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	47a0      	blx	r4
 8001884:	6178      	str	r0, [r7, #20]

  return ret;
 8001886:	697b      	ldr	r3, [r7, #20]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}

08001890 <lsm6dsv_write_reg>:
  *
  */
int32_t __weak lsm6dsv_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	461a      	mov	r2, r3
 800189c:	460b      	mov	r3, r1
 800189e:	72fb      	strb	r3, [r7, #11]
 80018a0:	4613      	mov	r3, r2
 80018a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <lsm6dsv_write_reg+0x20>
  {
    return -1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ae:	e009      	b.n	80018c4 <lsm6dsv_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681c      	ldr	r4, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	68d8      	ldr	r0, [r3, #12]
 80018b8:	893b      	ldrh	r3, [r7, #8]
 80018ba:	7af9      	ldrb	r1, [r7, #11]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	47a0      	blx	r4
 80018c0:	6178      	str	r0, [r7, #20]

  return ret;
 80018c2:	697b      	ldr	r3, [r7, #20]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}

080018cc <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <bytecpy+0x1e>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <bytecpy+0x1e>
  {
    *target = *source;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	701a      	strb	r2, [r3, #0]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <lsm6dsv_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lsm6dsv_from_fs4_to_mg(int16_t lsb)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 8001902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001924 <lsm6dsv_from_fs4_to_mg+0x2c>
 8001912:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001916:	eeb0 0a67 	vmov.f32	s0, s15
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	3df9db23 	.word	0x3df9db23

08001928 <lsm6dsv_from_fs2000_to_mdps>:
{
  return ((float_t)lsb) * 35.0f;
}

float_t lsm6dsv_from_fs2000_to_mdps(int16_t lsb)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 70.0f;
 8001932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001954 <lsm6dsv_from_fs2000_to_mdps+0x2c>
 8001942:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001946:	eeb0 0a67 	vmov.f32	s0, s15
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	428c0000 	.word	0x428c0000

08001958 <lsm6dsv_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_reset_set(const stmdev_ctx_t *ctx, lsm6dsv_reset_t val)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_func_cfg_access_t func_cfg_access;
  lsm6dsv_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8001964:	f107 020c 	add.w	r2, r7, #12
 8001968:	2301      	movs	r3, #1
 800196a:	2112      	movs	r1, #18
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff71 	bl	8001854 <lsm6dsv_read_reg>
 8001972:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001974:	f107 0210 	add.w	r2, r7, #16
 8001978:	2301      	movs	r3, #1
 800197a:	2101      	movs	r1, #1
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff69 	bl	8001854 <lsm6dsv_read_reg>
 8001982:	4602      	mov	r2, r0
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	4413      	add	r3, r2
 8001988:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <lsm6dsv_reset_set+0x3c>
  {
    return ret;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	e031      	b.n	80019f8 <lsm6dsv_reset_set+0xa0>
  }

  ctrl3.boot = (val == LSM6DSV_RESTORE_CAL_PARAM) ? 1 : 0;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	2b02      	cmp	r3, #2
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	7b3b      	ldrb	r3, [r7, #12]
 80019a2:	f362 13c7 	bfi	r3, r2, #7, #1
 80019a6:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = (val == LSM6DSV_RESTORE_CTRL_REGS) ? 1 : 0;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	7b3b      	ldrb	r3, [r7, #12]
 80019b6:	f362 0300 	bfi	r3, r2, #0, #1
 80019ba:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (val == LSM6DSV_GLOBAL_RST) ? 1 : 0;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	bf0c      	ite	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	2300      	movne	r3, #0
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	7c3b      	ldrb	r3, [r7, #16]
 80019ca:	f362 0382 	bfi	r3, r2, #2, #1
 80019ce:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80019d0:	f107 020c 	add.w	r2, r7, #12
 80019d4:	2301      	movs	r3, #1
 80019d6:	2112      	movs	r1, #18
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff59 	bl	8001890 <lsm6dsv_write_reg>
 80019de:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80019e0:	f107 0210 	add.w	r2, r7, #16
 80019e4:	2301      	movs	r3, #1
 80019e6:	2101      	movs	r1, #1
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff51 	bl	8001890 <lsm6dsv_write_reg>
 80019ee:	4602      	mov	r2, r0
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

  return ret;
 80019f6:	697b      	ldr	r3, [r7, #20]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <lsm6dsv_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_reset_get(const stmdev_ctx_t *ctx, lsm6dsv_reset_t *val)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  lsm6dsv_func_cfg_access_t func_cfg_access;
  lsm6dsv_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8001a0a:	f107 020c 	add.w	r2, r7, #12
 8001a0e:	2301      	movs	r3, #1
 8001a10:	2112      	movs	r1, #18
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff1e 	bl	8001854 <lsm6dsv_read_reg>
 8001a18:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001a1a:	f107 0210 	add.w	r2, r7, #16
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2101      	movs	r1, #1
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff16 	bl	8001854 <lsm6dsv_read_reg>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <lsm6dsv_reset_get+0x3a>
  {
    return ret;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	e033      	b.n	8001aa2 <lsm6dsv_reset_get+0xa2>
  }

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8001a3a:	7b3b      	ldrb	r3, [r7, #12]
 8001a3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	009a      	lsls	r2, r3, #2
 8001a44:	7b3b      	ldrb	r3, [r7, #12]
 8001a46:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	7c3a      	ldrb	r2, [r7, #16]
 8001a52:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	4413      	add	r3, r2
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d81c      	bhi.n	8001a98 <lsm6dsv_reset_get+0x98>
 8001a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a64 <lsm6dsv_reset_get+0x64>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001a79 	.word	0x08001a79
 8001a68:	08001a81 	.word	0x08001a81
 8001a6c:	08001a89 	.word	0x08001a89
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	08001a91 	.word	0x08001a91
  {
    case LSM6DSV_READY:
      *val = LSM6DSV_READY;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
      break;
 8001a7e:	e00f      	b.n	8001aa0 <lsm6dsv_reset_get+0xa0>

    case LSM6DSV_GLOBAL_RST:
      *val = LSM6DSV_GLOBAL_RST;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
      break;
 8001a86:	e00b      	b.n	8001aa0 <lsm6dsv_reset_get+0xa0>

    case LSM6DSV_RESTORE_CAL_PARAM:
      *val = LSM6DSV_RESTORE_CAL_PARAM;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	701a      	strb	r2, [r3, #0]
      break;
 8001a8e:	e007      	b.n	8001aa0 <lsm6dsv_reset_get+0xa0>

    case LSM6DSV_RESTORE_CTRL_REGS:
      *val = LSM6DSV_RESTORE_CTRL_REGS;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2204      	movs	r2, #4
 8001a94:	701a      	strb	r2, [r3, #0]
      break;
 8001a96:	e003      	b.n	8001aa0 <lsm6dsv_reset_get+0xa0>

    default:
      *val = LSM6DSV_GLOBAL_RST;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
      break;
 8001a9e:	bf00      	nop
  }

  return ret;
 8001aa0:	697b      	ldr	r3, [r7, #20]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop

08001aac <lsm6dsv_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv_mem_bank_t val)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001ab8:	f107 0208 	add.w	r2, r7, #8
 8001abc:	2301      	movs	r3, #1
 8001abe:	2101      	movs	r1, #1
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fec7 	bl	8001854 <lsm6dsv_read_reg>
 8001ac6:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <lsm6dsv_mem_bank_set+0x26>
  {
    return ret;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	e019      	b.n	8001b06 <lsm6dsv_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	7a3b      	ldrb	r3, [r7, #8]
 8001ade:	f362 1386 	bfi	r3, r2, #6, #1
 8001ae2:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	7a3b      	ldrb	r3, [r7, #8]
 8001aee:	f362 13c7 	bfi	r3, r2, #7, #1
 8001af2:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv_write_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001af4:	f107 0208 	add.w	r2, r7, #8
 8001af8:	2301      	movs	r3, #1
 8001afa:	2101      	movs	r1, #1
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fec7 	bl	8001890 <lsm6dsv_write_reg>
 8001b02:	60f8      	str	r0, [r7, #12]

  return ret;
 8001b04:	68fb      	ldr	r3, [r7, #12]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <lsm6dsv_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_WHO_AM_I, val, 1);
 8001b18:	2301      	movs	r3, #1
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	210f      	movs	r1, #15
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe98 	bl	8001854 <lsm6dsv_read_reg>
 8001b24:	60f8      	str	r0, [r7, #12]

  return ret;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <lsm6dsv_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsv_data_rate_t val)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl1_t ctrl1;
  lsm6dsv_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 8001b3c:	f107 0210 	add.w	r2, r7, #16
 8001b40:	2301      	movs	r3, #1
 8001b42:	2110      	movs	r1, #16
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fe85 	bl	8001854 <lsm6dsv_read_reg>
 8001b4a:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <lsm6dsv_xl_data_rate_set+0x26>
  {
    return ret;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	e03e      	b.n	8001bd4 <lsm6dsv_xl_data_rate_set+0xa4>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	7c3b      	ldrb	r3, [r7, #16]
 8001b60:	f362 0303 	bfi	r3, r2, #0, #4
 8001b64:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 8001b66:	f107 0210 	add.w	r2, r7, #16
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2110      	movs	r1, #16
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fe8e 	bl	8001890 <lsm6dsv_write_reg>
 8001b74:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <lsm6dsv_xl_data_rate_set+0x50>
  {
    return ret;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	e029      	b.n	8001bd4 <lsm6dsv_xl_data_rate_set+0xa4>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8001b86:	7cfb      	ldrb	r3, [r7, #19]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d022      	beq.n	8001bd2 <lsm6dsv_xl_data_rate_set+0xa2>
  {
    ret += lsm6dsv_read_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	2301      	movs	r3, #1
 8001b92:	2162      	movs	r1, #98	@ 0x62
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fe5d 	bl	8001854 <lsm6dsv_read_reg>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
    if (ret != 0)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <lsm6dsv_xl_data_rate_set+0x7c>
    {
      return ret;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	e013      	b.n	8001bd4 <lsm6dsv_xl_data_rate_set+0xa4>
    }

    haodr.haodr_sel = sel;
 8001bac:	7cfb      	ldrb	r3, [r7, #19]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	7b3b      	ldrb	r3, [r7, #12]
 8001bb6:	f362 0301 	bfi	r3, r2, #0, #2
 8001bba:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv_write_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001bbc:	f107 020c 	add.w	r2, r7, #12
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2162      	movs	r1, #98	@ 0x62
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fe63 	bl	8001890 <lsm6dsv_write_reg>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	4413      	add	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001bd2:	697b      	ldr	r3, [r7, #20]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <lsm6dsv_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_xl_mode_set(const stmdev_ctx_t *ctx, lsm6dsv_xl_mode_t val)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 8001be8:	f107 0208 	add.w	r2, r7, #8
 8001bec:	2301      	movs	r3, #1
 8001bee:	2110      	movs	r1, #16
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff fe2f 	bl	8001854 <lsm6dsv_read_reg>
 8001bf6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10f      	bne.n	8001c1e <lsm6dsv_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	7a3b      	ldrb	r3, [r7, #8]
 8001c08:	f362 1306 	bfi	r3, r2, #4, #3
 8001c0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 8001c0e:	f107 0208 	add.w	r2, r7, #8
 8001c12:	2301      	movs	r3, #1
 8001c14:	2110      	movs	r1, #16
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fe3a 	bl	8001890 <lsm6dsv_write_reg>
 8001c1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <lsm6dsv_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsv_data_rate_t val)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl2_t ctrl2;
  lsm6dsv_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8001c34:	f107 0210 	add.w	r2, r7, #16
 8001c38:	2301      	movs	r3, #1
 8001c3a:	2111      	movs	r1, #17
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fe09 	bl	8001854 <lsm6dsv_read_reg>
 8001c42:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <lsm6dsv_gy_data_rate_set+0x26>
  {
    return ret;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	e041      	b.n	8001cd2 <lsm6dsv_gy_data_rate_set+0xaa>
  }

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	7c3b      	ldrb	r3, [r7, #16]
 8001c58:	f362 0303 	bfi	r3, r2, #0, #4
 8001c5c:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8001c5e:	f107 0210 	add.w	r2, r7, #16
 8001c62:	2301      	movs	r3, #1
 8001c64:	2111      	movs	r1, #17
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fe12 	bl	8001890 <lsm6dsv_write_reg>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4413      	add	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <lsm6dsv_gy_data_rate_set+0x56>
  {
    return ret;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	e029      	b.n	8001cd2 <lsm6dsv_gy_data_rate_set+0xaa>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8001c84:	7cfb      	ldrb	r3, [r7, #19]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d022      	beq.n	8001cd0 <lsm6dsv_gy_data_rate_set+0xa8>
  {
    ret += lsm6dsv_read_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001c8a:	f107 020c 	add.w	r2, r7, #12
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2162      	movs	r1, #98	@ 0x62
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fdde 	bl	8001854 <lsm6dsv_read_reg>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
    if (ret != 0)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <lsm6dsv_gy_data_rate_set+0x82>
    {
      return ret;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	e013      	b.n	8001cd2 <lsm6dsv_gy_data_rate_set+0xaa>
    }

    haodr.haodr_sel = sel;
 8001caa:	7cfb      	ldrb	r3, [r7, #19]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	7b3b      	ldrb	r3, [r7, #12]
 8001cb4:	f362 0301 	bfi	r3, r2, #0, #2
 8001cb8:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv_write_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001cba:	f107 020c 	add.w	r2, r7, #12
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	2162      	movs	r1, #98	@ 0x62
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fde4 	bl	8001890 <lsm6dsv_write_reg>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	4413      	add	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001cd0:	697b      	ldr	r3, [r7, #20]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <lsm6dsv_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_gy_mode_set(const stmdev_ctx_t *ctx, lsm6dsv_gy_mode_t val)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8001ce6:	f107 0208 	add.w	r2, r7, #8
 8001cea:	2301      	movs	r3, #1
 8001cec:	2111      	movs	r1, #17
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fdb0 	bl	8001854 <lsm6dsv_read_reg>
 8001cf4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10f      	bne.n	8001d1c <lsm6dsv_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	7a3b      	ldrb	r3, [r7, #8]
 8001d06:	f362 1306 	bfi	r3, r2, #4, #3
 8001d0a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8001d0c:	f107 0208 	add.w	r2, r7, #8
 8001d10:	2301      	movs	r3, #1
 8001d12:	2111      	movs	r1, #17
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fdbb 	bl	8001890 <lsm6dsv_write_reg>
 8001d1a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <lsm6dsv_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8001d32:	f107 0208 	add.w	r2, r7, #8
 8001d36:	2301      	movs	r3, #1
 8001d38:	2112      	movs	r1, #18
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fd8a 	bl	8001854 <lsm6dsv_read_reg>
 8001d40:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10f      	bne.n	8001d68 <lsm6dsv_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	7a3b      	ldrb	r3, [r7, #8]
 8001d52:	f362 1386 	bfi	r3, r2, #6, #1
 8001d56:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8001d58:	f107 0208 	add.w	r2, r7, #8
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	2112      	movs	r1, #18
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff fd95 	bl	8001890 <lsm6dsv_write_reg>
 8001d66:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d68:	68fb      	ldr	r3, [r7, #12]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <lsm6dsv_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsv_gy_full_scale_t val)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 8001d7e:	f107 0208 	add.w	r2, r7, #8
 8001d82:	2301      	movs	r3, #1
 8001d84:	2115      	movs	r1, #21
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fd64 	bl	8001854 <lsm6dsv_read_reg>
 8001d8c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10f      	bne.n	8001db4 <lsm6dsv_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	7a3b      	ldrb	r3, [r7, #8]
 8001d9e:	f362 0303 	bfi	r3, r2, #0, #4
 8001da2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 8001da4:	f107 0208 	add.w	r2, r7, #8
 8001da8:	2301      	movs	r3, #1
 8001daa:	2115      	movs	r1, #21
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fd6f 	bl	8001890 <lsm6dsv_write_reg>
 8001db2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001db4:	68fb      	ldr	r3, [r7, #12]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <lsm6dsv_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsv_xl_full_scale_t val)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 8001dca:	f107 0208 	add.w	r2, r7, #8
 8001dce:	2301      	movs	r3, #1
 8001dd0:	2117      	movs	r1, #23
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fd3e 	bl	8001854 <lsm6dsv_read_reg>
 8001dd8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10f      	bne.n	8001e00 <lsm6dsv_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	7a3b      	ldrb	r3, [r7, #8]
 8001dea:	f362 0301 	bfi	r3, r2, #0, #2
 8001dee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 8001df0:	f107 0208 	add.w	r2, r7, #8
 8001df4:	2301      	movs	r3, #1
 8001df6:	2117      	movs	r1, #23
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff fd49 	bl	8001890 <lsm6dsv_write_reg>
 8001dfe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e00:	68fb      	ldr	r3, [r7, #12]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <lsm6dsv_all_sources_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_all_sources_get(const stmdev_ctx_t *ctx,
                                lsm6dsv_all_sources_t *val)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b092      	sub	sp, #72	@ 0x48
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  lsm6dsv_ui_status_reg_ois_t status_reg_ois;
  lsm6dsv_status_master_t status_shub;
  uint8_t buff[8];
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8001e14:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2150      	movs	r1, #80	@ 0x50
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fd19 	bl	8001854 <lsm6dsv_read_reg>
 8001e22:	6478      	str	r0, [r7, #68]	@ 0x44
  if (ret != 0)
 8001e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <lsm6dsv_all_sources_get+0x24>
  {
    return ret;
 8001e2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e2c:	e2dc      	b.n	80023e8 <lsm6dsv_all_sources_get+0x5de>
  }
  functions_enable.dis_rst_lir_all_int = PROPERTY_ENABLE;
 8001e2e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  ret = lsm6dsv_write_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8001e3a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001e3e:	2301      	movs	r3, #1
 8001e40:	2150      	movs	r1, #80	@ 0x50
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fd24 	bl	8001890 <lsm6dsv_write_reg>
 8001e48:	6478      	str	r0, [r7, #68]	@ 0x44

  ret += lsm6dsv_read_reg(ctx, LSM6DSV_FIFO_STATUS1, (uint8_t *)&buff, 4);
 8001e4a:	f107 0208 	add.w	r2, r7, #8
 8001e4e:	2304      	movs	r3, #4
 8001e50:	211b      	movs	r1, #27
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fcfe 	bl	8001854 <lsm6dsv_read_reg>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5c:	4413      	add	r3, r2
 8001e5e:	647b      	str	r3, [r7, #68]	@ 0x44

  bytecpy((uint8_t *)&fifo_status2, &buff[1]);
 8001e60:	f107 0308 	add.w	r3, r7, #8
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fd2d 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&all_int_src, &buff[2]);
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	1c9a      	adds	r2, r3, #2
 8001e78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fd24 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&status_reg, &buff[3]);
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	1cda      	adds	r2, r3, #3
 8001e8a:	f107 0320 	add.w	r3, r7, #32
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fd1b 	bl	80018cc <bytecpy>

  val->fifo_ovr = fifo_status2.fifo_ovr_ia;
 8001e96:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001e9e:	b2d9      	uxtb	r1, r3
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	7993      	ldrb	r3, [r2, #6]
 8001ea4:	f361 1304 	bfi	r3, r1, #4, #1
 8001ea8:	7193      	strb	r3, [r2, #6]
  val->fifo_bdr = fifo_status2.counter_bdr_ia;
 8001eaa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001eae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001eb2:	b2d9      	uxtb	r1, r3
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	7993      	ldrb	r3, [r2, #6]
 8001eb8:	f361 0382 	bfi	r3, r1, #2, #1
 8001ebc:	7193      	strb	r3, [r2, #6]
  val->fifo_full = fifo_status2.fifo_full_ia;
 8001ebe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ec2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ec6:	b2d9      	uxtb	r1, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	7993      	ldrb	r3, [r2, #6]
 8001ecc:	f361 03c3 	bfi	r3, r1, #3, #1
 8001ed0:	7193      	strb	r3, [r2, #6]
  val->fifo_th = fifo_status2.fifo_wtm_ia;
 8001ed2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ed6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001eda:	b2d9      	uxtb	r1, r3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	7993      	ldrb	r3, [r2, #6]
 8001ee0:	f361 1345 	bfi	r3, r1, #5, #1
 8001ee4:	7193      	strb	r3, [r2, #6]

  val->free_fall = all_int_src.ff_ia;
 8001ee6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001eea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001eee:	b2d9      	uxtb	r1, r3
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	7813      	ldrb	r3, [r2, #0]
 8001ef4:	f361 13c7 	bfi	r3, r1, #7, #1
 8001ef8:	7013      	strb	r3, [r2, #0]
  val->wake_up = all_int_src.wu_ia;
 8001efa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001efe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f02:	b2d9      	uxtb	r1, r3
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	7853      	ldrb	r3, [r2, #1]
 8001f08:	f361 0300 	bfi	r3, r1, #0, #1
 8001f0c:	7053      	strb	r3, [r2, #1]
  val->six_d = all_int_src.d6d_ia;
 8001f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f12:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f16:	b2d9      	uxtb	r1, r3
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	7893      	ldrb	r3, [r2, #2]
 8001f1c:	f361 0382 	bfi	r3, r1, #2, #1
 8001f20:	7093      	strb	r3, [r2, #2]

  val->drdy_xl = status_reg.xlda;
 8001f22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f2a:	b2d9      	uxtb	r1, r3
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	7813      	ldrb	r3, [r2, #0]
 8001f30:	f361 0300 	bfi	r3, r1, #0, #1
 8001f34:	7013      	strb	r3, [r2, #0]
  val->drdy_gy = status_reg.gda;
 8001f36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f3e:	b2d9      	uxtb	r1, r3
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	7813      	ldrb	r3, [r2, #0]
 8001f44:	f361 0341 	bfi	r3, r1, #1, #1
 8001f48:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status_reg.tda;
 8001f4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001f52:	b2d9      	uxtb	r1, r3
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	7813      	ldrb	r3, [r2, #0]
 8001f58:	f361 0382 	bfi	r3, r1, #2, #1
 8001f5c:	7013      	strb	r3, [r2, #0]
  val->drdy_eis = status_reg.gda_eis;
 8001f5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f66:	b2d9      	uxtb	r1, r3
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	7813      	ldrb	r3, [r2, #0]
 8001f6c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001f70:	7013      	strb	r3, [r2, #0]
  val->drdy_ois = status_reg.ois_drdy;
 8001f72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001f7a:	b2d9      	uxtb	r1, r3
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	7813      	ldrb	r3, [r2, #0]
 8001f80:	f361 1304 	bfi	r3, r1, #4, #1
 8001f84:	7013      	strb	r3, [r2, #0]
  val->timestamp = status_reg.timestamp_endcount;
 8001f86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001f8e:	b2d9      	uxtb	r1, r3
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	7813      	ldrb	r3, [r2, #0]
 8001f94:	f361 1386 	bfi	r3, r1, #6, #1
 8001f98:	7013      	strb	r3, [r2, #0]

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8001f9a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	2150      	movs	r1, #80	@ 0x50
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fc56 	bl	8001854 <lsm6dsv_read_reg>
 8001fa8:	6478      	str	r0, [r7, #68]	@ 0x44
  functions_enable.dis_rst_lir_all_int = PROPERTY_DISABLE;
 8001faa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fae:	f023 0308 	bic.w	r3, r3, #8
 8001fb2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8001fb6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2150      	movs	r1, #80	@ 0x50
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fc66 	bl	8001890 <lsm6dsv_write_reg>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fc8:	4413      	add	r3, r2
 8001fca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (ret != 0)
 8001fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <lsm6dsv_all_sources_get+0x1cc>
  {
    return ret;
 8001fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd4:	e208      	b.n	80023e8 <lsm6dsv_all_sources_get+0x5de>
  }

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_UI_STATUS_REG_OIS, (uint8_t *)&buff, 8);
 8001fd6:	f107 0208 	add.w	r2, r7, #8
 8001fda:	2308      	movs	r3, #8
 8001fdc:	2144      	movs	r1, #68	@ 0x44
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fc38 	bl	8001854 <lsm6dsv_read_reg>
 8001fe4:	6478      	str	r0, [r7, #68]	@ 0x44
  if (ret != 0)
 8001fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <lsm6dsv_all_sources_get+0x1e6>
  {
    return ret;
 8001fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fee:	e1fb      	b.n	80023e8 <lsm6dsv_all_sources_get+0x5de>
  }

  bytecpy((uint8_t *)&status_reg_ois, &buff[0]);
 8001ff0:	f107 0208 	add.w	r2, r7, #8
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fc66 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&wake_up_src, &buff[1]);
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fc5d 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&tap_src, &buff[2]);
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	1c9a      	adds	r2, r3, #2
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fc54 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&d6d_src, &buff[3]);
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	1cda      	adds	r2, r3, #3
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fc4b 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&emb_func_status_mainpage, &buff[5]);
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	1d5a      	adds	r2, r3, #5
 800203c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fc42 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&fsm_status_mainpage, &buff[6]);
 8002048:	f107 0308 	add.w	r3, r7, #8
 800204c:	1d9a      	adds	r2, r3, #6
 800204e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fc39 	bl	80018cc <bytecpy>

  val->gy_settling = status_reg_ois.gyro_settling;
 800205a:	7d3b      	ldrb	r3, [r7, #20]
 800205c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002060:	b2d9      	uxtb	r1, r3
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	7813      	ldrb	r3, [r2, #0]
 8002066:	f361 1345 	bfi	r3, r1, #5, #1
 800206a:	7013      	strb	r3, [r2, #0]
  val->sleep_change = wake_up_src.sleep_change_ia;
 800206c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002070:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002074:	b2d9      	uxtb	r1, r3
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	78d3      	ldrb	r3, [r2, #3]
 800207a:	f361 0341 	bfi	r3, r1, #1, #1
 800207e:	70d3      	strb	r3, [r2, #3]
  val->wake_up_x = wake_up_src.x_wu;
 8002080:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002084:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002088:	b2d9      	uxtb	r1, r3
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	7853      	ldrb	r3, [r2, #1]
 800208e:	f361 03c3 	bfi	r3, r1, #3, #1
 8002092:	7053      	strb	r3, [r2, #1]
  val->wake_up_y = wake_up_src.y_wu;
 8002094:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002098:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800209c:	b2d9      	uxtb	r1, r3
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	7853      	ldrb	r3, [r2, #1]
 80020a2:	f361 0382 	bfi	r3, r1, #2, #1
 80020a6:	7053      	strb	r3, [r2, #1]
  val->wake_up_z = wake_up_src.z_wu;
 80020a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020b0:	b2d9      	uxtb	r1, r3
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	7853      	ldrb	r3, [r2, #1]
 80020b6:	f361 0341 	bfi	r3, r1, #1, #1
 80020ba:	7053      	strb	r3, [r2, #1]
  val->sleep_state = wake_up_src.sleep_state;
 80020bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020c4:	b2d9      	uxtb	r1, r3
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	78d3      	ldrb	r3, [r2, #3]
 80020ca:	f361 0382 	bfi	r3, r1, #2, #1
 80020ce:	70d3      	strb	r3, [r2, #3]

  val->tap_x = tap_src.x_tap;
 80020d0:	7e3b      	ldrb	r3, [r7, #24]
 80020d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020d6:	b2d9      	uxtb	r1, r3
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	7893      	ldrb	r3, [r2, #2]
 80020dc:	f361 0300 	bfi	r3, r1, #0, #1
 80020e0:	7093      	strb	r3, [r2, #2]
  val->tap_y = tap_src.y_tap;
 80020e2:	7e3b      	ldrb	r3, [r7, #24]
 80020e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020e8:	b2d9      	uxtb	r1, r3
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	7853      	ldrb	r3, [r2, #1]
 80020ee:	f361 13c7 	bfi	r3, r1, #7, #1
 80020f2:	7053      	strb	r3, [r2, #1]
  val->tap_z = tap_src.z_tap;
 80020f4:	7e3b      	ldrb	r3, [r7, #24]
 80020f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020fa:	b2d9      	uxtb	r1, r3
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	7853      	ldrb	r3, [r2, #1]
 8002100:	f361 1386 	bfi	r3, r1, #6, #1
 8002104:	7053      	strb	r3, [r2, #1]
  val->tap_sign = tap_src.tap_sign;
 8002106:	7e3b      	ldrb	r3, [r7, #24]
 8002108:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800210c:	b2d9      	uxtb	r1, r3
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	7893      	ldrb	r3, [r2, #2]
 8002112:	f361 0341 	bfi	r3, r1, #1, #1
 8002116:	7093      	strb	r3, [r2, #2]
  val->double_tap = tap_src.double_tap;
 8002118:	7e3b      	ldrb	r3, [r7, #24]
 800211a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800211e:	b2d9      	uxtb	r1, r3
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	7853      	ldrb	r3, [r2, #1]
 8002124:	f361 1345 	bfi	r3, r1, #5, #1
 8002128:	7053      	strb	r3, [r2, #1]
  val->single_tap = tap_src.single_tap;
 800212a:	7e3b      	ldrb	r3, [r7, #24]
 800212c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002130:	b2d9      	uxtb	r1, r3
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	7853      	ldrb	r3, [r2, #1]
 8002136:	f361 1304 	bfi	r3, r1, #4, #1
 800213a:	7053      	strb	r3, [r2, #1]

  val->six_d_zl = d6d_src.zl;
 800213c:	7f3b      	ldrb	r3, [r7, #28]
 800213e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002142:	b2d9      	uxtb	r1, r3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	7893      	ldrb	r3, [r2, #2]
 8002148:	f361 13c7 	bfi	r3, r1, #7, #1
 800214c:	7093      	strb	r3, [r2, #2]
  val->six_d_zh = d6d_src.zh;
 800214e:	7f3b      	ldrb	r3, [r7, #28]
 8002150:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002154:	b2d9      	uxtb	r1, r3
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	78d3      	ldrb	r3, [r2, #3]
 800215a:	f361 0300 	bfi	r3, r1, #0, #1
 800215e:	70d3      	strb	r3, [r2, #3]
  val->six_d_yl = d6d_src.yl;
 8002160:	7f3b      	ldrb	r3, [r7, #28]
 8002162:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002166:	b2d9      	uxtb	r1, r3
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	7893      	ldrb	r3, [r2, #2]
 800216c:	f361 1345 	bfi	r3, r1, #5, #1
 8002170:	7093      	strb	r3, [r2, #2]
  val->six_d_yh = d6d_src.yh;
 8002172:	7f3b      	ldrb	r3, [r7, #28]
 8002174:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002178:	b2d9      	uxtb	r1, r3
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	7893      	ldrb	r3, [r2, #2]
 800217e:	f361 1386 	bfi	r3, r1, #6, #1
 8002182:	7093      	strb	r3, [r2, #2]
  val->six_d_xl = d6d_src.xl;
 8002184:	7f3b      	ldrb	r3, [r7, #28]
 8002186:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800218a:	b2d9      	uxtb	r1, r3
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	7893      	ldrb	r3, [r2, #2]
 8002190:	f361 03c3 	bfi	r3, r1, #3, #1
 8002194:	7093      	strb	r3, [r2, #2]
  val->six_d_xh = d6d_src.xh;
 8002196:	7f3b      	ldrb	r3, [r7, #28]
 8002198:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800219c:	b2d9      	uxtb	r1, r3
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	7893      	ldrb	r3, [r2, #2]
 80021a2:	f361 1304 	bfi	r3, r1, #4, #1
 80021a6:	7093      	strb	r3, [r2, #2]

  val->step_detector = emb_func_status_mainpage.is_step_det;
 80021a8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80021ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021b0:	b2d9      	uxtb	r1, r3
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	78d3      	ldrb	r3, [r2, #3]
 80021b6:	f361 03c3 	bfi	r3, r1, #3, #1
 80021ba:	70d3      	strb	r3, [r2, #3]
  val->tilt = emb_func_status_mainpage.is_tilt;
 80021bc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80021c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80021c4:	b2d9      	uxtb	r1, r3
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	7913      	ldrb	r3, [r2, #4]
 80021ca:	f361 0341 	bfi	r3, r1, #1, #1
 80021ce:	7113      	strb	r3, [r2, #4]
  val->sig_mot = emb_func_status_mainpage.is_sigmot;
 80021d0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80021d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021d8:	b2d9      	uxtb	r1, r3
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	7913      	ldrb	r3, [r2, #4]
 80021de:	f361 0382 	bfi	r3, r1, #2, #1
 80021e2:	7113      	strb	r3, [r2, #4]
  val->fsm_lc = emb_func_status_mainpage.is_fsm_lc;
 80021e4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80021e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80021ec:	b2d9      	uxtb	r1, r3
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	7913      	ldrb	r3, [r2, #4]
 80021f2:	f361 03c3 	bfi	r3, r1, #3, #1
 80021f6:	7113      	strb	r3, [r2, #4]

  val->fsm1 = fsm_status_mainpage.is_fsm1;
 80021f8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80021fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002200:	b2d9      	uxtb	r1, r3
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	7913      	ldrb	r3, [r2, #4]
 8002206:	f361 1304 	bfi	r3, r1, #4, #1
 800220a:	7113      	strb	r3, [r2, #4]
  val->fsm2 = fsm_status_mainpage.is_fsm2;
 800220c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002210:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002214:	b2d9      	uxtb	r1, r3
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	7913      	ldrb	r3, [r2, #4]
 800221a:	f361 1345 	bfi	r3, r1, #5, #1
 800221e:	7113      	strb	r3, [r2, #4]
  val->fsm3 = fsm_status_mainpage.is_fsm3;
 8002220:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002224:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002228:	b2d9      	uxtb	r1, r3
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	7913      	ldrb	r3, [r2, #4]
 800222e:	f361 1386 	bfi	r3, r1, #6, #1
 8002232:	7113      	strb	r3, [r2, #4]
  val->fsm4 = fsm_status_mainpage.is_fsm4;
 8002234:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002238:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800223c:	b2d9      	uxtb	r1, r3
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	7913      	ldrb	r3, [r2, #4]
 8002242:	f361 13c7 	bfi	r3, r1, #7, #1
 8002246:	7113      	strb	r3, [r2, #4]
  val->fsm5 = fsm_status_mainpage.is_fsm5;
 8002248:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800224c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002250:	b2d9      	uxtb	r1, r3
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	7953      	ldrb	r3, [r2, #5]
 8002256:	f361 0300 	bfi	r3, r1, #0, #1
 800225a:	7153      	strb	r3, [r2, #5]
  val->fsm6 = fsm_status_mainpage.is_fsm6;
 800225c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002260:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002264:	b2d9      	uxtb	r1, r3
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	7953      	ldrb	r3, [r2, #5]
 800226a:	f361 0341 	bfi	r3, r1, #1, #1
 800226e:	7153      	strb	r3, [r2, #5]
  val->fsm7 = fsm_status_mainpage.is_fsm7;
 8002270:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002274:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002278:	b2d9      	uxtb	r1, r3
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	7953      	ldrb	r3, [r2, #5]
 800227e:	f361 0382 	bfi	r3, r1, #2, #1
 8002282:	7153      	strb	r3, [r2, #5]
  val->fsm8 = fsm_status_mainpage.is_fsm8;
 8002284:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002288:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800228c:	b2d9      	uxtb	r1, r3
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	7953      	ldrb	r3, [r2, #5]
 8002292:	f361 03c3 	bfi	r3, r1, #3, #1
 8002296:	7153      	strb	r3, [r2, #5]

  /* embedded func */
  ret = lsm6dsv_mem_bank_set(ctx, LSM6DSV_EMBED_FUNC_MEM_BANK);
 8002298:	2101      	movs	r1, #1
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fc06 	bl	8001aac <lsm6dsv_mem_bank_set>
 80022a0:	6478      	str	r0, [r7, #68]	@ 0x44
  if (ret == 0)
 80022a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d112      	bne.n	80022ce <lsm6dsv_all_sources_get+0x4c4>
  {
    ret = lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_EXEC_STATUS, (uint8_t *)&emb_func_exec_status, 1);
 80022a8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80022ac:	2301      	movs	r3, #1
 80022ae:	2107      	movs	r1, #7
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff facf 	bl	8001854 <lsm6dsv_read_reg>
 80022b6:	6478      	str	r0, [r7, #68]	@ 0x44
    ret += lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_SRC, (uint8_t *)&emb_func_src, 1);
 80022b8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80022bc:	2301      	movs	r3, #1
 80022be:	2164      	movs	r1, #100	@ 0x64
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff fac7 	bl	8001854 <lsm6dsv_read_reg>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ca:	4413      	add	r3, r2
 80022cc:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  ret += lsm6dsv_mem_bank_set(ctx, LSM6DSV_MAIN_MEM_BANK);
 80022ce:	2100      	movs	r1, #0
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fbeb 	bl	8001aac <lsm6dsv_mem_bank_set>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022da:	4413      	add	r3, r2
 80022dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (ret != 0)
 80022de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <lsm6dsv_all_sources_get+0x4de>
  {
    return ret;
 80022e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022e6:	e07f      	b.n	80023e8 <lsm6dsv_all_sources_get+0x5de>
  }

  val->emb_func_stand_by = emb_func_exec_status.emb_func_endop;
 80022e8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80022ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80022f0:	b2d9      	uxtb	r1, r3
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	78d3      	ldrb	r3, [r2, #3]
 80022f6:	f361 13c7 	bfi	r3, r1, #7, #1
 80022fa:	70d3      	strb	r3, [r2, #3]
  val->emb_func_time_exceed = emb_func_exec_status.emb_func_exec_ovr;
 80022fc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002300:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002304:	b2d9      	uxtb	r1, r3
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	7913      	ldrb	r3, [r2, #4]
 800230a:	f361 0300 	bfi	r3, r1, #0, #1
 800230e:	7113      	strb	r3, [r2, #4]
  val->step_count_inc = emb_func_src.stepcounter_bit_set;
 8002310:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002314:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002318:	b2d9      	uxtb	r1, r3
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	78d3      	ldrb	r3, [r2, #3]
 800231e:	f361 1304 	bfi	r3, r1, #4, #1
 8002322:	70d3      	strb	r3, [r2, #3]
  val->step_count_overflow = emb_func_src.step_overflow;
 8002324:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002328:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800232c:	b2d9      	uxtb	r1, r3
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	78d3      	ldrb	r3, [r2, #3]
 8002332:	f361 1345 	bfi	r3, r1, #5, #1
 8002336:	70d3      	strb	r3, [r2, #3]
  val->step_on_delta_time = emb_func_src.step_count_delta_ia;
 8002338:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800233c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002340:	b2d9      	uxtb	r1, r3
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	78d3      	ldrb	r3, [r2, #3]
 8002346:	f361 1386 	bfi	r3, r1, #6, #1
 800234a:	70d3      	strb	r3, [r2, #3]

  val->step_detector = emb_func_src.step_detected;
 800234c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002350:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002354:	b2d9      	uxtb	r1, r3
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	78d3      	ldrb	r3, [r2, #3]
 800235a:	f361 03c3 	bfi	r3, r1, #3, #1
 800235e:	70d3      	strb	r3, [r2, #3]

  /* sensor hub */
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_STATUS_MASTER_MAINPAGE, (uint8_t *)&status_shub, 1);
 8002360:	f107 0210 	add.w	r2, r7, #16
 8002364:	2301      	movs	r3, #1
 8002366:	2148      	movs	r1, #72	@ 0x48
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff fa73 	bl	8001854 <lsm6dsv_read_reg>
 800236e:	6478      	str	r0, [r7, #68]	@ 0x44
  if (ret != 0)
 8002370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <lsm6dsv_all_sources_get+0x570>
  {
    return ret;
 8002376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002378:	e036      	b.n	80023e8 <lsm6dsv_all_sources_get+0x5de>
  }

  val->sh_endop = status_shub.sens_hub_endop;
 800237a:	7c3b      	ldrb	r3, [r7, #16]
 800237c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002380:	b2d9      	uxtb	r1, r3
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	7953      	ldrb	r3, [r2, #5]
 8002386:	f361 1304 	bfi	r3, r1, #4, #1
 800238a:	7153      	strb	r3, [r2, #5]
  val->sh_wr_once = status_shub.wr_once_done;
 800238c:	7c3b      	ldrb	r3, [r7, #16]
 800238e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002392:	b2d9      	uxtb	r1, r3
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	7993      	ldrb	r3, [r2, #6]
 8002398:	f361 0341 	bfi	r3, r1, #1, #1
 800239c:	7193      	strb	r3, [r2, #6]
  val->sh_slave3_nack = status_shub.slave3_nack;
 800239e:	7c3b      	ldrb	r3, [r7, #16]
 80023a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80023a4:	b2d9      	uxtb	r1, r3
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	7993      	ldrb	r3, [r2, #6]
 80023aa:	f361 0300 	bfi	r3, r1, #0, #1
 80023ae:	7193      	strb	r3, [r2, #6]
  val->sh_slave2_nack = status_shub.slave2_nack;
 80023b0:	7c3b      	ldrb	r3, [r7, #16]
 80023b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80023b6:	b2d9      	uxtb	r1, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	7953      	ldrb	r3, [r2, #5]
 80023bc:	f361 13c7 	bfi	r3, r1, #7, #1
 80023c0:	7153      	strb	r3, [r2, #5]
  val->sh_slave1_nack = status_shub.slave1_nack;
 80023c2:	7c3b      	ldrb	r3, [r7, #16]
 80023c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80023c8:	b2d9      	uxtb	r1, r3
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	7953      	ldrb	r3, [r2, #5]
 80023ce:	f361 1386 	bfi	r3, r1, #6, #1
 80023d2:	7153      	strb	r3, [r2, #5]
  val->sh_slave0_nack = status_shub.slave0_nack;
 80023d4:	7c3b      	ldrb	r3, [r7, #16]
 80023d6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80023da:	b2d9      	uxtb	r1, r3
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	7953      	ldrb	r3, [r2, #5]
 80023e0:	f361 1345 	bfi	r3, r1, #5, #1
 80023e4:	7153      	strb	r3, [r2, #5]

  return ret;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3748      	adds	r7, #72	@ 0x48
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <lsm6dsv_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_OUTX_L_G, &buff[0], 6);
 80023fa:	f107 020c 	add.w	r2, r7, #12
 80023fe:	2306      	movs	r3, #6
 8002400:	2122      	movs	r1, #34	@ 0x22
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fa26 	bl	8001854 <lsm6dsv_read_reg>
 8002408:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <lsm6dsv_angular_rate_raw_get+0x24>
  {
    return ret;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	e036      	b.n	8002482 <lsm6dsv_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8002414:	7b7b      	ldrb	r3, [r7, #13]
 8002416:	b21a      	sxth	r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002422:	b29b      	uxth	r3, r3
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b29b      	uxth	r3, r3
 8002428:	7b3a      	ldrb	r2, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	b29b      	uxth	r3, r3
 800242e:	b21a      	sxth	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	3302      	adds	r3, #2
 800243a:	b212      	sxth	r2, r2
 800243c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	3302      	adds	r3, #2
 8002442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002446:	b29b      	uxth	r3, r3
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	b29b      	uxth	r3, r3
 800244c:	7bba      	ldrb	r2, [r7, #14]
 800244e:	4413      	add	r3, r2
 8002450:	b29a      	uxth	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3302      	adds	r3, #2
 8002456:	b212      	sxth	r2, r2
 8002458:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800245a:	7c7a      	ldrb	r2, [r7, #17]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3304      	adds	r3, #4
 8002460:	b212      	sxth	r2, r2
 8002462:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	3304      	adds	r3, #4
 8002468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246c:	b29b      	uxth	r3, r3
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	b29b      	uxth	r3, r3
 8002472:	7c3a      	ldrb	r2, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	b29a      	uxth	r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	3304      	adds	r3, #4
 800247c:	b212      	sxth	r2, r2
 800247e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002480:	697b      	ldr	r3, [r7, #20]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <lsm6dsv_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_OUTX_L_A, &buff[0], 6);
 8002494:	f107 020c 	add.w	r2, r7, #12
 8002498:	2306      	movs	r3, #6
 800249a:	2128      	movs	r1, #40	@ 0x28
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff f9d9 	bl	8001854 <lsm6dsv_read_reg>
 80024a2:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <lsm6dsv_acceleration_raw_get+0x24>
  {
    return ret;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	e036      	b.n	800251c <lsm6dsv_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 80024ae:	7b7b      	ldrb	r3, [r7, #13]
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	7b3a      	ldrb	r2, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	3302      	adds	r3, #2
 80024d4:	b212      	sxth	r2, r2
 80024d6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	3302      	adds	r3, #2
 80024dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	7bba      	ldrb	r2, [r7, #14]
 80024e8:	4413      	add	r3, r2
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3302      	adds	r3, #2
 80024f0:	b212      	sxth	r2, r2
 80024f2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80024f4:	7c7a      	ldrb	r2, [r7, #17]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	3304      	adds	r3, #4
 80024fa:	b212      	sxth	r2, r2
 80024fc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	3304      	adds	r3, #4
 8002502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002506:	b29b      	uxth	r3, r3
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	b29b      	uxth	r3, r3
 800250c:	7c3a      	ldrb	r2, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	b29a      	uxth	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	3304      	adds	r3, #4
 8002516:	b212      	sxth	r2, r2
 8002518:	801a      	strh	r2, [r3, #0]

  return ret;
 800251a:	697b      	ldr	r3, [r7, #20]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <lsm6dsv_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv_fifo_mode_t val)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002530:	f107 0208 	add.w	r2, r7, #8
 8002534:	2301      	movs	r3, #1
 8002536:	210a      	movs	r1, #10
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff f98b 	bl	8001854 <lsm6dsv_read_reg>
 800253e:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10f      	bne.n	8002566 <lsm6dsv_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	b2da      	uxtb	r2, r3
 800254e:	7a3b      	ldrb	r3, [r7, #8]
 8002550:	f362 0302 	bfi	r3, r2, #0, #3
 8002554:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8002556:	f107 0208 	add.w	r2, r7, #8
 800255a:	2301      	movs	r3, #1
 800255c:	210a      	movs	r1, #10
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff f996 	bl	8001890 <lsm6dsv_write_reg>
 8002564:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <lsm6dsv_fifo_status_get>:
  return ret;
}

int32_t lsm6dsv_fifo_status_get(const stmdev_ctx_t *ctx,
                                lsm6dsv_fifo_status_t *val)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  lsm6dsv_fifo_status2_t status;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FIFO_STATUS1, (uint8_t *)&buff[0], 2);
 800257a:	f107 0210 	add.w	r2, r7, #16
 800257e:	2302      	movs	r3, #2
 8002580:	211b      	movs	r1, #27
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff f966 	bl	8001854 <lsm6dsv_read_reg>
 8002588:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <lsm6dsv_fifo_status_get+0x24>
  {
    return ret;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	e04b      	b.n	800262c <lsm6dsv_fifo_status_get+0xbc>
  }

  bytecpy((uint8_t *)&status, &buff[1]);
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	f107 030c 	add.w	r3, r7, #12
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f993 	bl	80018cc <bytecpy>

  val->fifo_bdr = status.counter_bdr_ia;
 80025a6:	7b3b      	ldrb	r3, [r7, #12]
 80025a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80025ac:	b2d9      	uxtb	r1, r3
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	7853      	ldrb	r3, [r2, #1]
 80025b2:	f361 0341 	bfi	r3, r1, #1, #1
 80025b6:	7053      	strb	r3, [r2, #1]
  val->fifo_ovr = status.fifo_ovr_ia;
 80025b8:	7b3b      	ldrb	r3, [r7, #12]
 80025ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80025be:	b2d9      	uxtb	r1, r3
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	7853      	ldrb	r3, [r2, #1]
 80025c4:	f361 03c3 	bfi	r3, r1, #3, #1
 80025c8:	7053      	strb	r3, [r2, #1]
  val->fifo_full = status.fifo_full_ia;
 80025ca:	7b3b      	ldrb	r3, [r7, #12]
 80025cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80025d0:	b2d9      	uxtb	r1, r3
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	7853      	ldrb	r3, [r2, #1]
 80025d6:	f361 0382 	bfi	r3, r1, #2, #1
 80025da:	7053      	strb	r3, [r2, #1]
  val->fifo_th = status.fifo_wtm_ia;
 80025dc:	7b3b      	ldrb	r3, [r7, #12]
 80025de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80025e2:	b2d9      	uxtb	r1, r3
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	7853      	ldrb	r3, [r2, #1]
 80025e8:	f361 1304 	bfi	r3, r1, #4, #1
 80025ec:	7053      	strb	r3, [r2, #1]

  val->fifo_level = (uint16_t)buff[1] & 0x01U;
 80025ee:	7c7b      	ldrb	r3, [r7, #17]
 80025f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	b299      	uxth	r1, r3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	8813      	ldrh	r3, [r2, #0]
 8002600:	f361 0308 	bfi	r3, r1, #0, #9
 8002604:	8013      	strh	r3, [r2, #0]
  val->fifo_level = (val->fifo_level * 256U) + buff[0];
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260e:	b29b      	uxth	r3, r3
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b29b      	uxth	r3, r3
 8002614:	7c3a      	ldrb	r2, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	b29b      	uxth	r3, r3
 800261a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261e:	b299      	uxth	r1, r3
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	8813      	ldrh	r3, [r2, #0]
 8002624:	f361 0308 	bfi	r3, r1, #0, #9
 8002628:	8013      	strh	r3, [r2, #0]

  return ret;
 800262a:	697b      	ldr	r3, [r7, #20]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <lsm6dsv_fifo_out_raw_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_fifo_out_raw_get(const stmdev_ctx_t *ctx,
                                 lsm6dsv_fifo_out_raw_t *val)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  lsm6dsv_fifo_data_out_tag_t fifo_data_out_tag;
  uint8_t buff[7];
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FIFO_DATA_OUT_TAG, buff, 7);
 800263e:	f107 0208 	add.w	r2, r7, #8
 8002642:	2307      	movs	r3, #7
 8002644:	2178      	movs	r1, #120	@ 0x78
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff f904 	bl	8001854 <lsm6dsv_read_reg>
 800264c:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <lsm6dsv_fifo_out_raw_get+0x24>
  {
    return ret;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	e11f      	b.n	8002898 <lsm6dsv_fifo_out_raw_get+0x264>
  }

  bytecpy((uint8_t *)&fifo_data_out_tag, &buff[0]);
 8002658:	f107 0208 	add.w	r2, r7, #8
 800265c:	f107 0310 	add.w	r3, r7, #16
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f932 	bl	80018cc <bytecpy>

  switch (fifo_data_out_tag.tag_sensor)
 8002668:	7c3b      	ldrb	r3, [r7, #16]
 800266a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b1e      	cmp	r3, #30
 8002672:	f200 80ef 	bhi.w	8002854 <lsm6dsv_fifo_out_raw_get+0x220>
 8002676:	a201      	add	r2, pc, #4	@ (adr r2, 800267c <lsm6dsv_fifo_out_raw_get+0x48>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	080026f9 	.word	0x080026f9
 8002680:	08002705 	.word	0x08002705
 8002684:	08002713 	.word	0x08002713
 8002688:	0800272f 	.word	0x0800272f
 800268c:	08002721 	.word	0x08002721
 8002690:	0800273d 	.word	0x0800273d
 8002694:	0800274b 	.word	0x0800274b
 8002698:	08002759 	.word	0x08002759
 800269c:	08002767 	.word	0x08002767
 80026a0:	08002775 	.word	0x08002775
 80026a4:	08002783 	.word	0x08002783
 80026a8:	08002791 	.word	0x08002791
 80026ac:	0800279f 	.word	0x0800279f
 80026b0:	080027ad 	.word	0x080027ad
 80026b4:	080027bb 	.word	0x080027bb
 80026b8:	080027c9 	.word	0x080027c9
 80026bc:	080027d7 	.word	0x080027d7
 80026c0:	080027e5 	.word	0x080027e5
 80026c4:	080027f3 	.word	0x080027f3
 80026c8:	08002801 	.word	0x08002801
 80026cc:	08002855 	.word	0x08002855
 80026d0:	08002855 	.word	0x08002855
 80026d4:	0800280f 	.word	0x0800280f
 80026d8:	0800281d 	.word	0x0800281d
 80026dc:	08002855 	.word	0x08002855
 80026e0:	0800282b 	.word	0x0800282b
 80026e4:	08002855 	.word	0x08002855
 80026e8:	08002855 	.word	0x08002855
 80026ec:	08002855 	.word	0x08002855
 80026f0:	08002839 	.word	0x08002839
 80026f4:	08002847 	.word	0x08002847
  {
    case LSM6DSV_FIFO_EMPTY:
      val->tag = LSM6DSV_FIFO_EMPTY;
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	7813      	ldrb	r3, [r2, #0]
 80026fc:	f023 031f 	bic.w	r3, r3, #31
 8002700:	7013      	strb	r3, [r2, #0]
      break;
 8002702:	e0ad      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_GY_NC_TAG:
      val->tag = LSM6DSV_GY_NC_TAG;
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	7813      	ldrb	r3, [r2, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	f361 0304 	bfi	r3, r1, #0, #5
 800270e:	7013      	strb	r3, [r2, #0]
      break;
 8002710:	e0a6      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_XL_NC_TAG:
      val->tag = LSM6DSV_XL_NC_TAG;
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	7813      	ldrb	r3, [r2, #0]
 8002716:	2102      	movs	r1, #2
 8002718:	f361 0304 	bfi	r3, r1, #0, #5
 800271c:	7013      	strb	r3, [r2, #0]
      break;
 800271e:	e09f      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_TIMESTAMP_TAG:
      val->tag = LSM6DSV_TIMESTAMP_TAG;
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	7813      	ldrb	r3, [r2, #0]
 8002724:	2104      	movs	r1, #4
 8002726:	f361 0304 	bfi	r3, r1, #0, #5
 800272a:	7013      	strb	r3, [r2, #0]
      break;
 800272c:	e098      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_TEMPERATURE_TAG:
      val->tag = LSM6DSV_TEMPERATURE_TAG;
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	7813      	ldrb	r3, [r2, #0]
 8002732:	2103      	movs	r1, #3
 8002734:	f361 0304 	bfi	r3, r1, #0, #5
 8002738:	7013      	strb	r3, [r2, #0]
      break;
 800273a:	e091      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_CFG_CHANGE_TAG:
      val->tag = LSM6DSV_CFG_CHANGE_TAG;
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	7813      	ldrb	r3, [r2, #0]
 8002740:	2105      	movs	r1, #5
 8002742:	f361 0304 	bfi	r3, r1, #0, #5
 8002746:	7013      	strb	r3, [r2, #0]
      break;
 8002748:	e08a      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_XL_NC_T_2_TAG:
      val->tag = LSM6DSV_XL_NC_T_2_TAG;
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	7813      	ldrb	r3, [r2, #0]
 800274e:	2106      	movs	r1, #6
 8002750:	f361 0304 	bfi	r3, r1, #0, #5
 8002754:	7013      	strb	r3, [r2, #0]
      break;
 8002756:	e083      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_XL_NC_T_1_TAG:
      val->tag = LSM6DSV_XL_NC_T_1_TAG;
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	7813      	ldrb	r3, [r2, #0]
 800275c:	2107      	movs	r1, #7
 800275e:	f361 0304 	bfi	r3, r1, #0, #5
 8002762:	7013      	strb	r3, [r2, #0]
      break;
 8002764:	e07c      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_XL_2XC_TAG:
      val->tag = LSM6DSV_XL_2XC_TAG;
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	7813      	ldrb	r3, [r2, #0]
 800276a:	2108      	movs	r1, #8
 800276c:	f361 0304 	bfi	r3, r1, #0, #5
 8002770:	7013      	strb	r3, [r2, #0]
      break;
 8002772:	e075      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_XL_3XC_TAG:
      val->tag = LSM6DSV_XL_3XC_TAG;
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	7813      	ldrb	r3, [r2, #0]
 8002778:	2109      	movs	r1, #9
 800277a:	f361 0304 	bfi	r3, r1, #0, #5
 800277e:	7013      	strb	r3, [r2, #0]
      break;
 8002780:	e06e      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_GY_NC_T_2_TAG:
      val->tag = LSM6DSV_GY_NC_T_2_TAG;
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	7813      	ldrb	r3, [r2, #0]
 8002786:	210a      	movs	r1, #10
 8002788:	f361 0304 	bfi	r3, r1, #0, #5
 800278c:	7013      	strb	r3, [r2, #0]
      break;
 800278e:	e067      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_GY_NC_T_1_TAG:
      val->tag = LSM6DSV_GY_NC_T_1_TAG;
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	7813      	ldrb	r3, [r2, #0]
 8002794:	210b      	movs	r1, #11
 8002796:	f361 0304 	bfi	r3, r1, #0, #5
 800279a:	7013      	strb	r3, [r2, #0]
      break;
 800279c:	e060      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_GY_2XC_TAG:
      val->tag = LSM6DSV_GY_2XC_TAG;
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	7813      	ldrb	r3, [r2, #0]
 80027a2:	210c      	movs	r1, #12
 80027a4:	f361 0304 	bfi	r3, r1, #0, #5
 80027a8:	7013      	strb	r3, [r2, #0]
      break;
 80027aa:	e059      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_GY_3XC_TAG:
      val->tag = LSM6DSV_GY_3XC_TAG;
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	7813      	ldrb	r3, [r2, #0]
 80027b0:	210d      	movs	r1, #13
 80027b2:	f361 0304 	bfi	r3, r1, #0, #5
 80027b6:	7013      	strb	r3, [r2, #0]
      break;
 80027b8:	e052      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_SENSORHUB_SLAVE0_TAG:
      val->tag = LSM6DSV_SENSORHUB_SLAVE0_TAG;
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	7813      	ldrb	r3, [r2, #0]
 80027be:	210e      	movs	r1, #14
 80027c0:	f361 0304 	bfi	r3, r1, #0, #5
 80027c4:	7013      	strb	r3, [r2, #0]
      break;
 80027c6:	e04b      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_SENSORHUB_SLAVE1_TAG:
      val->tag = LSM6DSV_SENSORHUB_SLAVE1_TAG;
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	7813      	ldrb	r3, [r2, #0]
 80027cc:	210f      	movs	r1, #15
 80027ce:	f361 0304 	bfi	r3, r1, #0, #5
 80027d2:	7013      	strb	r3, [r2, #0]
      break;
 80027d4:	e044      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_SENSORHUB_SLAVE2_TAG:
      val->tag = LSM6DSV_SENSORHUB_SLAVE2_TAG;
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	7813      	ldrb	r3, [r2, #0]
 80027da:	2110      	movs	r1, #16
 80027dc:	f361 0304 	bfi	r3, r1, #0, #5
 80027e0:	7013      	strb	r3, [r2, #0]
      break;
 80027e2:	e03d      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_SENSORHUB_SLAVE3_TAG:
      val->tag = LSM6DSV_SENSORHUB_SLAVE3_TAG;
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	7813      	ldrb	r3, [r2, #0]
 80027e8:	2111      	movs	r1, #17
 80027ea:	f361 0304 	bfi	r3, r1, #0, #5
 80027ee:	7013      	strb	r3, [r2, #0]
      break;
 80027f0:	e036      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_STEP_COUNTER_TAG:
      val->tag = LSM6DSV_STEP_COUNTER_TAG;
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	7813      	ldrb	r3, [r2, #0]
 80027f6:	2112      	movs	r1, #18
 80027f8:	f361 0304 	bfi	r3, r1, #0, #5
 80027fc:	7013      	strb	r3, [r2, #0]
      break;
 80027fe:	e02f      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_SFLP_GAME_ROTATION_VECTOR_TAG:
      val->tag = LSM6DSV_SFLP_GAME_ROTATION_VECTOR_TAG;
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	7813      	ldrb	r3, [r2, #0]
 8002804:	2113      	movs	r1, #19
 8002806:	f361 0304 	bfi	r3, r1, #0, #5
 800280a:	7013      	strb	r3, [r2, #0]
      break;
 800280c:	e028      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_SFLP_GYROSCOPE_BIAS_TAG:
      val->tag = LSM6DSV_SFLP_GYROSCOPE_BIAS_TAG;
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	7813      	ldrb	r3, [r2, #0]
 8002812:	2116      	movs	r1, #22
 8002814:	f361 0304 	bfi	r3, r1, #0, #5
 8002818:	7013      	strb	r3, [r2, #0]
      break;
 800281a:	e021      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_SFLP_GRAVITY_VECTOR_TAG:
      val->tag = LSM6DSV_SFLP_GRAVITY_VECTOR_TAG;
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	7813      	ldrb	r3, [r2, #0]
 8002820:	2117      	movs	r1, #23
 8002822:	f361 0304 	bfi	r3, r1, #0, #5
 8002826:	7013      	strb	r3, [r2, #0]
      break;
 8002828:	e01a      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_SENSORHUB_NACK_TAG:
      val->tag = LSM6DSV_SENSORHUB_NACK_TAG;
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	7813      	ldrb	r3, [r2, #0]
 800282e:	2119      	movs	r1, #25
 8002830:	f361 0304 	bfi	r3, r1, #0, #5
 8002834:	7013      	strb	r3, [r2, #0]
      break;
 8002836:	e013      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_XL_DUAL_CORE:
      val->tag = LSM6DSV_XL_DUAL_CORE;
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	7813      	ldrb	r3, [r2, #0]
 800283c:	211d      	movs	r1, #29
 800283e:	f361 0304 	bfi	r3, r1, #0, #5
 8002842:	7013      	strb	r3, [r2, #0]
      break;
 8002844:	e00c      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    case LSM6DSV_GY_ENHANCED_EIS:
      val->tag = LSM6DSV_GY_ENHANCED_EIS;
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	7813      	ldrb	r3, [r2, #0]
 800284a:	211e      	movs	r1, #30
 800284c:	f361 0304 	bfi	r3, r1, #0, #5
 8002850:	7013      	strb	r3, [r2, #0]
      break;
 8002852:	e005      	b.n	8002860 <lsm6dsv_fifo_out_raw_get+0x22c>

    default:
      val->tag = LSM6DSV_FIFO_EMPTY;
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	7813      	ldrb	r3, [r2, #0]
 8002858:	f023 031f 	bic.w	r3, r3, #31
 800285c:	7013      	strb	r3, [r2, #0]
      break;
 800285e:	bf00      	nop
  }

  val->cnt = fifo_data_out_tag.tag_cnt;
 8002860:	7c3b      	ldrb	r3, [r7, #16]
 8002862:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002866:	b2d9      	uxtb	r1, r3
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	7813      	ldrb	r3, [r2, #0]
 800286c:	f361 1346 	bfi	r3, r1, #5, #2
 8002870:	7013      	strb	r3, [r2, #0]

  val->data[0] = buff[1];
 8002872:	7a7a      	ldrb	r2, [r7, #9]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	705a      	strb	r2, [r3, #1]
  val->data[1] = buff[2];
 8002878:	7aba      	ldrb	r2, [r7, #10]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	709a      	strb	r2, [r3, #2]
  val->data[2] = buff[3];
 800287e:	7afa      	ldrb	r2, [r7, #11]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	70da      	strb	r2, [r3, #3]
  val->data[3] = buff[4];
 8002884:	7b3a      	ldrb	r2, [r7, #12]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	711a      	strb	r2, [r3, #4]
  val->data[4] = buff[5];
 800288a:	7b7a      	ldrb	r2, [r7, #13]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	715a      	strb	r2, [r3, #5]
  val->data[5] = buff[6];
 8002890:	7bba      	ldrb	r2, [r7, #14]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	719a      	strb	r2, [r3, #6]

  return ret;
 8002896:	697b      	ldr	r3, [r7, #20]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <lsm6dsv_fifo_sflp_batch_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_fifo_sflp_batch_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv_fifo_sflp_raw_t val)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	7039      	strb	r1, [r7, #0]
  lsm6dsv_emb_func_fifo_en_a_t emb_func_fifo_en_a;
  int32_t ret;

  ret = lsm6dsv_mem_bank_set(ctx, LSM6DSV_EMBED_FUNC_MEM_BANK);
 80028aa:	2101      	movs	r1, #1
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff f8fd 	bl	8001aac <lsm6dsv_mem_bank_set>
 80028b2:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <lsm6dsv_fifo_sflp_batch_set+0x2a>
  {
    ret = lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_FIFO_EN_A, (uint8_t *)&emb_func_fifo_en_a, 1);
 80028ba:	f107 0208 	add.w	r2, r7, #8
 80028be:	2301      	movs	r3, #1
 80028c0:	2144      	movs	r1, #68	@ 0x44
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe ffc6 	bl	8001854 <lsm6dsv_read_reg>
 80028c8:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d122      	bne.n	8002916 <lsm6dsv_fifo_sflp_batch_set+0x76>
  {
    emb_func_fifo_en_a.sflp_game_fifo_en = val.game_rotation;
 80028d0:	783b      	ldrb	r3, [r7, #0]
 80028d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	7a3b      	ldrb	r3, [r7, #8]
 80028da:	f362 0341 	bfi	r3, r2, #1, #1
 80028de:	723b      	strb	r3, [r7, #8]
    emb_func_fifo_en_a.sflp_gravity_fifo_en = val.gravity;
 80028e0:	783b      	ldrb	r3, [r7, #0]
 80028e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	7a3b      	ldrb	r3, [r7, #8]
 80028ea:	f362 1304 	bfi	r3, r2, #4, #1
 80028ee:	723b      	strb	r3, [r7, #8]
    emb_func_fifo_en_a.sflp_gbias_fifo_en = val.gbias;
 80028f0:	783b      	ldrb	r3, [r7, #0]
 80028f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	7a3b      	ldrb	r3, [r7, #8]
 80028fa:	f362 1345 	bfi	r3, r2, #5, #1
 80028fe:	723b      	strb	r3, [r7, #8]
    ret += lsm6dsv_write_reg(ctx, LSM6DSV_EMB_FUNC_FIFO_EN_A,
 8002900:	f107 0208 	add.w	r2, r7, #8
 8002904:	2301      	movs	r3, #1
 8002906:	2144      	movs	r1, #68	@ 0x44
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7fe ffc1 	bl	8001890 <lsm6dsv_write_reg>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
                             (uint8_t *)&emb_func_fifo_en_a, 1);
  }

  ret += lsm6dsv_mem_bank_set(ctx, LSM6DSV_MAIN_MEM_BANK);
 8002916:	2100      	movs	r1, #0
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff f8c7 	bl	8001aac <lsm6dsv_mem_bank_set>
 800291e:	4602      	mov	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  return ret;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <lsm6dsv_sflp_game_rotation_set>:
  * @param  val      Enable/Disable game rotation value (0/1).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_sflp_game_rotation_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_emb_func_en_a_t emb_func_en_a;
  int32_t ret;

  ret = lsm6dsv_mem_bank_set(ctx, LSM6DSV_EMBED_FUNC_MEM_BANK);
 800293c:	2101      	movs	r1, #1
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff f8b4 	bl	8001aac <lsm6dsv_mem_bank_set>
 8002944:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <lsm6dsv_sflp_game_rotation_set+0x20>
  {
    return ret;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	e028      	b.n	80029a2 <lsm6dsv_sflp_game_rotation_set+0x72>
  }

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_EN_A, (uint8_t *)&emb_func_en_a, 1);
 8002950:	f107 0208 	add.w	r2, r7, #8
 8002954:	2301      	movs	r3, #1
 8002956:	2104      	movs	r1, #4
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fe ff7b 	bl	8001854 <lsm6dsv_read_reg>
 800295e:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d113      	bne.n	800298e <lsm6dsv_sflp_game_rotation_set+0x5e>
  {
    goto exit;
  }

  emb_func_en_a.sflp_game_en = val;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	b2da      	uxtb	r2, r3
 800296e:	7a3b      	ldrb	r3, [r7, #8]
 8002970:	f362 0341 	bfi	r3, r2, #1, #1
 8002974:	723b      	strb	r3, [r7, #8]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_EMB_FUNC_EN_A,
 8002976:	f107 0208 	add.w	r2, r7, #8
 800297a:	2301      	movs	r3, #1
 800297c:	2104      	movs	r1, #4
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe ff86 	bl	8001890 <lsm6dsv_write_reg>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4413      	add	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e000      	b.n	8002990 <lsm6dsv_sflp_game_rotation_set+0x60>
    goto exit;
 800298e:	bf00      	nop
                           (uint8_t *)&emb_func_en_a, 1);

exit:
  ret += lsm6dsv_mem_bank_set(ctx, LSM6DSV_MAIN_MEM_BANK);
 8002990:	2100      	movs	r1, #0
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff f88a 	bl	8001aac <lsm6dsv_mem_bank_set>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

  return ret;
 80029a0:	68fb      	ldr	r3, [r7, #12]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <lsm6dsv_sflp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_sflp_data_rate_set(const stmdev_ctx_t *ctx,
                                   lsm6dsv_sflp_data_rate_t val)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_sflp_odr_t sflp_odr;
  int32_t ret;

  ret = lsm6dsv_mem_bank_set(ctx, LSM6DSV_EMBED_FUNC_MEM_BANK);
 80029b6:	2101      	movs	r1, #1
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff f877 	bl	8001aac <lsm6dsv_mem_bank_set>
 80029be:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <lsm6dsv_sflp_data_rate_set+0x20>
  {
    return ret;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	e028      	b.n	8002a1c <lsm6dsv_sflp_data_rate_set+0x72>
  }

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_SFLP_ODR, (uint8_t *)&sflp_odr, 1);
 80029ca:	f107 0208 	add.w	r2, r7, #8
 80029ce:	2301      	movs	r3, #1
 80029d0:	215e      	movs	r1, #94	@ 0x5e
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fe ff3e 	bl	8001854 <lsm6dsv_read_reg>
 80029d8:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d113      	bne.n	8002a08 <lsm6dsv_sflp_data_rate_set+0x5e>
  {
    goto exit;
  }

  sflp_odr.sflp_game_odr = (uint8_t)val & 0x07U;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	7a3b      	ldrb	r3, [r7, #8]
 80029ea:	f362 03c5 	bfi	r3, r2, #3, #3
 80029ee:	723b      	strb	r3, [r7, #8]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_SFLP_ODR, (uint8_t *)&sflp_odr, 1);
 80029f0:	f107 0208 	add.w	r2, r7, #8
 80029f4:	2301      	movs	r3, #1
 80029f6:	215e      	movs	r1, #94	@ 0x5e
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7fe ff49 	bl	8001890 <lsm6dsv_write_reg>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	e000      	b.n	8002a0a <lsm6dsv_sflp_data_rate_set+0x60>
    goto exit;
 8002a08:	bf00      	nop

exit:
  ret += lsm6dsv_mem_bank_set(ctx, LSM6DSV_MAIN_MEM_BANK);
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff f84d 	bl	8001aac <lsm6dsv_mem_bank_set>
 8002a12:	4602      	mov	r2, r0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  return ret;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <platform_write>:
 * @param  bufp: Pointer to data buffer
 * @param  len: Number of bytes to write
 * @retval 0 on success, -1 on error
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	@ 0x28
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	460b      	mov	r3, r1
 8002a32:	72fb      	strb	r3, [r7, #11]
 8002a34:	4613      	mov	r3, r2
 8002a36:	813b      	strh	r3, [r7, #8]
  uint8_t device_addr = (uint8_t)(uintptr_t)handle;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	75fb      	strb	r3, [r7, #23]

  if (HAL_I2C_Mem_Write(&hi2c2, device_addr, reg, I2C_MEMADD_SIZE_8BIT,
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	b299      	uxth	r1, r3
 8002a40:	7afb      	ldrb	r3, [r7, #11]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a48:	9302      	str	r3, [sp, #8]
 8002a4a:	893b      	ldrh	r3, [r7, #8]
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2301      	movs	r3, #1
 8002a54:	4806      	ldr	r0, [pc, #24]	@ (8002a70 <platform_write+0x4c>)
 8002a56:	f002 fae1 	bl	800501c <HAL_I2C_Mem_Write>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <platform_write+0x42>
                        (uint8_t*)bufp, len, 1000) != HAL_OK)
  {
    return -1;
 8002a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a64:	e000      	b.n	8002a68 <platform_write+0x44>
  }
  return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000208 	.word	0x20000208

08002a74 <platform_read>:
 * @param  bufp: Pointer to data buffer
 * @param  len: Number of bytes to read
 * @retval 0 on success, -1 on error
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	@ 0x28
 8002a78:	af04      	add	r7, sp, #16
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	460b      	mov	r3, r1
 8002a82:	72fb      	strb	r3, [r7, #11]
 8002a84:	4613      	mov	r3, r2
 8002a86:	813b      	strh	r3, [r7, #8]
  uint8_t device_addr = (uint8_t)(uintptr_t)handle;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	75fb      	strb	r3, [r7, #23]

  if (HAL_I2C_Mem_Read(&hi2c2, device_addr, reg, I2C_MEMADD_SIZE_8BIT,
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	b299      	uxth	r1, r3
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a98:	9302      	str	r3, [sp, #8]
 8002a9a:	893b      	ldrh	r3, [r7, #8]
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	4806      	ldr	r0, [pc, #24]	@ (8002ac0 <platform_read+0x4c>)
 8002aa6:	f002 fbcd 	bl	8005244 <HAL_I2C_Mem_Read>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <platform_read+0x42>
                       bufp, len, 1000) != HAL_OK)
  {
    return -1;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ab4:	e000      	b.n	8002ab8 <platform_read+0x44>
  }
  return 0;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000208 	.word	0x20000208

08002ac4 <LSM6DSV_Init>:
/**
 * @brief  Initialize LSM6DSV 6-axis IMU (Accelerometer + Gyroscope)
 * @retval 1 if initialization successful, 0 if device not found or error
 */
static uint8_t LSM6DSV_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  uint8_t whoamI = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	71fb      	strb	r3, [r7, #7]

  /* Initialize sensor context */
  lsm6dsv_ctx.write_reg = platform_write;
 8002ace:	4b32      	ldr	r3, [pc, #200]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002ad0:	4a32      	ldr	r2, [pc, #200]	@ (8002b9c <LSM6DSV_Init+0xd8>)
 8002ad2:	601a      	str	r2, [r3, #0]
  lsm6dsv_ctx.read_reg = platform_read;
 8002ad4:	4b30      	ldr	r3, [pc, #192]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002ad6:	4a32      	ldr	r2, [pc, #200]	@ (8002ba0 <LSM6DSV_Init+0xdc>)
 8002ad8:	605a      	str	r2, [r3, #4]
  lsm6dsv_ctx.mdelay = HAL_Delay;
 8002ada:	4b2f      	ldr	r3, [pc, #188]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002adc:	4a31      	ldr	r2, [pc, #196]	@ (8002ba4 <LSM6DSV_Init+0xe0>)
 8002ade:	609a      	str	r2, [r3, #8]
  lsm6dsv_ctx.handle = (void*)(uintptr_t)LSM6DSV_I2C_ADDR;
 8002ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002ae2:	22d6      	movs	r2, #214	@ 0xd6
 8002ae4:	60da      	str	r2, [r3, #12]

  /* Check device ID */
  if (lsm6dsv_device_id_get(&lsm6dsv_ctx, &whoamI) != 0)
 8002ae6:	1dfb      	adds	r3, r7, #7
 8002ae8:	4619      	mov	r1, r3
 8002aea:	482b      	ldr	r0, [pc, #172]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002aec:	f7ff f80f 	bl	8001b0e <lsm6dsv_device_id_get>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <LSM6DSV_Init+0x36>
  {
    return 0;  // Communication error
 8002af6:	2300      	movs	r3, #0
 8002af8:	e049      	b.n	8002b8e <LSM6DSV_Init+0xca>
  }

  if (whoamI != LSM6DSV_ID)
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	2b70      	cmp	r3, #112	@ 0x70
 8002afe:	d001      	beq.n	8002b04 <LSM6DSV_Init+0x40>
  {
    return 0;  // Device not found
 8002b00:	2300      	movs	r3, #0
 8002b02:	e044      	b.n	8002b8e <LSM6DSV_Init+0xca>
  }

  /* Reset device */
  lsm6dsv_reset_t rst;
  lsm6dsv_reset_set(&lsm6dsv_ctx, LSM6DSV_RESTORE_CTRL_REGS);
 8002b04:	2104      	movs	r1, #4
 8002b06:	4824      	ldr	r0, [pc, #144]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b08:	f7fe ff26 	bl	8001958 <lsm6dsv_reset_set>
  do {
    lsm6dsv_reset_get(&lsm6dsv_ctx, &rst);
 8002b0c:	1dbb      	adds	r3, r7, #6
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4821      	ldr	r0, [pc, #132]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b12:	f7fe ff75 	bl	8001a00 <lsm6dsv_reset_get>
  } while (rst != LSM6DSV_READY);
 8002b16:	79bb      	ldrb	r3, [r7, #6]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f7      	bne.n	8002b0c <LSM6DSV_Init+0x48>

  /* Enable Block Data Update */
  lsm6dsv_block_data_update_set(&lsm6dsv_ctx, PROPERTY_ENABLE);
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	481e      	ldr	r0, [pc, #120]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b20:	f7ff f901 	bl	8001d26 <lsm6dsv_block_data_update_set>
  lsm6dsv_gy_data_rate_set(&lsm6dsv_ctx, LSM6DSV_ODR_AT_1Hz875);
  lsm6dsv_xl_mode_set(&lsm6dsv_ctx, LSM6DSV_XL_LOW_POWER_2_AVG_MD);  // Lowest power with 2 averages
  lsm6dsv_gy_mode_set(&lsm6dsv_ctx, LSM6DSV_GY_LOW_POWER_MD);
#elif (IMU_PERFORMANCE_MODE == 1)
  /* Mode 1: Moderate Performance - 60 Hz ODR, low power mode for balanced operation */
  lsm6dsv_xl_data_rate_set(&lsm6dsv_ctx, LSM6DSV_ODR_AT_60Hz);
 8002b24:	2105      	movs	r1, #5
 8002b26:	481c      	ldr	r0, [pc, #112]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b28:	f7ff f802 	bl	8001b30 <lsm6dsv_xl_data_rate_set>
  lsm6dsv_gy_data_rate_set(&lsm6dsv_ctx, LSM6DSV_ODR_AT_60Hz);
 8002b2c:	2105      	movs	r1, #5
 8002b2e:	481a      	ldr	r0, [pc, #104]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b30:	f7ff f87a 	bl	8001c28 <lsm6dsv_gy_data_rate_set>
  lsm6dsv_xl_mode_set(&lsm6dsv_ctx, LSM6DSV_XL_LOW_POWER_4_AVG_MD);  // Low power with 4 averages for better SNR
 8002b34:	2105      	movs	r1, #5
 8002b36:	4818      	ldr	r0, [pc, #96]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b38:	f7ff f850 	bl	8001bdc <lsm6dsv_xl_mode_set>
  lsm6dsv_gy_mode_set(&lsm6dsv_ctx, LSM6DSV_GY_LOW_POWER_MD);
 8002b3c:	2105      	movs	r1, #5
 8002b3e:	4816      	ldr	r0, [pc, #88]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b40:	f7ff f8cb 	bl	8001cda <lsm6dsv_gy_mode_set>
  lsm6dsv_xl_mode_set(&lsm6dsv_ctx, LSM6DSV_XL_HIGH_PERFORMANCE_MD);
  lsm6dsv_gy_mode_set(&lsm6dsv_ctx, LSM6DSV_GY_HIGH_PERFORMANCE_MD);
#endif

  /* Set full-scale ranges */
  lsm6dsv_xl_full_scale_set(&lsm6dsv_ctx, LSM6DSV_4g);
 8002b44:	2101      	movs	r1, #1
 8002b46:	4814      	ldr	r0, [pc, #80]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b48:	f7ff f939 	bl	8001dbe <lsm6dsv_xl_full_scale_set>
  lsm6dsv_gy_full_scale_set(&lsm6dsv_ctx, LSM6DSV_2000dps);
 8002b4c:	2104      	movs	r1, #4
 8002b4e:	4812      	ldr	r0, [pc, #72]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b50:	f7ff f90f 	bl	8001d72 <lsm6dsv_gy_full_scale_set>

#if ENABLE_LSM6DSV_SENSOR_FUSION
  /* Configure SFLP (Sensor Fusion Low Power) for game rotation vector */

  /* Enable SFLP game rotation (6-axis fusion: accel + gyro) */
  lsm6dsv_sflp_game_rotation_set(&lsm6dsv_ctx, 1);
 8002b54:	2101      	movs	r1, #1
 8002b56:	4810      	ldr	r0, [pc, #64]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b58:	f7ff feea 	bl	8002930 <lsm6dsv_sflp_game_rotation_set>

  /* Set SFLP ODR based on performance mode */
#if (IMU_PERFORMANCE_MODE == 0)
  lsm6dsv_sflp_data_rate_set(&lsm6dsv_ctx, LSM6DSV_SFLP_15Hz);   // Mode 0: Minimum power (15 Hz)
#elif (IMU_PERFORMANCE_MODE == 1)
  lsm6dsv_sflp_data_rate_set(&lsm6dsv_ctx, LSM6DSV_SFLP_60Hz);   // Mode 1: Moderate (60 Hz)
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	480e      	ldr	r0, [pc, #56]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b60:	f7ff ff23 	bl	80029aa <lsm6dsv_sflp_data_rate_set>
  lsm6dsv_sflp_data_rate_set(&lsm6dsv_ctx, LSM6DSV_SFLP_480Hz);  // Mode 2: Maximum performance (480 Hz)
#endif

  /* Enable SFLP data in FIFO */
  lsm6dsv_fifo_sflp_raw_t sflp_fifo;
  sflp_fifo.game_rotation = 1;  // Enable game rotation vector in FIFO
 8002b64:	793b      	ldrb	r3, [r7, #4]
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	713b      	strb	r3, [r7, #4]
  sflp_fifo.gravity = 0;        // Disable gravity vector (can enable if needed)
 8002b6c:	793b      	ldrb	r3, [r7, #4]
 8002b6e:	f023 0302 	bic.w	r3, r3, #2
 8002b72:	713b      	strb	r3, [r7, #4]
  sflp_fifo.gbias = 0;          // Disable gyro bias output (can enable if needed)
 8002b74:	793b      	ldrb	r3, [r7, #4]
 8002b76:	f023 0304 	bic.w	r3, r3, #4
 8002b7a:	713b      	strb	r3, [r7, #4]
  lsm6dsv_fifo_sflp_batch_set(&lsm6dsv_ctx, sflp_fifo);
 8002b7c:	7939      	ldrb	r1, [r7, #4]
 8002b7e:	4806      	ldr	r0, [pc, #24]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b80:	f7ff fe8e 	bl	80028a0 <lsm6dsv_fifo_sflp_batch_set>

  /* Configure FIFO mode to continuous */
  lsm6dsv_fifo_mode_set(&lsm6dsv_ctx, LSM6DSV_STREAM_MODE);
 8002b84:	2106      	movs	r1, #6
 8002b86:	4804      	ldr	r0, [pc, #16]	@ (8002b98 <LSM6DSV_Init+0xd4>)
 8002b88:	f7ff fccc 	bl	8002524 <lsm6dsv_fifo_mode_set>
#endif

  return 1;  // Initialization successful
 8002b8c:	2301      	movs	r3, #1
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200003d0 	.word	0x200003d0
 8002b9c:	08002a25 	.word	0x08002a25
 8002ba0:	08002a75 	.word	0x08002a75
 8002ba4:	08004675 	.word	0x08004675

08002ba8 <LIS2DW12_Init>:
/**
 * @brief  Initialize LIS2DW12 3-axis Accelerometer
 * @retval 1 if initialization successful, 0 if device not found or error
 */
static uint8_t LIS2DW12_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  uint8_t whoamI = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	71fb      	strb	r3, [r7, #7]

  /* Initialize sensor context */
  lis2dw12_ctx.write_reg = platform_write;
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c30 <LIS2DW12_Init+0x88>)
 8002bb6:	601a      	str	r2, [r3, #0]
  lis2dw12_ctx.read_reg = platform_read;
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002bba:	4a1e      	ldr	r2, [pc, #120]	@ (8002c34 <LIS2DW12_Init+0x8c>)
 8002bbc:	605a      	str	r2, [r3, #4]
  lis2dw12_ctx.mdelay = HAL_Delay;
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c38 <LIS2DW12_Init+0x90>)
 8002bc2:	609a      	str	r2, [r3, #8]
  lis2dw12_ctx.handle = (void*)(uintptr_t)LIS2DW12_I2C_ADDR;
 8002bc4:	4b19      	ldr	r3, [pc, #100]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002bc6:	2232      	movs	r2, #50	@ 0x32
 8002bc8:	60da      	str	r2, [r3, #12]

  /* Check device ID */
  if (lis2dw12_device_id_get(&lis2dw12_ctx, &whoamI) != 0)
 8002bca:	1dfb      	adds	r3, r7, #7
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4817      	ldr	r0, [pc, #92]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002bd0:	f7fe fdeb 	bl	80017aa <lis2dw12_device_id_get>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <LIS2DW12_Init+0x36>
  {
    return 0;  // Communication error
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e021      	b.n	8002c22 <LIS2DW12_Init+0x7a>
  }

  if (whoamI != LIS2DW12_ID)
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b44      	cmp	r3, #68	@ 0x44
 8002be2:	d001      	beq.n	8002be8 <LIS2DW12_Init+0x40>
  {
    return 0;  // Device not found
 8002be4:	2300      	movs	r3, #0
 8002be6:	e01c      	b.n	8002c22 <LIS2DW12_Init+0x7a>
  }

  /* Reset device */
  lis2dw12_reset_set(&lis2dw12_ctx, PROPERTY_ENABLE);
 8002be8:	2101      	movs	r1, #1
 8002bea:	4810      	ldr	r0, [pc, #64]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002bec:	f7fe fdee 	bl	80017cc <lis2dw12_reset_set>
  uint8_t rst;
  do {
    lis2dw12_reset_get(&lis2dw12_ctx, &rst);
 8002bf0:	1dbb      	adds	r3, r7, #6
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	480d      	ldr	r0, [pc, #52]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002bf6:	f7fe fe0f 	bl	8001818 <lis2dw12_reset_get>
  } while (rst);
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f7      	bne.n	8002bf0 <LIS2DW12_Init+0x48>

  /* Enable Block Data Update */
  lis2dw12_block_data_update_set(&lis2dw12_ctx, PROPERTY_ENABLE);
 8002c00:	2101      	movs	r1, #1
 8002c02:	480a      	ldr	r0, [pc, #40]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002c04:	f7fe fd27 	bl	8001656 <lis2dw12_block_data_update_set>
  /* Mode 0: Absolute Lowest Power - 1.6 Hz ODR, continuous low power mode 2 */
  lis2dw12_data_rate_set(&lis2dw12_ctx, LIS2DW12_XL_ODR_1Hz6_LP_ONLY);
  lis2dw12_power_mode_set(&lis2dw12_ctx, LIS2DW12_CONT_LOW_PWR_2);  // Lowest continuous power mode
#elif (IMU_PERFORMANCE_MODE == 1)
  /* Mode 1: Moderate Performance - 50 Hz ODR, low power 12-bit mode */
  lis2dw12_data_rate_set(&lis2dw12_ctx, LIS2DW12_XL_ODR_50Hz);
 8002c08:	2104      	movs	r1, #4
 8002c0a:	4808      	ldr	r0, [pc, #32]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002c0c:	f7fe fcde 	bl	80015cc <lis2dw12_data_rate_set>
  lis2dw12_power_mode_set(&lis2dw12_ctx, LIS2DW12_CONT_LOW_PWR_12bit);  // Low power with 12-bit resolution
 8002c10:	2100      	movs	r1, #0
 8002c12:	4806      	ldr	r0, [pc, #24]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002c14:	f7fe fc8c 	bl	8001530 <lis2dw12_power_mode_set>
  lis2dw12_data_rate_set(&lis2dw12_ctx, LIS2DW12_XL_ODR_1k6Hz);
  lis2dw12_power_mode_set(&lis2dw12_ctx, LIS2DW12_HIGH_PERFORMANCE);
#endif

  /* Set full-scale range */
  lis2dw12_full_scale_set(&lis2dw12_ctx, LIS2DW12_4g);
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4804      	ldr	r0, [pc, #16]	@ (8002c2c <LIS2DW12_Init+0x84>)
 8002c1c:	f7fe fd41 	bl	80016a2 <lis2dw12_full_scale_set>

  return 1;  // Initialization successful
 8002c20:	2301      	movs	r3, #1
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200003e4 	.word	0x200003e4
 8002c30:	08002a25 	.word	0x08002a25
 8002c34:	08002a75 	.word	0x08002a75
 8002c38:	08004675 	.word	0x08004675

08002c3c <LSM6DSV_ReadData>:
#if ENABLE_LSM6DSV
/**
 * @brief  Read data from LSM6DSV (Accelerometer + Gyroscope)
 */
static void LSM6DSV_ReadData(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  lsm6dsv_all_sources_t status;

  /* Check if new data is available */
  lsm6dsv_all_sources_get(&lsm6dsv_ctx, &status);
 8002c42:	463b      	mov	r3, r7
 8002c44:	4619      	mov	r1, r3
 8002c46:	480d      	ldr	r0, [pc, #52]	@ (8002c7c <LSM6DSV_ReadData+0x40>)
 8002c48:	f7ff f8df 	bl	8001e0a <lsm6dsv_all_sources_get>

  if (status.drdy_xl || status.drdy_gy)
 8002c4c:	783b      	ldrb	r3, [r7, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <LSM6DSV_ReadData+0x28>
 8002c58:	783b      	ldrb	r3, [r7, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <LSM6DSV_ReadData+0x38>
  {
    /* Read accelerometer and gyroscope data (6 bytes each) */
    lsm6dsv_acceleration_raw_get(&lsm6dsv_ctx, lsm6dsv_accel_raw);
 8002c64:	4906      	ldr	r1, [pc, #24]	@ (8002c80 <LSM6DSV_ReadData+0x44>)
 8002c66:	4805      	ldr	r0, [pc, #20]	@ (8002c7c <LSM6DSV_ReadData+0x40>)
 8002c68:	f7ff fc0f 	bl	800248a <lsm6dsv_acceleration_raw_get>
    lsm6dsv_angular_rate_raw_get(&lsm6dsv_ctx, lsm6dsv_gyro_raw);
 8002c6c:	4905      	ldr	r1, [pc, #20]	@ (8002c84 <LSM6DSV_ReadData+0x48>)
 8002c6e:	4803      	ldr	r0, [pc, #12]	@ (8002c7c <LSM6DSV_ReadData+0x40>)
 8002c70:	f7ff fbbe 	bl	80023f0 <lsm6dsv_angular_rate_raw_get>
  }
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200003d0 	.word	0x200003d0
 8002c80:	20000404 	.word	0x20000404
 8002c84:	2000040c 	.word	0x2000040c

08002c88 <LSM6DSV_ReadSFLP>:
#if ENABLE_LSM6DSV_SENSOR_FUSION
/**
 * @brief  Read SFLP (Sensor Fusion) data from LSM6DSV FIFO
 */
static void LSM6DSV_ReadSFLP(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
  lsm6dsv_fifo_status_t fifo_status;
  lsm6dsv_fifo_out_raw_t fifo_data;
  uint16_t fifo_level;

  /* Get FIFO status */
  lsm6dsv_fifo_status_get(&lsm6dsv_ctx, &fifo_status);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	484f      	ldr	r0, [pc, #316]	@ (8002dd4 <LSM6DSV_ReadSFLP+0x14c>)
 8002c96:	f7ff fc6b 	bl	8002570 <lsm6dsv_fifo_status_get>
  fifo_level = fifo_status.fifo_level;
 8002c9a:	8abb      	ldrh	r3, [r7, #20]
 8002c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	83fb      	strh	r3, [r7, #30]

  /* Read FIFO data and look for SFLP game rotation vector tag */
  while (fifo_level > 0)
 8002ca4:	e08c      	b.n	8002dc0 <LSM6DSV_ReadSFLP+0x138>
  {
    /* Read one FIFO entry (7 bytes: 1 tag + 6 data) */
    lsm6dsv_fifo_out_raw_get(&lsm6dsv_ctx, &fifo_data);
 8002ca6:	f107 030c 	add.w	r3, r7, #12
 8002caa:	4619      	mov	r1, r3
 8002cac:	4849      	ldr	r0, [pc, #292]	@ (8002dd4 <LSM6DSV_ReadSFLP+0x14c>)
 8002cae:	f7ff fcc1 	bl	8002634 <lsm6dsv_fifo_out_raw_get>
    fifo_level--;
 8002cb2:	8bfb      	ldrh	r3, [r7, #30]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	83fb      	strh	r3, [r7, #30]

    /* Check if this is SFLP game rotation vector data (tag 0x13) */
    if (fifo_data.tag == LSM6DSV_SFLP_GAME_ROTATION_VECTOR_TAG)
 8002cb8:	7b3b      	ldrb	r3, [r7, #12]
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b13      	cmp	r3, #19
 8002cc2:	d17d      	bne.n	8002dc0 <LSM6DSV_ReadSFLP+0x138>
       * Values are normalized such that sqrt(x^2 + y^2 + z^2 + w^2) = 1
       */
      int16_t quat_raw[3];

      /* Extract 16-bit quaternion components (little-endian) */
      quat_raw[0] = (int16_t)(fifo_data.data[1] << 8) | fifo_data.data[0];  // x
 8002cc4:	7bbb      	ldrb	r3, [r7, #14]
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	7b7b      	ldrb	r3, [r7, #13]
 8002cce:	b21b      	sxth	r3, r3
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	80bb      	strh	r3, [r7, #4]
      quat_raw[1] = (int16_t)(fifo_data.data[3] << 8) | fifo_data.data[2];  // y
 8002cd6:	7c3b      	ldrb	r3, [r7, #16]
 8002cd8:	b21b      	sxth	r3, r3
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	b21a      	sxth	r2, r3
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	80fb      	strh	r3, [r7, #6]
      quat_raw[2] = (int16_t)(fifo_data.data[5] << 8) | fifo_data.data[4];  // z
 8002ce8:	7cbb      	ldrb	r3, [r7, #18]
 8002cea:	b21b      	sxth	r3, r3
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	b21a      	sxth	r2, r3
 8002cf0:	7c7b      	ldrb	r3, [r7, #17]
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	813b      	strh	r3, [r7, #8]

      /* Convert to float (normalized to ±1, scale factor is 2^14 = 16384) */
      lsm6dsv_quat[1] = (float)quat_raw[0] / 16384.0f;  // x
 8002cfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d06:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8002dd8 <LSM6DSV_ReadSFLP+0x150>
 8002d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0e:	4b33      	ldr	r3, [pc, #204]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002d10:	edc3 7a01 	vstr	s15, [r3, #4]
      lsm6dsv_quat[2] = (float)quat_raw[1] / 16384.0f;  // y
 8002d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d20:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002dd8 <LSM6DSV_ReadSFLP+0x150>
 8002d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d28:	4b2c      	ldr	r3, [pc, #176]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002d2a:	edc3 7a02 	vstr	s15, [r3, #8]
      lsm6dsv_quat[3] = (float)quat_raw[2] / 16384.0f;  // z
 8002d2e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d3a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002dd8 <LSM6DSV_ReadSFLP+0x150>
 8002d3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d42:	4b26      	ldr	r3, [pc, #152]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002d44:	edc3 7a03 	vstr	s15, [r3, #12]

      /* Calculate w component: w = sqrt(1 - x^2 - y^2 - z^2) */
      float sum_sq = lsm6dsv_quat[1] * lsm6dsv_quat[1] +
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002d4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d4e:	4b23      	ldr	r3, [pc, #140]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002d50:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d54:	ee27 7a27 	vmul.f32	s14, s14, s15
                     lsm6dsv_quat[2] * lsm6dsv_quat[2] +
 8002d58:	4b20      	ldr	r3, [pc, #128]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002d5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002d60:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
      float sum_sq = lsm6dsv_quat[1] * lsm6dsv_quat[1] +
 8002d68:	ee37 7a27 	vadd.f32	s14, s14, s15
                     lsm6dsv_quat[3] * lsm6dsv_quat[3];
 8002d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002d6e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002d72:	4b1a      	ldr	r3, [pc, #104]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002d74:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
      float sum_sq = lsm6dsv_quat[1] * lsm6dsv_quat[1] +
 8002d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d80:	edc7 7a06 	vstr	s15, [r7, #24]

      if (sum_sq < 1.0f)
 8002d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	d50f      	bpl.n	8002db6 <LSM6DSV_ReadSFLP+0x12e>
      {
        lsm6dsv_quat[0] = sqrtf(1.0f - sum_sq);  // w
 8002d96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da2:	eeb0 0a67 	vmov.f32	s0, s15
 8002da6:	f00e f8d3 	bl	8010f50 <sqrtf>
 8002daa:	eef0 7a40 	vmov.f32	s15, s0
 8002dae:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002db0:	edc3 7a00 	vstr	s15, [r3]
      {
        lsm6dsv_quat[0] = 0.0f;  // Handle edge case
      }

      /* We found and processed the SFLP data, can break */
      break;
 8002db4:	e009      	b.n	8002dca <LSM6DSV_ReadSFLP+0x142>
        lsm6dsv_quat[0] = 0.0f;  // Handle edge case
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <LSM6DSV_ReadSFLP+0x154>)
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
      break;
 8002dbe:	e004      	b.n	8002dca <LSM6DSV_ReadSFLP+0x142>
  while (fifo_level > 0)
 8002dc0:	8bfb      	ldrh	r3, [r7, #30]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f47f af6f 	bne.w	8002ca6 <LSM6DSV_ReadSFLP+0x1e>
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200003d0 	.word	0x200003d0
 8002dd8:	46800000 	.word	0x46800000
 8002ddc:	20000414 	.word	0x20000414

08002de0 <LIS2DW12_ReadData>:
#if ENABLE_LIS2DW12
/**
 * @brief  Read data from LIS2DW12 (Accelerometer)
 */
static void LIS2DW12_ReadData(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
  lis2dw12_status_t status;

  /* Check if new data is available */
  lis2dw12_status_reg_get(&lis2dw12_ctx, &status);
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4808      	ldr	r0, [pc, #32]	@ (8002e0c <LIS2DW12_ReadData+0x2c>)
 8002dec:	f7fe fc7f 	bl	80016ee <lis2dw12_status_reg_get>

  if (status.drdy)
 8002df0:	793b      	ldrb	r3, [r7, #4]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <LIS2DW12_ReadData+0x24>
  {
    /* Read accelerometer data */
    lis2dw12_acceleration_raw_get(&lis2dw12_ctx, lis2dw12_accel_raw);
 8002dfc:	4904      	ldr	r1, [pc, #16]	@ (8002e10 <LIS2DW12_ReadData+0x30>)
 8002dfe:	4803      	ldr	r0, [pc, #12]	@ (8002e0c <LIS2DW12_ReadData+0x2c>)
 8002e00:	f7fe fc86 	bl	8001710 <lis2dw12_acceleration_raw_get>
  }
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200003e4 	.word	0x200003e4
 8002e10:	20000424 	.word	0x20000424

08002e14 <ADXL362_ReadDataWrapper>:

/**
 * @brief  Read data from ADXL362 (Accelerometer via SPI)
 */
static void ADXL362_ReadDataWrapper(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* ADXL362 sampling rate depends on IMU_PERFORMANCE_MODE:
   * Mode 0: Wakeup mode (6 Hz, ultralow noise)
   * Mode 1: Measurement mode (100 Hz, normal noise) */
  /* Using full 12-bit resolution from 16-bit registers */
  ADXL362_ReadData(&adxl362_ctx, adxl362_accel_raw);
 8002e18:	4902      	ldr	r1, [pc, #8]	@ (8002e24 <ADXL362_ReadDataWrapper+0x10>)
 8002e1a:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <ADXL362_ReadDataWrapper+0x14>)
 8002e1c:	f7fe fac4 	bl	80013a8 <ADXL362_ReadData>
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000042c 	.word	0x2000042c
 8002e28:	200003f8 	.word	0x200003f8

08002e2c <Get_Microseconds>:
/**
 * @brief  Get microsecond timestamp from TIM2
 * @retval Current timestamp in microseconds
 */
static uint32_t Get_Microseconds(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return __HAL_TIM_GET_COUNTER(&htim2);
 8002e30:	4b03      	ldr	r3, [pc, #12]	@ (8002e40 <Get_Microseconds+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	200002ec 	.word	0x200002ec

08002e44 <tx_com>:
 * @brief  Transmit data via UART (USART1 at 1Mbit)
 * @param  tx_buffer: Pointer to data buffer
 * @param  len: Number of bytes to transmit
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart1, tx_buffer, len, HAL_MAX_DELAY);
 8002e50:	887a      	ldrh	r2, [r7, #2]
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4803      	ldr	r0, [pc, #12]	@ (8002e68 <tx_com+0x24>)
 8002e5a:	f008 ff61 	bl	800bd20 <HAL_UART_Transmit>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000338 	.word	0x20000338

08002e6c <I2C_Scan>:

/**
 * @brief  Scan I2C bus for devices and print results
 */
static void I2C_Scan(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b0a2      	sub	sp, #136	@ 0x88
 8002e70:	af00      	add	r7, sp, #0
  char buffer[128];
  uint8_t devices_found = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

  snprintf(buffer, sizeof(buffer), "\r\n=== I2C Bus Scan ===\r\n");
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	4a68      	ldr	r2, [pc, #416]	@ (800301c <I2C_Scan+0x1b0>)
 8002e7c:	2180      	movs	r1, #128	@ 0x80
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f00a fb12 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd fa02 	bl	8000290 <strlen>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ffd5 	bl	8002e44 <tx_com>

  snprintf(buffer, sizeof(buffer), "Scanning I2C2 (0x08 to 0x77)...\r\n");
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	4a60      	ldr	r2, [pc, #384]	@ (8003020 <I2C_Scan+0x1b4>)
 8002e9e:	2180      	movs	r1, #128	@ 0x80
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f00a fb01 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd f9f1 	bl	8000290 <strlen>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ffc4 	bl	8002e44 <tx_com>

  for (uint8_t addr = 0x08; addr <= 0x77; addr++)
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002ec2:	e069      	b.n	8002f98 <I2C_Scan+0x12c>
  {
    /* Try to communicate with device at this address */
    if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 1, 10) == HAL_OK)
 8002ec4:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	b299      	uxth	r1, r3
 8002ece:	230a      	movs	r3, #10
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4854      	ldr	r0, [pc, #336]	@ (8003024 <I2C_Scan+0x1b8>)
 8002ed4:	f002 fad0 	bl	8005478 <HAL_I2C_IsDeviceReady>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d157      	bne.n	8002f8e <I2C_Scan+0x122>
    {
      snprintf(buffer, sizeof(buffer), "  Found device at 0x%02X", addr);
 8002ede:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002ee2:	1d38      	adds	r0, r7, #4
 8002ee4:	4a50      	ldr	r2, [pc, #320]	@ (8003028 <I2C_Scan+0x1bc>)
 8002ee6:	2180      	movs	r1, #128	@ 0x80
 8002ee8:	f00a fade 	bl	800d4a8 <sniprintf>
      tx_com((uint8_t*)buffer, strlen(buffer));
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd f9ce 	bl	8000290 <strlen>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ffa1 	bl	8002e44 <tx_com>

      /* Identify known devices */
      if (addr == 0x6B)
 8002f02:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002f06:	2b6b      	cmp	r3, #107	@ 0x6b
 8002f08:	d106      	bne.n	8002f18 <I2C_Scan+0xac>
      {
        snprintf(buffer, sizeof(buffer), " (LSM6DSV - 6-axis IMU)\r\n");
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	4a47      	ldr	r2, [pc, #284]	@ (800302c <I2C_Scan+0x1c0>)
 8002f0e:	2180      	movs	r1, #128	@ 0x80
 8002f10:	4618      	mov	r0, r3
 8002f12:	f00a fac9 	bl	800d4a8 <sniprintf>
 8002f16:	e02a      	b.n	8002f6e <I2C_Scan+0x102>
      }
      else if (addr == 0x19)
 8002f18:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002f1c:	2b19      	cmp	r3, #25
 8002f1e:	d106      	bne.n	8002f2e <I2C_Scan+0xc2>
      {
        snprintf(buffer, sizeof(buffer), " (LIS2DW12 - 3-axis Accel)\r\n");
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	4a43      	ldr	r2, [pc, #268]	@ (8003030 <I2C_Scan+0x1c4>)
 8002f24:	2180      	movs	r1, #128	@ 0x80
 8002f26:	4618      	mov	r0, r3
 8002f28:	f00a fabe 	bl	800d4a8 <sniprintf>
 8002f2c:	e01f      	b.n	8002f6e <I2C_Scan+0x102>
      }
      else if (addr == 0x6A || addr == 0x6C)
 8002f2e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002f32:	2b6a      	cmp	r3, #106	@ 0x6a
 8002f34:	d003      	beq.n	8002f3e <I2C_Scan+0xd2>
 8002f36:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002f3a:	2b6c      	cmp	r3, #108	@ 0x6c
 8002f3c:	d106      	bne.n	8002f4c <I2C_Scan+0xe0>
      {
        snprintf(buffer, sizeof(buffer), " (LSM6DSV/LSM6DSOX - 6-axis IMU)\r\n");
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	4a3c      	ldr	r2, [pc, #240]	@ (8003034 <I2C_Scan+0x1c8>)
 8002f42:	2180      	movs	r1, #128	@ 0x80
 8002f44:	4618      	mov	r0, r3
 8002f46:	f00a faaf 	bl	800d4a8 <sniprintf>
 8002f4a:	e010      	b.n	8002f6e <I2C_Scan+0x102>
      }
      else if (addr == 0x18)
 8002f4c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002f50:	2b18      	cmp	r3, #24
 8002f52:	d106      	bne.n	8002f62 <I2C_Scan+0xf6>
      {
        snprintf(buffer, sizeof(buffer), " (Possible LIS2DW12 alternate)\r\n");
 8002f54:	1d3b      	adds	r3, r7, #4
 8002f56:	4a38      	ldr	r2, [pc, #224]	@ (8003038 <I2C_Scan+0x1cc>)
 8002f58:	2180      	movs	r1, #128	@ 0x80
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f00a faa4 	bl	800d4a8 <sniprintf>
 8002f60:	e005      	b.n	8002f6e <I2C_Scan+0x102>
      }
      else
      {
        snprintf(buffer, sizeof(buffer), " (Unknown device)\r\n");
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	4a35      	ldr	r2, [pc, #212]	@ (800303c <I2C_Scan+0x1d0>)
 8002f66:	2180      	movs	r1, #128	@ 0x80
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f00a fa9d 	bl	800d4a8 <sniprintf>
      }
      tx_com((uint8_t*)buffer, strlen(buffer));
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd f98d 	bl	8000290 <strlen>
 8002f76:	4603      	mov	r3, r0
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff60 	bl	8002e44 <tx_com>
      devices_found++;
 8002f84:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  for (uint8_t addr = 0x08; addr <= 0x77; addr++)
 8002f8e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002f92:	3301      	adds	r3, #1
 8002f94:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002f98:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002f9c:	2b77      	cmp	r3, #119	@ 0x77
 8002f9e:	d991      	bls.n	8002ec4 <I2C_Scan+0x58>
    }
  }

  if (devices_found == 0)
 8002fa0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d111      	bne.n	8002fcc <I2C_Scan+0x160>
  {
    snprintf(buffer, sizeof(buffer), "  No I2C devices found!\r\n");
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	4a25      	ldr	r2, [pc, #148]	@ (8003040 <I2C_Scan+0x1d4>)
 8002fac:	2180      	movs	r1, #128	@ 0x80
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f00a fa7a 	bl	800d4a8 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd f96a 	bl	8000290 <strlen>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff3d 	bl	8002e44 <tx_com>
 8002fca:	e011      	b.n	8002ff0 <I2C_Scan+0x184>
  }
  else
  {
    snprintf(buffer, sizeof(buffer), "\r\nTotal devices found: %d\r\n", devices_found);
 8002fcc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002fd0:	1d38      	adds	r0, r7, #4
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003044 <I2C_Scan+0x1d8>)
 8002fd4:	2180      	movs	r1, #128	@ 0x80
 8002fd6:	f00a fa67 	bl	800d4a8 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd f957 	bl	8000290 <strlen>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ff2a 	bl	8002e44 <tx_com>
  }

  snprintf(buffer, sizeof(buffer), "===================\r\n\r\n");
 8002ff0:	1d3b      	adds	r3, r7, #4
 8002ff2:	4a15      	ldr	r2, [pc, #84]	@ (8003048 <I2C_Scan+0x1dc>)
 8002ff4:	2180      	movs	r1, #128	@ 0x80
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f00a fa56 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd f946 	bl	8000290 <strlen>
 8003004:	4603      	mov	r3, r0
 8003006:	b29a      	uxth	r2, r3
 8003008:	1d3b      	adds	r3, r7, #4
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff19 	bl	8002e44 <tx_com>
}
 8003012:	bf00      	nop
 8003014:	3788      	adds	r7, #136	@ 0x88
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	08010fb0 	.word	0x08010fb0
 8003020:	08010fcc 	.word	0x08010fcc
 8003024:	20000208 	.word	0x20000208
 8003028:	08010ff0 	.word	0x08010ff0
 800302c:	0801100c 	.word	0x0801100c
 8003030:	08011028 	.word	0x08011028
 8003034:	08011048 	.word	0x08011048
 8003038:	0801106c 	.word	0x0801106c
 800303c:	08011090 	.word	0x08011090
 8003040:	080110a4 	.word	0x080110a4
 8003044:	080110c0 	.word	0x080110c0
 8003048:	080110dc 	.word	0x080110dc

0800304c <Print_IMU_Data>:
/**
 * @brief  Print IMU data with timestamp in selected format
 * @note   Each IMU outputs its own line with format: IMU_ID,timestamp,data...
 */
static void Print_IMU_Data(void)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b0de      	sub	sp, #376	@ 0x178
 8003052:	af0c      	add	r7, sp, #48	@ 0x30
  char buffer[256];
  uint32_t timestamp = Get_Microseconds();
 8003054:	f7ff feea 	bl	8002e2c <Get_Microseconds>
 8003058:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
#if (OUTPUT_FORMAT == 0)
  /* CSV Format - one line per IMU with identifier */

#if ENABLE_LSM6DSV
  /* LSM6DSV output: LSM6DSV,timestamp,ax,ay,az,gx,gy,gz */
  if (imu_status.lsm6dsv_present)
 800305c:	4baa      	ldr	r3, [pc, #680]	@ (8003308 <Print_IMU_Data+0x2bc>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80b4 	beq.w	80031ce <Print_IMU_Data+0x182>
  {
    float lsm_ax = lsm6dsv_from_fs4_to_mg(lsm6dsv_accel_raw[0]);
 8003066:	4ba9      	ldr	r3, [pc, #676]	@ (800330c <Print_IMU_Data+0x2c0>)
 8003068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fc43 	bl	80018f8 <lsm6dsv_from_fs4_to_mg>
 8003072:	ed87 0a50 	vstr	s0, [r7, #320]	@ 0x140
    float lsm_ay = lsm6dsv_from_fs4_to_mg(lsm6dsv_accel_raw[1]);
 8003076:	4ba5      	ldr	r3, [pc, #660]	@ (800330c <Print_IMU_Data+0x2c0>)
 8003078:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fc3b 	bl	80018f8 <lsm6dsv_from_fs4_to_mg>
 8003082:	ed87 0a4f 	vstr	s0, [r7, #316]	@ 0x13c
    float lsm_az = lsm6dsv_from_fs4_to_mg(lsm6dsv_accel_raw[2]);
 8003086:	4ba1      	ldr	r3, [pc, #644]	@ (800330c <Print_IMU_Data+0x2c0>)
 8003088:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fc33 	bl	80018f8 <lsm6dsv_from_fs4_to_mg>
 8003092:	ed87 0a4e 	vstr	s0, [r7, #312]	@ 0x138
    float lsm_gx = lsm6dsv_from_fs2000_to_mdps(lsm6dsv_gyro_raw[0]);
 8003096:	4b9e      	ldr	r3, [pc, #632]	@ (8003310 <Print_IMU_Data+0x2c4>)
 8003098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fc43 	bl	8001928 <lsm6dsv_from_fs2000_to_mdps>
 80030a2:	ed87 0a4d 	vstr	s0, [r7, #308]	@ 0x134
    float lsm_gy = lsm6dsv_from_fs2000_to_mdps(lsm6dsv_gyro_raw[1]);
 80030a6:	4b9a      	ldr	r3, [pc, #616]	@ (8003310 <Print_IMU_Data+0x2c4>)
 80030a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe fc3b 	bl	8001928 <lsm6dsv_from_fs2000_to_mdps>
 80030b2:	ed87 0a4c 	vstr	s0, [r7, #304]	@ 0x130
    float lsm_gz = lsm6dsv_from_fs2000_to_mdps(lsm6dsv_gyro_raw[2]);
 80030b6:	4b96      	ldr	r3, [pc, #600]	@ (8003310 <Print_IMU_Data+0x2c4>)
 80030b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fc33 	bl	8001928 <lsm6dsv_from_fs2000_to_mdps>
 80030c2:	ed87 0a4b 	vstr	s0, [r7, #300]	@ 0x12c

    snprintf(buffer, sizeof(buffer),
 80030c6:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 80030ca:	f7fd fa4d 	bl	8000568 <__aeabi_f2d>
 80030ce:	4604      	mov	r4, r0
 80030d0:	460d      	mov	r5, r1
 80030d2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80030d6:	f7fd fa47 	bl	8000568 <__aeabi_f2d>
 80030da:	4680      	mov	r8, r0
 80030dc:	4689      	mov	r9, r1
 80030de:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80030e2:	f7fd fa41 	bl	8000568 <__aeabi_f2d>
 80030e6:	4682      	mov	sl, r0
 80030e8:	468b      	mov	fp, r1
 80030ea:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80030ee:	f7fd fa3b 	bl	8000568 <__aeabi_f2d>
 80030f2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80030f6:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80030fa:	f7fd fa35 	bl	8000568 <__aeabi_f2d>
 80030fe:	e9c7 0100 	strd	r0, r1, [r7]
 8003102:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8003106:	f7fd fa2f 	bl	8000568 <__aeabi_f2d>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	f107 0014 	add.w	r0, r7, #20
 8003112:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003116:	ed97 7b00 	vldr	d7, [r7]
 800311a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800311e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003122:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003126:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800312a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800312e:	e9cd 4500 	strd	r4, r5, [sp]
 8003132:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003136:	4a77      	ldr	r2, [pc, #476]	@ (8003314 <Print_IMU_Data+0x2c8>)
 8003138:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800313c:	f00a f9b4 	bl	800d4a8 <sniprintf>
             "LSM6DSV,%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n",
             timestamp, lsm_ax, lsm_ay, lsm_az, lsm_gx, lsm_gy, lsm_gz);
    tx_com((uint8_t*)buffer, strlen(buffer));
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd f8a3 	bl	8000290 <strlen>
 800314a:	4603      	mov	r3, r0
 800314c:	b29a      	uxth	r2, r3
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fe75 	bl	8002e44 <tx_com>

#if ENABLE_LSM6DSV_SENSOR_FUSION
    /* LSM6DSV_SFLP output: LSM6DSV_SFLP,timestamp,qw,qx,qy,qz */
    snprintf(buffer, sizeof(buffer),
             "LSM6DSV_SFLP,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
             timestamp, lsm6dsv_quat[0], lsm6dsv_quat[1], lsm6dsv_quat[2], lsm6dsv_quat[3]);
 800315a:	4b6f      	ldr	r3, [pc, #444]	@ (8003318 <Print_IMU_Data+0x2cc>)
 800315c:	681b      	ldr	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer),
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd fa02 	bl	8000568 <__aeabi_f2d>
 8003164:	4604      	mov	r4, r0
 8003166:	460d      	mov	r5, r1
             timestamp, lsm6dsv_quat[0], lsm6dsv_quat[1], lsm6dsv_quat[2], lsm6dsv_quat[3]);
 8003168:	4b6b      	ldr	r3, [pc, #428]	@ (8003318 <Print_IMU_Data+0x2cc>)
 800316a:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer),
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f9fb 	bl	8000568 <__aeabi_f2d>
 8003172:	4680      	mov	r8, r0
 8003174:	4689      	mov	r9, r1
             timestamp, lsm6dsv_quat[0], lsm6dsv_quat[1], lsm6dsv_quat[2], lsm6dsv_quat[3]);
 8003176:	4b68      	ldr	r3, [pc, #416]	@ (8003318 <Print_IMU_Data+0x2cc>)
 8003178:	689b      	ldr	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer),
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd f9f4 	bl	8000568 <__aeabi_f2d>
 8003180:	4682      	mov	sl, r0
 8003182:	468b      	mov	fp, r1
             timestamp, lsm6dsv_quat[0], lsm6dsv_quat[1], lsm6dsv_quat[2], lsm6dsv_quat[3]);
 8003184:	4b64      	ldr	r3, [pc, #400]	@ (8003318 <Print_IMU_Data+0x2cc>)
 8003186:	68db      	ldr	r3, [r3, #12]
    snprintf(buffer, sizeof(buffer),
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd f9ed 	bl	8000568 <__aeabi_f2d>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	f107 0014 	add.w	r0, r7, #20
 8003196:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800319a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800319e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80031a2:	e9cd 4500 	strd	r4, r5, [sp]
 80031a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80031aa:	4a5c      	ldr	r2, [pc, #368]	@ (800331c <Print_IMU_Data+0x2d0>)
 80031ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031b0:	f00a f97a 	bl	800d4a8 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f869 	bl	8000290 <strlen>
 80031be:	4603      	mov	r3, r0
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fe3b 	bl	8002e44 <tx_com>
  }
#endif

#if ENABLE_LIS2DW12
  /* LIS2DW12 output: LIS2DW12,timestamp,ax,ay,az */
  if (imu_status.lis2dw12_present)
 80031ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003308 <Print_IMU_Data+0x2bc>)
 80031d0:	789b      	ldrb	r3, [r3, #2]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d045      	beq.n	8003262 <Print_IMU_Data+0x216>
  {
    float lis_ax = lis2dw12_from_fs4_to_mg(lis2dw12_accel_raw[0]);
 80031d6:	4b52      	ldr	r3, [pc, #328]	@ (8003320 <Print_IMU_Data+0x2d4>)
 80031d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe f98f 	bl	8001500 <lis2dw12_from_fs4_to_mg>
 80031e2:	ed87 0a4a 	vstr	s0, [r7, #296]	@ 0x128
    float lis_ay = lis2dw12_from_fs4_to_mg(lis2dw12_accel_raw[1]);
 80031e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003320 <Print_IMU_Data+0x2d4>)
 80031e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe f987 	bl	8001500 <lis2dw12_from_fs4_to_mg>
 80031f2:	ed87 0a49 	vstr	s0, [r7, #292]	@ 0x124
    float lis_az = lis2dw12_from_fs4_to_mg(lis2dw12_accel_raw[2]);
 80031f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003320 <Print_IMU_Data+0x2d4>)
 80031f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe f97f 	bl	8001500 <lis2dw12_from_fs4_to_mg>
 8003202:	ed87 0a48 	vstr	s0, [r7, #288]	@ 0x120

    snprintf(buffer, sizeof(buffer),
 8003206:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800320a:	f7fd f9ad 	bl	8000568 <__aeabi_f2d>
 800320e:	4604      	mov	r4, r0
 8003210:	460d      	mov	r5, r1
 8003212:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8003216:	f7fd f9a7 	bl	8000568 <__aeabi_f2d>
 800321a:	4680      	mov	r8, r0
 800321c:	4689      	mov	r9, r1
 800321e:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8003222:	f7fd f9a1 	bl	8000568 <__aeabi_f2d>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	f107 0014 	add.w	r0, r7, #20
 800322e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003232:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003236:	e9cd 4500 	strd	r4, r5, [sp]
 800323a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800323e:	4a39      	ldr	r2, [pc, #228]	@ (8003324 <Print_IMU_Data+0x2d8>)
 8003240:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003244:	f00a f930 	bl	800d4a8 <sniprintf>
             "LIS2DW12,%lu,%.2f,%.2f,%.2f\r\n",
             timestamp, lis_ax, lis_ay, lis_az);
    tx_com((uint8_t*)buffer, strlen(buffer));
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd f81f 	bl	8000290 <strlen>
 8003252:	4603      	mov	r3, r0
 8003254:	b29a      	uxth	r2, r3
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fdf1 	bl	8002e44 <tx_com>
  }
#endif

  /* ADXL362 output: ADXL362,timestamp,ax,ay,az */
  if (imu_status.adxl362_present)
 8003262:	4b29      	ldr	r3, [pc, #164]	@ (8003308 <Print_IMU_Data+0x2bc>)
 8003264:	78db      	ldrb	r3, [r3, #3]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d048      	beq.n	80032fc <Print_IMU_Data+0x2b0>
  {
    float adxl_ax = ADXL362_RawToMg(adxl362_accel_raw[0], ADXL362_RANGE_2G);
 800326a:	4b2f      	ldr	r3, [pc, #188]	@ (8003328 <Print_IMU_Data+0x2dc>)
 800326c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe f8d4 	bl	8001420 <ADXL362_RawToMg>
 8003278:	ed87 0a47 	vstr	s0, [r7, #284]	@ 0x11c
    float adxl_ay = ADXL362_RawToMg(adxl362_accel_raw[1], ADXL362_RANGE_2G);
 800327c:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <Print_IMU_Data+0x2dc>)
 800327e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe f8cb 	bl	8001420 <ADXL362_RawToMg>
 800328a:	ed87 0a46 	vstr	s0, [r7, #280]	@ 0x118
    float adxl_az = ADXL362_RawToMg(adxl362_accel_raw[2], ADXL362_RANGE_2G);
 800328e:	4b26      	ldr	r3, [pc, #152]	@ (8003328 <Print_IMU_Data+0x2dc>)
 8003290:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe f8c2 	bl	8001420 <ADXL362_RawToMg>
 800329c:	ed87 0a45 	vstr	s0, [r7, #276]	@ 0x114

    snprintf(buffer, sizeof(buffer),
 80032a0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80032a4:	f7fd f960 	bl	8000568 <__aeabi_f2d>
 80032a8:	4604      	mov	r4, r0
 80032aa:	460d      	mov	r5, r1
 80032ac:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80032b0:	f7fd f95a 	bl	8000568 <__aeabi_f2d>
 80032b4:	4680      	mov	r8, r0
 80032b6:	4689      	mov	r9, r1
 80032b8:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80032bc:	f7fd f954 	bl	8000568 <__aeabi_f2d>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	f107 0014 	add.w	r0, r7, #20
 80032c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032cc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80032d0:	e9cd 4500 	strd	r4, r5, [sp]
 80032d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80032d8:	4a14      	ldr	r2, [pc, #80]	@ (800332c <Print_IMU_Data+0x2e0>)
 80032da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032de:	f00a f8e3 	bl	800d4a8 <sniprintf>
             "ADXL362,%lu,%.2f,%.2f,%.2f\r\n",
             timestamp, adxl_ax, adxl_ay, adxl_az);
    tx_com((uint8_t*)buffer, strlen(buffer));
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fc ffd2 	bl	8000290 <strlen>
 80032ec:	4603      	mov	r3, r0
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fda4 	bl	8002e44 <tx_com>
             timestamp, adxl_ax, adxl_ay, adxl_az);
    tx_com((uint8_t*)buffer, strlen(buffer));
  }

#endif
}
 80032fc:	bf00      	nop
 80032fe:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8003302:	46bd      	mov	sp, r7
 8003304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003308:	200003cc 	.word	0x200003cc
 800330c:	20000404 	.word	0x20000404
 8003310:	2000040c 	.word	0x2000040c
 8003314:	080110f4 	.word	0x080110f4
 8003318:	20000414 	.word	0x20000414
 800331c:	08011120 	.word	0x08011120
 8003320:	20000424 	.word	0x20000424
 8003324:	08011148 	.word	0x08011148
 8003328:	2000042c 	.word	0x2000042c
 800332c:	08011168 	.word	0x08011168

08003330 <__io_putchar>:
 * @note   This enables printf() to work via USART1 at 1Mbit
 */
#ifdef __GNUC__
/* For GCC/G++ compiler */
int __io_putchar(int ch)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003338:	1d39      	adds	r1, r7, #4
 800333a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800333e:	2201      	movs	r2, #1
 8003340:	4803      	ldr	r0, [pc, #12]	@ (8003350 <__io_putchar+0x20>)
 8003342:	f008 fced 	bl	800bd20 <HAL_UART_Transmit>
  return ch;
 8003346:	687b      	ldr	r3, [r7, #4]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000338 	.word	0x20000338

08003354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b0c2      	sub	sp, #264	@ 0x108
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800335a:	f001 f8c5 	bl	80044e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800335e:	f000 fa86 	bl	800386e <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8003362:	f000 fa3d 	bl	80037e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003366:	f000 fbf1 	bl	8003b4c <MX_GPIO_Init>
  MX_ICACHE_Init();
 800336a:	f000 facf 	bl	800390c <MX_ICACHE_Init>
  MX_I2C2_Init();
 800336e:	f000 fa8d 	bl	800388c <MX_I2C2_Init>
  MX_TIM2_Init();
 8003372:	f000 fb4f 	bl	8003a14 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003376:	f000 fadd 	bl	8003934 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800337a:	f000 fb99 	bl	8003ab0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Set ADXL362 CS pin HIGH (idle state) - must be done after GPIO init */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800337e:	2201      	movs	r2, #1
 8003380:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003384:	48b1      	ldr	r0, [pc, #708]	@ (800364c <main+0x2f8>)
 8003386:	f001 fd95 	bl	8004eb4 <HAL_GPIO_WritePin>

  /* Wait for ADXL362 to power up (datasheet: max 6ms settling time) */
  HAL_Delay(50);
 800338a:	2032      	movs	r0, #50	@ 0x32
 800338c:	f001 f972 	bl	8004674 <HAL_Delay>

  /* Start the microsecond timer */
  HAL_TIM_Base_Start(&htim2);
 8003390:	48af      	ldr	r0, [pc, #700]	@ (8003650 <main+0x2fc>)
 8003392:	f008 f81b 	bl	800b3cc <HAL_TIM_Base_Start>

  /* USART1 already initialized at 1Mbit via MX_USART1_UART_Init() */

  /* Wait for peripherals to stabilize */
  HAL_Delay(100);
 8003396:	2064      	movs	r0, #100	@ 0x64
 8003398:	f001 f96c 	bl	8004674 <HAL_Delay>

  /* Scan I2C bus for connected devices */
  I2C_Scan();
 800339c:	f7ff fd66 	bl	8002e6c <I2C_Scan>

  /* Initialize IMU sensors - attempt each one and track which are present */
  char buffer[256];

#if ENABLE_LSM6DSV
  imu_status.lsm6dsv_present = LSM6DSV_Init();
 80033a0:	f7ff fb90 	bl	8002ac4 <LSM6DSV_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	4baa      	ldr	r3, [pc, #680]	@ (8003654 <main+0x300>)
 80033aa:	701a      	strb	r2, [r3, #0]
  {
    LSM6DSOX_FusionInit();
  }
#endif
#else
  imu_status.lsm6dsox_present = 0;
 80033ac:	4ba9      	ldr	r3, [pc, #676]	@ (8003654 <main+0x300>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	705a      	strb	r2, [r3, #1]
#endif

#if ENABLE_LIS2DW12
  imu_status.lis2dw12_present = LIS2DW12_Init();
 80033b2:	f7ff fbf9 	bl	8002ba8 <LIS2DW12_Init>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	4ba6      	ldr	r3, [pc, #664]	@ (8003654 <main+0x300>)
 80033bc:	709a      	strb	r2, [r3, #2]
  imu_status.lis2dw12_present = 0;
#endif

#if ENABLE_ADXL362
  /* Initialize ADXL362 context */
  adxl362_ctx.hspi = &hspi1;
 80033be:	4ba6      	ldr	r3, [pc, #664]	@ (8003658 <main+0x304>)
 80033c0:	4aa6      	ldr	r2, [pc, #664]	@ (800365c <main+0x308>)
 80033c2:	601a      	str	r2, [r3, #0]
  adxl362_ctx.cs_port = ADXL362_CS_PORT;
 80033c4:	4ba4      	ldr	r3, [pc, #656]	@ (8003658 <main+0x304>)
 80033c6:	4aa1      	ldr	r2, [pc, #644]	@ (800364c <main+0x2f8>)
 80033c8:	605a      	str	r2, [r3, #4]
  adxl362_ctx.cs_pin = ADXL362_CS_PIN;
 80033ca:	4ba3      	ldr	r3, [pc, #652]	@ (8003658 <main+0x304>)
 80033cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033d0:	811a      	strh	r2, [r3, #8]

  /* Debug: Try to read device ID registers */
  snprintf(buffer, sizeof(buffer), "\r\nADXL362 Debug: Attempting SPI communication...\r\n");
 80033d2:	f107 0308 	add.w	r3, r7, #8
 80033d6:	4aa2      	ldr	r2, [pc, #648]	@ (8003660 <main+0x30c>)
 80033d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033dc:	4618      	mov	r0, r3
 80033de:	f00a f863 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 80033e2:	f107 0308 	add.w	r3, r7, #8
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fc ff52 	bl	8000290 <strlen>
 80033ec:	4603      	mov	r3, r0
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fd24 	bl	8002e44 <tx_com>

  uint8_t devid_ad, devid_mst, partid;
  ADXL362_ReadDeviceIDs(&adxl362_ctx, &devid_ad, &devid_mst, &partid);
 80033fc:	1d7b      	adds	r3, r7, #5
 80033fe:	1dba      	adds	r2, r7, #6
 8003400:	1df9      	adds	r1, r7, #7
 8003402:	4895      	ldr	r0, [pc, #596]	@ (8003658 <main+0x304>)
 8003404:	f7fd ff4a 	bl	800129c <ADXL362_ReadDeviceIDs>

  snprintf(buffer, sizeof(buffer), "  Read DEVID_AD:  0x%02X (expected 0xAD)\r\n", devid_ad);
 8003408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800340c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	f107 0008 	add.w	r0, r7, #8
 8003416:	4a93      	ldr	r2, [pc, #588]	@ (8003664 <main+0x310>)
 8003418:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800341c:	f00a f844 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8003420:	f107 0308 	add.w	r3, r7, #8
 8003424:	4618      	mov	r0, r3
 8003426:	f7fc ff33 	bl	8000290 <strlen>
 800342a:	4603      	mov	r3, r0
 800342c:	b29a      	uxth	r2, r3
 800342e:	f107 0308 	add.w	r3, r7, #8
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fd05 	bl	8002e44 <tx_com>
  snprintf(buffer, sizeof(buffer), "  Read DEVID_MST: 0x%02X (expected 0x1D)\r\n", devid_mst);
 800343a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800343e:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f107 0008 	add.w	r0, r7, #8
 8003448:	4a87      	ldr	r2, [pc, #540]	@ (8003668 <main+0x314>)
 800344a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800344e:	f00a f82b 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8003452:	f107 0308 	add.w	r3, r7, #8
 8003456:	4618      	mov	r0, r3
 8003458:	f7fc ff1a 	bl	8000290 <strlen>
 800345c:	4603      	mov	r3, r0
 800345e:	b29a      	uxth	r2, r3
 8003460:	f107 0308 	add.w	r3, r7, #8
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fcec 	bl	8002e44 <tx_com>
  snprintf(buffer, sizeof(buffer), "  Read PARTID:    0x%02X (expected 0xF2)\r\n", partid);
 800346c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003470:	f2a3 1303 	subw	r3, r3, #259	@ 0x103
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	f107 0008 	add.w	r0, r7, #8
 800347a:	4a7c      	ldr	r2, [pc, #496]	@ (800366c <main+0x318>)
 800347c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003480:	f00a f812 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	4618      	mov	r0, r3
 800348a:	f7fc ff01 	bl	8000290 <strlen>
 800348e:	4603      	mov	r3, r0
 8003490:	b29a      	uxth	r2, r3
 8003492:	f107 0308 	add.w	r3, r7, #8
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fcd3 	bl	8002e44 <tx_com>

  /* Try basic device detection */
  if (ADXL362_CheckDevice(&adxl362_ctx))
 800349e:	486e      	ldr	r0, [pc, #440]	@ (8003658 <main+0x304>)
 80034a0:	f7fd ff1f 	bl	80012e2 <ADXL362_CheckDevice>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d04b      	beq.n	8003542 <main+0x1ee>
  {
    snprintf(buffer, sizeof(buffer), "ADXL362 device ID verified! Initializing...\r\n");
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	4a70      	ldr	r2, [pc, #448]	@ (8003670 <main+0x31c>)
 80034b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034b4:	4618      	mov	r0, r3
 80034b6:	f009 fff7 	bl	800d4a8 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 80034ba:	f107 0308 	add.w	r3, r7, #8
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fc fee6 	bl	8000290 <strlen>
 80034c4:	4603      	mov	r3, r0
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	f107 0308 	add.w	r3, r7, #8
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fcb8 	bl	8002e44 <tx_com>

    imu_status.adxl362_present = ADXL362_Init(&adxl362_ctx);
 80034d4:	4860      	ldr	r0, [pc, #384]	@ (8003658 <main+0x304>)
 80034d6:	f7fd ff31 	bl	800133c <ADXL362_Init>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	4b5d      	ldr	r3, [pc, #372]	@ (8003654 <main+0x300>)
 80034e0:	70da      	strb	r2, [r3, #3]

    if (imu_status.adxl362_present)
 80034e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003654 <main+0x300>)
 80034e4:	78db      	ldrb	r3, [r3, #3]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d015      	beq.n	8003516 <main+0x1c2>
    {
      snprintf(buffer, sizeof(buffer), "ADXL362 initialization SUCCESS!\r\n");
 80034ea:	f107 0308 	add.w	r3, r7, #8
 80034ee:	4a61      	ldr	r2, [pc, #388]	@ (8003674 <main+0x320>)
 80034f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034f4:	4618      	mov	r0, r3
 80034f6:	f009 ffd7 	bl	800d4a8 <sniprintf>
      tx_com((uint8_t*)buffer, strlen(buffer));
 80034fa:	f107 0308 	add.w	r3, r7, #8
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fc fec6 	bl	8000290 <strlen>
 8003504:	4603      	mov	r3, r0
 8003506:	b29a      	uxth	r2, r3
 8003508:	f107 0308 	add.w	r3, r7, #8
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fc98 	bl	8002e44 <tx_com>
 8003514:	e02d      	b.n	8003572 <main+0x21e>
    }
    else
    {
      snprintf(buffer, sizeof(buffer), "ADXL362 initialization FAILED (reset or config error)\r\n");
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	4a57      	ldr	r2, [pc, #348]	@ (8003678 <main+0x324>)
 800351c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003520:	4618      	mov	r0, r3
 8003522:	f009 ffc1 	bl	800d4a8 <sniprintf>
      tx_com((uint8_t*)buffer, strlen(buffer));
 8003526:	f107 0308 	add.w	r3, r7, #8
 800352a:	4618      	mov	r0, r3
 800352c:	f7fc feb0 	bl	8000290 <strlen>
 8003530:	4603      	mov	r3, r0
 8003532:	b29a      	uxth	r2, r3
 8003534:	f107 0308 	add.w	r3, r7, #8
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fc82 	bl	8002e44 <tx_com>
 8003540:	e017      	b.n	8003572 <main+0x21e>
    }
  }
  else
  {
    snprintf(buffer, sizeof(buffer), "ADXL362 device ID check FAILED - no communication\r\n");
 8003542:	f107 0308 	add.w	r3, r7, #8
 8003546:	4a4d      	ldr	r2, [pc, #308]	@ (800367c <main+0x328>)
 8003548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800354c:	4618      	mov	r0, r3
 800354e:	f009 ffab 	bl	800d4a8 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8003552:	f107 0308 	add.w	r3, r7, #8
 8003556:	4618      	mov	r0, r3
 8003558:	f7fc fe9a 	bl	8000290 <strlen>
 800355c:	4603      	mov	r3, r0
 800355e:	b29a      	uxth	r2, r3
 8003560:	f107 0308 	add.w	r3, r7, #8
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fc6c 	bl	8002e44 <tx_com>
    imu_status.adxl362_present = 0;
 800356c:	4b39      	ldr	r3, [pc, #228]	@ (8003654 <main+0x300>)
 800356e:	2200      	movs	r2, #0
 8003570:	70da      	strb	r2, [r3, #3]
#else
  imu_status.adxl362_present = 0;
#endif

  /* Print detected IMU status */
  snprintf(buffer, sizeof(buffer), "\r\n=== IMU Detection Results ===\r\n");
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	4a42      	ldr	r2, [pc, #264]	@ (8003680 <main+0x32c>)
 8003578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800357c:	4618      	mov	r0, r3
 800357e:	f009 ff93 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8003582:	f107 0308 	add.w	r3, r7, #8
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc fe82 	bl	8000290 <strlen>
 800358c:	4603      	mov	r3, r0
 800358e:	b29a      	uxth	r2, r3
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fc54 	bl	8002e44 <tx_com>

  snprintf(buffer, sizeof(buffer), "LSM6DSV (6-axis I2C):    %s\r\n",
           imu_status.lsm6dsv_present ? "DETECTED" : "NOT FOUND");
 800359c:	4b2d      	ldr	r3, [pc, #180]	@ (8003654 <main+0x300>)
 800359e:	781b      	ldrb	r3, [r3, #0]
  snprintf(buffer, sizeof(buffer), "LSM6DSV (6-axis I2C):    %s\r\n",
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <main+0x254>
 80035a4:	4b37      	ldr	r3, [pc, #220]	@ (8003684 <main+0x330>)
 80035a6:	e000      	b.n	80035aa <main+0x256>
 80035a8:	4b37      	ldr	r3, [pc, #220]	@ (8003688 <main+0x334>)
 80035aa:	f107 0008 	add.w	r0, r7, #8
 80035ae:	4a37      	ldr	r2, [pc, #220]	@ (800368c <main+0x338>)
 80035b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035b4:	f009 ff78 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 80035b8:	f107 0308 	add.w	r3, r7, #8
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fc fe67 	bl	8000290 <strlen>
 80035c2:	4603      	mov	r3, r0
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	f107 0308 	add.w	r3, r7, #8
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fc39 	bl	8002e44 <tx_com>

  snprintf(buffer, sizeof(buffer), "LSM6DSOX (6-axis I2C):   %s\r\n",
           imu_status.lsm6dsox_present ? "DETECTED" : "NOT FOUND");
 80035d2:	4b20      	ldr	r3, [pc, #128]	@ (8003654 <main+0x300>)
 80035d4:	785b      	ldrb	r3, [r3, #1]
  snprintf(buffer, sizeof(buffer), "LSM6DSOX (6-axis I2C):   %s\r\n",
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <main+0x28a>
 80035da:	4b2a      	ldr	r3, [pc, #168]	@ (8003684 <main+0x330>)
 80035dc:	e000      	b.n	80035e0 <main+0x28c>
 80035de:	4b2a      	ldr	r3, [pc, #168]	@ (8003688 <main+0x334>)
 80035e0:	f107 0008 	add.w	r0, r7, #8
 80035e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003690 <main+0x33c>)
 80035e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035ea:	f009 ff5d 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 80035ee:	f107 0308 	add.w	r3, r7, #8
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fc fe4c 	bl	8000290 <strlen>
 80035f8:	4603      	mov	r3, r0
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	f107 0308 	add.w	r3, r7, #8
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fc1e 	bl	8002e44 <tx_com>

  snprintf(buffer, sizeof(buffer), "LIS2DW12 (3-axis I2C):   %s\r\n",
           imu_status.lis2dw12_present ? "DETECTED" : "NOT FOUND");
 8003608:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <main+0x300>)
 800360a:	789b      	ldrb	r3, [r3, #2]
  snprintf(buffer, sizeof(buffer), "LIS2DW12 (3-axis I2C):   %s\r\n",
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <main+0x2c0>
 8003610:	4b1c      	ldr	r3, [pc, #112]	@ (8003684 <main+0x330>)
 8003612:	e000      	b.n	8003616 <main+0x2c2>
 8003614:	4b1c      	ldr	r3, [pc, #112]	@ (8003688 <main+0x334>)
 8003616:	f107 0008 	add.w	r0, r7, #8
 800361a:	4a1e      	ldr	r2, [pc, #120]	@ (8003694 <main+0x340>)
 800361c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003620:	f009 ff42 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8003624:	f107 0308 	add.w	r3, r7, #8
 8003628:	4618      	mov	r0, r3
 800362a:	f7fc fe31 	bl	8000290 <strlen>
 800362e:	4603      	mov	r3, r0
 8003630:	b29a      	uxth	r2, r3
 8003632:	f107 0308 	add.w	r3, r7, #8
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fc03 	bl	8002e44 <tx_com>

  snprintf(buffer, sizeof(buffer), "ADXL362 (3-axis SPI):    %s\r\n",
           imu_status.adxl362_present ? "DETECTED" : "NOT FOUND");
 800363e:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <main+0x300>)
 8003640:	78db      	ldrb	r3, [r3, #3]
  snprintf(buffer, sizeof(buffer), "ADXL362 (3-axis SPI):    %s\r\n",
 8003642:	2b00      	cmp	r3, #0
 8003644:	d028      	beq.n	8003698 <main+0x344>
 8003646:	4b0f      	ldr	r3, [pc, #60]	@ (8003684 <main+0x330>)
 8003648:	e027      	b.n	800369a <main+0x346>
 800364a:	bf00      	nop
 800364c:	42021000 	.word	0x42021000
 8003650:	200002ec 	.word	0x200002ec
 8003654:	200003cc 	.word	0x200003cc
 8003658:	200003f8 	.word	0x200003f8
 800365c:	2000025c 	.word	0x2000025c
 8003660:	08011188 	.word	0x08011188
 8003664:	080111bc 	.word	0x080111bc
 8003668:	080111e8 	.word	0x080111e8
 800366c:	08011214 	.word	0x08011214
 8003670:	08011240 	.word	0x08011240
 8003674:	08011270 	.word	0x08011270
 8003678:	08011294 	.word	0x08011294
 800367c:	080112cc 	.word	0x080112cc
 8003680:	08011300 	.word	0x08011300
 8003684:	08011324 	.word	0x08011324
 8003688:	08011330 	.word	0x08011330
 800368c:	0801133c 	.word	0x0801133c
 8003690:	0801135c 	.word	0x0801135c
 8003694:	0801137c 	.word	0x0801137c
 8003698:	4b4b      	ldr	r3, [pc, #300]	@ (80037c8 <main+0x474>)
 800369a:	f107 0008 	add.w	r0, r7, #8
 800369e:	4a4b      	ldr	r2, [pc, #300]	@ (80037cc <main+0x478>)
 80036a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036a4:	f009 ff00 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fc fdef 	bl	8000290 <strlen>
 80036b2:	4603      	mov	r3, r0
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	f107 0308 	add.w	r3, r7, #8
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fbc1 	bl	8002e44 <tx_com>

  snprintf(buffer, sizeof(buffer), "==============================\r\n\r\n");
 80036c2:	f107 0308 	add.w	r3, r7, #8
 80036c6:	4a42      	ldr	r2, [pc, #264]	@ (80037d0 <main+0x47c>)
 80036c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036cc:	4618      	mov	r0, r3
 80036ce:	f009 feeb 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 80036d2:	f107 0308 	add.w	r3, r7, #8
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc fdda 	bl	8000290 <strlen>
 80036dc:	4603      	mov	r3, r0
 80036de:	b29a      	uxth	r2, r3
 80036e0:	f107 0308 	add.w	r3, r7, #8
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fbac 	bl	8002e44 <tx_com>

  /* Check if at least one IMU is present */
  if (!imu_status.lsm6dsv_present && !imu_status.lsm6dsox_present && !imu_status.lis2dw12_present && !imu_status.adxl362_present)
 80036ec:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <main+0x480>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d120      	bne.n	8003736 <main+0x3e2>
 80036f4:	4b37      	ldr	r3, [pc, #220]	@ (80037d4 <main+0x480>)
 80036f6:	785b      	ldrb	r3, [r3, #1]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11c      	bne.n	8003736 <main+0x3e2>
 80036fc:	4b35      	ldr	r3, [pc, #212]	@ (80037d4 <main+0x480>)
 80036fe:	789b      	ldrb	r3, [r3, #2]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d118      	bne.n	8003736 <main+0x3e2>
 8003704:	4b33      	ldr	r3, [pc, #204]	@ (80037d4 <main+0x480>)
 8003706:	78db      	ldrb	r3, [r3, #3]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d114      	bne.n	8003736 <main+0x3e2>
  {
    snprintf(buffer, sizeof(buffer), "ERROR: No IMUs detected! Check connections.\r\n");
 800370c:	f107 0308 	add.w	r3, r7, #8
 8003710:	4a31      	ldr	r2, [pc, #196]	@ (80037d8 <main+0x484>)
 8003712:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003716:	4618      	mov	r0, r3
 8003718:	f009 fec6 	bl	800d4a8 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 800371c:	f107 0308 	add.w	r3, r7, #8
 8003720:	4618      	mov	r0, r3
 8003722:	f7fc fdb5 	bl	8000290 <strlen>
 8003726:	4603      	mov	r3, r0
 8003728:	b29a      	uxth	r2, r3
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fb87 	bl	8002e44 <tx_com>
  }

  /* Print CSV header or startup message */
#if (OUTPUT_FORMAT == 0)
  snprintf(buffer, sizeof(buffer), "Starting data acquisition (CSV format)...\r\n\r\n");
 8003736:	f107 0308 	add.w	r3, r7, #8
 800373a:	4a28      	ldr	r2, [pc, #160]	@ (80037dc <main+0x488>)
 800373c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003740:	4618      	mov	r0, r3
 8003742:	f009 feb1 	bl	800d4a8 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8003746:	f107 0308 	add.w	r3, r7, #8
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc fda0 	bl	8000290 <strlen>
 8003750:	4603      	mov	r3, r0
 8003752:	b29a      	uxth	r2, r3
 8003754:	f107 0308 	add.w	r3, r7, #8
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fb72 	bl	8002e44 <tx_com>
#endif

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8003760:	2000      	movs	r0, #0
 8003762:	f000 fd91 	bl	8004288 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8003766:	2001      	movs	r0, #1
 8003768:	f000 fd8e 	bl	8004288 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800376c:	2002      	movs	r0, #2
 800376e:	f000 fd8b 	bl	8004288 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003772:	2101      	movs	r1, #1
 8003774:	2000      	movs	r0, #0
 8003776:	f000 fe17 	bl	80043a8 <BSP_PB_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Read data only from detected IMUs */
#if ENABLE_LSM6DSV
    if (imu_status.lsm6dsv_present)
 800377a:	4b16      	ldr	r3, [pc, #88]	@ (80037d4 <main+0x480>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <main+0x436>
    {
      LSM6DSV_ReadData();
 8003782:	f7ff fa5b 	bl	8002c3c <LSM6DSV_ReadData>
#if ENABLE_LSM6DSV_SENSOR_FUSION
      LSM6DSV_ReadSFLP();
 8003786:	f7ff fa7f 	bl	8002c88 <LSM6DSV_ReadSFLP>
#endif
    }
#endif

#if ENABLE_LIS2DW12
    if (imu_status.lis2dw12_present)
 800378a:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <main+0x480>)
 800378c:	789b      	ldrb	r3, [r3, #2]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <main+0x442>
    {
      LIS2DW12_ReadData();
 8003792:	f7ff fb25 	bl	8002de0 <LIS2DW12_ReadData>
    }
#endif

    if (imu_status.adxl362_present)
 8003796:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <main+0x480>)
 8003798:	78db      	ldrb	r3, [r3, #3]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <main+0x44e>
    {
      ADXL362_ReadDataWrapper();
 800379e:	f7ff fb39 	bl	8002e14 <ADXL362_ReadDataWrapper>
    }

    /* Print the timestamped data (only outputs data from detected IMUs) */
    if (imu_status.lsm6dsv_present || imu_status.lsm6dsox_present || imu_status.lis2dw12_present || imu_status.adxl362_present)
 80037a2:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <main+0x480>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <main+0x46e>
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <main+0x480>)
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d107      	bne.n	80037c2 <main+0x46e>
 80037b2:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <main+0x480>)
 80037b4:	789b      	ldrb	r3, [r3, #2]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <main+0x46e>
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <main+0x480>)
 80037bc:	78db      	ldrb	r3, [r3, #3]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0db      	beq.n	800377a <main+0x426>
    {
      Print_IMU_Data();
 80037c2:	f7ff fc43 	bl	800304c <Print_IMU_Data>
    if (imu_status.lsm6dsv_present)
 80037c6:	e7d8      	b.n	800377a <main+0x426>
 80037c8:	08011330 	.word	0x08011330
 80037cc:	0801139c 	.word	0x0801139c
 80037d0:	080113bc 	.word	0x080113bc
 80037d4:	200003cc 	.word	0x200003cc
 80037d8:	080113e0 	.word	0x080113e0
 80037dc:	08011410 	.word	0x08011410

080037e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b09e      	sub	sp, #120	@ 0x78
 80037e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037e6:	f107 0318 	add.w	r3, r7, #24
 80037ea:	2260      	movs	r2, #96	@ 0x60
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f00a fdfa 	bl	800e3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037f4:	463b      	mov	r3, r7
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	611a      	str	r2, [r3, #16]
 8003802:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8003804:	2000      	movs	r0, #0
 8003806:	f002 fac7 	bl	8005d98 <HAL_PWREx_ControlVoltageScaling>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003810:	f000 fa5c 	bl	8003ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003814:	2302      	movs	r3, #2
 8003816:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800381e:	2310      	movs	r3, #16
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003822:	2300      	movs	r3, #0
 8003824:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003826:	f107 0318 	add.w	r3, r7, #24
 800382a:	4618      	mov	r0, r3
 800382c:	f002 fbb0 	bl	8005f90 <HAL_RCC_OscConfig>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8003836:	f000 fa49 	bl	8003ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800383a:	231f      	movs	r3, #31
 800383c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800383e:	2301      	movs	r3, #1
 8003840:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003852:	463b      	mov	r3, r7
 8003854:	2101      	movs	r1, #1
 8003856:	4618      	mov	r0, r3
 8003858:	f003 fa76 	bl	8006d48 <HAL_RCC_ClockConfig>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003862:	f000 fa33 	bl	8003ccc <Error_Handler>
  }
}
 8003866:	bf00      	nop
 8003868:	3778      	adds	r7, #120	@ 0x78
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003872:	f002 fb7d 	bl	8005f70 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8003876:	2002      	movs	r0, #2
 8003878:	f002 fb1a 	bl	8005eb0 <HAL_PWREx_ConfigSupply>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8003882:	f000 fa23 	bl	8003ccc <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003890:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <MX_I2C2_Init+0x74>)
 8003892:	4a1c      	ldr	r2, [pc, #112]	@ (8003904 <MX_I2C2_Init+0x78>)
 8003894:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 8003896:	4b1a      	ldr	r3, [pc, #104]	@ (8003900 <MX_I2C2_Init+0x74>)
 8003898:	4a1b      	ldr	r2, [pc, #108]	@ (8003908 <MX_I2C2_Init+0x7c>)
 800389a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800389c:	4b18      	ldr	r3, [pc, #96]	@ (8003900 <MX_I2C2_Init+0x74>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038a2:	4b17      	ldr	r3, [pc, #92]	@ (8003900 <MX_I2C2_Init+0x74>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038a8:	4b15      	ldr	r3, [pc, #84]	@ (8003900 <MX_I2C2_Init+0x74>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80038ae:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <MX_I2C2_Init+0x74>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80038b4:	4b12      	ldr	r3, [pc, #72]	@ (8003900 <MX_I2C2_Init+0x74>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038ba:	4b11      	ldr	r3, [pc, #68]	@ (8003900 <MX_I2C2_Init+0x74>)
 80038bc:	2200      	movs	r2, #0
 80038be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003900 <MX_I2C2_Init+0x74>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80038c6:	480e      	ldr	r0, [pc, #56]	@ (8003900 <MX_I2C2_Init+0x74>)
 80038c8:	f001 fb0c 	bl	8004ee4 <HAL_I2C_Init>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80038d2:	f000 f9fb 	bl	8003ccc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038d6:	2100      	movs	r1, #0
 80038d8:	4809      	ldr	r0, [pc, #36]	@ (8003900 <MX_I2C2_Init+0x74>)
 80038da:	f002 f995 	bl	8005c08 <HAL_I2CEx_ConfigAnalogFilter>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80038e4:	f000 f9f2 	bl	8003ccc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80038e8:	2100      	movs	r1, #0
 80038ea:	4805      	ldr	r0, [pc, #20]	@ (8003900 <MX_I2C2_Init+0x74>)
 80038ec:	f002 f9d7 	bl	8005c9e <HAL_I2CEx_ConfigDigitalFilter>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80038f6:	f000 f9e9 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000208 	.word	0x20000208
 8003904:	40005800 	.word	0x40005800
 8003908:	0010061a 	.word	0x0010061a

0800390c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8003910:	2000      	movs	r0, #0
 8003912:	f002 fa11 	bl	8005d38 <HAL_ICACHE_ConfigAssociativityMode>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800391c:	f000 f9d6 	bl	8003ccc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8003920:	f002 fa2a 	bl	8005d78 <HAL_ICACHE_Enable>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800392a:	f000 f9cf 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003944:	4b31      	ldr	r3, [pc, #196]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 8003946:	4a32      	ldr	r2, [pc, #200]	@ (8003a10 <MX_SPI1_Init+0xdc>)
 8003948:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800394a:	4b30      	ldr	r3, [pc, #192]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 800394c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003950:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003952:	4b2e      	ldr	r3, [pc, #184]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003958:	4b2c      	ldr	r3, [pc, #176]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 800395a:	2207      	movs	r2, #7
 800395c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800395e:	4b2b      	ldr	r3, [pc, #172]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003964:	4b29      	ldr	r3, [pc, #164]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 8003966:	2200      	movs	r2, #0
 8003968:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800396a:	4b28      	ldr	r3, [pc, #160]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 800396c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003970:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003972:	4b26      	ldr	r3, [pc, #152]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 8003974:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003978:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800397a:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 800397c:	2200      	movs	r2, #0
 800397e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003980:	4b22      	ldr	r3, [pc, #136]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 8003982:	2200      	movs	r2, #0
 8003984:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003986:	4b21      	ldr	r3, [pc, #132]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 8003988:	2200      	movs	r2, #0
 800398a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800398c:	4b1f      	ldr	r3, [pc, #124]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 800398e:	2207      	movs	r2, #7
 8003990:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003992:	4b1e      	ldr	r3, [pc, #120]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 8003994:	2200      	movs	r2, #0
 8003996:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 8003998:	4b1c      	ldr	r3, [pc, #112]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 800399a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800399e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80039a0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80039a6:	4b19      	ldr	r3, [pc, #100]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80039ac:	4b17      	ldr	r3, [pc, #92]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80039b2:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80039b8:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80039be:	4b13      	ldr	r3, [pc, #76]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80039c4:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80039ca:	4b10      	ldr	r3, [pc, #64]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039d0:	480e      	ldr	r0, [pc, #56]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 80039d2:	f006 fcef 	bl	800a3b4 <HAL_SPI_Init>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 80039dc:	f000 f976 	bl	8003ccc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80039e0:	2300      	movs	r3, #0
 80039e2:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80039e4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80039e8:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80039ee:	1d3b      	adds	r3, r7, #4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4806      	ldr	r0, [pc, #24]	@ (8003a0c <MX_SPI1_Init+0xd8>)
 80039f4:	f007 fc51 	bl	800b29a <HAL_SPIEx_SetConfigAutonomousMode>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 80039fe:	f000 f965 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2000025c 	.word	0x2000025c
 8003a10:	40013000 	.word	0x40013000

08003a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a1a:	f107 0310 	add.w	r3, r7, #16
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	609a      	str	r2, [r3, #8]
 8003a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	605a      	str	r2, [r3, #4]
 8003a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a32:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <MX_TIM2_Init+0x98>)
 8003a34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8003a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003aac <MX_TIM2_Init+0x98>)
 8003a3c:	220f      	movs	r2, #15
 8003a3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a40:	4b1a      	ldr	r3, [pc, #104]	@ (8003aac <MX_TIM2_Init+0x98>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003a46:	4b19      	ldr	r3, [pc, #100]	@ (8003aac <MX_TIM2_Init+0x98>)
 8003a48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a4e:	4b17      	ldr	r3, [pc, #92]	@ (8003aac <MX_TIM2_Init+0x98>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a54:	4b15      	ldr	r3, [pc, #84]	@ (8003aac <MX_TIM2_Init+0x98>)
 8003a56:	2280      	movs	r2, #128	@ 0x80
 8003a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a5a:	4814      	ldr	r0, [pc, #80]	@ (8003aac <MX_TIM2_Init+0x98>)
 8003a5c:	f007 fc5e 	bl	800b31c <HAL_TIM_Base_Init>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003a66:	f000 f931 	bl	8003ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a70:	f107 0310 	add.w	r3, r7, #16
 8003a74:	4619      	mov	r1, r3
 8003a76:	480d      	ldr	r0, [pc, #52]	@ (8003aac <MX_TIM2_Init+0x98>)
 8003a78:	f007 fd40 	bl	800b4fc <HAL_TIM_ConfigClockSource>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003a82:	f000 f923 	bl	8003ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4806      	ldr	r0, [pc, #24]	@ (8003aac <MX_TIM2_Init+0x98>)
 8003a94:	f008 f832 	bl	800bafc <HAL_TIMEx_MasterConfigSynchronization>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003a9e:	f000 f915 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003aa2:	bf00      	nop
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200002ec 	.word	0x200002ec

08003ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ab4:	4b22      	ldr	r3, [pc, #136]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003ab6:	4a23      	ldr	r2, [pc, #140]	@ (8003b44 <MX_USART1_UART_Init+0x94>)
 8003ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8003aba:	4b21      	ldr	r3, [pc, #132]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003abc:	4a22      	ldr	r2, [pc, #136]	@ (8003b48 <MX_USART1_UART_Init+0x98>)
 8003abe:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003acc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003ad4:	220c      	movs	r2, #12
 8003ad6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ad8:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ade:	4b18      	ldr	r3, [pc, #96]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ae4:	4b16      	ldr	r3, [pc, #88]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003aea:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003af0:	4b13      	ldr	r3, [pc, #76]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003af6:	4812      	ldr	r0, [pc, #72]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003af8:	f008 f8c2 	bl	800bc80 <HAL_UART_Init>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8003b02:	f000 f8e3 	bl	8003ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b06:	2100      	movs	r1, #0
 8003b08:	480d      	ldr	r0, [pc, #52]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003b0a:	f008 fd9d 	bl	800c648 <HAL_UARTEx_SetTxFifoThreshold>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8003b14:	f000 f8da 	bl	8003ccc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4809      	ldr	r0, [pc, #36]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003b1c:	f008 fdd2 	bl	800c6c4 <HAL_UARTEx_SetRxFifoThreshold>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003b26:	f000 f8d1 	bl	8003ccc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b2a:	4805      	ldr	r0, [pc, #20]	@ (8003b40 <MX_USART1_UART_Init+0x90>)
 8003b2c:	f008 fd53 	bl	800c5d6 <HAL_UARTEx_DisableFifoMode>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003b36:	f000 f8c9 	bl	8003ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000338 	.word	0x20000338
 8003b44:	40013800 	.word	0x40013800
 8003b48:	000f4240 	.word	0x000f4240

08003b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	@ 0x28
 8003b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b52:	f107 0314 	add.w	r3, r7, #20
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
 8003b5e:	60da      	str	r2, [r3, #12]
 8003b60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b62:	4b55      	ldr	r3, [pc, #340]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b68:	4a53      	ldr	r2, [pc, #332]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003b6a:	f043 0304 	orr.w	r3, r3, #4
 8003b6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b72:	4b51      	ldr	r3, [pc, #324]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b80:	4b4d      	ldr	r3, [pc, #308]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b86:	4a4c      	ldr	r2, [pc, #304]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003b88:	f043 0310 	orr.w	r3, r3, #16
 8003b8c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b90:	4b49      	ldr	r3, [pc, #292]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9e:	4b46      	ldr	r3, [pc, #280]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ba4:	4a44      	ldr	r2, [pc, #272]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003ba6:	f043 0302 	orr.w	r3, r3, #2
 8003baa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003bae:	4b42      	ldr	r3, [pc, #264]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bc2:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb8 <MX_GPIO_Init+0x16c>)
 8003bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003be0:	4836      	ldr	r0, [pc, #216]	@ (8003cbc <MX_GPIO_Init+0x170>)
 8003be2:	f001 f967 	bl	8004eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2120      	movs	r1, #32
 8003bea:	4835      	ldr	r0, [pc, #212]	@ (8003cc0 <MX_GPIO_Init+0x174>)
 8003bec:	f001 f962 	bl	8004eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	4619      	mov	r1, r3
 8003c02:	4830      	ldr	r0, [pc, #192]	@ (8003cc4 <MX_GPIO_Init+0x178>)
 8003c04:	f000 ff76 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8003c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c16:	2300      	movs	r3, #0
 8003c18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8003c1a:	f107 0314 	add.w	r3, r7, #20
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4826      	ldr	r0, [pc, #152]	@ (8003cbc <MX_GPIO_Init+0x170>)
 8003c22:	f000 ff67 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8003c26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8003c34:	f107 0314 	add.w	r3, r7, #20
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4821      	ldr	r0, [pc, #132]	@ (8003cc0 <MX_GPIO_Init+0x174>)
 8003c3c:	f000 ff5a 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c46:	2303      	movs	r3, #3
 8003c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c4e:	f107 0314 	add.w	r3, r7, #20
 8003c52:	4619      	mov	r1, r3
 8003c54:	481a      	ldr	r0, [pc, #104]	@ (8003cc0 <MX_GPIO_Init+0x174>)
 8003c56:	f000 ff4d 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4619      	mov	r1, r3
 8003c72:	4815      	ldr	r0, [pc, #84]	@ (8003cc8 <MX_GPIO_Init+0x17c>)
 8003c74:	f000 ff3e 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c86:	f107 0314 	add.w	r3, r7, #20
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	480e      	ldr	r0, [pc, #56]	@ (8003cc8 <MX_GPIO_Init+0x17c>)
 8003c8e:	f000 ff31 	bl	8004af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8003c92:	2320      	movs	r3, #32
 8003c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c96:	2301      	movs	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4805      	ldr	r0, [pc, #20]	@ (8003cc0 <MX_GPIO_Init+0x174>)
 8003caa:	f000 ff23 	bl	8004af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003cae:	bf00      	nop
 8003cb0:	3728      	adds	r7, #40	@ 0x28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	46020c00 	.word	0x46020c00
 8003cbc:	42021000 	.word	0x42021000
 8003cc0:	42020400 	.word	0x42020400
 8003cc4:	42020800 	.word	0x42020800
 8003cc8:	42020000 	.word	0x42020000

08003ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd0:	b672      	cpsid	i
}
 8003cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <Error_Handler+0x8>

08003cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <HAL_MspInit+0x30>)
 8003ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce4:	4a08      	ldr	r2, [pc, #32]	@ (8003d08 <HAL_MspInit+0x30>)
 8003ce6:	f043 0304 	orr.w	r3, r3, #4
 8003cea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003cee:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <HAL_MspInit+0x30>)
 8003cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	46020c00 	.word	0x46020c00

08003d0c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b0c0      	sub	sp, #256	@ 0x100
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d24:	f107 0310 	add.w	r3, r7, #16
 8003d28:	22d8      	movs	r2, #216	@ 0xd8
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f00a fb5b 	bl	800e3e8 <memset>
  if(hi2c->Instance==I2C2)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a27      	ldr	r2, [pc, #156]	@ (8003dd4 <HAL_I2C_MspInit+0xc8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d146      	bne.n	8003dca <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003d3c:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d4e:	f107 0310 	add.w	r3, r7, #16
 8003d52:	4618      	mov	r0, r3
 8003d54:	f003 fbcc 	bl	80074f0 <HAL_RCCEx_PeriphCLKConfig>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003d5e:	f7ff ffb5 	bl	8003ccc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d62:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <HAL_I2C_MspInit+0xcc>)
 8003d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d68:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd8 <HAL_I2C_MspInit+0xcc>)
 8003d6a:	f043 0302 	orr.w	r3, r3, #2
 8003d6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d72:	4b19      	ldr	r3, [pc, #100]	@ (8003dd8 <HAL_I2C_MspInit+0xcc>)
 8003d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003d84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d88:	2312      	movs	r3, #18
 8003d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003da4:	4619      	mov	r1, r3
 8003da6:	480d      	ldr	r0, [pc, #52]	@ (8003ddc <HAL_I2C_MspInit+0xd0>)
 8003da8:	f000 fea4 	bl	8004af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003dac:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <HAL_I2C_MspInit+0xcc>)
 8003dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003db2:	4a09      	ldr	r2, [pc, #36]	@ (8003dd8 <HAL_I2C_MspInit+0xcc>)
 8003db4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003db8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <HAL_I2C_MspInit+0xcc>)
 8003dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003dca:	bf00      	nop
 8003dcc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40005800 	.word	0x40005800
 8003dd8:	46020c00 	.word	0x46020c00
 8003ddc:	42020400 	.word	0x42020400

08003de0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b0c0      	sub	sp, #256	@ 0x100
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003df8:	f107 0310 	add.w	r3, r7, #16
 8003dfc:	22d8      	movs	r2, #216	@ 0xd8
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f00a faf1 	bl	800e3e8 <memset>
  if(hspi->Instance==SPI1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a28      	ldr	r2, [pc, #160]	@ (8003eac <HAL_SPI_MspInit+0xcc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d147      	bne.n	8003ea0 <HAL_SPI_MspInit+0xc0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003e10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003e1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003e20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e24:	f107 0310 	add.w	r3, r7, #16
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f003 fb61 	bl	80074f0 <HAL_RCCEx_PeriphCLKConfig>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8003e34:	f7ff ff4a 	bl	8003ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e38:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb0 <HAL_SPI_MspInit+0xd0>)
 8003e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb0 <HAL_SPI_MspInit+0xd0>)
 8003e40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e44:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003e48:	4b19      	ldr	r3, [pc, #100]	@ (8003eb0 <HAL_SPI_MspInit+0xd0>)
 8003e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e56:	4b16      	ldr	r3, [pc, #88]	@ (8003eb0 <HAL_SPI_MspInit+0xd0>)
 8003e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e5c:	4a14      	ldr	r2, [pc, #80]	@ (8003eb0 <HAL_SPI_MspInit+0xd0>)
 8003e5e:	f043 0310 	orr.w	r3, r3, #16
 8003e62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003e66:	4b12      	ldr	r3, [pc, #72]	@ (8003eb0 <HAL_SPI_MspInit+0xd0>)
 8003e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e74:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003e78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e8e:	2305      	movs	r3, #5
 8003e90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e94:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4806      	ldr	r0, [pc, #24]	@ (8003eb4 <HAL_SPI_MspInit+0xd4>)
 8003e9c:	f000 fe2a 	bl	8004af4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003ea0:	bf00      	nop
 8003ea2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40013000 	.word	0x40013000
 8003eb0:	46020c00 	.word	0x46020c00
 8003eb4:	42021000 	.word	0x42021000

08003eb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eca:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8003ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ed0:	4a08      	ldr	r2, [pc, #32]	@ (8003ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003eda:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8003edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	46020c00 	.word	0x46020c00

08003ef8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b0c0      	sub	sp, #256	@ 0x100
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f00:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f10:	f107 0310 	add.w	r3, r7, #16
 8003f14:	22d8      	movs	r2, #216	@ 0xd8
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f00a fa65 	bl	800e3e8 <memset>
  if(huart->Instance==USART1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a27      	ldr	r2, [pc, #156]	@ (8003fc0 <HAL_UART_MspInit+0xc8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d145      	bne.n	8003fb4 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f28:	f04f 0201 	mov.w	r2, #1
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f34:	2300      	movs	r3, #0
 8003f36:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f38:	f107 0310 	add.w	r3, r7, #16
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f003 fad7 	bl	80074f0 <HAL_RCCEx_PeriphCLKConfig>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8003f48:	f7ff fec0 	bl	8003ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc4 <HAL_UART_MspInit+0xcc>)
 8003f4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f52:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc4 <HAL_UART_MspInit+0xcc>)
 8003f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f58:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003f5c:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <HAL_UART_MspInit+0xcc>)
 8003f5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6a:	4b16      	ldr	r3, [pc, #88]	@ (8003fc4 <HAL_UART_MspInit+0xcc>)
 8003f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f70:	4a14      	ldr	r2, [pc, #80]	@ (8003fc4 <HAL_UART_MspInit+0xcc>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f7a:	4b12      	ldr	r3, [pc, #72]	@ (8003fc4 <HAL_UART_MspInit+0xcc>)
 8003f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f88:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	2302      	movs	r3, #2
 8003f92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fa2:	2307      	movs	r3, #7
 8003fa4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003fac:	4619      	mov	r1, r3
 8003fae:	4806      	ldr	r0, [pc, #24]	@ (8003fc8 <HAL_UART_MspInit+0xd0>)
 8003fb0:	f000 fda0 	bl	8004af4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003fb4:	bf00      	nop
 8003fb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	46020c00 	.word	0x46020c00
 8003fc8:	42020000 	.word	0x42020000

08003fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <NMI_Handler+0x4>

08003fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fd8:	bf00      	nop
 8003fda:	e7fd      	b.n	8003fd8 <HardFault_Handler+0x4>

08003fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fe0:	bf00      	nop
 8003fe2:	e7fd      	b.n	8003fe0 <MemManage_Handler+0x4>

08003fe4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <BusFault_Handler+0x4>

08003fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ff0:	bf00      	nop
 8003ff2:	e7fd      	b.n	8003ff0 <UsageFault_Handler+0x4>

08003ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004022:	f000 fb07 	bl	8004634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}

0800402a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800402e:	2000      	movs	r0, #0
 8004030:	f000 fa32 	bl	8004498 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8004034:	bf00      	nop
 8004036:	bd80      	pop	{r7, pc}

08004038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return 1;
 800403c:	2301      	movs	r3, #1
}
 800403e:	4618      	mov	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <_kill>:

int _kill(int pid, int sig)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004052:	f00a f9e3 	bl	800e41c <__errno>
 8004056:	4603      	mov	r3, r0
 8004058:	2216      	movs	r2, #22
 800405a:	601a      	str	r2, [r3, #0]
  return -1;
 800405c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_exit>:

void _exit (int status)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004070:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ffe7 	bl	8004048 <_kill>
  while (1) {}    /* Make sure we hang here */
 800407a:	bf00      	nop
 800407c:	e7fd      	b.n	800407a <_exit+0x12>

0800407e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b086      	sub	sp, #24
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	e00a      	b.n	80040a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004090:	f3af 8000 	nop.w
 8004094:	4601      	mov	r1, r0
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	60ba      	str	r2, [r7, #8]
 800409c:	b2ca      	uxtb	r2, r1
 800409e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3301      	adds	r3, #1
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	dbf0      	blt.n	8004090 <_read+0x12>
  }

  return len;
 80040ae:	687b      	ldr	r3, [r7, #4]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e009      	b.n	80040de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	60ba      	str	r2, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff f92c 	bl	8003330 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3301      	adds	r3, #1
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	dbf1      	blt.n	80040ca <_write+0x12>
  }
  return len;
 80040e6:	687b      	ldr	r3, [r7, #4]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <_close>:

int _close(int file)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004118:	605a      	str	r2, [r3, #4]
  return 0;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <_isatty>:

int _isatty(int file)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004130:	2301      	movs	r3, #1
}
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004160:	4a14      	ldr	r2, [pc, #80]	@ (80041b4 <_sbrk+0x5c>)
 8004162:	4b15      	ldr	r3, [pc, #84]	@ (80041b8 <_sbrk+0x60>)
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800416c:	4b13      	ldr	r3, [pc, #76]	@ (80041bc <_sbrk+0x64>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004174:	4b11      	ldr	r3, [pc, #68]	@ (80041bc <_sbrk+0x64>)
 8004176:	4a12      	ldr	r2, [pc, #72]	@ (80041c0 <_sbrk+0x68>)
 8004178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800417a:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <_sbrk+0x64>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	429a      	cmp	r2, r3
 8004186:	d207      	bcs.n	8004198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004188:	f00a f948 	bl	800e41c <__errno>
 800418c:	4603      	mov	r3, r0
 800418e:	220c      	movs	r2, #12
 8004190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004196:	e009      	b.n	80041ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004198:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <_sbrk+0x64>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800419e:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <_sbrk+0x64>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	4a05      	ldr	r2, [pc, #20]	@ (80041bc <_sbrk+0x64>)
 80041a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041aa:	68fb      	ldr	r3, [r7, #12]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20270000 	.word	0x20270000
 80041b8:	00000400 	.word	0x00000400
 80041bc:	20000434 	.word	0x20000434
 80041c0:	20000598 	.word	0x20000598

080041c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80041c8:	4b18      	ldr	r3, [pc, #96]	@ (800422c <SystemInit+0x68>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ce:	4a17      	ldr	r2, [pc, #92]	@ (800422c <SystemInit+0x68>)
 80041d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80041d8:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <SystemInit+0x6c>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80041de:	4b14      	ldr	r3, [pc, #80]	@ (8004230 <SystemInit+0x6c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80041e4:	4b12      	ldr	r3, [pc, #72]	@ (8004230 <SystemInit+0x6c>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80041ea:	4b11      	ldr	r3, [pc, #68]	@ (8004230 <SystemInit+0x6c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80041f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004230 <SystemInit+0x6c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004230 <SystemInit+0x6c>)
 80041f6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80041fa:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80041fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8004200:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <SystemInit+0x6c>)
 8004202:	2200      	movs	r2, #0
 8004204:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004206:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <SystemInit+0x6c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <SystemInit+0x6c>)
 800420c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004210:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004212:	4b07      	ldr	r3, [pc, #28]	@ (8004230 <SystemInit+0x6c>)
 8004214:	2200      	movs	r2, #0
 8004216:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004218:	4b04      	ldr	r3, [pc, #16]	@ (800422c <SystemInit+0x68>)
 800421a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800421e:	609a      	str	r2, [r3, #8]
  #endif
}
 8004220:	bf00      	nop
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	e000ed00 	.word	0xe000ed00
 8004230:	46020c00 	.word	0x46020c00

08004234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8004234:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800426c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004238:	f7ff ffc4 	bl	80041c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800423c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800423e:	e003      	b.n	8004248 <LoopCopyDataInit>

08004240 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004240:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004242:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004244:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004246:	3104      	adds	r1, #4

08004248 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004248:	480a      	ldr	r0, [pc, #40]	@ (8004274 <LoopForever+0xa>)
	ldr	r3, =_edata
 800424a:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <LoopForever+0xe>)
	adds	r2, r0, r1
 800424c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800424e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004250:	d3f6      	bcc.n	8004240 <CopyDataInit>
	ldr	r2, =_sbss
 8004252:	4a0a      	ldr	r2, [pc, #40]	@ (800427c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004254:	e002      	b.n	800425c <LoopFillZerobss>

08004256 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004256:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004258:	f842 3b04 	str.w	r3, [r2], #4

0800425c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800425c:	4b08      	ldr	r3, [pc, #32]	@ (8004280 <LoopForever+0x16>)
	cmp	r2, r3
 800425e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004260:	d3f9      	bcc.n	8004256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004262:	f00a f8e1 	bl	800e428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004266:	f7ff f875 	bl	8003354 <main>

0800426a <LoopForever>:

LoopForever:
    b LoopForever
 800426a:	e7fe      	b.n	800426a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800426c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8004270:	08011988 	.word	0x08011988
	ldr	r0, =_sdata
 8004274:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004278:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 800427c:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8004280:	20000594 	.word	0x20000594

08004284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004284:	e7fe      	b.n	8004284 <ADC1_2_IRQHandler>
	...

08004288 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08e      	sub	sp, #56	@ 0x38
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d009      	beq.n	80042b4 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d006      	beq.n	80042b4 <BSP_LED_Init+0x2c>
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d003      	beq.n	80042b4 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80042ac:	f06f 0301 	mvn.w	r3, #1
 80042b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b2:	e06e      	b.n	8004392 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10f      	bne.n	80042da <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80042ba:	4b38      	ldr	r3, [pc, #224]	@ (800439c <BSP_LED_Init+0x114>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042c0:	4a36      	ldr	r2, [pc, #216]	@ (800439c <BSP_LED_Init+0x114>)
 80042c2:	f043 0302 	orr.w	r3, r3, #2
 80042c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80042ca:	4b34      	ldr	r3, [pc, #208]	@ (800439c <BSP_LED_Init+0x114>)
 80042cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	e046      	b.n	8004368 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10f      	bne.n	8004300 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80042e0:	4b2e      	ldr	r3, [pc, #184]	@ (800439c <BSP_LED_Init+0x114>)
 80042e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042e6:	4a2d      	ldr	r2, [pc, #180]	@ (800439c <BSP_LED_Init+0x114>)
 80042e8:	f043 0304 	orr.w	r3, r3, #4
 80042ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80042f0:	4b2a      	ldr	r3, [pc, #168]	@ (800439c <BSP_LED_Init+0x114>)
 80042f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	e033      	b.n	8004368 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004300:	4b26      	ldr	r3, [pc, #152]	@ (800439c <BSP_LED_Init+0x114>)
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d110      	bne.n	8004330 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	4b23      	ldr	r3, [pc, #140]	@ (800439c <BSP_LED_Init+0x114>)
 8004310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004314:	4a21      	ldr	r2, [pc, #132]	@ (800439c <BSP_LED_Init+0x114>)
 8004316:	f043 0304 	orr.w	r3, r3, #4
 800431a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800431e:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <BSP_LED_Init+0x114>)
 8004320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 800432c:	2301      	movs	r3, #1
 800432e:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8004330:	f001 fe0e 	bl	8005f50 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8004334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004336:	2b01      	cmp	r3, #1
 8004338:	d107      	bne.n	800434a <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800433a:	4b18      	ldr	r3, [pc, #96]	@ (800439c <BSP_LED_Init+0x114>)
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004340:	4a16      	ldr	r2, [pc, #88]	@ (800439c <BSP_LED_Init+0x114>)
 8004342:	f023 0304 	bic.w	r3, r3, #4
 8004346:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 800434a:	4b14      	ldr	r3, [pc, #80]	@ (800439c <BSP_LED_Init+0x114>)
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004350:	4a12      	ldr	r2, [pc, #72]	@ (800439c <BSP_LED_Init+0x114>)
 8004352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004356:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <BSP_LED_Init+0x114>)
 800435c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	4a0d      	ldr	r2, [pc, #52]	@ (80043a0 <BSP_LED_Init+0x118>)
 800436c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004370:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004372:	2301      	movs	r3, #1
 8004374:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437a:	2303      	movs	r3, #3
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	4a08      	ldr	r2, [pc, #32]	@ (80043a4 <BSP_LED_Init+0x11c>)
 8004382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004386:	f107 021c 	add.w	r2, r7, #28
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fbb1 	bl	8004af4 <HAL_GPIO_Init>
  }

  return ret;
 8004392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004394:	4618      	mov	r0, r3
 8004396:	3738      	adds	r7, #56	@ 0x38
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	46020c00 	.word	0x46020c00
 80043a0:	08011498 	.word	0x08011498
 80043a4:	20000004 	.word	0x20000004

080043a8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	460a      	mov	r2, r1
 80043b2:	71fb      	strb	r3, [r7, #7]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80043b8:	4b30      	ldr	r3, [pc, #192]	@ (800447c <BSP_PB_Init+0xd4>)
 80043ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043be:	4a2f      	ldr	r2, [pc, #188]	@ (800447c <BSP_PB_Init+0xd4>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80043c8:	4b2c      	ldr	r3, [pc, #176]	@ (800447c <BSP_PB_Init+0xd4>)
 80043ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80043d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043da:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80043dc:	2302      	movs	r3, #2
 80043de:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80043e0:	2302      	movs	r3, #2
 80043e2:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80043e4:	79bb      	ldrb	r3, [r7, #6]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10c      	bne.n	8004404 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80043ea:	2300      	movs	r3, #0
 80043ec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	4a23      	ldr	r2, [pc, #140]	@ (8004480 <BSP_PB_Init+0xd8>)
 80043f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f6:	f107 020c 	add.w	r2, r7, #12
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fb79 	bl	8004af4 <HAL_GPIO_Init>
 8004402:	e036      	b.n	8004472 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004404:	4b1f      	ldr	r3, [pc, #124]	@ (8004484 <BSP_PB_Init+0xdc>)
 8004406:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	4a1d      	ldr	r2, [pc, #116]	@ (8004480 <BSP_PB_Init+0xd8>)
 800440c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004410:	f107 020c 	add.w	r2, r7, #12
 8004414:	4611      	mov	r1, r2
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fb6c 	bl	8004af4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800441c:	79fa      	ldrb	r2, [r7, #7]
 800441e:	4613      	mov	r3, r2
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4a18      	ldr	r2, [pc, #96]	@ (8004488 <BSP_PB_Init+0xe0>)
 8004428:	441a      	add	r2, r3
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	4917      	ldr	r1, [pc, #92]	@ (800448c <BSP_PB_Init+0xe4>)
 800442e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f000 fb01 	bl	8004a3c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800443a:	79fa      	ldrb	r2, [r7, #7]
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4a10      	ldr	r2, [pc, #64]	@ (8004488 <BSP_PB_Init+0xe0>)
 8004446:	1898      	adds	r0, r3, r2
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	4a11      	ldr	r2, [pc, #68]	@ (8004490 <BSP_PB_Init+0xe8>)
 800444c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004450:	461a      	mov	r2, r3
 8004452:	2100      	movs	r1, #0
 8004454:	f000 fac6 	bl	80049e4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004458:	2018      	movs	r0, #24
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	4a0d      	ldr	r2, [pc, #52]	@ (8004494 <BSP_PB_Init+0xec>)
 800445e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004462:	2200      	movs	r2, #0
 8004464:	4619      	mov	r1, r3
 8004466:	f000 f9e1 	bl	800482c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800446a:	2318      	movs	r3, #24
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f9f7 	bl	8004860 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	46020c00 	.word	0x46020c00
 8004480:	20000010 	.word	0x20000010
 8004484:	10110000 	.word	0x10110000
 8004488:	20000438 	.word	0x20000438
 800448c:	080114a0 	.word	0x080114a0
 8004490:	20000014 	.word	0x20000014
 8004494:	20000018 	.word	0x20000018

08004498 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80044a2:	79fa      	ldrb	r2, [r7, #7]
 80044a4:	4613      	mov	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4a04      	ldr	r2, [pc, #16]	@ (80044c0 <BSP_PB_IRQHandler+0x28>)
 80044ae:	4413      	add	r3, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fad7 	bl	8004a64 <HAL_EXTI_IRQHandler>
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000438 	.word	0x20000438

080044c4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80044de:	2000      	movs	r0, #0
 80044e0:	f7ff fff0 	bl	80044c4 <BSP_PB_Callback>
}
 80044e4:	bf00      	nop
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044ec:	4b12      	ldr	r3, [pc, #72]	@ (8004538 <HAL_Init+0x50>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a11      	ldr	r2, [pc, #68]	@ (8004538 <HAL_Init+0x50>)
 80044f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044f8:	2003      	movs	r0, #3
 80044fa:	f000 f98c 	bl	8004816 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80044fe:	f002 fe15 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8004502:	4602      	mov	r2, r0
 8004504:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <HAL_Init+0x54>)
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	490c      	ldr	r1, [pc, #48]	@ (8004540 <HAL_Init+0x58>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	4a0b      	ldr	r2, [pc, #44]	@ (8004544 <HAL_Init+0x5c>)
 8004516:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004518:	2004      	movs	r0, #4
 800451a:	f000 f9d1 	bl	80048c0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800451e:	200f      	movs	r0, #15
 8004520:	f000 f812 	bl	8004548 <HAL_InitTick>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e002      	b.n	8004534 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800452e:	f7ff fbd3 	bl	8003cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40022000 	.word	0x40022000
 800453c:	46020c00 	.word	0x46020c00
 8004540:	08011440 	.word	0x08011440
 8004544:	20000000 	.word	0x20000000

08004548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8004554:	4b33      	ldr	r3, [pc, #204]	@ (8004624 <HAL_InitTick+0xdc>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e05c      	b.n	800461a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8004560:	4b31      	ldr	r3, [pc, #196]	@ (8004628 <HAL_InitTick+0xe0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b04      	cmp	r3, #4
 800456a:	d10c      	bne.n	8004586 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800456c:	4b2f      	ldr	r3, [pc, #188]	@ (800462c <HAL_InitTick+0xe4>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b2c      	ldr	r3, [pc, #176]	@ (8004624 <HAL_InitTick+0xdc>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	4619      	mov	r1, r3
 8004576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800457a:	fbb3 f3f1 	udiv	r3, r3, r1
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	e037      	b.n	80045f6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8004586:	f000 f9f3 	bl	8004970 <HAL_SYSTICK_GetCLKSourceConfig>
 800458a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d023      	beq.n	80045da <HAL_InitTick+0x92>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d82d      	bhi.n	80045f4 <HAL_InitTick+0xac>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_InitTick+0x5e>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d00d      	beq.n	80045c0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80045a4:	e026      	b.n	80045f4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80045a6:	4b21      	ldr	r3, [pc, #132]	@ (800462c <HAL_InitTick+0xe4>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004624 <HAL_InitTick+0xdc>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	4619      	mov	r1, r3
 80045b0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80045b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	60fb      	str	r3, [r7, #12]
        break;
 80045be:	e01a      	b.n	80045f6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80045c0:	4b18      	ldr	r3, [pc, #96]	@ (8004624 <HAL_InitTick+0xdc>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80045ce:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	60fb      	str	r3, [r7, #12]
        break;
 80045d8:	e00d      	b.n	80045f6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80045da:	4b12      	ldr	r3, [pc, #72]	@ (8004624 <HAL_InitTick+0xdc>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80045e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	60fb      	str	r3, [r7, #12]
        break;
 80045f2:	e000      	b.n	80045f6 <HAL_InitTick+0xae>
        break;
 80045f4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f940 	bl	800487c <HAL_SYSTICK_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e009      	b.n	800461a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004606:	2200      	movs	r2, #0
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800460e:	f000 f90d 	bl	800482c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8004612:	4a07      	ldr	r2, [pc, #28]	@ (8004630 <HAL_InitTick+0xe8>)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000020 	.word	0x20000020
 8004628:	e000e010 	.word	0xe000e010
 800462c:	20000000 	.word	0x20000000
 8004630:	2000001c 	.word	0x2000001c

08004634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004638:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <HAL_IncTick+0x20>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	4b06      	ldr	r3, [pc, #24]	@ (8004658 <HAL_IncTick+0x24>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4413      	add	r3, r2
 8004644:	4a04      	ldr	r2, [pc, #16]	@ (8004658 <HAL_IncTick+0x24>)
 8004646:	6013      	str	r3, [r2, #0]
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000020 	.word	0x20000020
 8004658:	20000444 	.word	0x20000444

0800465c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return uwTick;
 8004660:	4b03      	ldr	r3, [pc, #12]	@ (8004670 <HAL_GetTick+0x14>)
 8004662:	681b      	ldr	r3, [r3, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000444 	.word	0x20000444

08004674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800467c:	f7ff ffee 	bl	800465c <HAL_GetTick>
 8004680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800468c:	d005      	beq.n	800469a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <HAL_Delay+0x44>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800469a:	bf00      	nop
 800469c:	f7ff ffde 	bl	800465c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d8f7      	bhi.n	800469c <HAL_Delay+0x28>
  {
  }
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000020 	.word	0x20000020

080046bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004700 <__NVIC_SetPriorityGrouping+0x44>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046d8:	4013      	ands	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ee:	4a04      	ldr	r2, [pc, #16]	@ (8004700 <__NVIC_SetPriorityGrouping+0x44>)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	60d3      	str	r3, [r2, #12]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004708:	4b04      	ldr	r3, [pc, #16]	@ (800471c <__NVIC_GetPriorityGrouping+0x18>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	0a1b      	lsrs	r3, r3, #8
 800470e:	f003 0307 	and.w	r3, r3, #7
}
 8004712:	4618      	mov	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800472a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800472e:	2b00      	cmp	r3, #0
 8004730:	db0b      	blt.n	800474a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	f003 021f 	and.w	r2, r3, #31
 8004738:	4907      	ldr	r1, [pc, #28]	@ (8004758 <__NVIC_EnableIRQ+0x38>)
 800473a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	2001      	movs	r0, #1
 8004742:	fa00 f202 	lsl.w	r2, r0, r2
 8004746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	e000e100 	.word	0xe000e100

0800475c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	6039      	str	r1, [r7, #0]
 8004766:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800476c:	2b00      	cmp	r3, #0
 800476e:	db0a      	blt.n	8004786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	b2da      	uxtb	r2, r3
 8004774:	490c      	ldr	r1, [pc, #48]	@ (80047a8 <__NVIC_SetPriority+0x4c>)
 8004776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800477a:	0112      	lsls	r2, r2, #4
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	440b      	add	r3, r1
 8004780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004784:	e00a      	b.n	800479c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	b2da      	uxtb	r2, r3
 800478a:	4908      	ldr	r1, [pc, #32]	@ (80047ac <__NVIC_SetPriority+0x50>)
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	3b04      	subs	r3, #4
 8004794:	0112      	lsls	r2, r2, #4
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	440b      	add	r3, r1
 800479a:	761a      	strb	r2, [r3, #24]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000e100 	.word	0xe000e100
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b089      	sub	sp, #36	@ 0x24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f1c3 0307 	rsb	r3, r3, #7
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	bf28      	it	cs
 80047ce:	2304      	movcs	r3, #4
 80047d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3304      	adds	r3, #4
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d902      	bls.n	80047e0 <NVIC_EncodePriority+0x30>
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3b03      	subs	r3, #3
 80047de:	e000      	b.n	80047e2 <NVIC_EncodePriority+0x32>
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43da      	mvns	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	401a      	ands	r2, r3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004802:	43d9      	mvns	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004808:	4313      	orrs	r3, r2
         );
}
 800480a:	4618      	mov	r0, r3
 800480c:	3724      	adds	r7, #36	@ 0x24
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ff4c 	bl	80046bc <__NVIC_SetPriorityGrouping>
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800483a:	f7ff ff63 	bl	8004704 <__NVIC_GetPriorityGrouping>
 800483e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	6978      	ldr	r0, [r7, #20]
 8004846:	f7ff ffb3 	bl	80047b0 <NVIC_EncodePriority>
 800484a:	4602      	mov	r2, r0
 800484c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff ff82 	bl	800475c <__NVIC_SetPriority>
}
 8004858:	bf00      	nop
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800486a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ff56 	bl	8004720 <__NVIC_EnableIRQ>
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3b01      	subs	r3, #1
 8004888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800488c:	d301      	bcc.n	8004892 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800488e:	2301      	movs	r3, #1
 8004890:	e00d      	b.n	80048ae <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004892:	4a0a      	ldr	r2, [pc, #40]	@ (80048bc <HAL_SYSTICK_Config+0x40>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800489a:	4b08      	ldr	r3, [pc, #32]	@ (80048bc <HAL_SYSTICK_Config+0x40>)
 800489c:	2200      	movs	r2, #0
 800489e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80048a0:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <HAL_SYSTICK_Config+0x40>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a05      	ldr	r2, [pc, #20]	@ (80048bc <HAL_SYSTICK_Config+0x40>)
 80048a6:	f043 0303 	orr.w	r3, r3, #3
 80048aa:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	e000e010 	.word	0xe000e010

080048c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d844      	bhi.n	8004958 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80048ce:	a201      	add	r2, pc, #4	@ (adr r2, 80048d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	080048f7 	.word	0x080048f7
 80048d8:	08004915 	.word	0x08004915
 80048dc:	08004937 	.word	0x08004937
 80048e0:	08004959 	.word	0x08004959
 80048e4:	080048e9 	.word	0x080048e9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80048e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004968 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004968 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6013      	str	r3, [r2, #0]
      break;
 80048f4:	e031      	b.n	800495a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80048f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004968 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004968 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004902:	4b1a      	ldr	r3, [pc, #104]	@ (800496c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004908:	4a18      	ldr	r2, [pc, #96]	@ (800496c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800490a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800490e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004912:	e022      	b.n	800495a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004914:	4b14      	ldr	r3, [pc, #80]	@ (8004968 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a13      	ldr	r2, [pc, #76]	@ (8004968 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800491a:	f023 0304 	bic.w	r3, r3, #4
 800491e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004920:	4b12      	ldr	r3, [pc, #72]	@ (800496c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004926:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800492a:	4a10      	ldr	r2, [pc, #64]	@ (800496c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800492c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004934:	e011      	b.n	800495a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004936:	4b0c      	ldr	r3, [pc, #48]	@ (8004968 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a0b      	ldr	r2, [pc, #44]	@ (8004968 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004942:	4b0a      	ldr	r3, [pc, #40]	@ (800496c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004948:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800494c:	4a07      	ldr	r2, [pc, #28]	@ (800496c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800494e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004956:	e000      	b.n	800495a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004958:	bf00      	nop
  }
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	e000e010 	.word	0xe000e010
 800496c:	46020c00 	.word	0x46020c00

08004970 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8004976:	4b19      	ldr	r3, [pc, #100]	@ (80049dc <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004982:	2304      	movs	r3, #4
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	e021      	b.n	80049cc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8004988:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800498a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800498e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004992:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800499a:	d011      	beq.n	80049c0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049a2:	d810      	bhi.n	80049c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b0:	d003      	beq.n	80049ba <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80049b2:	e008      	b.n	80049c6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80049b4:	2300      	movs	r3, #0
 80049b6:	607b      	str	r3, [r7, #4]
        break;
 80049b8:	e008      	b.n	80049cc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80049ba:	2301      	movs	r3, #1
 80049bc:	607b      	str	r3, [r7, #4]
        break;
 80049be:	e005      	b.n	80049cc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80049c0:	2302      	movs	r3, #2
 80049c2:	607b      	str	r3, [r7, #4]
        break;
 80049c4:	e002      	b.n	80049cc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
        break;
 80049ca:	bf00      	nop
    }
  }
  return systick_source;
 80049cc:	687b      	ldr	r3, [r7, #4]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	e000e010 	.word	0xe000e010
 80049e0:	46020c00 	.word	0x46020c00

080049e4 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	460b      	mov	r3, r1
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80049f6:	7afb      	ldrb	r3, [r7, #11]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d011      	beq.n	8004a20 <HAL_EXTI_RegisterCallback+0x3c>
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	dc13      	bgt.n	8004a28 <HAL_EXTI_RegisterCallback+0x44>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_EXTI_RegisterCallback+0x26>
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d007      	beq.n	8004a18 <HAL_EXTI_RegisterCallback+0x34>
 8004a08:	e00e      	b.n	8004a28 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
      break;
 8004a16:	e00a      	b.n	8004a2e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	605a      	str	r2, [r3, #4]
      break;
 8004a1e:	e006      	b.n	8004a2e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	609a      	str	r2, [r3, #8]
      break;
 8004a26:	e002      	b.n	8004a2e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2c:	bf00      	nop
  }

  return status;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e003      	b.n	8004a58 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2201      	movs	r2, #1
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	4b17      	ldr	r3, [pc, #92]	@ (8004aec <HAL_EXTI_IRQHandler+0x88>)
 8004a8e:	4413      	add	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	4b0d      	ldr	r3, [pc, #52]	@ (8004af0 <HAL_EXTI_IRQHandler+0x8c>)
 8004abc:	4413      	add	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	4798      	blx	r3
    }
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	4602200c 	.word	0x4602200c
 8004af0:	46022010 	.word	0x46022010

08004af4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b089      	sub	sp, #36	@ 0x24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004b06:	e1c2      	b.n	8004e8e <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 81b2 	beq.w	8004e88 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a55      	ldr	r2, [pc, #340]	@ (8004c7c <HAL_GPIO_Init+0x188>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d15d      	bne.n	8004be8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004b32:	2201      	movs	r2, #1
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0201 	and.w	r2, r3, #1
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004b5c:	4a48      	ldr	r2, [pc, #288]	@ (8004c80 <HAL_GPIO_Init+0x18c>)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b64:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004b66:	4a46      	ldr	r2, [pc, #280]	@ (8004c80 <HAL_GPIO_Init+0x18c>)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	08da      	lsrs	r2, r3, #3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	3208      	adds	r2, #8
 8004b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b7e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	220f      	movs	r2, #15
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	220b      	movs	r2, #11
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	08da      	lsrs	r2, r3, #3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	3208      	adds	r2, #8
 8004bb2:	69f9      	ldr	r1, [r7, #28]
 8004bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e067      	b.n	8004cb8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d003      	beq.n	8004bf8 <HAL_GPIO_Init+0x104>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b12      	cmp	r3, #18
 8004bf6:	d145      	bne.n	8004c84 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	08da      	lsrs	r2, r3, #3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3208      	adds	r2, #8
 8004c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	220f      	movs	r2, #15
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	43db      	mvns	r3, r3
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	08da      	lsrs	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3208      	adds	r2, #8
 8004c3e:	69f9      	ldr	r1, [r7, #28]
 8004c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	2203      	movs	r2, #3
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	43db      	mvns	r3, r3
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 0203 	and.w	r2, r3, #3
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e01e      	b.n	8004cb8 <HAL_GPIO_Init+0x1c4>
 8004c7a:	bf00      	nop
 8004c7c:	46020000 	.word	0x46020000
 8004c80:	080114a4 	.word	0x080114a4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	2203      	movs	r2, #3
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	43db      	mvns	r3, r3
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 0203 	and.w	r2, r3, #3
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	69fa      	ldr	r2, [r7, #28]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_GPIO_Init+0x1e4>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d007      	beq.n	8004cd8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ccc:	2b11      	cmp	r3, #17
 8004cce:	d003      	beq.n	8004cd8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b12      	cmp	r3, #18
 8004cd6:	d130      	bne.n	8004d3a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004d0e:	2201      	movs	r2, #1
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	f003 0201 	and.w	r2, r3, #1
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d107      	bne.n	8004d52 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d11b      	bne.n	8004d82 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d017      	beq.n	8004d82 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d07c      	beq.n	8004e88 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004d8e:	4a47      	ldr	r2, [pc, #284]	@ (8004eac <HAL_GPIO_Init+0x3b8>)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	089b      	lsrs	r3, r3, #2
 8004d94:	3318      	adds	r3, #24
 8004d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	220f      	movs	r2, #15
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0a9a      	lsrs	r2, r3, #10
 8004db6:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb0 <HAL_GPIO_Init+0x3bc>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	f002 0203 	and.w	r2, r2, #3
 8004dc0:	00d2      	lsls	r2, r2, #3
 8004dc2:	4093      	lsls	r3, r2
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004dca:	4938      	ldr	r1, [pc, #224]	@ (8004eac <HAL_GPIO_Init+0x3b8>)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	3318      	adds	r3, #24
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004dd8:	4b34      	ldr	r3, [pc, #208]	@ (8004eac <HAL_GPIO_Init+0x3b8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8004eac <HAL_GPIO_Init+0x3b8>)
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004e02:	4b2a      	ldr	r3, [pc, #168]	@ (8004eac <HAL_GPIO_Init+0x3b8>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004e26:	4a21      	ldr	r2, [pc, #132]	@ (8004eac <HAL_GPIO_Init+0x3b8>)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004eac <HAL_GPIO_Init+0x3b8>)
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e32:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004e52:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <HAL_GPIO_Init+0x3b8>)
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004e5a:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <HAL_GPIO_Init+0x3b8>)
 8004e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e60:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004e80:	4a0a      	ldr	r2, [pc, #40]	@ (8004eac <HAL_GPIO_Init+0x3b8>)
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f47f ae35 	bne.w	8004b08 <HAL_GPIO_Init+0x14>
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	3724      	adds	r7, #36	@ 0x24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	46022000 	.word	0x46022000
 8004eb0:	002f7f7f 	.word	0x002f7f7f

08004eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	807b      	strh	r3, [r7, #2]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ec4:	787b      	ldrb	r3, [r7, #1]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eca:	887a      	ldrh	r2, [r7, #2]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004ed0:	e002      	b.n	8004ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004ed2:	887a      	ldrh	r2, [r7, #2]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e08d      	b.n	8005012 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fe fefe 	bl	8003d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2224      	movs	r2, #36	@ 0x24
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0201 	bic.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f5a:	609a      	str	r2, [r3, #8]
 8004f5c:	e006      	b.n	8004f6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004f6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d108      	bne.n	8004f86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	e007      	b.n	8004f96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004fa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69d9      	ldr	r1, [r3, #28]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1a      	ldr	r2, [r3, #32]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	4608      	mov	r0, r1
 8005026:	4611      	mov	r1, r2
 8005028:	461a      	mov	r2, r3
 800502a:	4603      	mov	r3, r0
 800502c:	817b      	strh	r3, [r7, #10]
 800502e:	460b      	mov	r3, r1
 8005030:	813b      	strh	r3, [r7, #8]
 8005032:	4613      	mov	r3, r2
 8005034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b20      	cmp	r3, #32
 8005040:	f040 80f9 	bne.w	8005236 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_I2C_Mem_Write+0x34>
 800504a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d105      	bne.n	800505c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005056:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0ed      	b.n	8005238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_I2C_Mem_Write+0x4e>
 8005066:	2302      	movs	r3, #2
 8005068:	e0e6      	b.n	8005238 <HAL_I2C_Mem_Write+0x21c>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005072:	f7ff faf3 	bl	800465c <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2319      	movs	r3, #25
 800507e:	2201      	movs	r2, #1
 8005080:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fbc9 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0d1      	b.n	8005238 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2221      	movs	r2, #33	@ 0x21
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2240      	movs	r2, #64	@ 0x40
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a3a      	ldr	r2, [r7, #32]
 80050ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80050b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050bc:	88f8      	ldrh	r0, [r7, #6]
 80050be:	893a      	ldrh	r2, [r7, #8]
 80050c0:	8979      	ldrh	r1, [r7, #10]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	4603      	mov	r3, r0
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fad9 	bl	8005684 <I2C_RequestMemoryWrite>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0a9      	b.n	8005238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2bff      	cmp	r3, #255	@ 0xff
 80050ec:	d90e      	bls.n	800510c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	22ff      	movs	r2, #255	@ 0xff
 80050f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	8979      	ldrh	r1, [r7, #10]
 80050fc:	2300      	movs	r3, #0
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 fd4d 	bl	8005ba4 <I2C_TransferConfig>
 800510a:	e00f      	b.n	800512c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511a:	b2da      	uxtb	r2, r3
 800511c:	8979      	ldrh	r1, [r7, #10]
 800511e:	2300      	movs	r3, #0
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fd3c 	bl	8005ba4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fbcc 	bl	80058ce <I2C_WaitOnTXISFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e07b      	b.n	8005238 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d034      	beq.n	80051e4 <HAL_I2C_Mem_Write+0x1c8>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d130      	bne.n	80051e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	2200      	movs	r2, #0
 800518a:	2180      	movs	r1, #128	@ 0x80
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fb45 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e04d      	b.n	8005238 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2bff      	cmp	r3, #255	@ 0xff
 80051a4:	d90e      	bls.n	80051c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	22ff      	movs	r2, #255	@ 0xff
 80051aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	8979      	ldrh	r1, [r7, #10]
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fcf1 	bl	8005ba4 <I2C_TransferConfig>
 80051c2:	e00f      	b.n	80051e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	8979      	ldrh	r1, [r7, #10]
 80051d6:	2300      	movs	r3, #0
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fce0 	bl	8005ba4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d19e      	bne.n	800512c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fbb2 	bl	800595c <I2C_WaitOnSTOPFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e01a      	b.n	8005238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2220      	movs	r2, #32
 8005208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6859      	ldr	r1, [r3, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	4b0a      	ldr	r3, [pc, #40]	@ (8005240 <HAL_I2C_Mem_Write+0x224>)
 8005216:	400b      	ands	r3, r1
 8005218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	fe00e800 	.word	0xfe00e800

08005244 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af02      	add	r7, sp, #8
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	4608      	mov	r0, r1
 800524e:	4611      	mov	r1, r2
 8005250:	461a      	mov	r2, r3
 8005252:	4603      	mov	r3, r0
 8005254:	817b      	strh	r3, [r7, #10]
 8005256:	460b      	mov	r3, r1
 8005258:	813b      	strh	r3, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b20      	cmp	r3, #32
 8005268:	f040 80fd 	bne.w	8005466 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_I2C_Mem_Read+0x34>
 8005272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	d105      	bne.n	8005284 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800527e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0f1      	b.n	8005468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_I2C_Mem_Read+0x4e>
 800528e:	2302      	movs	r3, #2
 8005290:	e0ea      	b.n	8005468 <HAL_I2C_Mem_Read+0x224>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800529a:	f7ff f9df 	bl	800465c <HAL_GetTick>
 800529e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	2319      	movs	r3, #25
 80052a6:	2201      	movs	r2, #1
 80052a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fab5 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0d5      	b.n	8005468 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2222      	movs	r2, #34	@ 0x22
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2240      	movs	r2, #64	@ 0x40
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a3a      	ldr	r2, [r7, #32]
 80052d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052e4:	88f8      	ldrh	r0, [r7, #6]
 80052e6:	893a      	ldrh	r2, [r7, #8]
 80052e8:	8979      	ldrh	r1, [r7, #10]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	4603      	mov	r3, r0
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fa19 	bl	800572c <I2C_RequestMemoryRead>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0ad      	b.n	8005468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005310:	b29b      	uxth	r3, r3
 8005312:	2bff      	cmp	r3, #255	@ 0xff
 8005314:	d90e      	bls.n	8005334 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	22ff      	movs	r2, #255	@ 0xff
 800531a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005320:	b2da      	uxtb	r2, r3
 8005322:	8979      	ldrh	r1, [r7, #10]
 8005324:	4b52      	ldr	r3, [pc, #328]	@ (8005470 <HAL_I2C_Mem_Read+0x22c>)
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fc39 	bl	8005ba4 <I2C_TransferConfig>
 8005332:	e00f      	b.n	8005354 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005342:	b2da      	uxtb	r2, r3
 8005344:	8979      	ldrh	r1, [r7, #10]
 8005346:	4b4a      	ldr	r3, [pc, #296]	@ (8005470 <HAL_I2C_Mem_Read+0x22c>)
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fc28 	bl	8005ba4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	2200      	movs	r2, #0
 800535c:	2104      	movs	r1, #4
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fa5c 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e07c      	b.n	8005468 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d034      	beq.n	8005414 <HAL_I2C_Mem_Read+0x1d0>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d130      	bne.n	8005414 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b8:	2200      	movs	r2, #0
 80053ba:	2180      	movs	r1, #128	@ 0x80
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fa2d 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e04d      	b.n	8005468 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2bff      	cmp	r3, #255	@ 0xff
 80053d4:	d90e      	bls.n	80053f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	22ff      	movs	r2, #255	@ 0xff
 80053da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	8979      	ldrh	r1, [r7, #10]
 80053e4:	2300      	movs	r3, #0
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 fbd9 	bl	8005ba4 <I2C_TransferConfig>
 80053f2:	e00f      	b.n	8005414 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005402:	b2da      	uxtb	r2, r3
 8005404:	8979      	ldrh	r1, [r7, #10]
 8005406:	2300      	movs	r3, #0
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 fbc8 	bl	8005ba4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d19a      	bne.n	8005354 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fa9a 	bl	800595c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e01a      	b.n	8005468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2220      	movs	r2, #32
 8005438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6859      	ldr	r1, [r3, #4]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	4b0b      	ldr	r3, [pc, #44]	@ (8005474 <HAL_I2C_Mem_Read+0x230>)
 8005446:	400b      	ands	r3, r1
 8005448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	e000      	b.n	8005468 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005466:	2302      	movs	r3, #2
  }
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	80002400 	.word	0x80002400
 8005474:	fe00e800 	.word	0xfe00e800

08005478 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	@ 0x28
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	460b      	mov	r3, r1
 8005486:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 800548c:	2300      	movs	r3, #0
 800548e:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b20      	cmp	r3, #32
 800549a:	f040 80ed 	bne.w	8005678 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ac:	d101      	bne.n	80054b2 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
 80054b0:	e0e3      	b.n	800567a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_I2C_IsDeviceReady+0x48>
 80054bc:	2302      	movs	r3, #2
 80054be:	e0dc      	b.n	800567a <HAL_I2C_IsDeviceReady+0x202>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2224      	movs	r2, #36	@ 0x24
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d107      	bne.n	80054ee <HAL_I2C_IsDeviceReady+0x76>
 80054de:	897b      	ldrh	r3, [r7, #10]
 80054e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80054ec:	e006      	b.n	80054fc <HAL_I2C_IsDeviceReady+0x84>
 80054ee:	897b      	ldrh	r3, [r7, #10]
 80054f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054f8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005502:	f7ff f8ab 	bl	800465c <HAL_GetTick>
 8005506:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b20      	cmp	r3, #32
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b10      	cmp	r3, #16
 800552a:	bf0c      	ite	eq
 800552c:	2301      	moveq	r3, #1
 800552e:	2300      	movne	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005534:	e034      	b.n	80055a0 <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800553c:	d01a      	beq.n	8005574 <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7ff f88d 	bl	800465c <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <HAL_I2C_IsDeviceReady+0xdc>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10f      	bne.n	8005574 <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005560:	f043 0220 	orr.w	r2, r3, #32
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e082      	b.n	800567a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	bf0c      	ite	eq
 8005582:	2301      	moveq	r3, #1
 8005584:	2300      	movne	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b10      	cmp	r3, #16
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80055a0:	7fbb      	ldrb	r3, [r7, #30]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d102      	bne.n	80055ac <HAL_I2C_IsDeviceReady+0x134>
 80055a6:	7f7b      	ldrb	r3, [r7, #29]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0c4      	beq.n	8005536 <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d027      	beq.n	800560a <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2200      	movs	r2, #0
 80055c2:	2120      	movs	r1, #32
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f929 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00e      	beq.n	80055ee <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d107      	bne.n	80055e8 <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2220      	movs	r2, #32
 80055de:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80055e6:	e026      	b.n	8005636 <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e023      	b.n	8005636 <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2220      	movs	r2, #32
 80055f4:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e037      	b.n	800567a <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2210      	movs	r2, #16
 8005610:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2200      	movs	r2, #0
 800561a:	2120      	movs	r1, #32
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f8fd 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e003      	b.n	8005636 <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2220      	movs	r2, #32
 8005634:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	3301      	adds	r3, #1
 800563a:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d904      	bls.n	800564e <HAL_I2C_IsDeviceReady+0x1d6>
 8005644:	7ffb      	ldrb	r3, [r7, #31]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	f63f af3f 	bhi.w	80054d6 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005664:	f043 0220 	orr.w	r2, r3, #32
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
  }
}
 800567a:	4618      	mov	r0, r3
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	4608      	mov	r0, r1
 800568e:	4611      	mov	r1, r2
 8005690:	461a      	mov	r2, r3
 8005692:	4603      	mov	r3, r0
 8005694:	817b      	strh	r3, [r7, #10]
 8005696:	460b      	mov	r3, r1
 8005698:	813b      	strh	r3, [r7, #8]
 800569a:	4613      	mov	r3, r2
 800569c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	8979      	ldrh	r1, [r7, #10]
 80056a4:	4b20      	ldr	r3, [pc, #128]	@ (8005728 <I2C_RequestMemoryWrite+0xa4>)
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 fa79 	bl	8005ba4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	69b9      	ldr	r1, [r7, #24]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f909 	bl	80058ce <I2C_WaitOnTXISFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e02c      	b.n	8005720 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d105      	bne.n	80056d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056cc:	893b      	ldrh	r3, [r7, #8]
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80056d6:	e015      	b.n	8005704 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056d8:	893b      	ldrh	r3, [r7, #8]
 80056da:	0a1b      	lsrs	r3, r3, #8
 80056dc:	b29b      	uxth	r3, r3
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	69b9      	ldr	r1, [r7, #24]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f8ef 	bl	80058ce <I2C_WaitOnTXISFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e012      	b.n	8005720 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056fa:	893b      	ldrh	r3, [r7, #8]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2200      	movs	r2, #0
 800570c:	2180      	movs	r1, #128	@ 0x80
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f884 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	80002000 	.word	0x80002000

0800572c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	4608      	mov	r0, r1
 8005736:	4611      	mov	r1, r2
 8005738:	461a      	mov	r2, r3
 800573a:	4603      	mov	r3, r0
 800573c:	817b      	strh	r3, [r7, #10]
 800573e:	460b      	mov	r3, r1
 8005740:	813b      	strh	r3, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	8979      	ldrh	r1, [r7, #10]
 800574c:	4b20      	ldr	r3, [pc, #128]	@ (80057d0 <I2C_RequestMemoryRead+0xa4>)
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	2300      	movs	r3, #0
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fa26 	bl	8005ba4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	69b9      	ldr	r1, [r7, #24]
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f8b6 	bl	80058ce <I2C_WaitOnTXISFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e02c      	b.n	80057c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d105      	bne.n	800577e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005772:	893b      	ldrh	r3, [r7, #8]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	629a      	str	r2, [r3, #40]	@ 0x28
 800577c:	e015      	b.n	80057aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800577e:	893b      	ldrh	r3, [r7, #8]
 8005780:	0a1b      	lsrs	r3, r3, #8
 8005782:	b29b      	uxth	r3, r3
 8005784:	b2da      	uxtb	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	69b9      	ldr	r1, [r7, #24]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f89c 	bl	80058ce <I2C_WaitOnTXISFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e012      	b.n	80057c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057a0:	893b      	ldrh	r3, [r7, #8]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2200      	movs	r2, #0
 80057b2:	2140      	movs	r1, #64	@ 0x40
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f831 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	80002000 	.word	0x80002000

080057d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d103      	bne.n	80057f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2200      	movs	r2, #0
 80057f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d007      	beq.n	8005810 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	619a      	str	r2, [r3, #24]
  }
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800582c:	e03b      	b.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f8d6 	bl	80059e4 <I2C_IsErrorOccurred>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e041      	b.n	80058c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005848:	d02d      	beq.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584a:	f7fe ff07 	bl	800465c <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d302      	bcc.n	8005860 <I2C_WaitOnFlagUntilTimeout+0x44>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d122      	bne.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	4013      	ands	r3, r2
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	429a      	cmp	r2, r3
 800586e:	bf0c      	ite	eq
 8005870:	2301      	moveq	r3, #1
 8005872:	2300      	movne	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	429a      	cmp	r2, r3
 800587c:	d113      	bne.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e00f      	b.n	80058c6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699a      	ldr	r2, [r3, #24]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	bf0c      	ite	eq
 80058b6:	2301      	moveq	r3, #1
 80058b8:	2300      	movne	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d0b4      	beq.n	800582e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058da:	e033      	b.n	8005944 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f87f 	bl	80059e4 <I2C_IsErrorOccurred>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e031      	b.n	8005954 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058f6:	d025      	beq.n	8005944 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f8:	f7fe feb0 	bl	800465c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d11a      	bne.n	8005944 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b02      	cmp	r3, #2
 800591a:	d013      	beq.n	8005944 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e007      	b.n	8005954 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b02      	cmp	r3, #2
 8005950:	d1c4      	bne.n	80058dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005968:	e02f      	b.n	80059ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f838 	bl	80059e4 <I2C_IsErrorOccurred>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e02d      	b.n	80059da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597e:	f7fe fe6d 	bl	800465c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11a      	bne.n	80059ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d013      	beq.n	80059ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e007      	b.n	80059da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d1c8      	bne.n	800596a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	@ 0x28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d068      	beq.n	8005ae2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2210      	movs	r2, #16
 8005a16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a18:	e049      	b.n	8005aae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a20:	d045      	beq.n	8005aae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fe fe1b 	bl	800465c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <I2C_IsErrorOccurred+0x54>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d13a      	bne.n	8005aae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a5a:	d121      	bne.n	8005aa0 <I2C_IsErrorOccurred+0xbc>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a62:	d01d      	beq.n	8005aa0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005a64:	7cfb      	ldrb	r3, [r7, #19]
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d01a      	beq.n	8005aa0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a7a:	f7fe fdef 	bl	800465c <HAL_GetTick>
 8005a7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a80:	e00e      	b.n	8005aa0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a82:	f7fe fdeb 	bl	800465c <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b19      	cmp	r3, #25
 8005a8e:	d907      	bls.n	8005aa0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f043 0320 	orr.w	r3, r3, #32
 8005a96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005a9e:	e006      	b.n	8005aae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d1e9      	bne.n	8005a82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d003      	beq.n	8005ac4 <I2C_IsErrorOccurred+0xe0>
 8005abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0aa      	beq.n	8005a1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d103      	bne.n	8005ad4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	f043 0304 	orr.w	r3, r3, #4
 8005ada:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f043 0308 	orr.w	r3, r3, #8
 8005b1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	f043 0302 	orr.w	r3, r3, #2
 8005b3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01c      	beq.n	8005b92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff fe3b 	bl	80057d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6859      	ldr	r1, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <I2C_IsErrorOccurred+0x1bc>)
 8005b6a:	400b      	ands	r3, r1
 8005b6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005b92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3728      	adds	r7, #40	@ 0x28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	fe00e800 	.word	0xfe00e800

08005ba4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	817b      	strh	r3, [r7, #10]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bb6:	897b      	ldrh	r3, [r7, #10]
 8005bb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bbc:	7a7b      	ldrb	r3, [r7, #9]
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bc4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bd2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	0d5b      	lsrs	r3, r3, #21
 8005bde:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005be2:	4b08      	ldr	r3, [pc, #32]	@ (8005c04 <I2C_TransferConfig+0x60>)
 8005be4:	430b      	orrs	r3, r1
 8005be6:	43db      	mvns	r3, r3
 8005be8:	ea02 0103 	and.w	r1, r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	03ff63ff 	.word	0x03ff63ff

08005c08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b20      	cmp	r3, #32
 8005c1c:	d138      	bne.n	8005c90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e032      	b.n	8005c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2224      	movs	r2, #36	@ 0x24
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6819      	ldr	r1, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e000      	b.n	8005c92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d139      	bne.n	8005d28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e033      	b.n	8005d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2224      	movs	r2, #36	@ 0x24
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005cf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
  }
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
	...

08005d38 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005d44:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
 8005d54:	e007      	b.n	8005d66 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005d56:	4b07      	ldr	r3, [pc, #28]	@ (8005d74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f023 0204 	bic.w	r2, r3, #4
 8005d5e:	4905      	ldr	r1, [pc, #20]	@ (8005d74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	40030400 	.word	0x40030400

08005d78 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005d7c:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <HAL_ICACHE_Enable+0x1c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a04      	ldr	r2, [pc, #16]	@ (8005d94 <HAL_ICACHE_Enable+0x1c>)
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	40030400 	.word	0x40030400

08005d98 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005da0:	4b39      	ldr	r3, [pc, #228]	@ (8005e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005da8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d10b      	bne.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db8:	d905      	bls.n	8005dc6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005dba:	4b33      	ldr	r3, [pc, #204]	@ (8005e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	4a32      	ldr	r2, [pc, #200]	@ (8005e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dc4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e057      	b.n	8005e7a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd0:	d90a      	bls.n	8005de8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	4a2a      	ldr	r2, [pc, #168]	@ (8005e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005de4:	60d3      	str	r3, [r2, #12]
 8005de6:	e007      	b.n	8005df8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005de8:	4b27      	ldr	r3, [pc, #156]	@ (8005e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005df0:	4925      	ldr	r1, [pc, #148]	@ (8005e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005df8:	4b24      	ldr	r3, [pc, #144]	@ (8005e8c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a24      	ldr	r2, [pc, #144]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	099b      	lsrs	r3, r3, #6
 8005e04:	2232      	movs	r2, #50	@ 0x32
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	4a21      	ldr	r2, [pc, #132]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e10:	099b      	lsrs	r3, r3, #6
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005e16:	e002      	b.n	8005e1e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1f3      	bne.n	8005e18 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01b      	beq.n	8005e6e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005e36:	4b15      	ldr	r3, [pc, #84]	@ (8005e8c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e40:	099b      	lsrs	r3, r3, #6
 8005e42:	2232      	movs	r2, #50	@ 0x32
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	4a11      	ldr	r2, [pc, #68]	@ (8005e90 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	099b      	lsrs	r3, r3, #6
 8005e50:	3301      	adds	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005e54:	e002      	b.n	8005e5c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f3      	bne.n	8005e56 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e000      	b.n	8005e7a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	46020800 	.word	0x46020800
 8005e8c:	20000000 	.word	0x20000000
 8005e90:	10624dd3 	.word	0x10624dd3

08005e94 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005e98:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <HAL_PWREx_GetVoltageRange+0x18>)
 8005e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	46020800 	.word	0x46020800

08005eb0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005eb8:	4b22      	ldr	r3, [pc, #136]	@ (8005f44 <HAL_PWREx_ConfigSupply+0x94>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a22      	ldr	r2, [pc, #136]	@ (8005f48 <HAL_PWREx_ConfigSupply+0x98>)
 8005ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec2:	099b      	lsrs	r3, r3, #6
 8005ec4:	2232      	movs	r2, #50	@ 0x32
 8005ec6:	fb02 f303 	mul.w	r3, r2, r3
 8005eca:	4a1f      	ldr	r2, [pc, #124]	@ (8005f48 <HAL_PWREx_ConfigSupply+0x98>)
 8005ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed0:	099b      	lsrs	r3, r3, #6
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d113      	bne.n	8005f04 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005edc:	4b1b      	ldr	r3, [pc, #108]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8005ee2:	f023 0302 	bic.w	r3, r3, #2
 8005ee6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005ee8:	e002      	b.n	8005ef0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005ef0:	4b16      	ldr	r3, [pc, #88]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d116      	bne.n	8005f2a <HAL_PWREx_ConfigSupply+0x7a>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f3      	bne.n	8005eea <HAL_PWREx_ConfigSupply+0x3a>
 8005f02:	e012      	b.n	8005f2a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005f04:	4b11      	ldr	r3, [pc, #68]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	4a10      	ldr	r2, [pc, #64]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8005f0a:	f043 0302 	orr.w	r3, r3, #2
 8005f0e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005f10:	e002      	b.n	8005f18 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005f18:	4b0c      	ldr	r3, [pc, #48]	@ (8005f4c <HAL_PWREx_ConfigSupply+0x9c>)
 8005f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d102      	bne.n	8005f2a <HAL_PWREx_ConfigSupply+0x7a>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f3      	bne.n	8005f12 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e000      	b.n	8005f36 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	20000000 	.word	0x20000000
 8005f48:	10624dd3 	.word	0x10624dd3
 8005f4c:	46020800 	.word	0x46020800

08005f50 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8005f54:	4b05      	ldr	r3, [pc, #20]	@ (8005f6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	4a04      	ldr	r2, [pc, #16]	@ (8005f6c <HAL_PWREx_EnableVddIO2+0x1c>)
 8005f5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f5e:	6113      	str	r3, [r2, #16]
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	46020800 	.word	0x46020800

08005f70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8005f74:	4b05      	ldr	r3, [pc, #20]	@ (8005f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f78:	4a04      	ldr	r2, [pc, #16]	@ (8005f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	46020800 	.word	0x46020800

08005f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08e      	sub	sp, #56	@ 0x38
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f000 bec8 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005faa:	4b99      	ldr	r3, [pc, #612]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fb4:	4b96      	ldr	r3, [pc, #600]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 816c 	beq.w	80062a4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x52>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	2b0c      	cmp	r3, #12
 8005fd6:	f040 80de 	bne.w	8006196 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	f040 80da 	bne.w	8006196 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f000 bea5 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ff4:	4b86      	ldr	r3, [pc, #536]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_RCC_OscConfig+0x7a>
 8006000:	4b83      	ldr	r3, [pc, #524]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006008:	e005      	b.n	8006016 <HAL_RCC_OscConfig+0x86>
 800600a:	4b81      	ldr	r3, [pc, #516]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 800600c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006016:	4293      	cmp	r3, r2
 8006018:	d255      	bcs.n	80060c6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800601a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	4618      	mov	r0, r3
 8006026:	f001 f9dd 	bl	80073e4 <RCC_SetFlashLatencyFromMSIRange>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f000 be82 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006036:	4b76      	ldr	r3, [pc, #472]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	4a75      	ldr	r2, [pc, #468]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 800603c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006040:	6093      	str	r3, [r2, #8]
 8006042:	4b73      	ldr	r3, [pc, #460]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604e:	4970      	ldr	r1, [pc, #448]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8006050:	4313      	orrs	r3, r2
 8006052:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800605c:	d309      	bcc.n	8006072 <HAL_RCC_OscConfig+0xe2>
 800605e:	4b6c      	ldr	r3, [pc, #432]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f023 021f 	bic.w	r2, r3, #31
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	4969      	ldr	r1, [pc, #420]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 800606c:	4313      	orrs	r3, r2
 800606e:	60cb      	str	r3, [r1, #12]
 8006070:	e07e      	b.n	8006170 <HAL_RCC_OscConfig+0x1e0>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	2b00      	cmp	r3, #0
 8006078:	da0a      	bge.n	8006090 <HAL_RCC_OscConfig+0x100>
 800607a:	4b65      	ldr	r3, [pc, #404]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	015b      	lsls	r3, r3, #5
 8006088:	4961      	ldr	r1, [pc, #388]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 800608a:	4313      	orrs	r3, r2
 800608c:	60cb      	str	r3, [r1, #12]
 800608e:	e06f      	b.n	8006170 <HAL_RCC_OscConfig+0x1e0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006098:	d30a      	bcc.n	80060b0 <HAL_RCC_OscConfig+0x120>
 800609a:	4b5d      	ldr	r3, [pc, #372]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	029b      	lsls	r3, r3, #10
 80060a8:	4959      	ldr	r1, [pc, #356]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60cb      	str	r3, [r1, #12]
 80060ae:	e05f      	b.n	8006170 <HAL_RCC_OscConfig+0x1e0>
 80060b0:	4b57      	ldr	r3, [pc, #348]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	03db      	lsls	r3, r3, #15
 80060be:	4954      	ldr	r1, [pc, #336]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60cb      	str	r3, [r1, #12]
 80060c4:	e054      	b.n	8006170 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80060c6:	4b52      	ldr	r3, [pc, #328]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	4a51      	ldr	r2, [pc, #324]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80060cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80060d0:	6093      	str	r3, [r2, #8]
 80060d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060de:	494c      	ldr	r1, [pc, #304]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80060ec:	d309      	bcc.n	8006102 <HAL_RCC_OscConfig+0x172>
 80060ee:	4b48      	ldr	r3, [pc, #288]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f023 021f 	bic.w	r2, r3, #31
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	4945      	ldr	r1, [pc, #276]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60cb      	str	r3, [r1, #12]
 8006100:	e028      	b.n	8006154 <HAL_RCC_OscConfig+0x1c4>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	2b00      	cmp	r3, #0
 8006108:	da0a      	bge.n	8006120 <HAL_RCC_OscConfig+0x190>
 800610a:	4b41      	ldr	r3, [pc, #260]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	015b      	lsls	r3, r3, #5
 8006118:	493d      	ldr	r1, [pc, #244]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 800611a:	4313      	orrs	r3, r2
 800611c:	60cb      	str	r3, [r1, #12]
 800611e:	e019      	b.n	8006154 <HAL_RCC_OscConfig+0x1c4>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006128:	d30a      	bcc.n	8006140 <HAL_RCC_OscConfig+0x1b0>
 800612a:	4b39      	ldr	r3, [pc, #228]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	029b      	lsls	r3, r3, #10
 8006138:	4935      	ldr	r1, [pc, #212]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 800613a:	4313      	orrs	r3, r2
 800613c:	60cb      	str	r3, [r1, #12]
 800613e:	e009      	b.n	8006154 <HAL_RCC_OscConfig+0x1c4>
 8006140:	4b33      	ldr	r3, [pc, #204]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	03db      	lsls	r3, r3, #15
 800614e:	4930      	ldr	r1, [pc, #192]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8006150:	4313      	orrs	r3, r2
 8006152:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615e:	4618      	mov	r0, r3
 8006160:	f001 f940 	bl	80073e4 <RCC_SetFlashLatencyFromMSIRange>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	f000 bde5 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006170:	f001 f8e2 	bl	8007338 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006174:	4b27      	ldr	r3, [pc, #156]	@ (8006214 <HAL_RCC_OscConfig+0x284>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe f9e5 	bl	8004548 <HAL_InitTick>
 800617e:	4603      	mov	r3, r0
 8006180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8006184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 808a 	beq.w	80062a2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800618e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006192:	f000 bdd2 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d066      	beq.n	800626c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800619e:	4b1c      	ldr	r3, [pc, #112]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80061a4:	f043 0301 	orr.w	r3, r3, #1
 80061a8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80061aa:	f7fe fa57 	bl	800465c <HAL_GetTick>
 80061ae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80061b0:	e009      	b.n	80061c6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061b2:	f7fe fa53 	bl	800465c <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d902      	bls.n	80061c6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	f000 bdba 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80061c6:	4b12      	ldr	r3, [pc, #72]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0ef      	beq.n	80061b2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80061d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80061d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061dc:	6093      	str	r3, [r2, #8]
 80061de:	4b0c      	ldr	r3, [pc, #48]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	4909      	ldr	r1, [pc, #36]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80061f8:	d30e      	bcc.n	8006218 <HAL_RCC_OscConfig+0x288>
 80061fa:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f023 021f 	bic.w	r2, r3, #31
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	4902      	ldr	r1, [pc, #8]	@ (8006210 <HAL_RCC_OscConfig+0x280>)
 8006208:	4313      	orrs	r3, r2
 800620a:	60cb      	str	r3, [r1, #12]
 800620c:	e04a      	b.n	80062a4 <HAL_RCC_OscConfig+0x314>
 800620e:	bf00      	nop
 8006210:	46020c00 	.word	0x46020c00
 8006214:	2000001c 	.word	0x2000001c
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	da0a      	bge.n	8006236 <HAL_RCC_OscConfig+0x2a6>
 8006220:	4b98      	ldr	r3, [pc, #608]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	015b      	lsls	r3, r3, #5
 800622e:	4995      	ldr	r1, [pc, #596]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006230:	4313      	orrs	r3, r2
 8006232:	60cb      	str	r3, [r1, #12]
 8006234:	e036      	b.n	80062a4 <HAL_RCC_OscConfig+0x314>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800623e:	d30a      	bcc.n	8006256 <HAL_RCC_OscConfig+0x2c6>
 8006240:	4b90      	ldr	r3, [pc, #576]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	029b      	lsls	r3, r3, #10
 800624e:	498d      	ldr	r1, [pc, #564]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006250:	4313      	orrs	r3, r2
 8006252:	60cb      	str	r3, [r1, #12]
 8006254:	e026      	b.n	80062a4 <HAL_RCC_OscConfig+0x314>
 8006256:	4b8b      	ldr	r3, [pc, #556]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	03db      	lsls	r3, r3, #15
 8006264:	4987      	ldr	r1, [pc, #540]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006266:	4313      	orrs	r3, r2
 8006268:	60cb      	str	r3, [r1, #12]
 800626a:	e01b      	b.n	80062a4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800626c:	4b85      	ldr	r3, [pc, #532]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a84      	ldr	r2, [pc, #528]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006272:	f023 0301 	bic.w	r3, r3, #1
 8006276:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006278:	f7fe f9f0 	bl	800465c <HAL_GetTick>
 800627c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800627e:	e009      	b.n	8006294 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006280:	f7fe f9ec 	bl	800465c <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d902      	bls.n	8006294 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	f000 bd53 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006294:	4b7b      	ldr	r3, [pc, #492]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1ef      	bne.n	8006280 <HAL_RCC_OscConfig+0x2f0>
 80062a0:	e000      	b.n	80062a4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80062a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 808b 	beq.w	80063c8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d005      	beq.n	80062c4 <HAL_RCC_OscConfig+0x334>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	2b0c      	cmp	r3, #12
 80062bc:	d109      	bne.n	80062d2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d106      	bne.n	80062d2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d17d      	bne.n	80063c8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	f000 bd34 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062da:	d106      	bne.n	80062ea <HAL_RCC_OscConfig+0x35a>
 80062dc:	4b69      	ldr	r3, [pc, #420]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a68      	ldr	r2, [pc, #416]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 80062e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	e041      	b.n	800636e <HAL_RCC_OscConfig+0x3de>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062f2:	d112      	bne.n	800631a <HAL_RCC_OscConfig+0x38a>
 80062f4:	4b63      	ldr	r3, [pc, #396]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a62      	ldr	r2, [pc, #392]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 80062fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	4b60      	ldr	r3, [pc, #384]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a5f      	ldr	r2, [pc, #380]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006306:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	4b5d      	ldr	r3, [pc, #372]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a5c      	ldr	r2, [pc, #368]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	e029      	b.n	800636e <HAL_RCC_OscConfig+0x3de>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006322:	d112      	bne.n	800634a <HAL_RCC_OscConfig+0x3ba>
 8006324:	4b57      	ldr	r3, [pc, #348]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a56      	ldr	r2, [pc, #344]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 800632a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4b54      	ldr	r3, [pc, #336]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a53      	ldr	r2, [pc, #332]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4b51      	ldr	r3, [pc, #324]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a50      	ldr	r2, [pc, #320]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	e011      	b.n	800636e <HAL_RCC_OscConfig+0x3de>
 800634a:	4b4e      	ldr	r3, [pc, #312]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a4d      	ldr	r2, [pc, #308]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	4b4b      	ldr	r3, [pc, #300]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a4a      	ldr	r2, [pc, #296]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 800635c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	4b48      	ldr	r3, [pc, #288]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a47      	ldr	r2, [pc, #284]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006368:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800636c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d014      	beq.n	80063a0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006376:	f7fe f971 	bl	800465c <HAL_GetTick>
 800637a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800637c:	e009      	b.n	8006392 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800637e:	f7fe f96d 	bl	800465c <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b64      	cmp	r3, #100	@ 0x64
 800638a:	d902      	bls.n	8006392 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	f000 bcd4 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006392:	4b3c      	ldr	r3, [pc, #240]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0ef      	beq.n	800637e <HAL_RCC_OscConfig+0x3ee>
 800639e:	e013      	b.n	80063c8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80063a0:	f7fe f95c 	bl	800465c <HAL_GetTick>
 80063a4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063a6:	e009      	b.n	80063bc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063a8:	f7fe f958 	bl	800465c <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b64      	cmp	r3, #100	@ 0x64
 80063b4:	d902      	bls.n	80063bc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	f000 bcbf 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063bc:	4b31      	ldr	r3, [pc, #196]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1ef      	bne.n	80063a8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d05f      	beq.n	8006494 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80063d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d005      	beq.n	80063e6 <HAL_RCC_OscConfig+0x456>
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	2b0c      	cmp	r3, #12
 80063de:	d114      	bne.n	800640a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80063e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d111      	bne.n	800640a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f000 bca3 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80063f4:	4b23      	ldr	r3, [pc, #140]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	041b      	lsls	r3, r3, #16
 8006402:	4920      	ldr	r1, [pc, #128]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006404:	4313      	orrs	r3, r2
 8006406:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006408:	e044      	b.n	8006494 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d024      	beq.n	800645c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006412:	4b1c      	ldr	r3, [pc, #112]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1b      	ldr	r2, [pc, #108]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800641c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800641e:	f7fe f91d 	bl	800465c <HAL_GetTick>
 8006422:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006424:	e009      	b.n	800643a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006426:	f7fe f919 	bl	800465c <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d902      	bls.n	800643a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	f000 bc80 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800643a:	4b12      	ldr	r3, [pc, #72]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0ef      	beq.n	8006426 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006446:	4b0f      	ldr	r3, [pc, #60]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	490b      	ldr	r1, [pc, #44]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006456:	4313      	orrs	r3, r2
 8006458:	610b      	str	r3, [r1, #16]
 800645a:	e01b      	b.n	8006494 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800645c:	4b09      	ldr	r3, [pc, #36]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a08      	ldr	r2, [pc, #32]	@ (8006484 <HAL_RCC_OscConfig+0x4f4>)
 8006462:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006466:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006468:	f7fe f8f8 	bl	800465c <HAL_GetTick>
 800646c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800646e:	e00b      	b.n	8006488 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006470:	f7fe f8f4 	bl	800465c <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d904      	bls.n	8006488 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	f000 bc5b 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
 8006484:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006488:	4baf      	ldr	r3, [pc, #700]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1ed      	bne.n	8006470 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80c8 	beq.w	8006632 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064a8:	4ba7      	ldr	r3, [pc, #668]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80064aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d111      	bne.n	80064da <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064b6:	4ba4      	ldr	r3, [pc, #656]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80064b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064bc:	4aa2      	ldr	r2, [pc, #648]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80064be:	f043 0304 	orr.w	r3, r3, #4
 80064c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80064c6:	4ba0      	ldr	r3, [pc, #640]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80064c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064da:	4b9c      	ldr	r3, [pc, #624]	@ (800674c <HAL_RCC_OscConfig+0x7bc>)
 80064dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d119      	bne.n	800651a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80064e6:	4b99      	ldr	r3, [pc, #612]	@ (800674c <HAL_RCC_OscConfig+0x7bc>)
 80064e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ea:	4a98      	ldr	r2, [pc, #608]	@ (800674c <HAL_RCC_OscConfig+0x7bc>)
 80064ec:	f043 0301 	orr.w	r3, r3, #1
 80064f0:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064f2:	f7fe f8b3 	bl	800465c <HAL_GetTick>
 80064f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80064f8:	e009      	b.n	800650e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064fa:	f7fe f8af 	bl	800465c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d902      	bls.n	800650e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	f000 bc16 	b.w	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800650e:	4b8f      	ldr	r3, [pc, #572]	@ (800674c <HAL_RCC_OscConfig+0x7bc>)
 8006510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0ef      	beq.n	80064fa <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d05f      	beq.n	80065e2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006522:	4b89      	ldr	r3, [pc, #548]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 8006524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006528:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006534:	429a      	cmp	r2, r3
 8006536:	d037      	beq.n	80065a8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d006      	beq.n	8006550 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e3f4      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01b      	beq.n	8006592 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800655a:	4b7b      	ldr	r3, [pc, #492]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 800655c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006560:	4a79      	ldr	r2, [pc, #484]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 8006562:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800656a:	f7fe f877 	bl	800465c <HAL_GetTick>
 800656e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006570:	e008      	b.n	8006584 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006572:	f7fe f873 	bl	800465c <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b05      	cmp	r3, #5
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e3da      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006584:	4b70      	ldr	r3, [pc, #448]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 8006586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800658a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1ef      	bne.n	8006572 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006592:	4b6d      	ldr	r3, [pc, #436]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 8006594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006598:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	4969      	ldr	r1, [pc, #420]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80065a8:	4b67      	ldr	r3, [pc, #412]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80065aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065ae:	4a66      	ldr	r2, [pc, #408]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80065b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80065b8:	f7fe f850 	bl	800465c <HAL_GetTick>
 80065bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065c0:	f7fe f84c 	bl	800465c <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e3b3      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80065d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80065d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0ef      	beq.n	80065c0 <HAL_RCC_OscConfig+0x630>
 80065e0:	e01b      	b.n	800661a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80065e2:	4b59      	ldr	r3, [pc, #356]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80065e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065e8:	4a57      	ldr	r2, [pc, #348]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80065ea:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80065ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80065f2:	f7fe f833 	bl	800465c <HAL_GetTick>
 80065f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065fa:	f7fe f82f 	bl	800465c <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b05      	cmp	r3, #5
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e396      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800660c:	4b4e      	ldr	r3, [pc, #312]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 800660e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006612:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1ef      	bne.n	80065fa <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800661a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800661e:	2b01      	cmp	r3, #1
 8006620:	d107      	bne.n	8006632 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006622:	4b49      	ldr	r3, [pc, #292]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 8006624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006628:	4a47      	ldr	r2, [pc, #284]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 800662a:	f023 0304 	bic.w	r3, r3, #4
 800662e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 8111 	beq.w	8006862 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006640:	2300      	movs	r3, #0
 8006642:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006646:	4b40      	ldr	r3, [pc, #256]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 8006648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d111      	bne.n	8006678 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006654:	4b3c      	ldr	r3, [pc, #240]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 8006656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800665a:	4a3b      	ldr	r2, [pc, #236]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 800665c:	f043 0304 	orr.w	r3, r3, #4
 8006660:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006664:	4b38      	ldr	r3, [pc, #224]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 8006666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006672:	2301      	movs	r3, #1
 8006674:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006678:	4b34      	ldr	r3, [pc, #208]	@ (800674c <HAL_RCC_OscConfig+0x7bc>)
 800667a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d118      	bne.n	80066b6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006684:	4b31      	ldr	r3, [pc, #196]	@ (800674c <HAL_RCC_OscConfig+0x7bc>)
 8006686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006688:	4a30      	ldr	r2, [pc, #192]	@ (800674c <HAL_RCC_OscConfig+0x7bc>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006690:	f7fd ffe4 	bl	800465c <HAL_GetTick>
 8006694:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006698:	f7fd ffe0 	bl	800465c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e347      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066aa:	4b28      	ldr	r3, [pc, #160]	@ (800674c <HAL_RCC_OscConfig+0x7bc>)
 80066ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01f      	beq.n	8006702 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d010      	beq.n	80066f0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80066ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80066d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80066d6:	f043 0304 	orr.w	r3, r3, #4
 80066da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066de:	4b1a      	ldr	r3, [pc, #104]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80066e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e4:	4a18      	ldr	r2, [pc, #96]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80066ee:	e018      	b.n	8006722 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066f0:	4b15      	ldr	r3, [pc, #84]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80066f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066f6:	4a14      	ldr	r2, [pc, #80]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006700:	e00f      	b.n	8006722 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006702:	4b11      	ldr	r3, [pc, #68]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 8006704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006708:	4a0f      	ldr	r2, [pc, #60]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 800670a:	f023 0301 	bic.w	r3, r3, #1
 800670e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006712:	4b0d      	ldr	r3, [pc, #52]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 8006714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006718:	4a0b      	ldr	r2, [pc, #44]	@ (8006748 <HAL_RCC_OscConfig+0x7b8>)
 800671a:	f023 0304 	bic.w	r3, r3, #4
 800671e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d057      	beq.n	80067da <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800672a:	f7fd ff97 	bl	800465c <HAL_GetTick>
 800672e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006730:	e00e      	b.n	8006750 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006732:	f7fd ff93 	bl	800465c <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006740:	4293      	cmp	r3, r2
 8006742:	d905      	bls.n	8006750 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e2f8      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
 8006748:	46020c00 	.word	0x46020c00
 800674c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006750:	4b9c      	ldr	r3, [pc, #624]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0e9      	beq.n	8006732 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01b      	beq.n	80067a2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800676a:	4b96      	ldr	r3, [pc, #600]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 800676c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006770:	4a94      	ldr	r2, [pc, #592]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006776:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800677a:	e00a      	b.n	8006792 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800677c:	f7fd ff6e 	bl	800465c <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e2d3      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006792:	4b8c      	ldr	r3, [pc, #560]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0ed      	beq.n	800677c <HAL_RCC_OscConfig+0x7ec>
 80067a0:	e053      	b.n	800684a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80067a2:	4b88      	ldr	r3, [pc, #544]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80067a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067a8:	4a86      	ldr	r2, [pc, #536]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80067aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067b2:	e00a      	b.n	80067ca <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b4:	f7fd ff52 	bl	800465c <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e2b7      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80067ca:	4b7e      	ldr	r3, [pc, #504]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80067cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ed      	bne.n	80067b4 <HAL_RCC_OscConfig+0x824>
 80067d8:	e037      	b.n	800684a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80067da:	f7fd ff3f 	bl	800465c <HAL_GetTick>
 80067de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067e0:	e00a      	b.n	80067f8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e2:	f7fd ff3b 	bl	800465c <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e2a0      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067f8:	4b72      	ldr	r3, [pc, #456]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80067fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1ed      	bne.n	80067e2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006806:	4b6f      	ldr	r3, [pc, #444]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800680c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01a      	beq.n	800684a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006814:	4b6b      	ldr	r3, [pc, #428]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800681a:	4a6a      	ldr	r2, [pc, #424]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 800681c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006820:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006824:	e00a      	b.n	800683c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006826:	f7fd ff19 	bl	800465c <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006834:	4293      	cmp	r3, r2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e27e      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800683c:	4b61      	ldr	r3, [pc, #388]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 800683e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006842:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1ed      	bne.n	8006826 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800684a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800684e:	2b01      	cmp	r3, #1
 8006850:	d107      	bne.n	8006862 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006852:	4b5c      	ldr	r3, [pc, #368]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006854:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006858:	4a5a      	ldr	r2, [pc, #360]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 800685a:	f023 0304 	bic.w	r3, r3, #4
 800685e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d036      	beq.n	80068dc <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d019      	beq.n	80068aa <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006876:	4b53      	ldr	r3, [pc, #332]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a52      	ldr	r2, [pc, #328]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 800687c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006880:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006882:	f7fd feeb 	bl	800465c <HAL_GetTick>
 8006886:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006888:	e008      	b.n	800689c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800688a:	f7fd fee7 	bl	800465c <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e24e      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800689c:	4b49      	ldr	r3, [pc, #292]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f0      	beq.n	800688a <HAL_RCC_OscConfig+0x8fa>
 80068a8:	e018      	b.n	80068dc <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80068aa:	4b46      	ldr	r3, [pc, #280]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a45      	ldr	r2, [pc, #276]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80068b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80068b6:	f7fd fed1 	bl	800465c <HAL_GetTick>
 80068ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80068bc:	e008      	b.n	80068d0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068be:	f7fd fecd 	bl	800465c <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e234      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80068d0:	4b3c      	ldr	r3, [pc, #240]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f0      	bne.n	80068be <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d036      	beq.n	8006956 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d019      	beq.n	8006924 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80068f0:	4b34      	ldr	r3, [pc, #208]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a33      	ldr	r2, [pc, #204]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80068f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80068fc:	f7fd feae 	bl	800465c <HAL_GetTick>
 8006900:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006904:	f7fd feaa 	bl	800465c <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e211      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006916:	4b2b      	ldr	r3, [pc, #172]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0f0      	beq.n	8006904 <HAL_RCC_OscConfig+0x974>
 8006922:	e018      	b.n	8006956 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006924:	4b27      	ldr	r3, [pc, #156]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a26      	ldr	r2, [pc, #152]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 800692a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800692e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006930:	f7fd fe94 	bl	800465c <HAL_GetTick>
 8006934:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006938:	f7fd fe90 	bl	800465c <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e1f7      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800694a:	4b1e      	ldr	r3, [pc, #120]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f0      	bne.n	8006938 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d07f      	beq.n	8006a62 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006966:	2b00      	cmp	r3, #0
 8006968:	d062      	beq.n	8006a30 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800696a:	4b16      	ldr	r3, [pc, #88]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	4a15      	ldr	r2, [pc, #84]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006970:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006974:	6093      	str	r3, [r2, #8]
 8006976:	4b13      	ldr	r3, [pc, #76]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006982:	4910      	ldr	r1, [pc, #64]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006984:	4313      	orrs	r3, r2
 8006986:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006990:	d309      	bcc.n	80069a6 <HAL_RCC_OscConfig+0xa16>
 8006992:	4b0c      	ldr	r3, [pc, #48]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f023 021f 	bic.w	r2, r3, #31
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	4909      	ldr	r1, [pc, #36]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60cb      	str	r3, [r1, #12]
 80069a4:	e02a      	b.n	80069fc <HAL_RCC_OscConfig+0xa6c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	da0c      	bge.n	80069c8 <HAL_RCC_OscConfig+0xa38>
 80069ae:	4b05      	ldr	r3, [pc, #20]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	015b      	lsls	r3, r3, #5
 80069bc:	4901      	ldr	r1, [pc, #4]	@ (80069c4 <HAL_RCC_OscConfig+0xa34>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	60cb      	str	r3, [r1, #12]
 80069c2:	e01b      	b.n	80069fc <HAL_RCC_OscConfig+0xa6c>
 80069c4:	46020c00 	.word	0x46020c00
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d0:	d30a      	bcc.n	80069e8 <HAL_RCC_OscConfig+0xa58>
 80069d2:	4ba1      	ldr	r3, [pc, #644]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	029b      	lsls	r3, r3, #10
 80069e0:	499d      	ldr	r1, [pc, #628]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60cb      	str	r3, [r1, #12]
 80069e6:	e009      	b.n	80069fc <HAL_RCC_OscConfig+0xa6c>
 80069e8:	4b9b      	ldr	r3, [pc, #620]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	03db      	lsls	r3, r3, #15
 80069f6:	4998      	ldr	r1, [pc, #608]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80069fc:	4b96      	ldr	r3, [pc, #600]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a95      	ldr	r2, [pc, #596]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006a02:	f043 0310 	orr.w	r3, r3, #16
 8006a06:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a08:	f7fd fe28 	bl	800465c <HAL_GetTick>
 8006a0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006a10:	f7fd fe24 	bl	800465c <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e18b      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006a22:	4b8d      	ldr	r3, [pc, #564]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0f0      	beq.n	8006a10 <HAL_RCC_OscConfig+0xa80>
 8006a2e:	e018      	b.n	8006a62 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006a30:	4b89      	ldr	r3, [pc, #548]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a88      	ldr	r2, [pc, #544]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006a36:	f023 0310 	bic.w	r3, r3, #16
 8006a3a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a3c:	f7fd fe0e 	bl	800465c <HAL_GetTick>
 8006a40:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006a44:	f7fd fe0a 	bl	800465c <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e171      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006a56:	4b80      	ldr	r3, [pc, #512]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f0      	bne.n	8006a44 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8166 	beq.w	8006d38 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a72:	4b79      	ldr	r3, [pc, #484]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f003 030c 	and.w	r3, r3, #12
 8006a7a:	2b0c      	cmp	r3, #12
 8006a7c:	f000 80f2 	beq.w	8006c64 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	f040 80c5 	bne.w	8006c14 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006a8a:	4b73      	ldr	r3, [pc, #460]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a72      	ldr	r2, [pc, #456]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006a90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a94:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a96:	f7fd fde1 	bl	800465c <HAL_GetTick>
 8006a9a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a9e:	f7fd fddd 	bl	800465c <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e144      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006ab0:	4b69      	ldr	r3, [pc, #420]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f0      	bne.n	8006a9e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006abc:	4b66      	ldr	r3, [pc, #408]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d111      	bne.n	8006aee <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006aca:	4b63      	ldr	r3, [pc, #396]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ad0:	4a61      	ldr	r2, [pc, #388]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006ad2:	f043 0304 	orr.w	r3, r3, #4
 8006ad6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006ada:	4b5f      	ldr	r3, [pc, #380]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006aee:	4b5b      	ldr	r3, [pc, #364]	@ (8006c5c <HAL_RCC_OscConfig+0xccc>)
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006af6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006afa:	d102      	bne.n	8006b02 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006afc:	2301      	movs	r3, #1
 8006afe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006b02:	4b56      	ldr	r3, [pc, #344]	@ (8006c5c <HAL_RCC_OscConfig+0xccc>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	4a55      	ldr	r2, [pc, #340]	@ (8006c5c <HAL_RCC_OscConfig+0xccc>)
 8006b08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b0c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006b0e:	4b52      	ldr	r3, [pc, #328]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006b22:	3a01      	subs	r2, #1
 8006b24:	0212      	lsls	r2, r2, #8
 8006b26:	4311      	orrs	r1, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	494a      	ldr	r1, [pc, #296]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b34:	4b48      	ldr	r3, [pc, #288]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b38:	4b49      	ldr	r3, [pc, #292]	@ (8006c60 <HAL_RCC_OscConfig+0xcd0>)
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b40:	3a01      	subs	r2, #1
 8006b42:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006b4a:	3a01      	subs	r2, #1
 8006b4c:	0252      	lsls	r2, r2, #9
 8006b4e:	b292      	uxth	r2, r2
 8006b50:	4311      	orrs	r1, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b56:	3a01      	subs	r2, #1
 8006b58:	0412      	lsls	r2, r2, #16
 8006b5a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006b5e:	4311      	orrs	r1, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006b64:	3a01      	subs	r2, #1
 8006b66:	0612      	lsls	r2, r2, #24
 8006b68:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	493a      	ldr	r1, [pc, #232]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006b74:	4b38      	ldr	r3, [pc, #224]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b78:	4a37      	ldr	r2, [pc, #220]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006b7a:	f023 0310 	bic.w	r3, r3, #16
 8006b7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b84:	4a34      	ldr	r2, [pc, #208]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006b8a:	4b33      	ldr	r3, [pc, #204]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8e:	4a32      	ldr	r2, [pc, #200]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006b90:	f043 0310 	orr.w	r3, r3, #16
 8006b94:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006b96:	4b30      	ldr	r3, [pc, #192]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9a:	f023 020c 	bic.w	r2, r3, #12
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba2:	492d      	ldr	r1, [pc, #180]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006ba8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d105      	bne.n	8006bbc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8006c5c <HAL_RCC_OscConfig+0xccc>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4a29      	ldr	r2, [pc, #164]	@ (8006c5c <HAL_RCC_OscConfig+0xccc>)
 8006bb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bba:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006bbc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d107      	bne.n	8006bd4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006bc4:	4b24      	ldr	r3, [pc, #144]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bca:	4a23      	ldr	r2, [pc, #140]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006bcc:	f023 0304 	bic.w	r3, r3, #4
 8006bd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006bd4:	4b20      	ldr	r3, [pc, #128]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bde:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006be0:	f7fd fd3c 	bl	800465c <HAL_GetTick>
 8006be4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be8:	f7fd fd38 	bl	800465c <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e09f      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006bfa:	4b17      	ldr	r3, [pc, #92]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c06:	4b14      	ldr	r3, [pc, #80]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0a:	4a13      	ldr	r2, [pc, #76]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c10:	6293      	str	r3, [r2, #40]	@ 0x28
 8006c12:	e091      	b.n	8006d38 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006c14:	4b10      	ldr	r3, [pc, #64]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a0f      	ldr	r2, [pc, #60]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006c20:	f7fd fd1c 	bl	800465c <HAL_GetTick>
 8006c24:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c28:	f7fd fd18 	bl	800465c <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e07f      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c3a:	4b07      	ldr	r3, [pc, #28]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f0      	bne.n	8006c28 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006c46:	4b04      	ldr	r3, [pc, #16]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4a:	4a03      	ldr	r2, [pc, #12]	@ (8006c58 <HAL_RCC_OscConfig+0xcc8>)
 8006c4c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006c50:	f023 0303 	bic.w	r3, r3, #3
 8006c54:	6293      	str	r3, [r2, #40]	@ 0x28
 8006c56:	e06f      	b.n	8006d38 <HAL_RCC_OscConfig+0xda8>
 8006c58:	46020c00 	.word	0x46020c00
 8006c5c:	46020800 	.word	0x46020800
 8006c60:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006c64:	4b37      	ldr	r3, [pc, #220]	@ (8006d44 <HAL_RCC_OscConfig+0xdb4>)
 8006c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c68:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c6a:	4b36      	ldr	r3, [pc, #216]	@ (8006d44 <HAL_RCC_OscConfig+0xdb4>)
 8006c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c6e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d039      	beq.n	8006cec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f003 0203 	and.w	r2, r3, #3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d132      	bne.n	8006cec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	0a1b      	lsrs	r3, r3, #8
 8006c8a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c92:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d129      	bne.n	8006cec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d122      	bne.n	8006cec <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d11a      	bne.n	8006cec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	0a5b      	lsrs	r3, r3, #9
 8006cba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d111      	bne.n	8006cec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	0c1b      	lsrs	r3, r3, #16
 8006ccc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d108      	bne.n	8006cec <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	0e1b      	lsrs	r3, r3, #24
 8006cde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e024      	b.n	8006d3a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006cf0:	4b14      	ldr	r3, [pc, #80]	@ (8006d44 <HAL_RCC_OscConfig+0xdb4>)
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf4:	08db      	lsrs	r3, r3, #3
 8006cf6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d01a      	beq.n	8006d38 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006d02:	4b10      	ldr	r3, [pc, #64]	@ (8006d44 <HAL_RCC_OscConfig+0xdb4>)
 8006d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d06:	4a0f      	ldr	r2, [pc, #60]	@ (8006d44 <HAL_RCC_OscConfig+0xdb4>)
 8006d08:	f023 0310 	bic.w	r3, r3, #16
 8006d0c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d0e:	f7fd fca5 	bl	800465c <HAL_GetTick>
 8006d12:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006d14:	bf00      	nop
 8006d16:	f7fd fca1 	bl	800465c <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d0f9      	beq.n	8006d16 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d26:	4a07      	ldr	r2, [pc, #28]	@ (8006d44 <HAL_RCC_OscConfig+0xdb4>)
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006d2c:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <HAL_RCC_OscConfig+0xdb4>)
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d30:	4a04      	ldr	r2, [pc, #16]	@ (8006d44 <HAL_RCC_OscConfig+0xdb4>)
 8006d32:	f043 0310 	orr.w	r3, r3, #16
 8006d36:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3738      	adds	r7, #56	@ 0x38
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	46020c00 	.word	0x46020c00

08006d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e1d9      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d5c:	4b9b      	ldr	r3, [pc, #620]	@ (8006fcc <HAL_RCC_ClockConfig+0x284>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d910      	bls.n	8006d8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d6a:	4b98      	ldr	r3, [pc, #608]	@ (8006fcc <HAL_RCC_ClockConfig+0x284>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f023 020f 	bic.w	r2, r3, #15
 8006d72:	4996      	ldr	r1, [pc, #600]	@ (8006fcc <HAL_RCC_ClockConfig+0x284>)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7a:	4b94      	ldr	r3, [pc, #592]	@ (8006fcc <HAL_RCC_ClockConfig+0x284>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d001      	beq.n	8006d8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e1c1      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0310 	and.w	r3, r3, #16
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d010      	beq.n	8006dba <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	695a      	ldr	r2, [r3, #20]
 8006d9c:	4b8c      	ldr	r3, [pc, #560]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d908      	bls.n	8006dba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006da8:	4b89      	ldr	r3, [pc, #548]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	4986      	ldr	r1, [pc, #536]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d012      	beq.n	8006dec <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	4b81      	ldr	r3, [pc, #516]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	091b      	lsrs	r3, r3, #4
 8006dd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d909      	bls.n	8006dec <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006dd8:	4b7d      	ldr	r3, [pc, #500]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	497a      	ldr	r1, [pc, #488]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	4b74      	ldr	r3, [pc, #464]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d908      	bls.n	8006e1a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006e08:	4b71      	ldr	r3, [pc, #452]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	496e      	ldr	r1, [pc, #440]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d010      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	4b69      	ldr	r3, [pc, #420]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d908      	bls.n	8006e48 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006e36:	4b66      	ldr	r3, [pc, #408]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 020f 	bic.w	r2, r3, #15
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	4963      	ldr	r1, [pc, #396]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80d2 	beq.w	8006ffa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d143      	bne.n	8006eea <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e62:	4b5b      	ldr	r3, [pc, #364]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d110      	bne.n	8006e92 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006e70:	4b57      	ldr	r3, [pc, #348]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e76:	4a56      	ldr	r2, [pc, #344]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006e78:	f043 0304 	orr.w	r3, r3, #4
 8006e7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006e80:	4b53      	ldr	r3, [pc, #332]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	60bb      	str	r3, [r7, #8]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006e92:	f7fd fbe3 	bl	800465c <HAL_GetTick>
 8006e96:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006e98:	4b4e      	ldr	r3, [pc, #312]	@ (8006fd4 <HAL_RCC_ClockConfig+0x28c>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00f      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006ea6:	f7fd fbd9 	bl	800465c <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e12b      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006eb8:	4b46      	ldr	r3, [pc, #280]	@ (8006fd4 <HAL_RCC_ClockConfig+0x28c>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d107      	bne.n	8006eda <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006eca:	4b41      	ldr	r3, [pc, #260]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ed0:	4a3f      	ldr	r2, [pc, #252]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006ed2:	f023 0304 	bic.w	r3, r3, #4
 8006ed6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006eda:	4b3d      	ldr	r3, [pc, #244]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d121      	bne.n	8006f2a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e112      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d107      	bne.n	8006f02 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ef2:	4b37      	ldr	r3, [pc, #220]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d115      	bne.n	8006f2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e106      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d107      	bne.n	8006f1a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006f0a:	4b31      	ldr	r3, [pc, #196]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e0fa      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e0f2      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006f2a:	4b29      	ldr	r3, [pc, #164]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f023 0203 	bic.w	r2, r3, #3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	4926      	ldr	r1, [pc, #152]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006f3c:	f7fd fb8e 	bl	800465c <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d112      	bne.n	8006f70 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f4a:	e00a      	b.n	8006f62 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f4c:	f7fd fb86 	bl	800465c <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e0d6      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f62:	4b1b      	ldr	r3, [pc, #108]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f003 030c 	and.w	r3, r3, #12
 8006f6a:	2b0c      	cmp	r3, #12
 8006f6c:	d1ee      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x204>
 8006f6e:	e044      	b.n	8006ffa <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d112      	bne.n	8006f9e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f78:	e00a      	b.n	8006f90 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f7a:	f7fd fb6f 	bl	800465c <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e0bf      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f90:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f003 030c 	and.w	r3, r3, #12
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d1ee      	bne.n	8006f7a <HAL_RCC_ClockConfig+0x232>
 8006f9c:	e02d      	b.n	8006ffa <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d123      	bne.n	8006fee <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006fa6:	e00a      	b.n	8006fbe <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fa8:	f7fd fb58 	bl	800465c <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e0a8      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006fbe:	4b04      	ldr	r3, [pc, #16]	@ (8006fd0 <HAL_RCC_ClockConfig+0x288>)
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f003 030c 	and.w	r3, r3, #12
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1ee      	bne.n	8006fa8 <HAL_RCC_ClockConfig+0x260>
 8006fca:	e016      	b.n	8006ffa <HAL_RCC_ClockConfig+0x2b2>
 8006fcc:	40022000 	.word	0x40022000
 8006fd0:	46020c00 	.word	0x46020c00
 8006fd4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fd8:	f7fd fb40 	bl	800465c <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e090      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fee:	4b4a      	ldr	r3, [pc, #296]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f003 030c 	and.w	r3, r3, #12
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d1ee      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d010      	beq.n	8007028 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	4b43      	ldr	r3, [pc, #268]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	429a      	cmp	r2, r3
 8007014:	d208      	bcs.n	8007028 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007016:	4b40      	ldr	r3, [pc, #256]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f023 020f 	bic.w	r2, r3, #15
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	493d      	ldr	r1, [pc, #244]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 8007024:	4313      	orrs	r3, r2
 8007026:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007028:	4b3c      	ldr	r3, [pc, #240]	@ (800711c <HAL_RCC_ClockConfig+0x3d4>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d210      	bcs.n	8007058 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007036:	4b39      	ldr	r3, [pc, #228]	@ (800711c <HAL_RCC_ClockConfig+0x3d4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f023 020f 	bic.w	r2, r3, #15
 800703e:	4937      	ldr	r1, [pc, #220]	@ (800711c <HAL_RCC_ClockConfig+0x3d4>)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	4313      	orrs	r3, r2
 8007044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007046:	4b35      	ldr	r3, [pc, #212]	@ (800711c <HAL_RCC_ClockConfig+0x3d4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 030f 	and.w	r3, r3, #15
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d001      	beq.n	8007058 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e05b      	b.n	8007110 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d010      	beq.n	8007086 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	4b2b      	ldr	r3, [pc, #172]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007070:	429a      	cmp	r2, r3
 8007072:	d208      	bcs.n	8007086 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007074:	4b28      	ldr	r3, [pc, #160]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	4925      	ldr	r1, [pc, #148]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 8007082:	4313      	orrs	r3, r2
 8007084:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d012      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	4b20      	ldr	r3, [pc, #128]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d209      	bcs.n	80070b8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80070a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	4919      	ldr	r1, [pc, #100]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d010      	beq.n	80070e6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	4b13      	ldr	r3, [pc, #76]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d208      	bcs.n	80070e6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80070d4:	4b10      	ldr	r3, [pc, #64]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 80070d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	490d      	ldr	r1, [pc, #52]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80070e6:	f000 f821 	bl	800712c <HAL_RCC_GetSysClockFreq>
 80070ea:	4602      	mov	r2, r0
 80070ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007118 <HAL_RCC_ClockConfig+0x3d0>)
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	490a      	ldr	r1, [pc, #40]	@ (8007120 <HAL_RCC_ClockConfig+0x3d8>)
 80070f6:	5ccb      	ldrb	r3, [r1, r3]
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
 80070fc:	4a09      	ldr	r2, [pc, #36]	@ (8007124 <HAL_RCC_ClockConfig+0x3dc>)
 80070fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007100:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <HAL_RCC_ClockConfig+0x3e0>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd fa1f 	bl	8004548 <HAL_InitTick>
 800710a:	4603      	mov	r3, r0
 800710c:	73fb      	strb	r3, [r7, #15]

  return status;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	46020c00 	.word	0x46020c00
 800711c:	40022000 	.word	0x40022000
 8007120:	08011440 	.word	0x08011440
 8007124:	20000000 	.word	0x20000000
 8007128:	2000001c 	.word	0x2000001c

0800712c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800712c:	b480      	push	{r7}
 800712e:	b08b      	sub	sp, #44	@ 0x2c
 8007130:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800713a:	4b78      	ldr	r3, [pc, #480]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	f003 030c 	and.w	r3, r3, #12
 8007142:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007144:	4b75      	ldr	r3, [pc, #468]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_RCC_GetSysClockFreq+0x34>
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	2b0c      	cmp	r3, #12
 8007158:	d121      	bne.n	800719e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d11e      	bne.n	800719e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007160:	4b6e      	ldr	r3, [pc, #440]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d107      	bne.n	800717c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800716c:	4b6b      	ldr	r3, [pc, #428]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800716e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007172:	0b1b      	lsrs	r3, r3, #12
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
 800717a:	e005      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800717c:	4b67      	ldr	r3, [pc, #412]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	0f1b      	lsrs	r3, r3, #28
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007188:	4a65      	ldr	r2, [pc, #404]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d110      	bne.n	80071ba <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800719c:	e00d      	b.n	80071ba <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800719e:	4b5f      	ldr	r3, [pc, #380]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d102      	bne.n	80071b0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071aa:	4b5e      	ldr	r3, [pc, #376]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80071ac:	623b      	str	r3, [r7, #32]
 80071ae:	e004      	b.n	80071ba <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d101      	bne.n	80071ba <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071b6:	4b5c      	ldr	r3, [pc, #368]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80071b8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b0c      	cmp	r3, #12
 80071be:	f040 80a5 	bne.w	800730c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80071c2:	4b56      	ldr	r3, [pc, #344]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80071cc:	4b53      	ldr	r3, [pc, #332]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	0a1b      	lsrs	r3, r3, #8
 80071d2:	f003 030f 	and.w	r3, r3, #15
 80071d6:	3301      	adds	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80071da:	4b50      	ldr	r3, [pc, #320]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071de:	091b      	lsrs	r3, r3, #4
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80071e6:	4b4d      	ldr	r3, [pc, #308]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80071e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ea:	08db      	lsrs	r3, r3, #3
 80071ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b02      	cmp	r3, #2
 8007206:	d003      	beq.n	8007210 <HAL_RCC_GetSysClockFreq+0xe4>
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d022      	beq.n	8007254 <HAL_RCC_GetSysClockFreq+0x128>
 800720e:	e043      	b.n	8007298 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a44 	vldr	s13, [pc, #272]	@ 800732c <HAL_RCC_GetSysClockFreq+0x200>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b3e      	ldr	r3, [pc, #248]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007232:	ed97 6a01 	vldr	s12, [r7, #4]
 8007236:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007330 <HAL_RCC_GetSysClockFreq+0x204>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007252:	e046      	b.n	80072e2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8007334 <HAL_RCC_GetSysClockFreq+0x208>
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b2d      	ldr	r3, [pc, #180]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007276:	ed97 6a01 	vldr	s12, [r7, #4]
 800727a:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8007330 <HAL_RCC_GetSysClockFreq+0x204>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007296:	e024      	b.n	80072e2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	ee07 3a90 	vmov	s15, r3
 80072a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b0:	4b1a      	ldr	r3, [pc, #104]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b8:	ee07 3a90 	vmov	s15, r3
 80072bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80072c0:	ed97 6a01 	vldr	s12, [r7, #4]
 80072c4:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8007330 <HAL_RCC_GetSysClockFreq+0x204>
 80072c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80072d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80072e2:	4b0e      	ldr	r3, [pc, #56]	@ (800731c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e6:	0e1b      	lsrs	r3, r3, #24
 80072e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ec:	3301      	adds	r3, #1
 80072ee:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007306:	ee17 3a90 	vmov	r3, s15
 800730a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800730c:	6a3b      	ldr	r3, [r7, #32]
}
 800730e:	4618      	mov	r0, r3
 8007310:	372c      	adds	r7, #44	@ 0x2c
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	46020c00 	.word	0x46020c00
 8007320:	08011458 	.word	0x08011458
 8007324:	00f42400 	.word	0x00f42400
 8007328:	007a1200 	.word	0x007a1200
 800732c:	4b742400 	.word	0x4b742400
 8007330:	46000000 	.word	0x46000000
 8007334:	4af42400 	.word	0x4af42400

08007338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800733c:	f7ff fef6 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8007340:	4602      	mov	r2, r0
 8007342:	4b07      	ldr	r3, [pc, #28]	@ (8007360 <HAL_RCC_GetHCLKFreq+0x28>)
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	4906      	ldr	r1, [pc, #24]	@ (8007364 <HAL_RCC_GetHCLKFreq+0x2c>)
 800734c:	5ccb      	ldrb	r3, [r1, r3]
 800734e:	fa22 f303 	lsr.w	r3, r2, r3
 8007352:	4a05      	ldr	r2, [pc, #20]	@ (8007368 <HAL_RCC_GetHCLKFreq+0x30>)
 8007354:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007356:	4b04      	ldr	r3, [pc, #16]	@ (8007368 <HAL_RCC_GetHCLKFreq+0x30>)
 8007358:	681b      	ldr	r3, [r3, #0]
}
 800735a:	4618      	mov	r0, r3
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	46020c00 	.word	0x46020c00
 8007364:	08011440 	.word	0x08011440
 8007368:	20000000 	.word	0x20000000

0800736c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007370:	f7ff ffe2 	bl	8007338 <HAL_RCC_GetHCLKFreq>
 8007374:	4602      	mov	r2, r0
 8007376:	4b05      	ldr	r3, [pc, #20]	@ (800738c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	091b      	lsrs	r3, r3, #4
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	4903      	ldr	r1, [pc, #12]	@ (8007390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007382:	5ccb      	ldrb	r3, [r1, r3]
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007388:	4618      	mov	r0, r3
 800738a:	bd80      	pop	{r7, pc}
 800738c:	46020c00 	.word	0x46020c00
 8007390:	08011450 	.word	0x08011450

08007394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007398:	f7ff ffce 	bl	8007338 <HAL_RCC_GetHCLKFreq>
 800739c:	4602      	mov	r2, r0
 800739e:	4b05      	ldr	r3, [pc, #20]	@ (80073b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	4903      	ldr	r1, [pc, #12]	@ (80073b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073aa:	5ccb      	ldrb	r3, [r1, r3]
 80073ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	46020c00 	.word	0x46020c00
 80073b8:	08011450 	.word	0x08011450

080073bc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80073c0:	f7ff ffba 	bl	8007338 <HAL_RCC_GetHCLKFreq>
 80073c4:	4602      	mov	r2, r0
 80073c6:	4b05      	ldr	r3, [pc, #20]	@ (80073dc <HAL_RCC_GetPCLK3Freq+0x20>)
 80073c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ca:	091b      	lsrs	r3, r3, #4
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	4903      	ldr	r1, [pc, #12]	@ (80073e0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80073d2:	5ccb      	ldrb	r3, [r1, r3]
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073d8:	4618      	mov	r0, r3
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	46020c00 	.word	0x46020c00
 80073e0:	08011450 	.word	0x08011450

080073e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80073ec:	4b3e      	ldr	r3, [pc, #248]	@ (80074e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80073ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073f2:	f003 0304 	and.w	r3, r3, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80073fa:	f7fe fd4b 	bl	8005e94 <HAL_PWREx_GetVoltageRange>
 80073fe:	6178      	str	r0, [r7, #20]
 8007400:	e019      	b.n	8007436 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007402:	4b39      	ldr	r3, [pc, #228]	@ (80074e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007408:	4a37      	ldr	r2, [pc, #220]	@ (80074e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800740a:	f043 0304 	orr.w	r3, r3, #4
 800740e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007412:	4b35      	ldr	r3, [pc, #212]	@ (80074e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007420:	f7fe fd38 	bl	8005e94 <HAL_PWREx_GetVoltageRange>
 8007424:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007426:	4b30      	ldr	r3, [pc, #192]	@ (80074e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800742c:	4a2e      	ldr	r2, [pc, #184]	@ (80074e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800742e:	f023 0304 	bic.w	r3, r3, #4
 8007432:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800743c:	d003      	beq.n	8007446 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007444:	d109      	bne.n	800745a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800744c:	d202      	bcs.n	8007454 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800744e:	2301      	movs	r3, #1
 8007450:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007452:	e033      	b.n	80074bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007454:	2300      	movs	r3, #0
 8007456:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007458:	e030      	b.n	80074bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007460:	d208      	bcs.n	8007474 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007468:	d102      	bne.n	8007470 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800746a:	2303      	movs	r3, #3
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	e025      	b.n	80074bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e035      	b.n	80074e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800747a:	d90f      	bls.n	800749c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007488:	d902      	bls.n	8007490 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800748a:	2300      	movs	r3, #0
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	e015      	b.n	80074bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007490:	2301      	movs	r3, #1
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	e012      	b.n	80074bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	e00f      	b.n	80074bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074a2:	d109      	bne.n	80074b8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074aa:	d102      	bne.n	80074b2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80074ac:	2301      	movs	r3, #1
 80074ae:	613b      	str	r3, [r7, #16]
 80074b0:	e004      	b.n	80074bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80074b2:	2302      	movs	r3, #2
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	e001      	b.n	80074bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80074b8:	2301      	movs	r3, #1
 80074ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80074bc:	4b0b      	ldr	r3, [pc, #44]	@ (80074ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f023 020f 	bic.w	r2, r3, #15
 80074c4:	4909      	ldr	r1, [pc, #36]	@ (80074ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80074cc:	4b07      	ldr	r3, [pc, #28]	@ (80074ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d001      	beq.n	80074de <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	46020c00 	.word	0x46020c00
 80074ec:	40022000 	.word	0x40022000

080074f0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80074f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074f4:	b0c4      	sub	sp, #272	@ 0x110
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007502:	2300      	movs	r3, #0
 8007504:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	f002 0401 	and.w	r4, r2, #1
 8007514:	2500      	movs	r5, #0
 8007516:	ea54 0305 	orrs.w	r3, r4, r5
 800751a:	d00b      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800751c:	4bd5      	ldr	r3, [pc, #852]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800751e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007522:	f023 0103 	bic.w	r1, r3, #3
 8007526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800752a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800752c:	4ad1      	ldr	r2, [pc, #836]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800752e:	430b      	orrs	r3, r1
 8007530:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f002 0802 	and.w	r8, r2, #2
 8007540:	f04f 0900 	mov.w	r9, #0
 8007544:	ea58 0309 	orrs.w	r3, r8, r9
 8007548:	d00b      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800754a:	4bca      	ldr	r3, [pc, #808]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800754c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007550:	f023 010c 	bic.w	r1, r3, #12
 8007554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800755a:	4ac6      	ldr	r2, [pc, #792]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800755c:	430b      	orrs	r3, r1
 800755e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f002 0a04 	and.w	sl, r2, #4
 800756e:	f04f 0b00 	mov.w	fp, #0
 8007572:	ea5a 030b 	orrs.w	r3, sl, fp
 8007576:	d00b      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007578:	4bbe      	ldr	r3, [pc, #760]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800757a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800757e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007588:	4aba      	ldr	r2, [pc, #744]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800758a:	430b      	orrs	r3, r1
 800758c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f002 0308 	and.w	r3, r2, #8
 800759c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075a0:	2300      	movs	r3, #0
 80075a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80075a6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4313      	orrs	r3, r2
 80075ae:	d00b      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80075b0:	4bb0      	ldr	r3, [pc, #704]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80075b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80075ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075c0:	4aac      	ldr	r2, [pc, #688]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80075c2:	430b      	orrs	r3, r1
 80075c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80075c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d0:	f002 0310 	and.w	r3, r2, #16
 80075d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075d8:	2300      	movs	r3, #0
 80075da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80075de:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80075e2:	460b      	mov	r3, r1
 80075e4:	4313      	orrs	r3, r2
 80075e6:	d00b      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80075e8:	4ba2      	ldr	r3, [pc, #648]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80075ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075f8:	4a9e      	ldr	r2, [pc, #632]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80075fa:	430b      	orrs	r3, r1
 80075fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007608:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800760c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007610:	2300      	movs	r3, #0
 8007612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007616:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800761a:	460b      	mov	r3, r1
 800761c:	4313      	orrs	r3, r2
 800761e:	d00b      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8007620:	4b94      	ldr	r3, [pc, #592]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007622:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007626:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800762a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800762e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007630:	4a90      	ldr	r2, [pc, #576]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007632:	430b      	orrs	r3, r1
 8007634:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f002 0320 	and.w	r3, r2, #32
 8007644:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007648:	2300      	movs	r3, #0
 800764a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800764e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007652:	460b      	mov	r3, r1
 8007654:	4313      	orrs	r3, r2
 8007656:	d00b      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007658:	4b86      	ldr	r3, [pc, #536]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800765a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800765e:	f023 0107 	bic.w	r1, r3, #7
 8007662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007668:	4a82      	ldr	r2, [pc, #520]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800766a:	430b      	orrs	r3, r1
 800766c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800767c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007680:	2300      	movs	r3, #0
 8007682:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007686:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800768a:	460b      	mov	r3, r1
 800768c:	4313      	orrs	r3, r2
 800768e:	d00b      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007690:	4b78      	ldr	r3, [pc, #480]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007696:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800769a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800769e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a0:	4a74      	ldr	r2, [pc, #464]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80076a2:	430b      	orrs	r3, r1
 80076a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80076b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076b8:	2300      	movs	r3, #0
 80076ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80076c2:	460b      	mov	r3, r1
 80076c4:	4313      	orrs	r3, r2
 80076c6:	d00b      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80076c8:	4b6a      	ldr	r3, [pc, #424]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80076ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d8:	4a66      	ldr	r2, [pc, #408]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80076da:	430b      	orrs	r3, r1
 80076dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80076ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076f0:	2300      	movs	r3, #0
 80076f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80076fa:	460b      	mov	r3, r1
 80076fc:	4313      	orrs	r3, r2
 80076fe:	d00b      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007700:	4b5c      	ldr	r3, [pc, #368]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007706:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800770a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800770e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007710:	4a58      	ldr	r2, [pc, #352]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007712:	430b      	orrs	r3, r1
 8007714:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007724:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007728:	2300      	movs	r3, #0
 800772a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800772e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007732:	460b      	mov	r3, r1
 8007734:	4313      	orrs	r3, r2
 8007736:	d00b      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007738:	4b4e      	ldr	r3, [pc, #312]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800773a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800773e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007746:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007748:	4a4a      	ldr	r2, [pc, #296]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800774a:	430b      	orrs	r3, r1
 800774c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8007750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007758:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800775c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007760:	2300      	movs	r3, #0
 8007762:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007766:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800776a:	460b      	mov	r3, r1
 800776c:	4313      	orrs	r3, r2
 800776e:	d00b      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8007770:	4b40      	ldr	r3, [pc, #256]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007772:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007776:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800777a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800777e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007780:	4a3c      	ldr	r2, [pc, #240]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007782:	430b      	orrs	r3, r1
 8007784:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8007788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007794:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007798:	2300      	movs	r3, #0
 800779a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800779e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077a2:	460b      	mov	r3, r1
 80077a4:	4313      	orrs	r3, r2
 80077a6:	d00c      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80077a8:	4b32      	ldr	r3, [pc, #200]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80077aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077ae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80077b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077ba:	4a2e      	ldr	r2, [pc, #184]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80077bc:	430b      	orrs	r3, r1
 80077be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80077ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077d2:	2300      	movs	r3, #0
 80077d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80077d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80077dc:	460b      	mov	r3, r1
 80077de:	4313      	orrs	r3, r2
 80077e0:	d00c      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80077e2:	4b24      	ldr	r3, [pc, #144]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80077e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077e8:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80077ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80077f6:	430b      	orrs	r3, r1
 80077f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80077fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800780c:	2300      	movs	r3, #0
 800780e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007812:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007816:	460b      	mov	r3, r1
 8007818:	4313      	orrs	r3, r2
 800781a:	d00c      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800781c:	4b15      	ldr	r3, [pc, #84]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800781e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007822:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800782a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782e:	4a11      	ldr	r2, [pc, #68]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007830:	430b      	orrs	r3, r1
 8007832:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007846:	2300      	movs	r3, #0
 8007848:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800784c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007850:	460b      	mov	r3, r1
 8007852:	4313      	orrs	r3, r2
 8007854:	d010      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007856:	4b07      	ldr	r3, [pc, #28]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800785c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007868:	4a02      	ldr	r2, [pc, #8]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800786a:	430b      	orrs	r3, r1
 800786c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007870:	e002      	b.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007872:	bf00      	nop
 8007874:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007884:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007888:	2300      	movs	r3, #0
 800788a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800788e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007892:	460b      	mov	r3, r1
 8007894:	4313      	orrs	r3, r2
 8007896:	d04c      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800789c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078a0:	2b80      	cmp	r3, #128	@ 0x80
 80078a2:	d02d      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80078a4:	2b80      	cmp	r3, #128	@ 0x80
 80078a6:	d827      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80078a8:	2b60      	cmp	r3, #96	@ 0x60
 80078aa:	d02b      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80078ac:	2b60      	cmp	r3, #96	@ 0x60
 80078ae:	d823      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80078b0:	2b40      	cmp	r3, #64	@ 0x40
 80078b2:	d006      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80078b4:	2b40      	cmp	r3, #64	@ 0x40
 80078b6:	d81f      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d009      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d011      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80078c0:	e01a      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078c2:	4bbe      	ldr	r3, [pc, #760]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c6:	4abd      	ldr	r2, [pc, #756]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078cc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80078ce:	e01a      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078d4:	3308      	adds	r3, #8
 80078d6:	4618      	mov	r0, r3
 80078d8:	f002 fc3c 	bl	800a154 <RCCEx_PLL2_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80078e2:	e010      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078e8:	332c      	adds	r3, #44	@ 0x2c
 80078ea:	4618      	mov	r0, r3
 80078ec:	f002 fcca 	bl	800a284 <RCCEx_PLL3_Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80078f6:	e006      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80078fe:	e002      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8007900:	bf00      	nop
 8007902:	e000      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8007904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007906:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10d      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800790e:	4bab      	ldr	r3, [pc, #684]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007910:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007914:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800791c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007920:	4aa6      	ldr	r2, [pc, #664]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007922:	430b      	orrs	r3, r1
 8007924:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007928:	e003      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800792e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800793e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007942:	2300      	movs	r3, #0
 8007944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007948:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800794c:	460b      	mov	r3, r1
 800794e:	4313      	orrs	r3, r2
 8007950:	d053      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007956:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800795a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800795e:	d033      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007964:	d82c      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800796a:	d02f      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800796c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007970:	d826      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007976:	d008      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8007978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800797c:	d820      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007986:	d011      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007988:	e01a      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800798a:	4b8c      	ldr	r3, [pc, #560]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800798c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798e:	4a8b      	ldr	r2, [pc, #556]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007994:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007996:	e01a      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800799c:	3308      	adds	r3, #8
 800799e:	4618      	mov	r0, r3
 80079a0:	f002 fbd8 	bl	800a154 <RCCEx_PLL2_Config>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80079aa:	e010      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079b0:	332c      	adds	r3, #44	@ 0x2c
 80079b2:	4618      	mov	r0, r3
 80079b4:	f002 fc66 	bl	800a284 <RCCEx_PLL3_Config>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80079be:	e006      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80079c6:	e002      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80079c8:	bf00      	nop
 80079ca:	e000      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80079cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ce:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10d      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80079d6:	4b79      	ldr	r3, [pc, #484]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80079e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079e8:	4a74      	ldr	r2, [pc, #464]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079ea:	430b      	orrs	r3, r1
 80079ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80079f0:	e003      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80079f6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80079fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007a06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a08:	2300      	movs	r3, #0
 8007a0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007a10:	460b      	mov	r3, r1
 8007a12:	4313      	orrs	r3, r2
 8007a14:	d046      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a1e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a22:	d028      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007a24:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a28:	d821      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007a2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a2e:	d022      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007a30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a34:	d81b      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007a36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a3a:	d01c      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007a3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a40:	d815      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a46:	d008      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8007a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a4c:	d80f      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d011      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a56:	d00e      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007a58:	e009      	b.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a5e:	3308      	adds	r3, #8
 8007a60:	4618      	mov	r0, r3
 8007a62:	f002 fb77 	bl	800a154 <RCCEx_PLL2_Config>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007a6c:	e004      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007a74:	e000      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8007a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a78:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10d      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007a80:	4b4e      	ldr	r3, [pc, #312]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a86:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a92:	4a4a      	ldr	r2, [pc, #296]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a94:	430b      	orrs	r3, r1
 8007a96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007a9a:	e003      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007aa0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007ab0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ab6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007aba:	460b      	mov	r3, r1
 8007abc:	4313      	orrs	r3, r2
 8007abe:	d03f      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d81e      	bhi.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8007acc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad2:	bf00      	nop
 8007ad4:	08007b13 	.word	0x08007b13
 8007ad8:	08007ae9 	.word	0x08007ae9
 8007adc:	08007af7 	.word	0x08007af7
 8007ae0:	08007b13 	.word	0x08007b13
 8007ae4:	08007b13 	.word	0x08007b13
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ae8:	4b34      	ldr	r3, [pc, #208]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aec:	4a33      	ldr	r2, [pc, #204]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007af2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007af4:	e00e      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007afa:	332c      	adds	r3, #44	@ 0x2c
 8007afc:	4618      	mov	r0, r3
 8007afe:	f002 fbc1 	bl	800a284 <RCCEx_PLL3_Config>
 8007b02:	4603      	mov	r3, r0
 8007b04:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007b08:	e004      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007b10:	e000      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8007b12:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007b14:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10d      	bne.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007b1c:	4b27      	ldr	r3, [pc, #156]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b22:	f023 0107 	bic.w	r1, r3, #7
 8007b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b2e:	4a23      	ldr	r2, [pc, #140]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b30:	430b      	orrs	r3, r1
 8007b32:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007b36:	e003      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b38:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b3c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b4e:	2300      	movs	r3, #0
 8007b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b52:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007b56:	460b      	mov	r3, r1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	d04c      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b68:	d02a      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8007b6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007b6e:	d821      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007b70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b74:	d026      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8007b76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007b7a:	d81b      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b80:	d00e      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007b82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b86:	d815      	bhi.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01d      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8007b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b90:	d110      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b92:	4b0a      	ldr	r3, [pc, #40]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b96:	4a09      	ldr	r2, [pc, #36]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b9c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007b9e:	e014      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ba4:	332c      	adds	r3, #44	@ 0x2c
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f002 fb6c 	bl	800a284 <RCCEx_PLL3_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007bb2:	e00a      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007bba:	e006      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8007bbc:	46020c00 	.word	0x46020c00
        break;
 8007bc0:	bf00      	nop
 8007bc2:	e002      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8007bc4:	bf00      	nop
 8007bc6:	e000      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8007bc8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007bca:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10d      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007bd2:	4baf      	ldr	r3, [pc, #700]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007be4:	4aaa      	ldr	r2, [pc, #680]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007be6:	430b      	orrs	r3, r1
 8007be8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007bec:	e003      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bee:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007bf2:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c02:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c04:	2300      	movs	r3, #0
 8007c06:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f000 80b5 	beq.w	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c14:	2300      	movs	r3, #0
 8007c16:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c1a:	4b9d      	ldr	r3, [pc, #628]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d113      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c28:	4b99      	ldr	r3, [pc, #612]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c2e:	4a98      	ldr	r2, [pc, #608]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007c30:	f043 0304 	orr.w	r3, r3, #4
 8007c34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007c38:	4b95      	ldr	r3, [pc, #596]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007c46:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007c50:	4b90      	ldr	r3, [pc, #576]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8007c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c54:	4a8f      	ldr	r2, [pc, #572]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c5c:	f7fc fcfe 	bl	800465c <HAL_GetTick>
 8007c60:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c64:	e00b      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c66:	f7fc fcf9 	bl	800465c <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d903      	bls.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007c7c:	e005      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c7e:	4b85      	ldr	r3, [pc, #532]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8007c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0ed      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8007c8a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d165      	bne.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c92:	4b7f      	ldr	r3, [pc, #508]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d023      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8007ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cac:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d01b      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cb8:	4b75      	ldr	r3, [pc, #468]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cc2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cc6:	4b72      	ldr	r3, [pc, #456]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ccc:	4a70      	ldr	r2, [pc, #448]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cdc:	4a6c      	ldr	r2, [pc, #432]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ce6:	4a6a      	ldr	r2, [pc, #424]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d019      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfc:	f7fc fcae 	bl	800465c <HAL_GetTick>
 8007d00:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d04:	e00d      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d06:	f7fc fca9 	bl	800465c <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d10:	1ad2      	subs	r2, r2, r3
 8007d12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d903      	bls.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8007d20:	e006      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d22:	4b5b      	ldr	r3, [pc, #364]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0ea      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8007d30:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10d      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007d38:	4b55      	ldr	r3, [pc, #340]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d46:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007d4a:	4a51      	ldr	r2, [pc, #324]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007d52:	e008      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d54:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007d58:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8007d5c:	e003      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d5e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007d62:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d66:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d107      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d6e:	4b48      	ldr	r3, [pc, #288]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d74:	4a46      	ldr	r2, [pc, #280]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007d76:	f023 0304 	bic.w	r3, r3, #4
 8007d7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d90:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007d94:	460b      	mov	r3, r1
 8007d96:	4313      	orrs	r3, r2
 8007d98:	d042      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007da2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007da6:	d022      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007da8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007dac:	d81b      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007dae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007db2:	d011      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8007db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007db8:	d815      	bhi.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d019      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8007dbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007dc2:	d110      	bne.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dc8:	3308      	adds	r3, #8
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f002 f9c2 	bl	800a154 <RCCEx_PLL2_Config>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007dd6:	e00d      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ddc:	4a2c      	ldr	r2, [pc, #176]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007de2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007de4:	e006      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007dec:	e002      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8007dee:	bf00      	nop
 8007df0:	e000      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8007df2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007df4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10d      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007dfc:	4b24      	ldr	r3, [pc, #144]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e02:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e0e:	4a20      	ldr	r2, [pc, #128]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007e10:	430b      	orrs	r3, r1
 8007e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e16:	e003      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e18:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007e1c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e2e:	2300      	movs	r3, #0
 8007e30:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007e36:	460b      	mov	r3, r1
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	d031      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e48:	d00b      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e4e:	d804      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d008      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e58:	d007      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007e60:	e004      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007e62:	bf00      	nop
 8007e64:	e002      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007e66:	bf00      	nop
 8007e68:	e000      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007e6a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007e6c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d111      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007e74:	4b06      	ldr	r3, [pc, #24]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007e76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e86:	4a02      	ldr	r2, [pc, #8]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007e8e:	e007      	b.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8007e90:	46020c00 	.word	0x46020c00
 8007e94:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e98:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007e9c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eae:	2300      	movs	r3, #0
 8007eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eb2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	d00c      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007ebc:	4bb2      	ldr	r3, [pc, #712]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007ebe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ec2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8007ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ece:	4aae      	ldr	r2, [pc, #696]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007ee2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ee8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007eec:	460b      	mov	r3, r1
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	d019      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007efa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007efe:	d105      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f00:	4ba1      	ldr	r3, [pc, #644]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f04:	4aa0      	ldr	r2, [pc, #640]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f0a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007f0c:	4b9e      	ldr	r3, [pc, #632]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f12:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f1e:	4a9a      	ldr	r2, [pc, #616]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f20:	430b      	orrs	r3, r1
 8007f22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f34:	2300      	movs	r3, #0
 8007f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	d00c      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007f42:	4b91      	ldr	r3, [pc, #580]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f48:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007f54:	4a8c      	ldr	r2, [pc, #560]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f56:	430b      	orrs	r3, r1
 8007f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f72:	460b      	mov	r3, r1
 8007f74:	4313      	orrs	r3, r2
 8007f76:	d00c      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007f78:	4b83      	ldr	r3, [pc, #524]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f86:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007f8a:	4a7f      	ldr	r2, [pc, #508]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fa4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4313      	orrs	r3, r2
 8007fac:	d00c      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007fae:	4b76      	ldr	r3, [pc, #472]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fb4:	f023 0218 	bic.w	r2, r3, #24
 8007fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fbc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007fc0:	4971      	ldr	r1, [pc, #452]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007fd4:	623b      	str	r3, [r7, #32]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fda:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	d032      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fe8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007fec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ff0:	d105      	bne.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff2:	4b65      	ldr	r3, [pc, #404]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff6:	4a64      	ldr	r2, [pc, #400]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ffc:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008002:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008006:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800800a:	d108      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800800c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008010:	3308      	adds	r3, #8
 8008012:	4618      	mov	r0, r3
 8008014:	f002 f89e 	bl	800a154 <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 800801e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10d      	bne.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008026:	4b58      	ldr	r3, [pc, #352]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008028:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800802c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008034:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008038:	4953      	ldr	r1, [pc, #332]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800803a:	4313      	orrs	r3, r2
 800803c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008040:	e003      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008042:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8008046:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800804a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	2100      	movs	r1, #0
 8008054:	61b9      	str	r1, [r7, #24]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008060:	460b      	mov	r3, r1
 8008062:	4313      	orrs	r3, r2
 8008064:	d04a      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8008066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800806a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800806e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008072:	d01e      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8008074:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008078:	d825      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800807a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800807e:	d00e      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8008080:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008084:	d81f      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d021      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800808a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800808e:	d11a      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008090:	4b3d      	ldr	r3, [pc, #244]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008094:	4a3c      	ldr	r2, [pc, #240]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800809a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800809c:	e018      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800809e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080a2:	3308      	adds	r3, #8
 80080a4:	4618      	mov	r0, r3
 80080a6:	f002 f855 	bl	800a154 <RCCEx_PLL2_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80080b0:	e00e      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80080b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080b6:	332c      	adds	r3, #44	@ 0x2c
 80080b8:	4618      	mov	r0, r3
 80080ba:	f002 f8e3 	bl	800a284 <RCCEx_PLL3_Config>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80080c4:	e004      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80080cc:	e000      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80080ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10d      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80080d8:	4b2b      	ldr	r3, [pc, #172]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80080da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80080e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80080ea:	4927      	ldr	r1, [pc, #156]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80080f2:	e003      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80080f8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80080fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	2300      	movs	r3, #0
 800810c:	617b      	str	r3, [r7, #20]
 800810e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008112:	460b      	mov	r3, r1
 8008114:	4313      	orrs	r3, r2
 8008116:	d03d      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800811c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008120:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008124:	d00e      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800812a:	d815      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800812c:	2b00      	cmp	r3, #0
 800812e:	d017      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008134:	d110      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008136:	4b14      	ldr	r3, [pc, #80]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8008138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813a:	4a13      	ldr	r2, [pc, #76]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800813c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008140:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008142:	e00e      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008148:	3308      	adds	r3, #8
 800814a:	4618      	mov	r0, r3
 800814c:	f002 f802 	bl	800a154 <RCCEx_PLL2_Config>
 8008150:	4603      	mov	r3, r0
 8008152:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008156:	e004      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800815e:	e000      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8008160:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008162:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8008166:	2b00      	cmp	r3, #0
 8008168:	d110      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800816a:	4b07      	ldr	r3, [pc, #28]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800816c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008170:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817c:	4902      	ldr	r1, [pc, #8]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800817e:	4313      	orrs	r3, r2
 8008180:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008184:	e006      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8008186:	bf00      	nop
 8008188:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8008190:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80081a0:	60bb      	str	r3, [r7, #8]
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80081aa:	460b      	mov	r3, r1
 80081ac:	4313      	orrs	r3, r2
 80081ae:	d00c      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80081b0:	4b2c      	ldr	r3, [pc, #176]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80081b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80081ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80081c2:	4928      	ldr	r1, [pc, #160]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80081ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	2100      	movs	r1, #0
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	f003 0308 	and.w	r3, r3, #8
 80081da:	607b      	str	r3, [r7, #4]
 80081dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081e0:	460b      	mov	r3, r1
 80081e2:	4313      	orrs	r3, r2
 80081e4:	d036      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80081e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80081ee:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80081f2:	d00d      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80081f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80081f8:	d811      	bhi.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80081fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081fe:	d012      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008204:	d80b      	bhi.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00d      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800820a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800820e:	d106      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008210:	4b14      	ldr	r3, [pc, #80]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8008212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008214:	4a13      	ldr	r2, [pc, #76]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8008216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800821a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800821c:	e004      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8008224:	e000      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8008226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008228:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10d      	bne.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8008230:	4b0c      	ldr	r3, [pc, #48]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8008232:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008236:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800823a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800823e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008242:	4908      	ldr	r1, [pc, #32]	@ (8008264 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8008244:	4313      	orrs	r3, r2
 8008246:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800824a:	e003      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8008250:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8008254:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8008258:	4618      	mov	r0, r3
 800825a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800825e:	46bd      	mov	sp, r7
 8008260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008264:	46020c00 	.word	0x46020c00

08008268 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008268:	b480      	push	{r7}
 800826a:	b089      	sub	sp, #36	@ 0x24
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008270:	4ba6      	ldr	r3, [pc, #664]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008278:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800827a:	4ba4      	ldr	r3, [pc, #656]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800827c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008284:	4ba1      	ldr	r3, [pc, #644]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008288:	0a1b      	lsrs	r3, r3, #8
 800828a:	f003 030f 	and.w	r3, r3, #15
 800828e:	3301      	adds	r3, #1
 8008290:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008292:	4b9e      	ldr	r3, [pc, #632]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008296:	091b      	lsrs	r3, r3, #4
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800829e:	4b9b      	ldr	r3, [pc, #620]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80082a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a2:	08db      	lsrs	r3, r3, #3
 80082a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	fb02 f303 	mul.w	r3, r2, r3
 80082ae:	ee07 3a90 	vmov	s15, r3
 80082b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d062      	beq.n	8008386 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	f200 8081 	bhi.w	80083ca <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d024      	beq.n	8008318 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d17a      	bne.n	80083ca <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082de:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80082e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e6:	4b89      	ldr	r3, [pc, #548]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80082e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80082f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082fa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008514 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80082fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008302:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8008306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800830a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800830e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008312:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008316:	e08f      	b.n	8008438 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008318:	4b7c      	ldr	r3, [pc, #496]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008324:	4b79      	ldr	r3, [pc, #484]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	0f1b      	lsrs	r3, r3, #28
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	e006      	b.n	800833e <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8008330:	4b76      	ldr	r3, [pc, #472]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008336:	041b      	lsls	r3, r3, #16
 8008338:	0f1b      	lsrs	r3, r3, #28
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	4a76      	ldr	r2, [pc, #472]	@ (8008518 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008344:	ee07 3a90 	vmov	s15, r3
 8008348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	ee07 3a90 	vmov	s15, r3
 8008360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008364:	ed97 6a02 	vldr	s12, [r7, #8]
 8008368:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008514 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800836c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008374:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008378:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800837c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008380:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008384:	e058      	b.n	8008438 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	ee07 3a90 	vmov	s15, r3
 800838c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008390:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800851c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8008394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008398:	4b5c      	ldr	r3, [pc, #368]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800839a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800839c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a0:	ee07 3a90 	vmov	s15, r3
 80083a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80083a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80083ac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008514 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80083b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80083b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083c8:	e036      	b.n	8008438 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80083ca:	4b50      	ldr	r3, [pc, #320]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d005      	beq.n	80083e2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80083d6:	4b4d      	ldr	r3, [pc, #308]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	0f1b      	lsrs	r3, r3, #28
 80083dc:	f003 030f 	and.w	r3, r3, #15
 80083e0:	e006      	b.n	80083f0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80083e2:	4b4a      	ldr	r3, [pc, #296]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80083e8:	041b      	lsls	r3, r3, #16
 80083ea:	0f1b      	lsrs	r3, r3, #28
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	4a49      	ldr	r2, [pc, #292]	@ (8008518 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80083f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	ee07 3a90 	vmov	s15, r3
 8008404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008416:	ed97 6a02 	vldr	s12, [r7, #8]
 800841a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008514 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800841e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800842a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800842e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008436:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008438:	4b34      	ldr	r3, [pc, #208]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800843a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d017      	beq.n	8008474 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008444:	4b31      	ldr	r3, [pc, #196]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008448:	0a5b      	lsrs	r3, r3, #9
 800844a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8008456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800845a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800845e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800846a:	ee17 2a90 	vmov	r2, s15
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	e002      	b.n	800847a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800847a:	4b24      	ldr	r3, [pc, #144]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800847c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d017      	beq.n	80084b6 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008486:	4b21      	ldr	r3, [pc, #132]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800848a:	0c1b      	lsrs	r3, r3, #16
 800848c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008490:	ee07 3a90 	vmov	s15, r3
 8008494:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008498:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800849c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80084a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ac:	ee17 2a90 	vmov	r2, s15
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	605a      	str	r2, [r3, #4]
 80084b4:	e002      	b.n	80084bc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80084bc:	4b13      	ldr	r3, [pc, #76]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80084be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d017      	beq.n	80084f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80084c8:	4b10      	ldr	r3, [pc, #64]	@ (800850c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80084ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084cc:	0e1b      	lsrs	r3, r3, #24
 80084ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80084da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80084e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ee:	ee17 2a90 	vmov	r2, s15
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80084f6:	e002      	b.n	80084fe <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	609a      	str	r2, [r3, #8]
}
 80084fe:	bf00      	nop
 8008500:	3724      	adds	r7, #36	@ 0x24
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	46020c00 	.word	0x46020c00
 8008510:	4b742400 	.word	0x4b742400
 8008514:	46000000 	.word	0x46000000
 8008518:	08011458 	.word	0x08011458
 800851c:	4af42400 	.word	0x4af42400

08008520 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008520:	b480      	push	{r7}
 8008522:	b089      	sub	sp, #36	@ 0x24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008528:	4ba6      	ldr	r3, [pc, #664]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800852a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008530:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008532:	4ba4      	ldr	r3, [pc, #656]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800853c:	4ba1      	ldr	r3, [pc, #644]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800853e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008540:	0a1b      	lsrs	r3, r3, #8
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	3301      	adds	r3, #1
 8008548:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800854a:	4b9e      	ldr	r3, [pc, #632]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800854c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854e:	091b      	lsrs	r3, r3, #4
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008556:	4b9b      	ldr	r3, [pc, #620]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	08db      	lsrs	r3, r3, #3
 800855c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	fb02 f303 	mul.w	r3, r2, r3
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b03      	cmp	r3, #3
 8008576:	d062      	beq.n	800863e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2b03      	cmp	r3, #3
 800857c:	f200 8081 	bhi.w	8008682 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d024      	beq.n	80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2b02      	cmp	r3, #2
 800858a:	d17a      	bne.n	8008682 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008596:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80087c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800859a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859e:	4b89      	ldr	r3, [pc, #548]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80085ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80085b2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80085b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80085be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085ce:	e08f      	b.n	80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80085d0:	4b7c      	ldr	r3, [pc, #496]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d005      	beq.n	80085e8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80085dc:	4b79      	ldr	r3, [pc, #484]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	0f1b      	lsrs	r3, r3, #28
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	e006      	b.n	80085f6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80085e8:	4b76      	ldr	r3, [pc, #472]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085ee:	041b      	lsls	r3, r3, #16
 80085f0:	0f1b      	lsrs	r3, r3, #28
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	4a76      	ldr	r2, [pc, #472]	@ (80087d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80085f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085fc:	ee07 3a90 	vmov	s15, r3
 8008600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008620:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008630:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008638:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800863c:	e058      	b.n	80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008648:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80087d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 800864c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008650:	4b5c      	ldr	r3, [pc, #368]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008660:	ed97 6a02 	vldr	s12, [r7, #8]
 8008664:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008668:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800866c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008670:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008674:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008680:	e036      	b.n	80086f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008682:	4b50      	ldr	r3, [pc, #320]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d005      	beq.n	800869a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800868e:	4b4d      	ldr	r3, [pc, #308]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	0f1b      	lsrs	r3, r3, #28
 8008694:	f003 030f 	and.w	r3, r3, #15
 8008698:	e006      	b.n	80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800869a:	4b4a      	ldr	r3, [pc, #296]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800869c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086a0:	041b      	lsls	r3, r3, #16
 80086a2:	0f1b      	lsrs	r3, r3, #28
 80086a4:	f003 030f 	and.w	r3, r3, #15
 80086a8:	4a49      	ldr	r2, [pc, #292]	@ (80087d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80086aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	ee07 3a90 	vmov	s15, r3
 80086bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80086d2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80086d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80086e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ee:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80086f0:	4b34      	ldr	r3, [pc, #208]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d017      	beq.n	800872c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086fc:	4b31      	ldr	r3, [pc, #196]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008700:	0a5b      	lsrs	r3, r3, #9
 8008702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800870e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008712:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008716:	edd7 6a07 	vldr	s13, [r7, #28]
 800871a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800871e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008722:	ee17 2a90 	vmov	r2, s15
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	e002      	b.n	8008732 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008732:	4b24      	ldr	r3, [pc, #144]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d017      	beq.n	800876e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800873e:	4b21      	ldr	r3, [pc, #132]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008742:	0c1b      	lsrs	r3, r3, #16
 8008744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008748:	ee07 3a90 	vmov	s15, r3
 800874c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008754:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008758:	edd7 6a07 	vldr	s13, [r7, #28]
 800875c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008764:	ee17 2a90 	vmov	r2, s15
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	605a      	str	r2, [r3, #4]
 800876c:	e002      	b.n	8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008774:	4b13      	ldr	r3, [pc, #76]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008778:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d017      	beq.n	80087b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008780:	4b10      	ldr	r3, [pc, #64]	@ (80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008784:	0e1b      	lsrs	r3, r3, #24
 8008786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008796:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800879a:	edd7 6a07 	vldr	s13, [r7, #28]
 800879e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a6:	ee17 2a90 	vmov	r2, s15
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80087ae:	e002      	b.n	80087b6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	609a      	str	r2, [r3, #8]
}
 80087b6:	bf00      	nop
 80087b8:	3724      	adds	r7, #36	@ 0x24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	46020c00 	.word	0x46020c00
 80087c8:	4b742400 	.word	0x4b742400
 80087cc:	46000000 	.word	0x46000000
 80087d0:	08011458 	.word	0x08011458
 80087d4:	4af42400 	.word	0x4af42400

080087d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80087d8:	b480      	push	{r7}
 80087da:	b089      	sub	sp, #36	@ 0x24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80087e0:	4ba6      	ldr	r3, [pc, #664]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80087ea:	4ba4      	ldr	r3, [pc, #656]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80087f4:	4ba1      	ldr	r3, [pc, #644]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f8:	0a1b      	lsrs	r3, r3, #8
 80087fa:	f003 030f 	and.w	r3, r3, #15
 80087fe:	3301      	adds	r3, #1
 8008800:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008802:	4b9e      	ldr	r3, [pc, #632]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008806:	091b      	lsrs	r3, r3, #4
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800880e:	4b9b      	ldr	r3, [pc, #620]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008812:	08db      	lsrs	r3, r3, #3
 8008814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	ee07 3a90 	vmov	s15, r3
 8008822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008826:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2b03      	cmp	r3, #3
 800882e:	d062      	beq.n	80088f6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2b03      	cmp	r3, #3
 8008834:	f200 8081 	bhi.w	800893a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d024      	beq.n	8008888 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2b02      	cmp	r3, #2
 8008842:	d17a      	bne.n	800893a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008a80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008856:	4b89      	ldr	r3, [pc, #548]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008866:	ed97 6a02 	vldr	s12, [r7, #8]
 800886a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800886e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008872:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800887a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800887e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008882:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8008886:	e08f      	b.n	80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008888:	4b7c      	ldr	r3, [pc, #496]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008894:	4b79      	ldr	r3, [pc, #484]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	0f1b      	lsrs	r3, r3, #28
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	e006      	b.n	80088ae <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80088a0:	4b76      	ldr	r3, [pc, #472]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088a6:	041b      	lsls	r3, r3, #16
 80088a8:	0f1b      	lsrs	r3, r3, #28
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	4a76      	ldr	r2, [pc, #472]	@ (8008a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80088b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b4:	ee07 3a90 	vmov	s15, r3
 80088b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80088d8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80088dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80088ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088f4:	e058      	b.n	80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	ee07 3a90 	vmov	s15, r3
 80088fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008900:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8008a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8008904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008908:	4b5c      	ldr	r3, [pc, #368]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800890a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008910:	ee07 3a90 	vmov	s15, r3
 8008914:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008918:	ed97 6a02 	vldr	s12, [r7, #8]
 800891c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008920:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008924:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008928:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800892c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008934:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008938:	e036      	b.n	80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800893a:	4b50      	ldr	r3, [pc, #320]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008946:	4b4d      	ldr	r3, [pc, #308]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	0f1b      	lsrs	r3, r3, #28
 800894c:	f003 030f 	and.w	r3, r3, #15
 8008950:	e006      	b.n	8008960 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008952:	4b4a      	ldr	r3, [pc, #296]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008958:	041b      	lsls	r3, r3, #16
 800895a:	0f1b      	lsrs	r3, r3, #28
 800895c:	f003 030f 	and.w	r3, r3, #15
 8008960:	4a49      	ldr	r2, [pc, #292]	@ (8008a88 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	ee07 3a90 	vmov	s15, r3
 8008974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008986:	ed97 6a02 	vldr	s12, [r7, #8]
 800898a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008a84 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800898e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800899a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089a6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80089a8:	4b34      	ldr	r3, [pc, #208]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80089aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d017      	beq.n	80089e4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80089b4:	4b31      	ldr	r3, [pc, #196]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80089b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089b8:	0a5b      	lsrs	r3, r3, #9
 80089ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80089c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80089ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089da:	ee17 2a90 	vmov	r2, s15
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	e002      	b.n	80089ea <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80089ea:	4b24      	ldr	r3, [pc, #144]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d017      	beq.n	8008a26 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80089f6:	4b21      	ldr	r3, [pc, #132]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80089f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089fa:	0c1b      	lsrs	r3, r3, #16
 80089fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a00:	ee07 3a90 	vmov	s15, r3
 8008a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008a08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a1c:	ee17 2a90 	vmov	r2, s15
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	605a      	str	r2, [r3, #4]
 8008a24:	e002      	b.n	8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008a2c:	4b13      	ldr	r3, [pc, #76]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d017      	beq.n	8008a68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008a38:	4b10      	ldr	r3, [pc, #64]	@ (8008a7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a3c:	0e1b      	lsrs	r3, r3, #24
 8008a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008a4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008a52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a5e:	ee17 2a90 	vmov	r2, s15
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a66:	e002      	b.n	8008a6e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	609a      	str	r2, [r3, #8]
}
 8008a6e:	bf00      	nop
 8008a70:	3724      	adds	r7, #36	@ 0x24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	46020c00 	.word	0x46020c00
 8008a80:	4b742400 	.word	0x4b742400
 8008a84:	46000000 	.word	0x46000000
 8008a88:	08011458 	.word	0x08011458
 8008a8c:	4af42400 	.word	0x4af42400

08008a90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08e      	sub	sp, #56	@ 0x38
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a9e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	d145      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008aa6:	4ba7      	ldr	r3, [pc, #668]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ab0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008ab2:	4ba4      	ldr	r3, [pc, #656]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d108      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ac6:	d104      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ace:	f001 bb35 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008ad2:	4b9c      	ldr	r3, [pc, #624]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ad8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008adc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ae0:	d114      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae8:	d110      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008aea:	4b96      	ldr	r3, [pc, #600]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008af4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008af8:	d103      	bne.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008afa:	23fa      	movs	r3, #250	@ 0xfa
 8008afc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008afe:	f001 bb1d 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8008b02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b06:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008b08:	f001 bb18 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008b0c:	4b8d      	ldr	r3, [pc, #564]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b18:	d107      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b20:	d103      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008b22:	4b89      	ldr	r3, [pc, #548]	@ (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b26:	f001 bb09 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b2e:	f001 bb05 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b36:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	d151      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008b3e:	4b81      	ldr	r3, [pc, #516]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b44:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008b48:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	2b80      	cmp	r3, #128	@ 0x80
 8008b4e:	d035      	beq.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b52:	2b80      	cmp	r3, #128	@ 0x80
 8008b54:	d841      	bhi.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	2b60      	cmp	r3, #96	@ 0x60
 8008b5a:	d02a      	beq.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5e:	2b60      	cmp	r3, #96	@ 0x60
 8008b60:	d83b      	bhi.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	2b40      	cmp	r3, #64	@ 0x40
 8008b66:	d009      	beq.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6a:	2b40      	cmp	r3, #64	@ 0x40
 8008b6c:	d835      	bhi.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00c      	beq.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	2b20      	cmp	r3, #32
 8008b78:	d012      	beq.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008b7a:	e02e      	b.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff fb71 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b8a:	f001 bad7 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b8e:	f107 0318 	add.w	r3, r7, #24
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7ff fcc4 	bl	8008520 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b9c:	f001 bace 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ba0:	f107 030c 	add.w	r3, r7, #12
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff fe17 	bl	80087d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bae:	f001 bac5 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008bb2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bb8:	f001 bac0 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bbc:	4b61      	ldr	r3, [pc, #388]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bc8:	d103      	bne.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008bca:	4b60      	ldr	r3, [pc, #384]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008bcc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008bce:	f001 bab5 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bd6:	f001 bab1 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bde:	f001 baad 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008be6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008bea:	430b      	orrs	r3, r1
 8008bec:	d158      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008bee:	4b55      	ldr	r3, [pc, #340]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008bf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bf4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008bf8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c00:	d03b      	beq.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c08:	d846      	bhi.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c10:	d02e      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c18:	d83e      	bhi.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c20:	d00b      	beq.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c28:	d836      	bhi.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00d      	beq.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c36:	d012      	beq.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008c38:	e02e      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fb12 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c48:	f001 ba78 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c4c:	f107 0318 	add.w	r3, r7, #24
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7ff fc65 	bl	8008520 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c5a:	f001 ba6f 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c5e:	f107 030c 	add.w	r3, r7, #12
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fdb8 	bl	80087d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c6c:	f001 ba66 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008c70:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c76:	f001 ba61 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c7a:	4b32      	ldr	r3, [pc, #200]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c86:	d103      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008c88:	4b30      	ldr	r3, [pc, #192]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008c8a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c8c:	f001 ba56 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c94:	f001 ba52 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c9c:	f001 ba4e 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	d126      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008cac:	4b25      	ldr	r3, [pc, #148]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008cae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008cb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cb6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008cb8:	4b22      	ldr	r3, [pc, #136]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cc4:	d106      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d103      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd0:	f001 ba34 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ce0:	d107      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ce8:	d103      	bne.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008cea:	4b19      	ldr	r3, [pc, #100]	@ (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cee:	f001 ba25 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf6:	f001 ba21 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cfe:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008d02:	430b      	orrs	r3, r1
 8008d04:	d16e      	bne.n	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008d06:	4b0f      	ldr	r3, [pc, #60]	@ (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d0c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008d10:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d14:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d18:	d03d      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d20:	d85c      	bhi.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d28:	d014      	beq.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d30:	d854      	bhi.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01f      	beq.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d3e:	d012      	beq.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008d40:	e04c      	b.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008d42:	bf00      	nop
 8008d44:	46020c00 	.word	0x46020c00
 8008d48:	0003d090 	.word	0x0003d090
 8008d4c:	00f42400 	.word	0x00f42400
 8008d50:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff fa85 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d62:	f001 b9eb 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d66:	f107 0318 	add.w	r3, r7, #24
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff fbd8 	bl	8008520 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d74:	f001 b9e2 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008d78:	4ba7      	ldr	r3, [pc, #668]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d84:	d103      	bne.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008d86:	4ba5      	ldr	r3, [pc, #660]	@ (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d88:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d8a:	f001 b9d7 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d92:	f001 b9d3 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008d96:	4ba0      	ldr	r3, [pc, #640]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d118      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008da2:	4b9d      	ldr	r3, [pc, #628]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008dae:	4b9a      	ldr	r3, [pc, #616]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	0e1b      	lsrs	r3, r3, #24
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	e006      	b.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008dba:	4b97      	ldr	r3, [pc, #604]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008dc0:	041b      	lsls	r3, r3, #16
 8008dc2:	0e1b      	lsrs	r3, r3, #24
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	4a95      	ldr	r2, [pc, #596]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008dd0:	f001 b9b4 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dd8:	f001 b9b0 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008de0:	f001 b9ac 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008dec:	430b      	orrs	r3, r1
 8008dee:	d17f      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008df0:	4b89      	ldr	r3, [pc, #548]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008df2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dfa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d165      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008e02:	4b85      	ldr	r3, [pc, #532]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e08:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008e0c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008e14:	d034      	beq.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e18:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008e1c:	d853      	bhi.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e24:	d00b      	beq.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8008e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e2c:	d84b      	bhi.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d016      	beq.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e3a:	d009      	beq.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008e3c:	e043      	b.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff fa10 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008e4c:	f001 b976 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e50:	f107 0318 	add.w	r3, r7, #24
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fb63 	bl	8008520 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008e5e:	f001 b96d 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008e62:	4b6d      	ldr	r3, [pc, #436]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e6e:	d103      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008e70:	4b6a      	ldr	r3, [pc, #424]	@ (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e72:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008e74:	f001 b962 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008e7c:	f001 b95e 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008e80:	4b65      	ldr	r3, [pc, #404]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0320 	and.w	r3, r3, #32
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d118      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008e8c:	4b62      	ldr	r3, [pc, #392]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008e98:	4b5f      	ldr	r3, [pc, #380]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	0e1b      	lsrs	r3, r3, #24
 8008e9e:	f003 030f 	and.w	r3, r3, #15
 8008ea2:	e006      	b.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008eaa:	041b      	lsls	r3, r3, #16
 8008eac:	0e1b      	lsrs	r3, r3, #24
 8008eae:	f003 030f 	and.w	r3, r3, #15
 8008eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008eba:	f001 b93f 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008ec2:	f001 b93b 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008eca:	f001 b937 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ed4:	d108      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff f9c4 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee4:	f001 b92a 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eec:	f001 b926 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef4:	1e51      	subs	r1, r2, #1
 8008ef6:	430b      	orrs	r3, r1
 8008ef8:	d136      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008efa:	4b47      	ldr	r3, [pc, #284]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f00:	f003 0303 	and.w	r3, r3, #3
 8008f04:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d104      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008f0c:	f7fe fa42 	bl	8007394 <HAL_RCC_GetPCLK2Freq>
 8008f10:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f12:	f001 b913 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d104      	bne.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f1c:	f7fe f906 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8008f20:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f22:	f001 b90b 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008f26:	4b3c      	ldr	r3, [pc, #240]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f32:	d106      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d103      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8008f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3e:	f001 b8fd 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008f42:	4b35      	ldr	r3, [pc, #212]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d107      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d104      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8008f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f5c:	f001 b8ee 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f64:	f001 b8ea 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f6c:	1e91      	subs	r1, r2, #2
 8008f6e:	430b      	orrs	r3, r1
 8008f70:	d136      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008f72:	4b29      	ldr	r3, [pc, #164]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f78:	f003 030c 	and.w	r3, r3, #12
 8008f7c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d104      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f84:	f7fe f9f2 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 8008f88:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f8a:	f001 b8d7 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d104      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f94:	f7fe f8ca 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8008f98:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f9a:	f001 b8cf 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008faa:	d106      	bne.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fae:	2b08      	cmp	r3, #8
 8008fb0:	d103      	bne.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb6:	f001 b8c1 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008fba:	4b17      	ldr	r3, [pc, #92]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d107      	bne.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	2b0c      	cmp	r3, #12
 8008fcc:	d104      	bne.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8008fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd4:	f001 b8b2 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fdc:	f001 b8ae 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe4:	1f11      	subs	r1, r2, #4
 8008fe6:	430b      	orrs	r3, r1
 8008fe8:	d13f      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008fea:	4b0b      	ldr	r3, [pc, #44]	@ (8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ff0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ff4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008ffc:	f7fe f9b6 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 8009000:	6378      	str	r0, [r7, #52]	@ 0x34
 8009002:	f001 b89b 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	2b10      	cmp	r3, #16
 800900a:	d10d      	bne.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800900c:	f7fe f88e 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009010:	6378      	str	r0, [r7, #52]	@ 0x34
 8009012:	f001 b893 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8009016:	bf00      	nop
 8009018:	46020c00 	.word	0x46020c00
 800901c:	02dc6c00 	.word	0x02dc6c00
 8009020:	08011458 	.word	0x08011458
 8009024:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009028:	4ba8      	ldr	r3, [pc, #672]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009034:	d106      	bne.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	2b20      	cmp	r3, #32
 800903a:	d103      	bne.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800903c:	4ba4      	ldr	r3, [pc, #656]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800903e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009040:	f001 b87c 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009044:	4ba1      	ldr	r3, [pc, #644]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800904a:	f003 0302 	and.w	r3, r3, #2
 800904e:	2b02      	cmp	r3, #2
 8009050:	d107      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	2b30      	cmp	r3, #48	@ 0x30
 8009056:	d104      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8009058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
 800905e:	f001 b86d 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	637b      	str	r3, [r7, #52]	@ 0x34
 8009066:	f001 b869 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800906a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800906e:	f1a2 0108 	sub.w	r1, r2, #8
 8009072:	430b      	orrs	r3, r1
 8009074:	d136      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009076:	4b95      	ldr	r3, [pc, #596]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800907c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009080:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009084:	2b00      	cmp	r3, #0
 8009086:	d104      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009088:	f7fe f970 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 800908c:	6378      	str	r0, [r7, #52]	@ 0x34
 800908e:	f001 b855 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009094:	2b40      	cmp	r3, #64	@ 0x40
 8009096:	d104      	bne.n	80090a2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009098:	f7fe f848 	bl	800712c <HAL_RCC_GetSysClockFreq>
 800909c:	6378      	str	r0, [r7, #52]	@ 0x34
 800909e:	f001 b84d 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80090a2:	4b8a      	ldr	r3, [pc, #552]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090ae:	d106      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80090b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b2:	2b80      	cmp	r3, #128	@ 0x80
 80090b4:	d103      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80090b6:	4b86      	ldr	r3, [pc, #536]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80090b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ba:	f001 b83f 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80090be:	4b83      	ldr	r3, [pc, #524]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d107      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80090cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80090d0:	d104      	bne.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80090d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d8:	f001 b830 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e0:	f001 b82c 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80090e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090e8:	f1a2 0110 	sub.w	r1, r2, #16
 80090ec:	430b      	orrs	r3, r1
 80090ee:	d139      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80090f0:	4b76      	ldr	r3, [pc, #472]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80090fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d104      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009102:	f7fe f933 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 8009106:	6378      	str	r0, [r7, #52]	@ 0x34
 8009108:	f001 b818 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009112:	d104      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009114:	f7fe f80a 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009118:	6378      	str	r0, [r7, #52]	@ 0x34
 800911a:	f001 b80f 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800911e:	4b6b      	ldr	r3, [pc, #428]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800912a:	d107      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800912c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009132:	d103      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8009134:	4b66      	ldr	r3, [pc, #408]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009136:	637b      	str	r3, [r7, #52]	@ 0x34
 8009138:	f001 b800 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800913c:	4b63      	ldr	r3, [pc, #396]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800913e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	2b02      	cmp	r3, #2
 8009148:	d108      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009150:	d104      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8009152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34
 8009158:	f000 bff0 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009160:	f000 bfec 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8009164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009168:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800916c:	430b      	orrs	r3, r1
 800916e:	d139      	bne.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8009170:	4b56      	ldr	r3, [pc, #344]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009172:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009176:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800917a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800917c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009182:	f7fe f8f3 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 8009186:	6378      	str	r0, [r7, #52]	@ 0x34
 8009188:	f000 bfd8 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009192:	d104      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009194:	f7fd ffca 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009198:	6378      	str	r0, [r7, #52]	@ 0x34
 800919a:	f000 bfcf 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800919e:	4b4b      	ldr	r3, [pc, #300]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091aa:	d107      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80091ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091b2:	d103      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 80091b4:	4b46      	ldr	r3, [pc, #280]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80091b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b8:	f000 bfc0 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80091bc:	4b43      	ldr	r3, [pc, #268]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80091be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d108      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091d0:	d104      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 80091d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d8:	f000 bfb0 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80091dc:	2300      	movs	r3, #0
 80091de:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e0:	f000 bfac 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80091e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091e8:	f1a2 0120 	sub.w	r1, r2, #32
 80091ec:	430b      	orrs	r3, r1
 80091ee:	d158      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80091f0:	4b36      	ldr	r3, [pc, #216]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80091f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80091fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d104      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8009202:	f7fe f8db 	bl	80073bc <HAL_RCC_GetPCLK3Freq>
 8009206:	6378      	str	r0, [r7, #52]	@ 0x34
 8009208:	f000 bf98 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800920c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920e:	2b01      	cmp	r3, #1
 8009210:	d104      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009212:	f7fd ff8b 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009216:	6378      	str	r0, [r7, #52]	@ 0x34
 8009218:	f000 bf90 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800921c:	4b2b      	ldr	r3, [pc, #172]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009228:	d106      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800922a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922c:	2b02      	cmp	r3, #2
 800922e:	d103      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8009230:	4b27      	ldr	r3, [pc, #156]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009232:	637b      	str	r3, [r7, #52]	@ 0x34
 8009234:	f000 bf82 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009238:	4b24      	ldr	r3, [pc, #144]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800923a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b02      	cmp	r3, #2
 8009244:	d107      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	2b03      	cmp	r3, #3
 800924a:	d104      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800924c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009250:	637b      	str	r3, [r7, #52]	@ 0x34
 8009252:	f000 bf73 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009256:	4b1d      	ldr	r3, [pc, #116]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0320 	and.w	r3, r3, #32
 800925e:	2b20      	cmp	r3, #32
 8009260:	d11b      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8009262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009264:	2b04      	cmp	r3, #4
 8009266:	d118      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009268:	4b18      	ldr	r3, [pc, #96]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8009274:	4b15      	ldr	r3, [pc, #84]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	0e1b      	lsrs	r3, r3, #24
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	e006      	b.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8009280:	4b12      	ldr	r3, [pc, #72]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009282:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009286:	041b      	lsls	r3, r3, #16
 8009288:	0e1b      	lsrs	r3, r3, #24
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	4a11      	ldr	r2, [pc, #68]	@ (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009294:	637b      	str	r3, [r7, #52]	@ 0x34
 8009296:	f000 bf51 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	637b      	str	r3, [r7, #52]	@ 0x34
 800929e:	f000 bf4d 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80092a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a6:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80092aa:	430b      	orrs	r3, r1
 80092ac:	d172      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80092ae:	4b07      	ldr	r3, [pc, #28]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80092b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80092b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80092ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092c0:	d10a      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80092c2:	f7fd ff33 	bl	800712c <HAL_RCC_GetSysClockFreq>
 80092c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80092c8:	f000 bf38 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80092cc:	46020c00 	.word	0x46020c00
 80092d0:	00f42400 	.word	0x00f42400
 80092d4:	08011458 	.word	0x08011458
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092de:	d108      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092e0:	f107 0318 	add.w	r3, r7, #24
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7ff f91b 	bl	8008520 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ee:	f000 bf25 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80092f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d104      	bne.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80092f8:	f7fe f81e 	bl	8007338 <HAL_RCC_GetHCLKFreq>
 80092fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80092fe:	f000 bf1d 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009308:	d122      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800930a:	4bb0      	ldr	r3, [pc, #704]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0320 	and.w	r3, r3, #32
 8009312:	2b20      	cmp	r3, #32
 8009314:	d118      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009316:	4bad      	ldr	r3, [pc, #692]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d005      	beq.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8009322:	4baa      	ldr	r3, [pc, #680]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	0e1b      	lsrs	r3, r3, #24
 8009328:	f003 030f 	and.w	r3, r3, #15
 800932c:	e006      	b.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800932e:	4ba7      	ldr	r3, [pc, #668]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009334:	041b      	lsls	r3, r3, #16
 8009336:	0e1b      	lsrs	r3, r3, #24
 8009338:	f003 030f 	and.w	r3, r3, #15
 800933c:	4aa4      	ldr	r2, [pc, #656]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800933e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009342:	637b      	str	r3, [r7, #52]	@ 0x34
 8009344:	f000 befa 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	637b      	str	r3, [r7, #52]	@ 0x34
 800934c:	f000 bef6 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009350:	4b9e      	ldr	r3, [pc, #632]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009358:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800935c:	d107      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009360:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009364:	d103      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8009366:	4b9b      	ldr	r3, [pc, #620]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34
 800936a:	f000 bee7 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800936e:	4b97      	ldr	r3, [pc, #604]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800937a:	d107      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009382:	d103      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8009384:	4b94      	ldr	r3, [pc, #592]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8009386:	637b      	str	r3, [r7, #52]	@ 0x34
 8009388:	f000 bed8 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800938c:	2300      	movs	r3, #0
 800938e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009390:	f000 bed4 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009398:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800939c:	430b      	orrs	r3, r1
 800939e:	d158      	bne.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80093a0:	4b8a      	ldr	r3, [pc, #552]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80093a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d84b      	bhi.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 80093b2:	a201      	add	r2, pc, #4	@ (adr r2, 80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	080093f1 	.word	0x080093f1
 80093bc:	080093cd 	.word	0x080093cd
 80093c0:	080093df 	.word	0x080093df
 80093c4:	080093fb 	.word	0x080093fb
 80093c8:	08009405 	.word	0x08009405
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fe ff49 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093da:	f000 beaf 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093de:	f107 030c 	add.w	r3, r7, #12
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff f9f8 	bl	80087d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093ec:	f000 bea6 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80093f0:	f7fd ffa2 	bl	8007338 <HAL_RCC_GetHCLKFreq>
 80093f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80093f6:	f000 bea1 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80093fa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80093fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009400:	f000 be9c 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009404:	4b71      	ldr	r3, [pc, #452]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0320 	and.w	r3, r3, #32
 800940c:	2b20      	cmp	r3, #32
 800940e:	d118      	bne.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009410:	4b6e      	ldr	r3, [pc, #440]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d005      	beq.n	8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800941c:	4b6b      	ldr	r3, [pc, #428]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	0e1b      	lsrs	r3, r3, #24
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	e006      	b.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8009428:	4b68      	ldr	r3, [pc, #416]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800942a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800942e:	041b      	lsls	r3, r3, #16
 8009430:	0e1b      	lsrs	r3, r3, #24
 8009432:	f003 030f 	and.w	r3, r3, #15
 8009436:	4a66      	ldr	r2, [pc, #408]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8009438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800943c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800943e:	f000 be7d 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009446:	f000 be79 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800944a:	2300      	movs	r3, #0
 800944c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800944e:	f000 be75 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009456:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800945a:	430b      	orrs	r3, r1
 800945c:	d167      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800945e:	4b5b      	ldr	r3, [pc, #364]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009464:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009468:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800946a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009470:	d036      	beq.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8009472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009474:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009478:	d855      	bhi.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009480:	d029      	beq.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009488:	d84d      	bhi.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800948a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009490:	d013      	beq.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009498:	d845      	bhi.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800949a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949c:	2b00      	cmp	r3, #0
 800949e:	d015      	beq.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 80094a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094a6:	d13e      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe fedb 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094b6:	f000 be41 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ba:	f107 030c 	add.w	r3, r7, #12
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff f98a 	bl	80087d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094c8:	f000 be38 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80094cc:	f7fd ff34 	bl	8007338 <HAL_RCC_GetHCLKFreq>
 80094d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80094d2:	f000 be33 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80094d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094dc:	f000 be2e 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80094e0:	4b3a      	ldr	r3, [pc, #232]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0320 	and.w	r3, r3, #32
 80094e8:	2b20      	cmp	r3, #32
 80094ea:	d118      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80094ec:	4b37      	ldr	r3, [pc, #220]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 80094f8:	4b34      	ldr	r3, [pc, #208]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	0e1b      	lsrs	r3, r3, #24
 80094fe:	f003 030f 	and.w	r3, r3, #15
 8009502:	e006      	b.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009504:	4b31      	ldr	r3, [pc, #196]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009506:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800950a:	041b      	lsls	r3, r3, #16
 800950c:	0e1b      	lsrs	r3, r3, #24
 800950e:	f003 030f 	and.w	r3, r3, #15
 8009512:	4a2f      	ldr	r2, [pc, #188]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8009514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009518:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800951a:	f000 be0f 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800951e:	2300      	movs	r3, #0
 8009520:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009522:	f000 be0b 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800952a:	f000 be07 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800952e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009532:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009536:	430b      	orrs	r3, r1
 8009538:	d154      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800953a:	4b24      	ldr	r3, [pc, #144]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800953c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009540:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009544:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009548:	2b00      	cmp	r3, #0
 800954a:	d104      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800954c:	f7fd ff0e 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 8009550:	6378      	str	r0, [r7, #52]	@ 0x34
 8009552:	f000 bdf3 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800955c:	d104      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800955e:	f7fd fde5 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009562:	6378      	str	r0, [r7, #52]	@ 0x34
 8009564:	f000 bdea 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009568:	4b18      	ldr	r3, [pc, #96]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009574:	d107      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8009576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800957c:	d103      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800957e:	4b16      	ldr	r3, [pc, #88]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8009580:	637b      	str	r3, [r7, #52]	@ 0x34
 8009582:	f000 bddb 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009586:	4b11      	ldr	r3, [pc, #68]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b20      	cmp	r3, #32
 8009590:	d124      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8009592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009594:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009598:	d120      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800959a:	4b0c      	ldr	r3, [pc, #48]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d005      	beq.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 80095a6:	4b09      	ldr	r3, [pc, #36]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	0e1b      	lsrs	r3, r3, #24
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	e006      	b.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 80095b2:	4b06      	ldr	r3, [pc, #24]	@ (80095cc <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80095b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095b8:	041b      	lsls	r3, r3, #16
 80095ba:	0e1b      	lsrs	r3, r3, #24
 80095bc:	f003 030f 	and.w	r3, r3, #15
 80095c0:	4a03      	ldr	r2, [pc, #12]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80095c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c8:	f000 bdb8 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80095cc:	46020c00 	.word	0x46020c00
 80095d0:	08011458 	.word	0x08011458
 80095d4:	007a1200 	.word	0x007a1200
 80095d8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	637b      	str	r3, [r7, #52]	@ 0x34
 80095e0:	f000 bdac 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80095e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095e8:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80095ec:	430b      	orrs	r3, r1
 80095ee:	d14c      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80095f0:	4ba8      	ldr	r3, [pc, #672]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80095f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80095fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d104      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009602:	f7fd feb3 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 8009606:	6378      	str	r0, [r7, #52]	@ 0x34
 8009608:	f000 bd98 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800960c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009612:	d104      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009614:	f7fd fd8a 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009618:	6378      	str	r0, [r7, #52]	@ 0x34
 800961a:	f000 bd8f 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800961e:	4b9d      	ldr	r3, [pc, #628]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800962a:	d107      	bne.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 800962c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009632:	d103      	bne.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 8009634:	4b98      	ldr	r3, [pc, #608]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009636:	637b      	str	r3, [r7, #52]	@ 0x34
 8009638:	f000 bd80 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800963c:	4b95      	ldr	r3, [pc, #596]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0320 	and.w	r3, r3, #32
 8009644:	2b20      	cmp	r3, #32
 8009646:	d11c      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 8009648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800964e:	d118      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009650:	4b90      	ldr	r3, [pc, #576]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d005      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800965c:	4b8d      	ldr	r3, [pc, #564]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	0e1b      	lsrs	r3, r3, #24
 8009662:	f003 030f 	and.w	r3, r3, #15
 8009666:	e006      	b.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8009668:	4b8a      	ldr	r3, [pc, #552]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800966a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800966e:	041b      	lsls	r3, r3, #16
 8009670:	0e1b      	lsrs	r3, r3, #24
 8009672:	f003 030f 	and.w	r3, r3, #15
 8009676:	4a89      	ldr	r2, [pc, #548]	@ (800989c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8009678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800967c:	637b      	str	r3, [r7, #52]	@ 0x34
 800967e:	f000 bd5d 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	637b      	str	r3, [r7, #52]	@ 0x34
 8009686:	f000 bd59 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800968a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800968e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009692:	430b      	orrs	r3, r1
 8009694:	d158      	bne.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009696:	4b7f      	ldr	r3, [pc, #508]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800969c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80096a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80096a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80096a6:	d028      	beq.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 80096a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80096ac:	d848      	bhi.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	2b80      	cmp	r3, #128	@ 0x80
 80096b2:	d00e      	beq.n	80096d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80096b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b6:	2b80      	cmp	r3, #128	@ 0x80
 80096b8:	d842      	bhi.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 80096ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 80096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c2:	2b40      	cmp	r3, #64	@ 0x40
 80096c4:	d014      	beq.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 80096c6:	e03b      	b.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80096c8:	f7fd fe78 	bl	80073bc <HAL_RCC_GetPCLK3Freq>
 80096cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80096ce:	f000 bd35 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096d2:	4b70      	ldr	r3, [pc, #448]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096de:	d103      	bne.n	80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 80096e0:	4b6d      	ldr	r3, [pc, #436]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80096e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80096e4:	f000 bd2a 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096ec:	f000 bd26 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80096f0:	f7fd fd1c 	bl	800712c <HAL_RCC_GetSysClockFreq>
 80096f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80096f6:	f000 bd21 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80096fa:	4b66      	ldr	r3, [pc, #408]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b20      	cmp	r3, #32
 8009704:	d118      	bne.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009706:	4b63      	ldr	r3, [pc, #396]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d005      	beq.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 8009712:	4b60      	ldr	r3, [pc, #384]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	0e1b      	lsrs	r3, r3, #24
 8009718:	f003 030f 	and.w	r3, r3, #15
 800971c:	e006      	b.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 800971e:	4b5d      	ldr	r3, [pc, #372]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009724:	041b      	lsls	r3, r3, #16
 8009726:	0e1b      	lsrs	r3, r3, #24
 8009728:	f003 030f 	and.w	r3, r3, #15
 800972c:	4a5b      	ldr	r2, [pc, #364]	@ (800989c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800972e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009732:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009734:	f000 bd02 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800973c:	f000 bcfe 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009744:	f000 bcfa 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800974c:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009750:	430b      	orrs	r3, r1
 8009752:	d14c      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009754:	4b4f      	ldr	r3, [pc, #316]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800975a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800975e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	2b00      	cmp	r3, #0
 8009764:	d104      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009766:	f7fd fe01 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 800976a:	6378      	str	r0, [r7, #52]	@ 0x34
 800976c:	f000 bce6 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009776:	d104      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009778:	f7fd fcd8 	bl	800712c <HAL_RCC_GetSysClockFreq>
 800977c:	6378      	str	r0, [r7, #52]	@ 0x34
 800977e:	f000 bcdd 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009782:	4b44      	ldr	r3, [pc, #272]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800978a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800978e:	d107      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009796:	d103      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 8009798:	4b3f      	ldr	r3, [pc, #252]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800979a:	637b      	str	r3, [r7, #52]	@ 0x34
 800979c:	f000 bcce 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80097a0:	4b3c      	ldr	r3, [pc, #240]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0320 	and.w	r3, r3, #32
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	d11c      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80097b2:	d118      	bne.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80097b4:	4b37      	ldr	r3, [pc, #220]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d005      	beq.n	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 80097c0:	4b34      	ldr	r3, [pc, #208]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	0e1b      	lsrs	r3, r3, #24
 80097c6:	f003 030f 	and.w	r3, r3, #15
 80097ca:	e006      	b.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 80097cc:	4b31      	ldr	r3, [pc, #196]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80097ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097d2:	041b      	lsls	r3, r3, #16
 80097d4:	0e1b      	lsrs	r3, r3, #24
 80097d6:	f003 030f 	and.w	r3, r3, #15
 80097da:	4a30      	ldr	r2, [pc, #192]	@ (800989c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 80097dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e2:	f000 bcab 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ea:	f000 bca7 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 80097ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097f2:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 80097f6:	430b      	orrs	r3, r1
 80097f8:	d152      	bne.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 80097fa:	4b26      	ldr	r3, [pc, #152]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80097fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009800:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009804:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8009806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800980c:	f7fd fdae 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 8009810:	6378      	str	r0, [r7, #52]	@ 0x34
 8009812:	f000 bc93 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8009816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800981c:	d104      	bne.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800981e:	f7fd fc85 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009822:	6378      	str	r0, [r7, #52]	@ 0x34
 8009824:	f000 bc8a 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8009828:	4b1a      	ldr	r3, [pc, #104]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009834:	d107      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 8009836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009838:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800983c:	d103      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 800983e:	4b16      	ldr	r3, [pc, #88]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009840:	637b      	str	r3, [r7, #52]	@ 0x34
 8009842:	f000 bc7b 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8009846:	4b13      	ldr	r3, [pc, #76]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0320 	and.w	r3, r3, #32
 800984e:	2b20      	cmp	r3, #32
 8009850:	d11c      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8009852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009854:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009858:	d118      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800985a:	4b0e      	ldr	r3, [pc, #56]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8009866:	4b0b      	ldr	r3, [pc, #44]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	0e1b      	lsrs	r3, r3, #24
 800986c:	f003 030f 	and.w	r3, r3, #15
 8009870:	e006      	b.n	8009880 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 8009872:	4b08      	ldr	r3, [pc, #32]	@ (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009878:	041b      	lsls	r3, r3, #16
 800987a:	0e1b      	lsrs	r3, r3, #24
 800987c:	f003 030f 	and.w	r3, r3, #15
 8009880:	4a06      	ldr	r2, [pc, #24]	@ (800989c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8009882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009886:	637b      	str	r3, [r7, #52]	@ 0x34
 8009888:	f000 bc58 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800988c:	2300      	movs	r3, #0
 800988e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009890:	f000 bc54 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8009894:	46020c00 	.word	0x46020c00
 8009898:	00f42400 	.word	0x00f42400
 800989c:	08011458 	.word	0x08011458
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80098a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098a4:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80098a8:	430b      	orrs	r3, r1
 80098aa:	d14a      	bne.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80098ac:	4ba5      	ldr	r3, [pc, #660]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80098ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098b2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80098b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d104      	bne.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80098be:	f7fd fd55 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 80098c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80098c4:	f000 bc3a 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80098c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098ce:	d104      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80098d0:	f7fd fc2c 	bl	800712c <HAL_RCC_GetSysClockFreq>
 80098d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80098d6:	f000 bc31 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80098da:	4b9a      	ldr	r3, [pc, #616]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098e6:	d107      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 80098e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098ee:	d103      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 80098f0:	4b95      	ldr	r3, [pc, #596]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f4:	f000 bc22 	b.w	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80098f8:	4b92      	ldr	r3, [pc, #584]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0320 	and.w	r3, r3, #32
 8009900:	2b20      	cmp	r3, #32
 8009902:	d11b      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800990a:	d117      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800990c:	4b8d      	ldr	r3, [pc, #564]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8009918:	4b8a      	ldr	r3, [pc, #552]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	0e1b      	lsrs	r3, r3, #24
 800991e:	f003 030f 	and.w	r3, r3, #15
 8009922:	e006      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8009924:	4b87      	ldr	r3, [pc, #540]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009926:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	0e1b      	lsrs	r3, r3, #24
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	4a86      	ldr	r2, [pc, #536]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8009934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
 800993a:	e3ff      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009940:	e3fc      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009942:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009946:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800994a:	430b      	orrs	r3, r1
 800994c:	d164      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800994e:	4b7d      	ldr	r3, [pc, #500]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009958:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	2b00      	cmp	r3, #0
 800995e:	d120      	bne.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009960:	4b78      	ldr	r3, [pc, #480]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 0320 	and.w	r3, r3, #32
 8009968:	2b20      	cmp	r3, #32
 800996a:	d117      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800996c:	4b75      	ldr	r3, [pc, #468]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8009978:	4b72      	ldr	r3, [pc, #456]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	0e1b      	lsrs	r3, r3, #24
 800997e:	f003 030f 	and.w	r3, r3, #15
 8009982:	e006      	b.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8009984:	4b6f      	ldr	r3, [pc, #444]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800998a:	041b      	lsls	r3, r3, #16
 800998c:	0e1b      	lsrs	r3, r3, #24
 800998e:	f003 030f 	and.w	r3, r3, #15
 8009992:	4a6e      	ldr	r2, [pc, #440]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8009994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009998:	637b      	str	r3, [r7, #52]	@ 0x34
 800999a:	e3cf      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 800999c:	2300      	movs	r3, #0
 800999e:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a0:	e3cc      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80099a2:	4b68      	ldr	r3, [pc, #416]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80099a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099b0:	d112      	bne.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099b8:	d10e      	bne.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099ba:	4b62      	ldr	r3, [pc, #392]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80099bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099c8:	d102      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 80099ca:	23fa      	movs	r3, #250	@ 0xfa
 80099cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099ce:	e3b5      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 80099d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099d6:	e3b1      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80099d8:	4b5a      	ldr	r3, [pc, #360]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e4:	d106      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 80099e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099ec:	d102      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 80099ee:	4b56      	ldr	r3, [pc, #344]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80099f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f2:	e3a3      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80099f4:	4b53      	ldr	r3, [pc, #332]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80099f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099fa:	f003 0302 	and.w	r3, r3, #2
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d107      	bne.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a08:	d103      	bne.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 8009a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a10:	e394      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a16:	e391      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a1c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009a20:	430b      	orrs	r3, r1
 8009a22:	d164      	bne.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009a24:	4b47      	ldr	r3, [pc, #284]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a2a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d120      	bne.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009a36:	4b43      	ldr	r3, [pc, #268]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d117      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a42:	4b40      	ldr	r3, [pc, #256]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8009a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	0e1b      	lsrs	r3, r3, #24
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	e006      	b.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8009a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a60:	041b      	lsls	r3, r3, #16
 8009a62:	0e1b      	lsrs	r3, r3, #24
 8009a64:	f003 030f 	and.w	r3, r3, #15
 8009a68:	4a38      	ldr	r2, [pc, #224]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8009a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a70:	e364      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a76:	e361      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009a78:	4b32      	ldr	r3, [pc, #200]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a86:	d112      	bne.n	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a8e:	d10e      	bne.n	8009aae <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a90:	4b2c      	ldr	r3, [pc, #176]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a9e:	d102      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8009aa0:	23fa      	movs	r3, #250	@ 0xfa
 8009aa2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009aa4:	e34a      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8009aa6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009aaa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009aac:	e346      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009aae:	4b25      	ldr	r3, [pc, #148]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aba:	d106      	bne.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8009abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ac2:	d102      	bne.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8009ac4:	4b20      	ldr	r3, [pc, #128]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8009ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac8:	e338      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009aca:	4b1e      	ldr	r3, [pc, #120]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ad0:	f003 0302 	and.w	r3, r3, #2
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d107      	bne.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ada:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ade:	d103      	bne.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 8009ae0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ae6:	e329      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aec:	e326      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009af2:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009af6:	430b      	orrs	r3, r1
 8009af8:	d14e      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009afa:	4b12      	ldr	r3, [pc, #72]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b00:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009b04:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d103      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009b0c:	f7fd fc2e 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 8009b10:	6378      	str	r0, [r7, #52]	@ 0x34
 8009b12:	e313      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009b14:	4b0b      	ldr	r3, [pc, #44]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b22:	d119      	bne.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 8009b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009b2a:	d115      	bne.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b2c:	4b05      	ldr	r3, [pc, #20]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b3a:	d109      	bne.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8009b3c:	23fa      	movs	r3, #250	@ 0xfa
 8009b3e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b40:	e2fc      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8009b42:	bf00      	nop
 8009b44:	46020c00 	.word	0x46020c00
 8009b48:	00f42400 	.word	0x00f42400
 8009b4c:	08011458 	.word	0x08011458
      }
      else
      {
        frequency = LSI_VALUE;
 8009b50:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009b54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b56:	e2f1      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009b58:	4ba8      	ldr	r3, [pc, #672]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b64:	d106      	bne.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 8009b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009b6c:	d102      	bne.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 8009b6e:	4ba4      	ldr	r3, [pc, #656]	@ (8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8009b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b72:	e2e3      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009b74:	4ba1      	ldr	r3, [pc, #644]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009b76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b7a:	f003 0302 	and.w	r3, r3, #2
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d107      	bne.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8009b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b84:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009b88:	d103      	bne.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8009b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b90:	e2d4      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b96:	e2d1      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b9c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	d12d      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009ba4:	4b95      	ldr	r3, [pc, #596]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009baa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009bae:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009bb0:	4b92      	ldr	r3, [pc, #584]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bbc:	d105      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d102      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8009bc4:	4b8f      	ldr	r3, [pc, #572]	@ (8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8009bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc8:	e2b8      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bd0:	d107      	bne.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe fb46 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be0:	e2ac      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009be8:	d107      	bne.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bea:	f107 0318 	add.w	r3, r7, #24
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fc96 	bl	8008520 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf8:	e2a0      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bfe:	e29d      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c04:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	d156      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009c0c:	4b7b      	ldr	r3, [pc, #492]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c12:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009c16:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c1e:	d028      	beq.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c26:	d845      	bhi.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8009c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c2e:	d013      	beq.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8009c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c36:	d83d      	bhi.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8009c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c44:	d004      	beq.n	8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8009c46:	e035      	b.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009c48:	f7fd fba4 	bl	8007394 <HAL_RCC_GetPCLK2Freq>
 8009c4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009c4e:	e275      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009c50:	f7fd fa6c 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009c54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009c56:	e271      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c58:	4b68      	ldr	r3, [pc, #416]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c64:	d102      	bne.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 8009c66:	4b66      	ldr	r3, [pc, #408]	@ (8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8009c68:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c6a:	e267      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c70:	e264      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c72:	4b62      	ldr	r3, [pc, #392]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 0320 	and.w	r3, r3, #32
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d117      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8009c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	0e1b      	lsrs	r3, r3, #24
 8009c90:	f003 030f 	and.w	r3, r3, #15
 8009c94:	e006      	b.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8009c96:	4b59      	ldr	r3, [pc, #356]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c9c:	041b      	lsls	r3, r3, #16
 8009c9e:	0e1b      	lsrs	r3, r3, #24
 8009ca0:	f003 030f 	and.w	r3, r3, #15
 8009ca4:	4a58      	ldr	r2, [pc, #352]	@ (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8009ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009caa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cac:	e246      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cb2:	e243      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cb8:	e240      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cbe:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	d156      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009cc6:	4b4d      	ldr	r3, [pc, #308]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ccc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009cd0:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009cd8:	d028      	beq.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8009cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ce0:	d845      	bhi.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ce8:	d013      	beq.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cf0:	d83d      	bhi.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d004      	beq.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cfe:	d004      	beq.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8009d00:	e035      	b.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009d02:	f7fd fb33 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 8009d06:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009d08:	e218      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009d0a:	f7fd fa0f 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009d0e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009d10:	e214      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d12:	4b3a      	ldr	r3, [pc, #232]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d1e:	d102      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 8009d20:	4b37      	ldr	r3, [pc, #220]	@ (8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009d24:	e20a      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d2a:	e207      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009d2c:	4b33      	ldr	r3, [pc, #204]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0320 	and.w	r3, r3, #32
 8009d34:	2b20      	cmp	r3, #32
 8009d36:	d117      	bne.n	8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d38:	4b30      	ldr	r3, [pc, #192]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8009d44:	4b2d      	ldr	r3, [pc, #180]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	0e1b      	lsrs	r3, r3, #24
 8009d4a:	f003 030f 	and.w	r3, r3, #15
 8009d4e:	e006      	b.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8009d50:	4b2a      	ldr	r3, [pc, #168]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d56:	041b      	lsls	r3, r3, #16
 8009d58:	0e1b      	lsrs	r3, r3, #24
 8009d5a:	f003 030f 	and.w	r3, r3, #15
 8009d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8009d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009d66:	e1e9      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d6c:	e1e6      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d72:	e1e3      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d78:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009d7c:	430b      	orrs	r3, r1
 8009d7e:	d17e      	bne.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009d80:	4b1e      	ldr	r3, [pc, #120]	@ (8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d86:	f003 0318 	and.w	r3, r3, #24
 8009d8a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8e:	2b18      	cmp	r3, #24
 8009d90:	d872      	bhi.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 8009d92:	a201      	add	r2, pc, #4	@ (adr r2, 8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8009d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d98:	08009e0d 	.word	0x08009e0d
 8009d9c:	08009e79 	.word	0x08009e79
 8009da0:	08009e79 	.word	0x08009e79
 8009da4:	08009e79 	.word	0x08009e79
 8009da8:	08009e79 	.word	0x08009e79
 8009dac:	08009e79 	.word	0x08009e79
 8009db0:	08009e79 	.word	0x08009e79
 8009db4:	08009e79 	.word	0x08009e79
 8009db8:	08009e15 	.word	0x08009e15
 8009dbc:	08009e79 	.word	0x08009e79
 8009dc0:	08009e79 	.word	0x08009e79
 8009dc4:	08009e79 	.word	0x08009e79
 8009dc8:	08009e79 	.word	0x08009e79
 8009dcc:	08009e79 	.word	0x08009e79
 8009dd0:	08009e79 	.word	0x08009e79
 8009dd4:	08009e79 	.word	0x08009e79
 8009dd8:	08009e1d 	.word	0x08009e1d
 8009ddc:	08009e79 	.word	0x08009e79
 8009de0:	08009e79 	.word	0x08009e79
 8009de4:	08009e79 	.word	0x08009e79
 8009de8:	08009e79 	.word	0x08009e79
 8009dec:	08009e79 	.word	0x08009e79
 8009df0:	08009e79 	.word	0x08009e79
 8009df4:	08009e79 	.word	0x08009e79
 8009df8:	08009e37 	.word	0x08009e37
 8009dfc:	46020c00 	.word	0x46020c00
 8009e00:	00f42400 	.word	0x00f42400
 8009e04:	007a1200 	.word	0x007a1200
 8009e08:	08011458 	.word	0x08011458
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009e0c:	f7fd fad6 	bl	80073bc <HAL_RCC_GetPCLK3Freq>
 8009e10:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009e12:	e193      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009e14:	f7fd f98a 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009e18:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009e1a:	e18f      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009e1c:	4b9f      	ldr	r3, [pc, #636]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e28:	d102      	bne.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 8009e2a:	4b9d      	ldr	r3, [pc, #628]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8009e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e2e:	e185      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009e30:	2300      	movs	r3, #0
 8009e32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e34:	e182      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009e36:	4b99      	ldr	r3, [pc, #612]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 0320 	and.w	r3, r3, #32
 8009e3e:	2b20      	cmp	r3, #32
 8009e40:	d117      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009e42:	4b96      	ldr	r3, [pc, #600]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 8009e4e:	4b93      	ldr	r3, [pc, #588]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	0e1b      	lsrs	r3, r3, #24
 8009e54:	f003 030f 	and.w	r3, r3, #15
 8009e58:	e006      	b.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8009e5a:	4b90      	ldr	r3, [pc, #576]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e60:	041b      	lsls	r3, r3, #16
 8009e62:	0e1b      	lsrs	r3, r3, #24
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	4a8e      	ldr	r2, [pc, #568]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8009e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e70:	e164      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e76:	e161      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e7c:	e15e      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e82:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009e86:	430b      	orrs	r3, r1
 8009e88:	d155      	bne.n	8009f36 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009e8a:	4b84      	ldr	r3, [pc, #528]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009e8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009e90:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009e94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e9c:	d013      	beq.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ea4:	d844      	bhi.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009eac:	d013      	beq.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 8009eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009eb4:	d83c      	bhi.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d014      	beq.n	8009ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ec2:	d014      	beq.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 8009ec4:	e034      	b.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ec6:	f107 0318 	add.w	r3, r7, #24
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fe fb28 	bl	8008520 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ed4:	e132      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe f9c4 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ee4:	e12a      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009ee6:	f7fd f921 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009eea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009eec:	e126      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009eee:	4b6b      	ldr	r3, [pc, #428]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0320 	and.w	r3, r3, #32
 8009ef6:	2b20      	cmp	r3, #32
 8009ef8:	d117      	bne.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009efa:	4b68      	ldr	r3, [pc, #416]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d005      	beq.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 8009f06:	4b65      	ldr	r3, [pc, #404]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	0e1b      	lsrs	r3, r3, #24
 8009f0c:	f003 030f 	and.w	r3, r3, #15
 8009f10:	e006      	b.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 8009f12:	4b62      	ldr	r3, [pc, #392]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	0e1b      	lsrs	r3, r3, #24
 8009f1c:	f003 030f 	and.w	r3, r3, #15
 8009f20:	4a60      	ldr	r2, [pc, #384]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8009f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f26:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f28:	e108      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f2e:	e105      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009f30:	2300      	movs	r3, #0
 8009f32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f34:	e102      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8009f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f3a:	1e59      	subs	r1, r3, #1
 8009f3c:	ea52 0301 	orrs.w	r3, r2, r1
 8009f40:	d13c      	bne.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8009f42:	4b56      	ldr	r3, [pc, #344]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009f44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f48:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009f4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009f54:	d027      	beq.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8009f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009f5c:	d82b      	bhi.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f64:	d017      	beq.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 8009f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f6c:	d823      	bhi.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d004      	beq.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8009f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f7a:	d004      	beq.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 8009f7c:	e01b      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009f7e:	f7fd f8d5 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009f82:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f84:	e0da      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe f96c 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f94:	e0d2      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f96:	f107 0318 	add.w	r3, r7, #24
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe fac0 	bl	8008520 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fa4:	e0ca      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fa6:	f107 030c 	add.w	r3, r7, #12
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fc14 	bl	80087d8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fb4:	e0c2      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fba:	e0bf      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc0:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	d131      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009fc8:	4b34      	ldr	r3, [pc, #208]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009fce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fd2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009fd4:	4b31      	ldr	r3, [pc, #196]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d106      	bne.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d103      	bne.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 8009fe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fee:	e0a5      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ff6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ffa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ffe:	d112      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 800a000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a006:	d10e      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a008:	4b24      	ldr	r3, [pc, #144]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800a00a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a00e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a016:	d102      	bne.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 800a018:	23fa      	movs	r3, #250	@ 0xfa
 800a01a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a01c:	e08e      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800a01e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a022:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a024:	e08a      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	637b      	str	r3, [r7, #52]	@ 0x34
 800a02a:	e087      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a02c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a030:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a034:	430b      	orrs	r3, r1
 800a036:	d13b      	bne.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a038:	4b18      	ldr	r3, [pc, #96]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800a03a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a03e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a042:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a044:	4b15      	ldr	r3, [pc, #84]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a04c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a050:	d105      	bne.n	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 800a052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 800a058:	4b13      	ldr	r3, [pc, #76]	@ (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800a05a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a05c:	e06e      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a05e:	4b0f      	ldr	r3, [pc, #60]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a06a:	d106      	bne.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 800a06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a072:	d102      	bne.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a074:	4b0d      	ldr	r3, [pc, #52]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 800a076:	637b      	str	r3, [r7, #52]	@ 0x34
 800a078:	e060      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a07a:	4b08      	ldr	r3, [pc, #32]	@ (800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a086:	d106      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 800a088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a08e:	d102      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 800a090:	4b03      	ldr	r3, [pc, #12]	@ (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800a092:	637b      	str	r3, [r7, #52]	@ 0x34
 800a094:	e052      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a096:	2300      	movs	r3, #0
 800a098:	637b      	str	r3, [r7, #52]	@ 0x34
 800a09a:	e04f      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800a09c:	46020c00 	.word	0x46020c00
 800a0a0:	00f42400 	.word	0x00f42400
 800a0a4:	08011458 	.word	0x08011458
 800a0a8:	02dc6c00 	.word	0x02dc6c00
 800a0ac:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800a0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0b4:	f1a3 0108 	sub.w	r1, r3, #8
 800a0b8:	ea52 0301 	orrs.w	r3, r2, r1
 800a0bc:	d13c      	bne.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800a0be:	4b22      	ldr	r3, [pc, #136]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800a0c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a0c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a0c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800a0ca:	4b1f      	ldr	r3, [pc, #124]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0d6:	d105      	bne.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d102      	bne.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 800a0de:	4b1b      	ldr	r3, [pc, #108]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800a0e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0e2:	e02b      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800a0e4:	4b18      	ldr	r3, [pc, #96]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0f0:	d106      	bne.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0f8:	d102      	bne.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 800a0fa:	4b15      	ldr	r3, [pc, #84]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 800a0fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0fe:	e01d      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800a100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a106:	d107      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fe f8ab 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a114:	637b      	str	r3, [r7, #52]	@ 0x34
 800a116:	e011      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800a118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a11e:	d108      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a124:	4618      	mov	r0, r3
 800a126:	f7fe f89f 	bl	8008268 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12c:	085b      	lsrs	r3, r3, #1
 800a12e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a130:	e004      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	637b      	str	r3, [r7, #52]	@ 0x34
 800a136:	e001      	b.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800a13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3738      	adds	r7, #56	@ 0x38
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	46020c00 	.word	0x46020c00
 800a14c:	007a1200 	.word	0x007a1200
 800a150:	003d0900 	.word	0x003d0900

0800a154 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a15c:	4b47      	ldr	r3, [pc, #284]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a46      	ldr	r2, [pc, #280]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a162:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a166:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a168:	f7fa fa78 	bl	800465c <HAL_GetTick>
 800a16c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a16e:	e008      	b.n	800a182 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a170:	f7fa fa74 	bl	800465c <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d901      	bls.n	800a182 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e077      	b.n	800a272 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a182:	4b3e      	ldr	r3, [pc, #248]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1f0      	bne.n	800a170 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a18e:	4b3b      	ldr	r3, [pc, #236]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a192:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a196:	f023 0303 	bic.w	r3, r3, #3
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	6811      	ldr	r1, [r2, #0]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	6852      	ldr	r2, [r2, #4]
 800a1a2:	3a01      	subs	r2, #1
 800a1a4:	0212      	lsls	r2, r2, #8
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	4934      	ldr	r1, [pc, #208]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a1ae:	4b33      	ldr	r3, [pc, #204]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a1b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1b2:	4b33      	ldr	r3, [pc, #204]	@ (800a280 <RCCEx_PLL2_Config+0x12c>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6892      	ldr	r2, [r2, #8]
 800a1ba:	3a01      	subs	r2, #1
 800a1bc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	68d2      	ldr	r2, [r2, #12]
 800a1c4:	3a01      	subs	r2, #1
 800a1c6:	0252      	lsls	r2, r2, #9
 800a1c8:	b292      	uxth	r2, r2
 800a1ca:	4311      	orrs	r1, r2
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	6912      	ldr	r2, [r2, #16]
 800a1d0:	3a01      	subs	r2, #1
 800a1d2:	0412      	lsls	r2, r2, #16
 800a1d4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a1d8:	4311      	orrs	r1, r2
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6952      	ldr	r2, [r2, #20]
 800a1de:	3a01      	subs	r2, #1
 800a1e0:	0612      	lsls	r2, r2, #24
 800a1e2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	4924      	ldr	r1, [pc, #144]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a1ee:	4b23      	ldr	r3, [pc, #140]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f2:	f023 020c 	bic.w	r2, r3, #12
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	4920      	ldr	r1, [pc, #128]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a200:	4b1e      	ldr	r3, [pc, #120]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	491c      	ldr	r1, [pc, #112]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a20e:	4b1b      	ldr	r3, [pc, #108]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a212:	4a1a      	ldr	r2, [pc, #104]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a214:	f023 0310 	bic.w	r3, r3, #16
 800a218:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a21a:	4b18      	ldr	r3, [pc, #96]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a21e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a222:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	69d2      	ldr	r2, [r2, #28]
 800a22a:	00d2      	lsls	r2, r2, #3
 800a22c:	4913      	ldr	r1, [pc, #76]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a232:	4b12      	ldr	r3, [pc, #72]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a236:	4a11      	ldr	r2, [pc, #68]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a238:	f043 0310 	orr.w	r3, r3, #16
 800a23c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a23e:	4b0f      	ldr	r3, [pc, #60]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a0e      	ldr	r2, [pc, #56]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a244:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a248:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a24a:	f7fa fa07 	bl	800465c <HAL_GetTick>
 800a24e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a250:	e008      	b.n	800a264 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a252:	f7fa fa03 	bl	800465c <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d901      	bls.n	800a264 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e006      	b.n	800a272 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a264:	4b05      	ldr	r3, [pc, #20]	@ (800a27c <RCCEx_PLL2_Config+0x128>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d0f0      	beq.n	800a252 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a270:	2300      	movs	r3, #0

}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	46020c00 	.word	0x46020c00
 800a280:	80800000 	.word	0x80800000

0800a284 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a28c:	4b47      	ldr	r3, [pc, #284]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a46      	ldr	r2, [pc, #280]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a296:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a298:	f7fa f9e0 	bl	800465c <HAL_GetTick>
 800a29c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a29e:	e008      	b.n	800a2b2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2a0:	f7fa f9dc 	bl	800465c <HAL_GetTick>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d901      	bls.n	800a2b2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e077      	b.n	800a3a2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2b2:	4b3e      	ldr	r3, [pc, #248]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1f0      	bne.n	800a2a0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a2be:	4b3b      	ldr	r3, [pc, #236]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a2c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a2c6:	f023 0303 	bic.w	r3, r3, #3
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	6811      	ldr	r1, [r2, #0]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	6852      	ldr	r2, [r2, #4]
 800a2d2:	3a01      	subs	r2, #1
 800a2d4:	0212      	lsls	r2, r2, #8
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	4934      	ldr	r1, [pc, #208]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	630b      	str	r3, [r1, #48]	@ 0x30
 800a2de:	4b33      	ldr	r3, [pc, #204]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a2e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2e2:	4b33      	ldr	r3, [pc, #204]	@ (800a3b0 <RCCEx_PLL3_Config+0x12c>)
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	6892      	ldr	r2, [r2, #8]
 800a2ea:	3a01      	subs	r2, #1
 800a2ec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	68d2      	ldr	r2, [r2, #12]
 800a2f4:	3a01      	subs	r2, #1
 800a2f6:	0252      	lsls	r2, r2, #9
 800a2f8:	b292      	uxth	r2, r2
 800a2fa:	4311      	orrs	r1, r2
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6912      	ldr	r2, [r2, #16]
 800a300:	3a01      	subs	r2, #1
 800a302:	0412      	lsls	r2, r2, #16
 800a304:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a308:	4311      	orrs	r1, r2
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	6952      	ldr	r2, [r2, #20]
 800a30e:	3a01      	subs	r2, #1
 800a310:	0612      	lsls	r2, r2, #24
 800a312:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a316:	430a      	orrs	r2, r1
 800a318:	4924      	ldr	r1, [pc, #144]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a31e:	4b23      	ldr	r3, [pc, #140]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a322:	f023 020c 	bic.w	r2, r3, #12
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	4920      	ldr	r1, [pc, #128]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a330:	4b1e      	ldr	r3, [pc, #120]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	491c      	ldr	r1, [pc, #112]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a33e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a342:	4a1a      	ldr	r2, [pc, #104]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a344:	f023 0310 	bic.w	r3, r3, #16
 800a348:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a34a:	4b18      	ldr	r3, [pc, #96]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a34c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a34e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a352:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	69d2      	ldr	r2, [r2, #28]
 800a35a:	00d2      	lsls	r2, r2, #3
 800a35c:	4913      	ldr	r1, [pc, #76]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a35e:	4313      	orrs	r3, r2
 800a360:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a362:	4b12      	ldr	r3, [pc, #72]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a366:	4a11      	ldr	r2, [pc, #68]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a368:	f043 0310 	orr.w	r3, r3, #16
 800a36c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a36e:	4b0f      	ldr	r3, [pc, #60]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a0e      	ldr	r2, [pc, #56]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a378:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a37a:	f7fa f96f 	bl	800465c <HAL_GetTick>
 800a37e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a380:	e008      	b.n	800a394 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a382:	f7fa f96b 	bl	800465c <HAL_GetTick>
 800a386:	4602      	mov	r2, r0
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d901      	bls.n	800a394 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e006      	b.n	800a3a2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a394:	4b05      	ldr	r3, [pc, #20]	@ (800a3ac <RCCEx_PLL3_Config+0x128>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d0f0      	beq.n	800a382 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	46020c00 	.word	0x46020c00
 800a3b0:	80800000 	.word	0x80800000

0800a3b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e0fb      	b.n	800a5be <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a7f      	ldr	r2, [pc, #508]	@ (800a5c8 <HAL_SPI_Init+0x214>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d004      	beq.n	800a3da <HAL_SPI_Init+0x26>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a7d      	ldr	r2, [pc, #500]	@ (800a5cc <HAL_SPI_Init+0x218>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	e000      	b.n	800a3dc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a3da:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a78      	ldr	r2, [pc, #480]	@ (800a5c8 <HAL_SPI_Init+0x214>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d004      	beq.n	800a3f6 <HAL_SPI_Init+0x42>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a76      	ldr	r2, [pc, #472]	@ (800a5cc <HAL_SPI_Init+0x218>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d105      	bne.n	800a402 <HAL_SPI_Init+0x4e>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	2b0f      	cmp	r3, #15
 800a3fc:	d901      	bls.n	800a402 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e0dd      	b.n	800a5be <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 ff2e 	bl	800b264 <SPI_GetPacketSize>
 800a408:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a6e      	ldr	r2, [pc, #440]	@ (800a5c8 <HAL_SPI_Init+0x214>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d004      	beq.n	800a41e <HAL_SPI_Init+0x6a>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a6c      	ldr	r2, [pc, #432]	@ (800a5cc <HAL_SPI_Init+0x218>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d102      	bne.n	800a424 <HAL_SPI_Init+0x70>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2b08      	cmp	r3, #8
 800a422:	d816      	bhi.n	800a452 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a428:	4a69      	ldr	r2, [pc, #420]	@ (800a5d0 <HAL_SPI_Init+0x21c>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00e      	beq.n	800a44c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a68      	ldr	r2, [pc, #416]	@ (800a5d4 <HAL_SPI_Init+0x220>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d009      	beq.n	800a44c <HAL_SPI_Init+0x98>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a66      	ldr	r2, [pc, #408]	@ (800a5d8 <HAL_SPI_Init+0x224>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d004      	beq.n	800a44c <HAL_SPI_Init+0x98>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a65      	ldr	r2, [pc, #404]	@ (800a5dc <HAL_SPI_Init+0x228>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d104      	bne.n	800a456 <HAL_SPI_Init+0xa2>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b10      	cmp	r3, #16
 800a450:	d901      	bls.n	800a456 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e0b3      	b.n	800a5be <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d106      	bne.n	800a470 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7f9 fcb8 	bl	8003de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2202      	movs	r2, #2
 800a474:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 0201 	bic.w	r2, r2, #1
 800a486:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a492:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a49c:	d119      	bne.n	800a4d2 <HAL_SPI_Init+0x11e>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4a6:	d103      	bne.n	800a4b0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d008      	beq.n	800a4c2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10c      	bne.n	800a4d2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a4bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4c0:	d107      	bne.n	800a4d2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a4d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00f      	beq.n	800a4fe <HAL_SPI_Init+0x14a>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	2b06      	cmp	r3, #6
 800a4e4:	d90b      	bls.n	800a4fe <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	e007      	b.n	800a50e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a50c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	69da      	ldr	r2, [r3, #28]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a516:	431a      	orrs	r2, r3
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	431a      	orrs	r2, r3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a520:	ea42 0103 	orr.w	r1, r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68da      	ldr	r2, [r3, #12]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	430a      	orrs	r2, r1
 800a52e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a538:	431a      	orrs	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53e:	431a      	orrs	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	431a      	orrs	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	431a      	orrs	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	431a      	orrs	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	431a      	orrs	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	431a      	orrs	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a562:	431a      	orrs	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	431a      	orrs	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a56e:	431a      	orrs	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a574:	431a      	orrs	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a57a:	ea42 0103 	orr.w	r1, r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	46002000 	.word	0x46002000
 800a5cc:	56002000 	.word	0x56002000
 800a5d0:	40013000 	.word	0x40013000
 800a5d4:	50013000 	.word	0x50013000
 800a5d8:	40003800 	.word	0x40003800
 800a5dc:	50003800 	.word	0x50003800

0800a5e0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3320      	adds	r3, #32
 800a5f6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a90      	ldr	r2, [pc, #576]	@ (800a840 <HAL_SPI_Transmit+0x260>)
 800a5fe:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a600:	f7fa f82c 	bl	800465c <HAL_GetTick>
 800a604:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d001      	beq.n	800a616 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 800a612:	2302      	movs	r3, #2
 800a614:	e1f4      	b.n	800aa00 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <HAL_SPI_Transmit+0x42>
 800a61c:	88fb      	ldrh	r3, [r7, #6]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e1ec      	b.n	800aa00 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d101      	bne.n	800a634 <HAL_SPI_Transmit+0x54>
 800a630:	2302      	movs	r3, #2
 800a632:	e1e5      	b.n	800aa00 <HAL_SPI_Transmit+0x420>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2203      	movs	r2, #3
 800a640:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	88fa      	ldrh	r2, [r7, #6]
 800a656:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	88fa      	ldrh	r2, [r7, #6]
 800a65e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a68c:	d108      	bne.n	800a6a0 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	e009      	b.n	800a6b4 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a6b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	0c1b      	lsrs	r3, r3, #16
 800a6bc:	041b      	lsls	r3, r3, #16
 800a6be:	88f9      	ldrh	r1, [r7, #6]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	6812      	ldr	r2, [r2, #0]
 800a6c4:	430b      	orrs	r3, r1
 800a6c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f042 0201 	orr.w	r2, r2, #1
 800a6d6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10c      	bne.n	800a700 <HAL_SPI_Transmit+0x120>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6ee:	d107      	bne.n	800a700 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	2b0f      	cmp	r3, #15
 800a706:	d95b      	bls.n	800a7c0 <HAL_SPI_Transmit+0x1e0>
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a4d      	ldr	r2, [pc, #308]	@ (800a844 <HAL_SPI_Transmit+0x264>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d04f      	beq.n	800a7b2 <HAL_SPI_Transmit+0x1d2>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a4c      	ldr	r2, [pc, #304]	@ (800a848 <HAL_SPI_Transmit+0x268>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d04a      	beq.n	800a7b2 <HAL_SPI_Transmit+0x1d2>
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a4a      	ldr	r2, [pc, #296]	@ (800a84c <HAL_SPI_Transmit+0x26c>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d045      	beq.n	800a7b2 <HAL_SPI_Transmit+0x1d2>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a49      	ldr	r2, [pc, #292]	@ (800a850 <HAL_SPI_Transmit+0x270>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d147      	bne.n	800a7c0 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a730:	e03f      	b.n	800a7b2 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	f003 0302 	and.w	r3, r3, #2
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d114      	bne.n	800a76a <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6812      	ldr	r2, [r2, #0]
 800a74a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a750:	1d1a      	adds	r2, r3, #4
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	3b01      	subs	r3, #1
 800a760:	b29a      	uxth	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a768:	e023      	b.n	800a7b2 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a76a:	f7f9 ff77 	bl	800465c <HAL_GetTick>
 800a76e:	4602      	mov	r2, r0
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d803      	bhi.n	800a782 <HAL_SPI_Transmit+0x1a2>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a780:	d102      	bne.n	800a788 <HAL_SPI_Transmit+0x1a8>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d114      	bne.n	800a7b2 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 fc9d 	bl	800b0c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a794:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e126      	b.n	800aa00 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1b9      	bne.n	800a732 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a7be:	e0f9      	b.n	800a9b4 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	2b07      	cmp	r3, #7
 800a7c6:	f240 80ee 	bls.w	800a9a6 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a7ca:	e067      	b.n	800a89c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d13c      	bne.n	800a854 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d918      	bls.n	800a818 <HAL_SPI_Transmit+0x238>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d014      	beq.n	800a818 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6812      	ldr	r2, [r2, #0]
 800a7f8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7fe:	1d1a      	adds	r2, r3, #4
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	3b02      	subs	r3, #2
 800a80e:	b29a      	uxth	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a816:	e041      	b.n	800a89c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a81c:	881a      	ldrh	r2, [r3, #0]
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a826:	1c9a      	adds	r2, r3, #2
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a832:	b29b      	uxth	r3, r3
 800a834:	3b01      	subs	r3, #1
 800a836:	b29a      	uxth	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a83e:	e02d      	b.n	800a89c <HAL_SPI_Transmit+0x2bc>
 800a840:	46002000 	.word	0x46002000
 800a844:	40013000 	.word	0x40013000
 800a848:	50013000 	.word	0x50013000
 800a84c:	40003800 	.word	0x40003800
 800a850:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a854:	f7f9 ff02 	bl	800465c <HAL_GetTick>
 800a858:	4602      	mov	r2, r0
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	429a      	cmp	r2, r3
 800a862:	d803      	bhi.n	800a86c <HAL_SPI_Transmit+0x28c>
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a86a:	d102      	bne.n	800a872 <HAL_SPI_Transmit+0x292>
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d114      	bne.n	800a89c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f000 fc28 	bl	800b0c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a87e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e0b1      	b.n	800aa00 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d191      	bne.n	800a7cc <HAL_SPI_Transmit+0x1ec>
 800a8a8:	e084      	b.n	800a9b4 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	695b      	ldr	r3, [r3, #20]
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d152      	bne.n	800a95e <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	2b03      	cmp	r3, #3
 800a8c2:	d918      	bls.n	800a8f6 <HAL_SPI_Transmit+0x316>
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8c8:	2b40      	cmp	r3, #64	@ 0x40
 800a8ca:	d914      	bls.n	800a8f6 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6812      	ldr	r2, [r2, #0]
 800a8d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8dc:	1d1a      	adds	r2, r3, #4
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	3b04      	subs	r3, #4
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a8f4:	e057      	b.n	800a9a6 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d917      	bls.n	800a932 <HAL_SPI_Transmit+0x352>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d013      	beq.n	800a932 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a90e:	881a      	ldrh	r2, [r3, #0]
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a918:	1c9a      	adds	r2, r3, #2
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a924:	b29b      	uxth	r3, r3
 800a926:	3b02      	subs	r3, #2
 800a928:	b29a      	uxth	r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a930:	e039      	b.n	800a9a6 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	3320      	adds	r3, #32
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a950:	b29b      	uxth	r3, r3
 800a952:	3b01      	subs	r3, #1
 800a954:	b29a      	uxth	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a95c:	e023      	b.n	800a9a6 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a95e:	f7f9 fe7d 	bl	800465c <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d803      	bhi.n	800a976 <HAL_SPI_Transmit+0x396>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a974:	d102      	bne.n	800a97c <HAL_SPI_Transmit+0x39c>
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d114      	bne.n	800a9a6 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 fba3 	bl	800b0c8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a988:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e02c      	b.n	800aa00 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f47f af7b 	bne.w	800a8aa <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	2108      	movs	r1, #8
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f000 fc22 	bl	800b208 <SPI_WaitOnFlagUntilTimeout>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d007      	beq.n	800a9da <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9d0:	f043 0220 	orr.w	r2, r3, #32
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 fb74 	bl	800b0c8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e000      	b.n	800aa00 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
  }
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3718      	adds	r7, #24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b08e      	sub	sp, #56	@ 0x38
 800aa0c:	af02      	add	r7, sp, #8
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3320      	adds	r3, #32
 800aa1c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3330      	adds	r3, #48	@ 0x30
 800aa24:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa2a:	095b      	lsrs	r3, r3, #5
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	3301      	adds	r3, #1
 800aa30:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a90      	ldr	r2, [pc, #576]	@ (800ac78 <HAL_SPI_TransmitReceive+0x270>)
 800aa38:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa3a:	f7f9 fe0f 	bl	800465c <HAL_GetTick>
 800aa3e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800aa40:	887b      	ldrh	r3, [r7, #2]
 800aa42:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800aa44:	887b      	ldrh	r3, [r7, #2]
 800aa46:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d001      	beq.n	800aa58 <HAL_SPI_TransmitReceive+0x50>
  {
    return HAL_BUSY;
 800aa54:	2302      	movs	r3, #2
 800aa56:	e332      	b.n	800b0be <HAL_SPI_TransmitReceive+0x6b6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d005      	beq.n	800aa6a <HAL_SPI_TransmitReceive+0x62>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <HAL_SPI_TransmitReceive+0x62>
 800aa64:	887b      	ldrh	r3, [r7, #2]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <HAL_SPI_TransmitReceive+0x66>
  {
    return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e327      	b.n	800b0be <HAL_SPI_TransmitReceive+0x6b6>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d101      	bne.n	800aa7c <HAL_SPI_TransmitReceive+0x74>
 800aa78:	2302      	movs	r3, #2
 800aa7a:	e320      	b.n	800b0be <HAL_SPI_TransmitReceive+0x6b6>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2205      	movs	r2, #5
 800aa88:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	887a      	ldrh	r2, [r7, #2]
 800aa9e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	887a      	ldrh	r2, [r7, #2]
 800aaa6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	887a      	ldrh	r2, [r7, #2]
 800aab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	887a      	ldrh	r2, [r7, #2]
 800aabc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800aada:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a66      	ldr	r2, [pc, #408]	@ (800ac7c <HAL_SPI_TransmitReceive+0x274>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d00e      	beq.n	800ab04 <HAL_SPI_TransmitReceive+0xfc>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a65      	ldr	r2, [pc, #404]	@ (800ac80 <HAL_SPI_TransmitReceive+0x278>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d009      	beq.n	800ab04 <HAL_SPI_TransmitReceive+0xfc>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a63      	ldr	r2, [pc, #396]	@ (800ac84 <HAL_SPI_TransmitReceive+0x27c>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d004      	beq.n	800ab04 <HAL_SPI_TransmitReceive+0xfc>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a62      	ldr	r2, [pc, #392]	@ (800ac88 <HAL_SPI_TransmitReceive+0x280>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d102      	bne.n	800ab0a <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800ab04:	2310      	movs	r3, #16
 800ab06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab08:	e001      	b.n	800ab0e <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800ab0a:	2308      	movs	r3, #8
 800ab0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	0c1b      	lsrs	r3, r3, #16
 800ab16:	041b      	lsls	r3, r3, #16
 800ab18:	8879      	ldrh	r1, [r7, #2]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	6812      	ldr	r2, [r2, #0]
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f042 0201 	orr.w	r2, r2, #1
 800ab30:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10c      	bne.n	800ab5a <HAL_SPI_TransmitReceive+0x152>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab48:	d107      	bne.n	800ab5a <HAL_SPI_TransmitReceive+0x152>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	2b0f      	cmp	r3, #15
 800ab60:	f240 80c1 	bls.w	800ace6 <HAL_SPI_TransmitReceive+0x2de>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a44      	ldr	r2, [pc, #272]	@ (800ac7c <HAL_SPI_TransmitReceive+0x274>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d00f      	beq.n	800ab8e <HAL_SPI_TransmitReceive+0x186>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a43      	ldr	r2, [pc, #268]	@ (800ac80 <HAL_SPI_TransmitReceive+0x278>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d00a      	beq.n	800ab8e <HAL_SPI_TransmitReceive+0x186>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a41      	ldr	r2, [pc, #260]	@ (800ac84 <HAL_SPI_TransmitReceive+0x27c>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d005      	beq.n	800ab8e <HAL_SPI_TransmitReceive+0x186>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a40      	ldr	r2, [pc, #256]	@ (800ac88 <HAL_SPI_TransmitReceive+0x280>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	f040 80ac 	bne.w	800ace6 <HAL_SPI_TransmitReceive+0x2de>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800ab8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab90:	089b      	lsrs	r3, r3, #2
 800ab92:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ab94:	e09e      	b.n	800acd4 <HAL_SPI_TransmitReceive+0x2cc>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d120      	bne.n	800abe6 <HAL_SPI_TransmitReceive+0x1de>
 800aba4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d01d      	beq.n	800abe6 <HAL_SPI_TransmitReceive+0x1de>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800abaa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800abac:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800abae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb0:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d217      	bcs.n	800abe6 <HAL_SPI_TransmitReceive+0x1de>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6812      	ldr	r2, [r2, #0]
 800abc0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abc6:	1d1a      	adds	r2, r3, #4
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	3b01      	subs	r3, #1
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800abe4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800abee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d06f      	beq.n	800acd4 <HAL_SPI_TransmitReceive+0x2cc>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d118      	bne.n	800ac34 <HAL_SPI_TransmitReceive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac0a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ac0c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac12:	1d1a      	adds	r2, r3, #4
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	3b01      	subs	r3, #1
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ac30:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ac32:	e04f      	b.n	800acd4 <HAL_SPI_TransmitReceive+0x2cc>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ac34:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ac36:	8bfb      	ldrh	r3, [r7, #30]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d227      	bcs.n	800ac8c <HAL_SPI_TransmitReceive+0x284>
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d022      	beq.n	800ac8c <HAL_SPI_TransmitReceive+0x284>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac4e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ac50:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac56:	1d1a      	adds	r2, r3, #4
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	3b01      	subs	r3, #1
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ac74:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ac76:	e02d      	b.n	800acd4 <HAL_SPI_TransmitReceive+0x2cc>
 800ac78:	46002000 	.word	0x46002000
 800ac7c:	40013000 	.word	0x40013000
 800ac80:	50013000 	.word	0x50013000
 800ac84:	40003800 	.word	0x40003800
 800ac88:	50003800 	.word	0x50003800
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac8c:	f7f9 fce6 	bl	800465c <HAL_GetTick>
 800ac90:	4602      	mov	r2, r0
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d803      	bhi.n	800aca4 <HAL_SPI_TransmitReceive+0x29c>
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aca2:	d102      	bne.n	800acaa <HAL_SPI_TransmitReceive+0x2a2>
 800aca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d114      	bne.n	800acd4 <HAL_SPI_TransmitReceive+0x2cc>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f000 fa0c 	bl	800b0c8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800acd0:	2303      	movs	r3, #3
 800acd2:	e1f4      	b.n	800b0be <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800acd4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f47f af5d 	bne.w	800ab96 <HAL_SPI_TransmitReceive+0x18e>
 800acdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f47f af59 	bne.w	800ab96 <HAL_SPI_TransmitReceive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ace4:	e1c5      	b.n	800b072 <HAL_SPI_TransmitReceive+0x66a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	2b07      	cmp	r3, #7
 800acec:	f240 81b9 	bls.w	800b062 <HAL_SPI_TransmitReceive+0x65a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800acf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf2:	085b      	lsrs	r3, r3, #1
 800acf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800acf6:	e0c0      	b.n	800ae7a <HAL_SPI_TransmitReceive+0x472>
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	695b      	ldr	r3, [r3, #20]
 800acfe:	f003 0302 	and.w	r3, r3, #2
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d11f      	bne.n	800ad46 <HAL_SPI_TransmitReceive+0x33e>
 800ad06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d01c      	beq.n	800ad46 <HAL_SPI_TransmitReceive+0x33e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ad0c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ad0e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ad10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad12:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d216      	bcs.n	800ad46 <HAL_SPI_TransmitReceive+0x33e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad1c:	881a      	ldrh	r2, [r3, #0]
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad20:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad26:	1c9a      	adds	r2, r3, #2
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	3b01      	subs	r3, #1
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad44:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ad4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 8092 	beq.w	800ae7a <HAL_SPI_TransmitReceive+0x472>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	695b      	ldr	r3, [r3, #20]
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d118      	bne.n	800ad96 <HAL_SPI_TransmitReceive+0x38e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad68:	6a3a      	ldr	r2, [r7, #32]
 800ad6a:	8812      	ldrh	r2, [r2, #0]
 800ad6c:	b292      	uxth	r2, r2
 800ad6e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad74:	1c9a      	adds	r2, r3, #2
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	3b01      	subs	r3, #1
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ad92:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ad94:	e071      	b.n	800ae7a <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ad96:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ad98:	8bfb      	ldrh	r3, [r7, #30]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d228      	bcs.n	800adf0 <HAL_SPI_TransmitReceive+0x3e8>
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d023      	beq.n	800adf0 <HAL_SPI_TransmitReceive+0x3e8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adac:	6a3a      	ldr	r2, [r7, #32]
 800adae:	8812      	ldrh	r2, [r2, #0]
 800adb0:	b292      	uxth	r2, r2
 800adb2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adb8:	1c9a      	adds	r2, r3, #2
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adc2:	6a3a      	ldr	r2, [r7, #32]
 800adc4:	8812      	ldrh	r2, [r2, #0]
 800adc6:	b292      	uxth	r2, r2
 800adc8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adce:	1c9a      	adds	r2, r3, #2
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800adda:	b29b      	uxth	r3, r3
 800addc:	3b02      	subs	r3, #2
 800adde:	b29a      	uxth	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800adec:	853b      	strh	r3, [r7, #40]	@ 0x28
 800adee:	e044      	b.n	800ae7a <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800adf0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d11d      	bne.n	800ae32 <HAL_SPI_TransmitReceive+0x42a>
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d018      	beq.n	800ae32 <HAL_SPI_TransmitReceive+0x42a>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae04:	6a3a      	ldr	r2, [r7, #32]
 800ae06:	8812      	ldrh	r2, [r2, #0]
 800ae08:	b292      	uxth	r2, r2
 800ae0a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae10:	1c9a      	adds	r2, r3, #2
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800ae2e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ae30:	e023      	b.n	800ae7a <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae32:	f7f9 fc13 	bl	800465c <HAL_GetTick>
 800ae36:	4602      	mov	r2, r0
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d803      	bhi.n	800ae4a <HAL_SPI_TransmitReceive+0x442>
 800ae42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae48:	d102      	bne.n	800ae50 <HAL_SPI_TransmitReceive+0x448>
 800ae4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d114      	bne.n	800ae7a <HAL_SPI_TransmitReceive+0x472>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 f939 	bl	800b0c8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e121      	b.n	800b0be <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ae7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f47f af3b 	bne.w	800acf8 <HAL_SPI_TransmitReceive+0x2f0>
 800ae82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f47f af37 	bne.w	800acf8 <HAL_SPI_TransmitReceive+0x2f0>
 800ae8a:	e0f2      	b.n	800b072 <HAL_SPI_TransmitReceive+0x66a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	f003 0302 	and.w	r3, r3, #2
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d121      	bne.n	800aede <HAL_SPI_TransmitReceive+0x4d6>
 800ae9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01e      	beq.n	800aede <HAL_SPI_TransmitReceive+0x4d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800aea0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aea2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800aea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d218      	bcs.n	800aede <HAL_SPI_TransmitReceive+0x4d6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3320      	adds	r3, #32
 800aeb6:	7812      	ldrb	r2, [r2, #0]
 800aeb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	3b01      	subs	r3, #1
 800aece:	b29a      	uxth	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aedc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800aee6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 80ba 	beq.w	800b062 <HAL_SPI_TransmitReceive+0x65a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	f003 0301 	and.w	r3, r3, #1
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d11b      	bne.n	800af34 <HAL_SPI_TransmitReceive+0x52c>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af08:	7812      	ldrb	r2, [r2, #0]
 800af0a:	b2d2      	uxtb	r2, r2
 800af0c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800af1e:	b29b      	uxth	r3, r3
 800af20:	3b01      	subs	r3, #1
 800af22:	b29a      	uxth	r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800af30:	853b      	strh	r3, [r7, #40]	@ 0x28
 800af32:	e096      	b.n	800b062 <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800af34:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800af36:	8bfb      	ldrh	r3, [r7, #30]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d24a      	bcs.n	800afd2 <HAL_SPI_TransmitReceive+0x5ca>
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af42:	2b00      	cmp	r3, #0
 800af44:	d045      	beq.n	800afd2 <HAL_SPI_TransmitReceive+0x5ca>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af52:	7812      	ldrb	r2, [r2, #0]
 800af54:	b2d2      	uxtb	r2, r2
 800af56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af5c:	1c5a      	adds	r2, r3, #1
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af6e:	7812      	ldrb	r2, [r2, #0]
 800af70:	b2d2      	uxtb	r2, r2
 800af72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af8a:	7812      	ldrb	r2, [r2, #0]
 800af8c:	b2d2      	uxtb	r2, r2
 800af8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af94:	1c5a      	adds	r2, r3, #1
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afa6:	7812      	ldrb	r2, [r2, #0]
 800afa8:	b2d2      	uxtb	r2, r2
 800afaa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	3b04      	subs	r3, #4
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800afce:	853b      	strh	r3, [r7, #40]	@ 0x28
 800afd0:	e047      	b.n	800b062 <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800afd2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d820      	bhi.n	800b01a <HAL_SPI_TransmitReceive+0x612>
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d01b      	beq.n	800b01a <HAL_SPI_TransmitReceive+0x612>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afee:	7812      	ldrb	r2, [r2, #0]
 800aff0:	b2d2      	uxtb	r2, r2
 800aff2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aff8:	1c5a      	adds	r2, r3, #1
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b004:	b29b      	uxth	r3, r3
 800b006:	3b01      	subs	r3, #1
 800b008:	b29a      	uxth	r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b016:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b018:	e023      	b.n	800b062 <HAL_SPI_TransmitReceive+0x65a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b01a:	f7f9 fb1f 	bl	800465c <HAL_GetTick>
 800b01e:	4602      	mov	r2, r0
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b026:	429a      	cmp	r2, r3
 800b028:	d803      	bhi.n	800b032 <HAL_SPI_TransmitReceive+0x62a>
 800b02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b02c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b030:	d102      	bne.n	800b038 <HAL_SPI_TransmitReceive+0x630>
 800b032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b034:	2b00      	cmp	r3, #0
 800b036:	d114      	bne.n	800b062 <HAL_SPI_TransmitReceive+0x65a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 f845 	bl	800b0c8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b044:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e02d      	b.n	800b0be <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b062:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b064:	2b00      	cmp	r3, #0
 800b066:	f47f af11 	bne.w	800ae8c <HAL_SPI_TransmitReceive+0x484>
 800b06a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f47f af0d 	bne.w	800ae8c <HAL_SPI_TransmitReceive+0x484>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b078:	2200      	movs	r2, #0
 800b07a:	2108      	movs	r1, #8
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f000 f8c3 	bl	800b208 <SPI_WaitOnFlagUntilTimeout>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d007      	beq.n	800b098 <HAL_SPI_TransmitReceive+0x690>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b08e:	f043 0220 	orr.w	r2, r3, #32
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 f815 	bl	800b0c8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <HAL_SPI_TransmitReceive+0x6b4>
  {
    return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e000      	b.n	800b0be <HAL_SPI_TransmitReceive+0x6b6>
  }
  else
  {
    return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
  }
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3730      	adds	r7, #48	@ 0x30
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop

0800b0c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	699a      	ldr	r2, [r3, #24]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f042 0208 	orr.w	r2, r2, #8
 800b0e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699a      	ldr	r2, [r3, #24]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f042 0210 	orr.w	r2, r2, #16
 800b0f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f022 0201 	bic.w	r2, r2, #1
 800b106:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	6812      	ldr	r2, [r2, #0]
 800b112:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800b116:	f023 0303 	bic.w	r3, r3, #3
 800b11a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	689a      	ldr	r2, [r3, #8]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b12a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b04      	cmp	r3, #4
 800b136:	d014      	beq.n	800b162 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f003 0320 	and.w	r3, r3, #32
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00f      	beq.n	800b162 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b148:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	699a      	ldr	r2, [r3, #24]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f042 0220 	orr.w	r2, r2, #32
 800b160:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d014      	beq.n	800b198 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00f      	beq.n	800b198 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b17e:	f043 0204 	orr.w	r2, r3, #4
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	699a      	ldr	r2, [r3, #24]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b196:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00f      	beq.n	800b1c2 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1a8:	f043 0201 	orr.w	r2, r3, #1
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	699a      	ldr	r2, [r3, #24]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00f      	beq.n	800b1ec <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1d2:	f043 0208 	orr.w	r2, r3, #8
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	699a      	ldr	r2, [r3, #24]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b1ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800b1fc:	bf00      	nop
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	603b      	str	r3, [r7, #0]
 800b214:	4613      	mov	r3, r2
 800b216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b218:	e010      	b.n	800b23c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b21a:	f7f9 fa1f 	bl	800465c <HAL_GetTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	683a      	ldr	r2, [r7, #0]
 800b226:	429a      	cmp	r2, r3
 800b228:	d803      	bhi.n	800b232 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b230:	d102      	bne.n	800b238 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b238:	2303      	movs	r3, #3
 800b23a:	e00f      	b.n	800b25c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	695a      	ldr	r2, [r3, #20]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	4013      	ands	r3, r2
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	429a      	cmp	r2, r3
 800b24a:	bf0c      	ite	eq
 800b24c:	2301      	moveq	r3, #1
 800b24e:	2300      	movne	r3, #0
 800b250:	b2db      	uxtb	r3, r3
 800b252:	461a      	mov	r2, r3
 800b254:	79fb      	ldrb	r3, [r7, #7]
 800b256:	429a      	cmp	r2, r3
 800b258:	d0df      	beq.n	800b21a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b270:	095b      	lsrs	r3, r3, #5
 800b272:	3301      	adds	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	3301      	adds	r3, #1
 800b27c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	3307      	adds	r3, #7
 800b282:	08db      	lsrs	r3, r3, #3
 800b284:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800b29a:	b480      	push	{r7}
 800b29c:	b083      	sub	sp, #12
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d12e      	bne.n	800b30e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d101      	bne.n	800b2be <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	e028      	b.n	800b310 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2202      	movs	r2, #2
 800b2ca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f022 0201 	bic.w	r2, r2, #1
 800b2dc:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800b2ea:	ea42 0103 	orr.w	r1, r2, r3
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	689a      	ldr	r2, [r3, #8]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	e000      	b.n	800b310 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
  }
}
 800b310:	4618      	mov	r0, r3
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d101      	bne.n	800b32e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e049      	b.n	800b3c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d106      	bne.n	800b348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7f8 fdb8 	bl	8003eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2202      	movs	r2, #2
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3304      	adds	r3, #4
 800b358:	4619      	mov	r1, r3
 800b35a:	4610      	mov	r0, r2
 800b35c:	f000 f9d0 	bl	800b700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
	...

0800b3cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d001      	beq.n	800b3e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e06a      	b.n	800b4ba <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2202      	movs	r2, #2
 800b3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a35      	ldr	r2, [pc, #212]	@ (800b4c8 <HAL_TIM_Base_Start+0xfc>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d040      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a34      	ldr	r2, [pc, #208]	@ (800b4cc <HAL_TIM_Base_Start+0x100>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d03b      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b408:	d036      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b412:	d031      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a2d      	ldr	r2, [pc, #180]	@ (800b4d0 <HAL_TIM_Base_Start+0x104>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d02c      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a2c      	ldr	r2, [pc, #176]	@ (800b4d4 <HAL_TIM_Base_Start+0x108>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d027      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a2a      	ldr	r2, [pc, #168]	@ (800b4d8 <HAL_TIM_Base_Start+0x10c>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d022      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a29      	ldr	r2, [pc, #164]	@ (800b4dc <HAL_TIM_Base_Start+0x110>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d01d      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a27      	ldr	r2, [pc, #156]	@ (800b4e0 <HAL_TIM_Base_Start+0x114>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d018      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a26      	ldr	r2, [pc, #152]	@ (800b4e4 <HAL_TIM_Base_Start+0x118>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d013      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a24      	ldr	r2, [pc, #144]	@ (800b4e8 <HAL_TIM_Base_Start+0x11c>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d00e      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a23      	ldr	r2, [pc, #140]	@ (800b4ec <HAL_TIM_Base_Start+0x120>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d009      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a21      	ldr	r2, [pc, #132]	@ (800b4f0 <HAL_TIM_Base_Start+0x124>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d004      	beq.n	800b478 <HAL_TIM_Base_Start+0xac>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a20      	ldr	r2, [pc, #128]	@ (800b4f4 <HAL_TIM_Base_Start+0x128>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d115      	bne.n	800b4a4 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689a      	ldr	r2, [r3, #8]
 800b47e:	4b1e      	ldr	r3, [pc, #120]	@ (800b4f8 <HAL_TIM_Base_Start+0x12c>)
 800b480:	4013      	ands	r3, r2
 800b482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b06      	cmp	r3, #6
 800b488:	d015      	beq.n	800b4b6 <HAL_TIM_Base_Start+0xea>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b490:	d011      	beq.n	800b4b6 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f042 0201 	orr.w	r2, r2, #1
 800b4a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4a2:	e008      	b.n	800b4b6 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0201 	orr.w	r2, r2, #1
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	e000      	b.n	800b4b8 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	40012c00 	.word	0x40012c00
 800b4cc:	50012c00 	.word	0x50012c00
 800b4d0:	40000400 	.word	0x40000400
 800b4d4:	50000400 	.word	0x50000400
 800b4d8:	40000800 	.word	0x40000800
 800b4dc:	50000800 	.word	0x50000800
 800b4e0:	40000c00 	.word	0x40000c00
 800b4e4:	50000c00 	.word	0x50000c00
 800b4e8:	40013400 	.word	0x40013400
 800b4ec:	50013400 	.word	0x50013400
 800b4f0:	40014000 	.word	0x40014000
 800b4f4:	50014000 	.word	0x50014000
 800b4f8:	00010007 	.word	0x00010007

0800b4fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b510:	2b01      	cmp	r3, #1
 800b512:	d101      	bne.n	800b518 <HAL_TIM_ConfigClockSource+0x1c>
 800b514:	2302      	movs	r3, #2
 800b516:	e0e6      	b.n	800b6e6 <HAL_TIM_ConfigClockSource+0x1ea>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2202      	movs	r2, #2
 800b524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b536:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b53a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a67      	ldr	r2, [pc, #412]	@ (800b6f0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800b552:	4293      	cmp	r3, r2
 800b554:	f000 80b1 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1be>
 800b558:	4a65      	ldr	r2, [pc, #404]	@ (800b6f0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	f200 80b6 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b560:	4a64      	ldr	r2, [pc, #400]	@ (800b6f4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b562:	4293      	cmp	r3, r2
 800b564:	f000 80a9 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1be>
 800b568:	4a62      	ldr	r2, [pc, #392]	@ (800b6f4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	f200 80ae 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b570:	4a61      	ldr	r2, [pc, #388]	@ (800b6f8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800b572:	4293      	cmp	r3, r2
 800b574:	f000 80a1 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1be>
 800b578:	4a5f      	ldr	r2, [pc, #380]	@ (800b6f8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	f200 80a6 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b580:	4a5e      	ldr	r2, [pc, #376]	@ (800b6fc <HAL_TIM_ConfigClockSource+0x200>)
 800b582:	4293      	cmp	r3, r2
 800b584:	f000 8099 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1be>
 800b588:	4a5c      	ldr	r2, [pc, #368]	@ (800b6fc <HAL_TIM_ConfigClockSource+0x200>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	f200 809e 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b590:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b594:	f000 8091 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1be>
 800b598:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b59c:	f200 8096 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b5a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5a4:	f000 8089 	beq.w	800b6ba <HAL_TIM_ConfigClockSource+0x1be>
 800b5a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5ac:	f200 808e 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b5b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5b4:	d03e      	beq.n	800b634 <HAL_TIM_ConfigClockSource+0x138>
 800b5b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5ba:	f200 8087 	bhi.w	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b5be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5c2:	f000 8086 	beq.w	800b6d2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b5c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5ca:	d87f      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b5cc:	2b70      	cmp	r3, #112	@ 0x70
 800b5ce:	d01a      	beq.n	800b606 <HAL_TIM_ConfigClockSource+0x10a>
 800b5d0:	2b70      	cmp	r3, #112	@ 0x70
 800b5d2:	d87b      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b5d4:	2b60      	cmp	r3, #96	@ 0x60
 800b5d6:	d050      	beq.n	800b67a <HAL_TIM_ConfigClockSource+0x17e>
 800b5d8:	2b60      	cmp	r3, #96	@ 0x60
 800b5da:	d877      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b5dc:	2b50      	cmp	r3, #80	@ 0x50
 800b5de:	d03c      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x15e>
 800b5e0:	2b50      	cmp	r3, #80	@ 0x50
 800b5e2:	d873      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b5e4:	2b40      	cmp	r3, #64	@ 0x40
 800b5e6:	d058      	beq.n	800b69a <HAL_TIM_ConfigClockSource+0x19e>
 800b5e8:	2b40      	cmp	r3, #64	@ 0x40
 800b5ea:	d86f      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b5ec:	2b30      	cmp	r3, #48	@ 0x30
 800b5ee:	d064      	beq.n	800b6ba <HAL_TIM_ConfigClockSource+0x1be>
 800b5f0:	2b30      	cmp	r3, #48	@ 0x30
 800b5f2:	d86b      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b5f4:	2b20      	cmp	r3, #32
 800b5f6:	d060      	beq.n	800b6ba <HAL_TIM_ConfigClockSource+0x1be>
 800b5f8:	2b20      	cmp	r3, #32
 800b5fa:	d867      	bhi.n	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d05c      	beq.n	800b6ba <HAL_TIM_ConfigClockSource+0x1be>
 800b600:	2b10      	cmp	r3, #16
 800b602:	d05a      	beq.n	800b6ba <HAL_TIM_ConfigClockSource+0x1be>
 800b604:	e062      	b.n	800b6cc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b616:	f000 fa50 	bl	800baba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	609a      	str	r2, [r3, #8]
      break;
 800b632:	e04f      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b644:	f000 fa39 	bl	800baba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	689a      	ldr	r2, [r3, #8]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b656:	609a      	str	r2, [r3, #8]
      break;
 800b658:	e03c      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b666:	461a      	mov	r2, r3
 800b668:	f000 f94a 	bl	800b900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2150      	movs	r1, #80	@ 0x50
 800b672:	4618      	mov	r0, r3
 800b674:	f000 fa04 	bl	800ba80 <TIM_ITRx_SetConfig>
      break;
 800b678:	e02c      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b686:	461a      	mov	r2, r3
 800b688:	f000 f9ac 	bl	800b9e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2160      	movs	r1, #96	@ 0x60
 800b692:	4618      	mov	r0, r3
 800b694:	f000 f9f4 	bl	800ba80 <TIM_ITRx_SetConfig>
      break;
 800b698:	e01c      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f000 f92a 	bl	800b900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2140      	movs	r1, #64	@ 0x40
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f000 f9e4 	bl	800ba80 <TIM_ITRx_SetConfig>
      break;
 800b6b8:	e00c      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f000 f9db 	bl	800ba80 <TIM_ITRx_SetConfig>
      break;
 800b6ca:	e003      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d0:	e000      	b.n	800b6d4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800b6d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	00100070 	.word	0x00100070
 800b6f4:	00100040 	.word	0x00100040
 800b6f8:	00100030 	.word	0x00100030
 800b6fc:	00100020 	.word	0x00100020

0800b700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a6b      	ldr	r2, [pc, #428]	@ (800b8c0 <TIM_Base_SetConfig+0x1c0>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d02b      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a6a      	ldr	r2, [pc, #424]	@ (800b8c4 <TIM_Base_SetConfig+0x1c4>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d027      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b726:	d023      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b72e:	d01f      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a65      	ldr	r2, [pc, #404]	@ (800b8c8 <TIM_Base_SetConfig+0x1c8>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d01b      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a64      	ldr	r2, [pc, #400]	@ (800b8cc <TIM_Base_SetConfig+0x1cc>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d017      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	4a63      	ldr	r2, [pc, #396]	@ (800b8d0 <TIM_Base_SetConfig+0x1d0>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d013      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a62      	ldr	r2, [pc, #392]	@ (800b8d4 <TIM_Base_SetConfig+0x1d4>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d00f      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a61      	ldr	r2, [pc, #388]	@ (800b8d8 <TIM_Base_SetConfig+0x1d8>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d00b      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4a60      	ldr	r2, [pc, #384]	@ (800b8dc <TIM_Base_SetConfig+0x1dc>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d007      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a5f      	ldr	r2, [pc, #380]	@ (800b8e0 <TIM_Base_SetConfig+0x1e0>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d003      	beq.n	800b770 <TIM_Base_SetConfig+0x70>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	4a5e      	ldr	r2, [pc, #376]	@ (800b8e4 <TIM_Base_SetConfig+0x1e4>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d108      	bne.n	800b782 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4313      	orrs	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a4e      	ldr	r2, [pc, #312]	@ (800b8c0 <TIM_Base_SetConfig+0x1c0>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d043      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a4d      	ldr	r2, [pc, #308]	@ (800b8c4 <TIM_Base_SetConfig+0x1c4>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d03f      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b798:	d03b      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7a0:	d037      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a48      	ldr	r2, [pc, #288]	@ (800b8c8 <TIM_Base_SetConfig+0x1c8>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d033      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a47      	ldr	r2, [pc, #284]	@ (800b8cc <TIM_Base_SetConfig+0x1cc>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d02f      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a46      	ldr	r2, [pc, #280]	@ (800b8d0 <TIM_Base_SetConfig+0x1d0>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d02b      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a45      	ldr	r2, [pc, #276]	@ (800b8d4 <TIM_Base_SetConfig+0x1d4>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d027      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a44      	ldr	r2, [pc, #272]	@ (800b8d8 <TIM_Base_SetConfig+0x1d8>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d023      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a43      	ldr	r2, [pc, #268]	@ (800b8dc <TIM_Base_SetConfig+0x1dc>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d01f      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a42      	ldr	r2, [pc, #264]	@ (800b8e0 <TIM_Base_SetConfig+0x1e0>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d01b      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a41      	ldr	r2, [pc, #260]	@ (800b8e4 <TIM_Base_SetConfig+0x1e4>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d017      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a40      	ldr	r2, [pc, #256]	@ (800b8e8 <TIM_Base_SetConfig+0x1e8>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d013      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a3f      	ldr	r2, [pc, #252]	@ (800b8ec <TIM_Base_SetConfig+0x1ec>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d00f      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a3e      	ldr	r2, [pc, #248]	@ (800b8f0 <TIM_Base_SetConfig+0x1f0>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d00b      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a3d      	ldr	r2, [pc, #244]	@ (800b8f4 <TIM_Base_SetConfig+0x1f4>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d007      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a3c      	ldr	r2, [pc, #240]	@ (800b8f8 <TIM_Base_SetConfig+0x1f8>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d003      	beq.n	800b812 <TIM_Base_SetConfig+0x112>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a3b      	ldr	r2, [pc, #236]	@ (800b8fc <TIM_Base_SetConfig+0x1fc>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d108      	bne.n	800b824 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	4313      	orrs	r3, r2
 800b822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	689a      	ldr	r2, [r3, #8]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a1e      	ldr	r2, [pc, #120]	@ (800b8c0 <TIM_Base_SetConfig+0x1c0>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d023      	beq.n	800b892 <TIM_Base_SetConfig+0x192>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a1d      	ldr	r2, [pc, #116]	@ (800b8c4 <TIM_Base_SetConfig+0x1c4>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d01f      	beq.n	800b892 <TIM_Base_SetConfig+0x192>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a22      	ldr	r2, [pc, #136]	@ (800b8e0 <TIM_Base_SetConfig+0x1e0>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d01b      	beq.n	800b892 <TIM_Base_SetConfig+0x192>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a21      	ldr	r2, [pc, #132]	@ (800b8e4 <TIM_Base_SetConfig+0x1e4>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d017      	beq.n	800b892 <TIM_Base_SetConfig+0x192>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a20      	ldr	r2, [pc, #128]	@ (800b8e8 <TIM_Base_SetConfig+0x1e8>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d013      	beq.n	800b892 <TIM_Base_SetConfig+0x192>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4a1f      	ldr	r2, [pc, #124]	@ (800b8ec <TIM_Base_SetConfig+0x1ec>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d00f      	beq.n	800b892 <TIM_Base_SetConfig+0x192>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a1e      	ldr	r2, [pc, #120]	@ (800b8f0 <TIM_Base_SetConfig+0x1f0>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d00b      	beq.n	800b892 <TIM_Base_SetConfig+0x192>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f4 <TIM_Base_SetConfig+0x1f4>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d007      	beq.n	800b892 <TIM_Base_SetConfig+0x192>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4a1c      	ldr	r2, [pc, #112]	@ (800b8f8 <TIM_Base_SetConfig+0x1f8>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d003      	beq.n	800b892 <TIM_Base_SetConfig+0x192>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4a1b      	ldr	r2, [pc, #108]	@ (800b8fc <TIM_Base_SetConfig+0x1fc>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d103      	bne.n	800b89a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	691a      	ldr	r2, [r3, #16]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f043 0204 	orr.w	r2, r3, #4
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	601a      	str	r2, [r3, #0]
}
 800b8b2:	bf00      	nop
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	40012c00 	.word	0x40012c00
 800b8c4:	50012c00 	.word	0x50012c00
 800b8c8:	40000400 	.word	0x40000400
 800b8cc:	50000400 	.word	0x50000400
 800b8d0:	40000800 	.word	0x40000800
 800b8d4:	50000800 	.word	0x50000800
 800b8d8:	40000c00 	.word	0x40000c00
 800b8dc:	50000c00 	.word	0x50000c00
 800b8e0:	40013400 	.word	0x40013400
 800b8e4:	50013400 	.word	0x50013400
 800b8e8:	40014000 	.word	0x40014000
 800b8ec:	50014000 	.word	0x50014000
 800b8f0:	40014400 	.word	0x40014400
 800b8f4:	50014400 	.word	0x50014400
 800b8f8:	40014800 	.word	0x40014800
 800b8fc:	50014800 	.word	0x50014800

0800b900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b900:	b480      	push	{r7}
 800b902:	b087      	sub	sp, #28
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	f023 0201 	bic.w	r2, r3, #1
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 1N: Reset the CC1NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	4a26      	ldr	r2, [pc, #152]	@ (800b9bc <TIM_TI1_ConfigInputStage+0xbc>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d023      	beq.n	800b96e <TIM_TI1_ConfigInputStage+0x6e>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	4a25      	ldr	r2, [pc, #148]	@ (800b9c0 <TIM_TI1_ConfigInputStage+0xc0>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d01f      	beq.n	800b96e <TIM_TI1_ConfigInputStage+0x6e>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4a24      	ldr	r2, [pc, #144]	@ (800b9c4 <TIM_TI1_ConfigInputStage+0xc4>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d01b      	beq.n	800b96e <TIM_TI1_ConfigInputStage+0x6e>
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	4a23      	ldr	r2, [pc, #140]	@ (800b9c8 <TIM_TI1_ConfigInputStage+0xc8>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d017      	beq.n	800b96e <TIM_TI1_ConfigInputStage+0x6e>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	4a22      	ldr	r2, [pc, #136]	@ (800b9cc <TIM_TI1_ConfigInputStage+0xcc>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d013      	beq.n	800b96e <TIM_TI1_ConfigInputStage+0x6e>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	4a21      	ldr	r2, [pc, #132]	@ (800b9d0 <TIM_TI1_ConfigInputStage+0xd0>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d00f      	beq.n	800b96e <TIM_TI1_ConfigInputStage+0x6e>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	4a20      	ldr	r2, [pc, #128]	@ (800b9d4 <TIM_TI1_ConfigInputStage+0xd4>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d00b      	beq.n	800b96e <TIM_TI1_ConfigInputStage+0x6e>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	4a1f      	ldr	r2, [pc, #124]	@ (800b9d8 <TIM_TI1_ConfigInputStage+0xd8>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d007      	beq.n	800b96e <TIM_TI1_ConfigInputStage+0x6e>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4a1e      	ldr	r2, [pc, #120]	@ (800b9dc <TIM_TI1_ConfigInputStage+0xdc>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d003      	beq.n	800b96e <TIM_TI1_ConfigInputStage+0x6e>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	4a1d      	ldr	r2, [pc, #116]	@ (800b9e0 <TIM_TI1_ConfigInputStage+0xe0>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d105      	bne.n	800b97a <TIM_TI1_ConfigInputStage+0x7a>
  {
    TIMx->CCER &= ~TIM_CCER_CC1NE;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6a1b      	ldr	r3, [r3, #32]
 800b972:	f023 0204 	bic.w	r2, r3, #4
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	011b      	lsls	r3, r3, #4
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	4313      	orrs	r3, r2
 800b990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f023 030a 	bic.w	r3, r3, #10
 800b998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b99a:	697a      	ldr	r2, [r7, #20]
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	697a      	ldr	r2, [r7, #20]
 800b9ac:	621a      	str	r2, [r3, #32]
}
 800b9ae:	bf00      	nop
 800b9b0:	371c      	adds	r7, #28
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	40012c00 	.word	0x40012c00
 800b9c0:	50012c00 	.word	0x50012c00
 800b9c4:	40013400 	.word	0x40013400
 800b9c8:	50013400 	.word	0x50013400
 800b9cc:	40014000 	.word	0x40014000
 800b9d0:	50014000 	.word	0x50014000
 800b9d4:	40014400 	.word	0x40014400
 800b9d8:	50014400 	.word	0x50014400
 800b9dc:	40014800 	.word	0x40014800
 800b9e0:	50014800 	.word	0x50014800

0800b9e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b087      	sub	sp, #28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6a1b      	ldr	r3, [r3, #32]
 800b9f4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6a1b      	ldr	r3, [r3, #32]
 800b9fa:	f023 0210 	bic.w	r2, r3, #16
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 2N: Reset the CC2NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	4a1a      	ldr	r2, [pc, #104]	@ (800ba70 <TIM_TI2_ConfigInputStage+0x8c>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d00b      	beq.n	800ba22 <TIM_TI2_ConfigInputStage+0x3e>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	4a19      	ldr	r2, [pc, #100]	@ (800ba74 <TIM_TI2_ConfigInputStage+0x90>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d007      	beq.n	800ba22 <TIM_TI2_ConfigInputStage+0x3e>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	4a18      	ldr	r2, [pc, #96]	@ (800ba78 <TIM_TI2_ConfigInputStage+0x94>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d003      	beq.n	800ba22 <TIM_TI2_ConfigInputStage+0x3e>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4a17      	ldr	r2, [pc, #92]	@ (800ba7c <TIM_TI2_ConfigInputStage+0x98>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d105      	bne.n	800ba2e <TIM_TI2_ConfigInputStage+0x4a>
  {
    TIMx->CCER &= ~TIM_CCER_CC2NE;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ba3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	031b      	lsls	r3, r3, #12
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ba4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	621a      	str	r2, [r3, #32]
}
 800ba64:	bf00      	nop
 800ba66:	371c      	adds	r7, #28
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	40012c00 	.word	0x40012c00
 800ba74:	50012c00 	.word	0x50012c00
 800ba78:	40013400 	.word	0x40013400
 800ba7c:	50013400 	.word	0x50013400

0800ba80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ba96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	f043 0307 	orr.w	r3, r3, #7
 800baa6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	609a      	str	r2, [r3, #8]
}
 800baae:	bf00      	nop
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800baba:	b480      	push	{r7}
 800babc:	b087      	sub	sp, #28
 800babe:	af00      	add	r7, sp, #0
 800bac0:	60f8      	str	r0, [r7, #12]
 800bac2:	60b9      	str	r1, [r7, #8]
 800bac4:	607a      	str	r2, [r7, #4]
 800bac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bad4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	021a      	lsls	r2, r3, #8
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	431a      	orrs	r2, r3
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	697a      	ldr	r2, [r7, #20]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	609a      	str	r2, [r3, #8]
}
 800baee:	bf00      	nop
 800baf0:	371c      	adds	r7, #28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
	...

0800bafc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d101      	bne.n	800bb14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb10:	2302      	movs	r3, #2
 800bb12:	e097      	b.n	800bc44 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2202      	movs	r2, #2
 800bb20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a45      	ldr	r2, [pc, #276]	@ (800bc50 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d00e      	beq.n	800bb5c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a44      	ldr	r2, [pc, #272]	@ (800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d009      	beq.n	800bb5c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a42      	ldr	r2, [pc, #264]	@ (800bc58 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d004      	beq.n	800bb5c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a41      	ldr	r2, [pc, #260]	@ (800bc5c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d108      	bne.n	800bb6e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bb62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bb74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a2f      	ldr	r2, [pc, #188]	@ (800bc50 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d040      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a2e      	ldr	r2, [pc, #184]	@ (800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d03b      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bba8:	d036      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbb2:	d031      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a29      	ldr	r2, [pc, #164]	@ (800bc60 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d02c      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a28      	ldr	r2, [pc, #160]	@ (800bc64 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d027      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a26      	ldr	r2, [pc, #152]	@ (800bc68 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d022      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a25      	ldr	r2, [pc, #148]	@ (800bc6c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d01d      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a23      	ldr	r2, [pc, #140]	@ (800bc70 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d018      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a22      	ldr	r2, [pc, #136]	@ (800bc74 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d013      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a18      	ldr	r2, [pc, #96]	@ (800bc58 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d00e      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a17      	ldr	r2, [pc, #92]	@ (800bc5c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d009      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a1b      	ldr	r2, [pc, #108]	@ (800bc78 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d004      	beq.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a1a      	ldr	r2, [pc, #104]	@ (800bc7c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d10c      	bne.n	800bc32 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr
 800bc50:	40012c00 	.word	0x40012c00
 800bc54:	50012c00 	.word	0x50012c00
 800bc58:	40013400 	.word	0x40013400
 800bc5c:	50013400 	.word	0x50013400
 800bc60:	40000400 	.word	0x40000400
 800bc64:	50000400 	.word	0x50000400
 800bc68:	40000800 	.word	0x40000800
 800bc6c:	50000800 	.word	0x50000800
 800bc70:	40000c00 	.word	0x40000c00
 800bc74:	50000c00 	.word	0x50000c00
 800bc78:	40014000 	.word	0x40014000
 800bc7c:	50014000 	.word	0x50014000

0800bc80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e042      	b.n	800bd18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d106      	bne.n	800bcaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7f8 f927 	bl	8003ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2224      	movs	r2, #36	@ 0x24
 800bcae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f022 0201 	bic.w	r2, r2, #1
 800bcc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d002      	beq.n	800bcd0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fa64 	bl	800c198 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 f8b3 	bl	800be3c <UART_SetConfig>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d101      	bne.n	800bce0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e01b      	b.n	800bd18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	685a      	ldr	r2, [r3, #4]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bcee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	689a      	ldr	r2, [r3, #8]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bcfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f042 0201 	orr.w	r2, r2, #1
 800bd0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fae3 	bl	800c2dc <UART_CheckIdleState>
 800bd16:	4603      	mov	r3, r0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08a      	sub	sp, #40	@ 0x28
 800bd24:	af02      	add	r7, sp, #8
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	603b      	str	r3, [r7, #0]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd36:	2b20      	cmp	r3, #32
 800bd38:	d17b      	bne.n	800be32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <HAL_UART_Transmit+0x26>
 800bd40:	88fb      	ldrh	r3, [r7, #6]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d101      	bne.n	800bd4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bd46:	2301      	movs	r3, #1
 800bd48:	e074      	b.n	800be34 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2221      	movs	r2, #33	@ 0x21
 800bd56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd5a:	f7f8 fc7f 	bl	800465c <HAL_GetTick>
 800bd5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	88fa      	ldrh	r2, [r7, #6]
 800bd64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	88fa      	ldrh	r2, [r7, #6]
 800bd6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd78:	d108      	bne.n	800bd8c <HAL_UART_Transmit+0x6c>
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d104      	bne.n	800bd8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bd82:	2300      	movs	r3, #0
 800bd84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	61bb      	str	r3, [r7, #24]
 800bd8a:	e003      	b.n	800bd94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd90:	2300      	movs	r3, #0
 800bd92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bd94:	e030      	b.n	800bdf8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	9300      	str	r3, [sp, #0]
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2180      	movs	r1, #128	@ 0x80
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f000 fb45 	bl	800c430 <UART_WaitOnFlagUntilTimeout>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d005      	beq.n	800bdb8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2220      	movs	r2, #32
 800bdb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e03d      	b.n	800be34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10b      	bne.n	800bdd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	881b      	ldrh	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdcc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	3302      	adds	r3, #2
 800bdd2:	61bb      	str	r3, [r7, #24]
 800bdd4:	e007      	b.n	800bde6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	781a      	ldrb	r2, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	3301      	adds	r3, #1
 800bde4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1c8      	bne.n	800bd96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2200      	movs	r2, #0
 800be0c:	2140      	movs	r1, #64	@ 0x40
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f000 fb0e 	bl	800c430 <UART_WaitOnFlagUntilTimeout>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d005      	beq.n	800be26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2220      	movs	r2, #32
 800be1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800be22:	2303      	movs	r3, #3
 800be24:	e006      	b.n	800be34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2220      	movs	r2, #32
 800be2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	e000      	b.n	800be34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800be32:	2302      	movs	r3, #2
  }
}
 800be34:	4618      	mov	r0, r3
 800be36:	3720      	adds	r7, #32
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be40:	b094      	sub	sp, #80	@ 0x50
 800be42:	af00      	add	r7, sp, #0
 800be44:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800be4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	4b83      	ldr	r3, [pc, #524]	@ (800c060 <UART_SetConfig+0x224>)
 800be52:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be56:	689a      	ldr	r2, [r3, #8]
 800be58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	431a      	orrs	r2, r3
 800be5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	431a      	orrs	r2, r3
 800be64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be66:	69db      	ldr	r3, [r3, #28]
 800be68:	4313      	orrs	r3, r2
 800be6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	497c      	ldr	r1, [pc, #496]	@ (800c064 <UART_SetConfig+0x228>)
 800be74:	4019      	ands	r1, r3
 800be76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be7c:	430b      	orrs	r3, r1
 800be7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800be8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8c:	68d9      	ldr	r1, [r3, #12]
 800be8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	ea40 0301 	orr.w	r3, r0, r1
 800be96:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9a:	699b      	ldr	r3, [r3, #24]
 800be9c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	4b6f      	ldr	r3, [pc, #444]	@ (800c060 <UART_SetConfig+0x224>)
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d009      	beq.n	800bebc <UART_SetConfig+0x80>
 800bea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	4b6e      	ldr	r3, [pc, #440]	@ (800c068 <UART_SetConfig+0x22c>)
 800beae:	429a      	cmp	r2, r3
 800beb0:	d004      	beq.n	800bebc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800beb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb4:	6a1a      	ldr	r2, [r3, #32]
 800beb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800beb8:	4313      	orrs	r3, r2
 800beba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bec6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800beca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bed0:	430b      	orrs	r3, r1
 800bed2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beda:	f023 000f 	bic.w	r0, r3, #15
 800bede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	ea40 0301 	orr.w	r3, r0, r1
 800beea:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800beec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	4b5e      	ldr	r3, [pc, #376]	@ (800c06c <UART_SetConfig+0x230>)
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d102      	bne.n	800befc <UART_SetConfig+0xc0>
 800bef6:	2301      	movs	r3, #1
 800bef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800befa:	e032      	b.n	800bf62 <UART_SetConfig+0x126>
 800befc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	4b5b      	ldr	r3, [pc, #364]	@ (800c070 <UART_SetConfig+0x234>)
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d102      	bne.n	800bf0c <UART_SetConfig+0xd0>
 800bf06:	2302      	movs	r3, #2
 800bf08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf0a:	e02a      	b.n	800bf62 <UART_SetConfig+0x126>
 800bf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	4b58      	ldr	r3, [pc, #352]	@ (800c074 <UART_SetConfig+0x238>)
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d102      	bne.n	800bf1c <UART_SetConfig+0xe0>
 800bf16:	2304      	movs	r3, #4
 800bf18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf1a:	e022      	b.n	800bf62 <UART_SetConfig+0x126>
 800bf1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	4b55      	ldr	r3, [pc, #340]	@ (800c078 <UART_SetConfig+0x23c>)
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d102      	bne.n	800bf2c <UART_SetConfig+0xf0>
 800bf26:	2308      	movs	r3, #8
 800bf28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf2a:	e01a      	b.n	800bf62 <UART_SetConfig+0x126>
 800bf2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	4b52      	ldr	r3, [pc, #328]	@ (800c07c <UART_SetConfig+0x240>)
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d102      	bne.n	800bf3c <UART_SetConfig+0x100>
 800bf36:	2310      	movs	r3, #16
 800bf38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf3a:	e012      	b.n	800bf62 <UART_SetConfig+0x126>
 800bf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	4b4f      	ldr	r3, [pc, #316]	@ (800c080 <UART_SetConfig+0x244>)
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d103      	bne.n	800bf4e <UART_SetConfig+0x112>
 800bf46:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800bf4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf4c:	e009      	b.n	800bf62 <UART_SetConfig+0x126>
 800bf4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	4b43      	ldr	r3, [pc, #268]	@ (800c060 <UART_SetConfig+0x224>)
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d102      	bne.n	800bf5e <UART_SetConfig+0x122>
 800bf58:	2320      	movs	r3, #32
 800bf5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf5c:	e001      	b.n	800bf62 <UART_SetConfig+0x126>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	4b3e      	ldr	r3, [pc, #248]	@ (800c060 <UART_SetConfig+0x224>)
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d005      	beq.n	800bf78 <UART_SetConfig+0x13c>
 800bf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	4b3d      	ldr	r3, [pc, #244]	@ (800c068 <UART_SetConfig+0x22c>)
 800bf72:	429a      	cmp	r2, r3
 800bf74:	f040 8088 	bne.w	800c088 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bf78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	623b      	str	r3, [r7, #32]
 800bf7e:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bf84:	f7fc fd84 	bl	8008a90 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf88:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	f000 80eb 	beq.w	800c168 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf96:	4a3b      	ldr	r2, [pc, #236]	@ (800c084 <UART_SetConfig+0x248>)
 800bf98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfa4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa8:	685a      	ldr	r2, [r3, #4]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	005b      	lsls	r3, r3, #1
 800bfae:	4413      	add	r3, r2
 800bfb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d305      	bcc.n	800bfc2 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d903      	bls.n	800bfca <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bfc8:	e048      	b.n	800c05c <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfcc:	2200      	movs	r2, #0
 800bfce:	61bb      	str	r3, [r7, #24]
 800bfd0:	61fa      	str	r2, [r7, #28]
 800bfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd6:	4a2b      	ldr	r2, [pc, #172]	@ (800c084 <UART_SetConfig+0x248>)
 800bfd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	2200      	movs	r2, #0
 800bfe0:	613b      	str	r3, [r7, #16]
 800bfe2:	617a      	str	r2, [r7, #20]
 800bfe4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bfe8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bfec:	f7f4 fe5c 	bl	8000ca8 <__aeabi_uldivmod>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4610      	mov	r0, r2
 800bff6:	4619      	mov	r1, r3
 800bff8:	f04f 0200 	mov.w	r2, #0
 800bffc:	f04f 0300 	mov.w	r3, #0
 800c000:	020b      	lsls	r3, r1, #8
 800c002:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c006:	0202      	lsls	r2, r0, #8
 800c008:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c00a:	6849      	ldr	r1, [r1, #4]
 800c00c:	0849      	lsrs	r1, r1, #1
 800c00e:	2000      	movs	r0, #0
 800c010:	460c      	mov	r4, r1
 800c012:	4605      	mov	r5, r0
 800c014:	eb12 0804 	adds.w	r8, r2, r4
 800c018:	eb43 0905 	adc.w	r9, r3, r5
 800c01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	60bb      	str	r3, [r7, #8]
 800c024:	60fa      	str	r2, [r7, #12]
 800c026:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c02a:	4640      	mov	r0, r8
 800c02c:	4649      	mov	r1, r9
 800c02e:	f7f4 fe3b 	bl	8000ca8 <__aeabi_uldivmod>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	4613      	mov	r3, r2
 800c038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c03c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c040:	d308      	bcc.n	800c054 <UART_SetConfig+0x218>
 800c042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c044:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c048:	d204      	bcs.n	800c054 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800c04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c050:	60da      	str	r2, [r3, #12]
 800c052:	e003      	b.n	800c05c <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800c05a:	e085      	b.n	800c168 <UART_SetConfig+0x32c>
 800c05c:	e084      	b.n	800c168 <UART_SetConfig+0x32c>
 800c05e:	bf00      	nop
 800c060:	46002400 	.word	0x46002400
 800c064:	cfff69f3 	.word	0xcfff69f3
 800c068:	56002400 	.word	0x56002400
 800c06c:	40013800 	.word	0x40013800
 800c070:	40004400 	.word	0x40004400
 800c074:	40004800 	.word	0x40004800
 800c078:	40004c00 	.word	0x40004c00
 800c07c:	40005000 	.word	0x40005000
 800c080:	40006400 	.word	0x40006400
 800c084:	08011524 	.word	0x08011524
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c08a:	69db      	ldr	r3, [r3, #28]
 800c08c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c090:	d13c      	bne.n	800c10c <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c094:	2200      	movs	r2, #0
 800c096:	603b      	str	r3, [r7, #0]
 800c098:	607a      	str	r2, [r7, #4]
 800c09a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c09e:	f7fc fcf7 	bl	8008a90 <HAL_RCCEx_GetPeriphCLKFreq>
 800c0a2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c0a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d05e      	beq.n	800c168 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ae:	4a39      	ldr	r2, [pc, #228]	@ (800c194 <UART_SetConfig+0x358>)
 800c0b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0bc:	005a      	lsls	r2, r3, #1
 800c0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	085b      	lsrs	r3, r3, #1
 800c0c4:	441a      	add	r2, r3
 800c0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d2:	2b0f      	cmp	r3, #15
 800c0d4:	d916      	bls.n	800c104 <UART_SetConfig+0x2c8>
 800c0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0dc:	d212      	bcs.n	800c104 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	f023 030f 	bic.w	r3, r3, #15
 800c0e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ea:	085b      	lsrs	r3, r3, #1
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	f003 0307 	and.w	r3, r3, #7
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c100:	60da      	str	r2, [r3, #12]
 800c102:	e031      	b.n	800c168 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c10a:	e02d      	b.n	800c168 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c10c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c10e:	2200      	movs	r2, #0
 800c110:	469a      	mov	sl, r3
 800c112:	4693      	mov	fp, r2
 800c114:	4650      	mov	r0, sl
 800c116:	4659      	mov	r1, fp
 800c118:	f7fc fcba 	bl	8008a90 <HAL_RCCEx_GetPeriphCLKFreq>
 800c11c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c11e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c120:	2b00      	cmp	r3, #0
 800c122:	d021      	beq.n	800c168 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c128:	4a1a      	ldr	r2, [pc, #104]	@ (800c194 <UART_SetConfig+0x358>)
 800c12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c12e:	461a      	mov	r2, r3
 800c130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c132:	fbb3 f2f2 	udiv	r2, r3, r2
 800c136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	085b      	lsrs	r3, r3, #1
 800c13c:	441a      	add	r2, r3
 800c13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	fbb2 f3f3 	udiv	r3, r2, r3
 800c146:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c14a:	2b0f      	cmp	r3, #15
 800c14c:	d909      	bls.n	800c162 <UART_SetConfig+0x326>
 800c14e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c154:	d205      	bcs.n	800c162 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c158:	b29a      	uxth	r2, r3
 800c15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	60da      	str	r2, [r3, #12]
 800c160:	e002      	b.n	800c168 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c16a:	2201      	movs	r2, #1
 800c16c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c172:	2201      	movs	r2, #1
 800c174:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c17a:	2200      	movs	r2, #0
 800c17c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c180:	2200      	movs	r2, #0
 800c182:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c184:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3750      	adds	r7, #80	@ 0x50
 800c18c:	46bd      	mov	sp, r7
 800c18e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c192:	bf00      	nop
 800c194:	08011524 	.word	0x08011524

0800c198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c198:	b480      	push	{r7}
 800c19a:	b083      	sub	sp, #12
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1a4:	f003 0308 	and.w	r3, r3, #8
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00a      	beq.n	800c1c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c6:	f003 0301 	and.w	r3, r3, #1
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00a      	beq.n	800c1e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1e8:	f003 0302 	and.w	r3, r3, #2
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00a      	beq.n	800c206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	430a      	orrs	r2, r1
 800c204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c20a:	f003 0304 	and.w	r3, r3, #4
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00a      	beq.n	800c228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	430a      	orrs	r2, r1
 800c226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c22c:	f003 0310 	and.w	r3, r3, #16
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00a      	beq.n	800c24a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c24e:	f003 0320 	and.w	r3, r3, #32
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00a      	beq.n	800c26c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	430a      	orrs	r2, r1
 800c26a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c274:	2b00      	cmp	r3, #0
 800c276:	d01a      	beq.n	800c2ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	430a      	orrs	r2, r1
 800c28c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c296:	d10a      	bne.n	800c2ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	430a      	orrs	r2, r1
 800c2ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00a      	beq.n	800c2d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	430a      	orrs	r2, r1
 800c2ce:	605a      	str	r2, [r3, #4]
  }
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b098      	sub	sp, #96	@ 0x60
 800c2e0:	af02      	add	r7, sp, #8
 800c2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2ec:	f7f8 f9b6 	bl	800465c <HAL_GetTick>
 800c2f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 0308 	and.w	r3, r3, #8
 800c2fc:	2b08      	cmp	r3, #8
 800c2fe:	d12f      	bne.n	800c360 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c300:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c308:	2200      	movs	r2, #0
 800c30a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f88e 	bl	800c430 <UART_WaitOnFlagUntilTimeout>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d022      	beq.n	800c360 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c322:	e853 3f00 	ldrex	r3, [r3]
 800c326:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c32a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c32e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	461a      	mov	r2, r3
 800c336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c338:	647b      	str	r3, [r7, #68]	@ 0x44
 800c33a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c33e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c340:	e841 2300 	strex	r3, r2, [r1]
 800c344:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1e6      	bne.n	800c31a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2220      	movs	r2, #32
 800c350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c35c:	2303      	movs	r3, #3
 800c35e:	e063      	b.n	800c428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 0304 	and.w	r3, r3, #4
 800c36a:	2b04      	cmp	r3, #4
 800c36c:	d149      	bne.n	800c402 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c36e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c376:	2200      	movs	r2, #0
 800c378:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f857 	bl	800c430 <UART_WaitOnFlagUntilTimeout>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d03c      	beq.n	800c402 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c390:	e853 3f00 	ldrex	r3, [r3]
 800c394:	623b      	str	r3, [r7, #32]
   return(result);
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c39c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3ae:	e841 2300 	strex	r3, r2, [r1]
 800c3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1e6      	bne.n	800c388 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3308      	adds	r3, #8
 800c3c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	e853 3f00 	ldrex	r3, [r3]
 800c3c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f023 0301 	bic.w	r3, r3, #1
 800c3d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3da:	61fa      	str	r2, [r7, #28]
 800c3dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3de:	69b9      	ldr	r1, [r7, #24]
 800c3e0:	69fa      	ldr	r2, [r7, #28]
 800c3e2:	e841 2300 	strex	r3, r2, [r1]
 800c3e6:	617b      	str	r3, [r7, #20]
   return(result);
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1e5      	bne.n	800c3ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2220      	movs	r2, #32
 800c3f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3fe:	2303      	movs	r3, #3
 800c400:	e012      	b.n	800c428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2220      	movs	r2, #32
 800c406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2220      	movs	r2, #32
 800c40e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3758      	adds	r7, #88	@ 0x58
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	4613      	mov	r3, r2
 800c43e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c440:	e04f      	b.n	800c4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c448:	d04b      	beq.n	800c4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c44a:	f7f8 f907 	bl	800465c <HAL_GetTick>
 800c44e:	4602      	mov	r2, r0
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	69ba      	ldr	r2, [r7, #24]
 800c456:	429a      	cmp	r2, r3
 800c458:	d302      	bcc.n	800c460 <UART_WaitOnFlagUntilTimeout+0x30>
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c460:	2303      	movs	r3, #3
 800c462:	e04e      	b.n	800c502 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 0304 	and.w	r3, r3, #4
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d037      	beq.n	800c4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	2b80      	cmp	r3, #128	@ 0x80
 800c476:	d034      	beq.n	800c4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2b40      	cmp	r3, #64	@ 0x40
 800c47c:	d031      	beq.n	800c4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	69db      	ldr	r3, [r3, #28]
 800c484:	f003 0308 	and.w	r3, r3, #8
 800c488:	2b08      	cmp	r3, #8
 800c48a:	d110      	bne.n	800c4ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2208      	movs	r2, #8
 800c492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 f838 	bl	800c50a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2208      	movs	r2, #8
 800c49e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e029      	b.n	800c502 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	69db      	ldr	r3, [r3, #28]
 800c4b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c4b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c4bc:	d111      	bne.n	800c4e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c4c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f000 f81e 	bl	800c50a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2220      	movs	r2, #32
 800c4d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	e00f      	b.n	800c502 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	69da      	ldr	r2, [r3, #28]
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	bf0c      	ite	eq
 800c4f2:	2301      	moveq	r3, #1
 800c4f4:	2300      	movne	r3, #0
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	79fb      	ldrb	r3, [r7, #7]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d0a0      	beq.n	800c442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c50a:	b480      	push	{r7}
 800c50c:	b095      	sub	sp, #84	@ 0x54
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c51a:	e853 3f00 	ldrex	r3, [r3]
 800c51e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c522:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	461a      	mov	r2, r3
 800c52e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c530:	643b      	str	r3, [r7, #64]	@ 0x40
 800c532:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c534:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c536:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c538:	e841 2300 	strex	r3, r2, [r1]
 800c53c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c540:	2b00      	cmp	r3, #0
 800c542:	d1e6      	bne.n	800c512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3308      	adds	r3, #8
 800c54a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	e853 3f00 	ldrex	r3, [r3]
 800c552:	61fb      	str	r3, [r7, #28]
   return(result);
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c55a:	f023 0301 	bic.w	r3, r3, #1
 800c55e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	3308      	adds	r3, #8
 800c566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c568:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c56a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c56e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c570:	e841 2300 	strex	r3, r2, [r1]
 800c574:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1e3      	bne.n	800c544 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c580:	2b01      	cmp	r3, #1
 800c582:	d118      	bne.n	800c5b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	e853 3f00 	ldrex	r3, [r3]
 800c590:	60bb      	str	r3, [r7, #8]
   return(result);
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	f023 0310 	bic.w	r3, r3, #16
 800c598:	647b      	str	r3, [r7, #68]	@ 0x44
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5a2:	61bb      	str	r3, [r7, #24]
 800c5a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a6:	6979      	ldr	r1, [r7, #20]
 800c5a8:	69ba      	ldr	r2, [r7, #24]
 800c5aa:	e841 2300 	strex	r3, r2, [r1]
 800c5ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1e6      	bne.n	800c584 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2220      	movs	r2, #32
 800c5ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c5ca:	bf00      	nop
 800c5cc:	3754      	adds	r7, #84	@ 0x54
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b085      	sub	sp, #20
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d101      	bne.n	800c5ec <HAL_UARTEx_DisableFifoMode+0x16>
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	e027      	b.n	800c63c <HAL_UARTEx_DisableFifoMode+0x66>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2224      	movs	r2, #36	@ 0x24
 800c5f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f022 0201 	bic.w	r2, r2, #1
 800c612:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c61a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2220      	movs	r2, #32
 800c62e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d101      	bne.n	800c660 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c65c:	2302      	movs	r3, #2
 800c65e:	e02d      	b.n	800c6bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2224      	movs	r2, #36	@ 0x24
 800c66c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f022 0201 	bic.w	r2, r2, #1
 800c686:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	430a      	orrs	r2, r1
 800c69a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f84f 	bl	800c740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2220      	movs	r2, #32
 800c6ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d101      	bne.n	800c6dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c6d8:	2302      	movs	r3, #2
 800c6da:	e02d      	b.n	800c738 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2224      	movs	r2, #36	@ 0x24
 800c6e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f022 0201 	bic.w	r2, r2, #1
 800c702:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	430a      	orrs	r2, r1
 800c716:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 f811 	bl	800c740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2220      	movs	r2, #32
 800c72a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d108      	bne.n	800c762 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c760:	e031      	b.n	800c7c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c762:	2308      	movs	r3, #8
 800c764:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c766:	2308      	movs	r3, #8
 800c768:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	0e5b      	lsrs	r3, r3, #25
 800c772:	b2db      	uxtb	r3, r3
 800c774:	f003 0307 	and.w	r3, r3, #7
 800c778:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	0f5b      	lsrs	r3, r3, #29
 800c782:	b2db      	uxtb	r3, r3
 800c784:	f003 0307 	and.w	r3, r3, #7
 800c788:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c78a:	7bbb      	ldrb	r3, [r7, #14]
 800c78c:	7b3a      	ldrb	r2, [r7, #12]
 800c78e:	4911      	ldr	r1, [pc, #68]	@ (800c7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800c790:	5c8a      	ldrb	r2, [r1, r2]
 800c792:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c796:	7b3a      	ldrb	r2, [r7, #12]
 800c798:	490f      	ldr	r1, [pc, #60]	@ (800c7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800c79a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c79c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	7b7a      	ldrb	r2, [r7, #13]
 800c7ac:	4909      	ldr	r1, [pc, #36]	@ (800c7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800c7ae:	5c8a      	ldrb	r2, [r1, r2]
 800c7b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c7b4:	7b7a      	ldrb	r2, [r7, #13]
 800c7b6:	4908      	ldr	r1, [pc, #32]	@ (800c7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800c7b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c7c6:	bf00      	nop
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	0801153c 	.word	0x0801153c
 800c7d8:	08011544 	.word	0x08011544

0800c7dc <__cvt>:
 800c7dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e0:	ec57 6b10 	vmov	r6, r7, d0
 800c7e4:	2f00      	cmp	r7, #0
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	463b      	mov	r3, r7
 800c7ec:	bfb4      	ite	lt
 800c7ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c7f2:	2300      	movge	r3, #0
 800c7f4:	4691      	mov	r9, r2
 800c7f6:	bfbf      	itttt	lt
 800c7f8:	4632      	movlt	r2, r6
 800c7fa:	461f      	movlt	r7, r3
 800c7fc:	232d      	movlt	r3, #45	@ 0x2d
 800c7fe:	4616      	movlt	r6, r2
 800c800:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c804:	700b      	strb	r3, [r1, #0]
 800c806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c808:	f023 0820 	bic.w	r8, r3, #32
 800c80c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c810:	d005      	beq.n	800c81e <__cvt+0x42>
 800c812:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c816:	d100      	bne.n	800c81a <__cvt+0x3e>
 800c818:	3401      	adds	r4, #1
 800c81a:	2102      	movs	r1, #2
 800c81c:	e000      	b.n	800c820 <__cvt+0x44>
 800c81e:	2103      	movs	r1, #3
 800c820:	ab03      	add	r3, sp, #12
 800c822:	4622      	mov	r2, r4
 800c824:	9301      	str	r3, [sp, #4]
 800c826:	ab02      	add	r3, sp, #8
 800c828:	ec47 6b10 	vmov	d0, r6, r7
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	4653      	mov	r3, sl
 800c830:	f001 fede 	bl	800e5f0 <_dtoa_r>
 800c834:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c838:	4605      	mov	r5, r0
 800c83a:	d119      	bne.n	800c870 <__cvt+0x94>
 800c83c:	f019 0f01 	tst.w	r9, #1
 800c840:	d00e      	beq.n	800c860 <__cvt+0x84>
 800c842:	eb00 0904 	add.w	r9, r0, r4
 800c846:	2200      	movs	r2, #0
 800c848:	2300      	movs	r3, #0
 800c84a:	4630      	mov	r0, r6
 800c84c:	4639      	mov	r1, r7
 800c84e:	f7f4 f94b 	bl	8000ae8 <__aeabi_dcmpeq>
 800c852:	b108      	cbz	r0, 800c858 <__cvt+0x7c>
 800c854:	f8cd 900c 	str.w	r9, [sp, #12]
 800c858:	2230      	movs	r2, #48	@ 0x30
 800c85a:	9b03      	ldr	r3, [sp, #12]
 800c85c:	454b      	cmp	r3, r9
 800c85e:	d31e      	bcc.n	800c89e <__cvt+0xc2>
 800c860:	9b03      	ldr	r3, [sp, #12]
 800c862:	4628      	mov	r0, r5
 800c864:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c866:	1b5b      	subs	r3, r3, r5
 800c868:	6013      	str	r3, [r2, #0]
 800c86a:	b004      	add	sp, #16
 800c86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c870:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c874:	eb00 0904 	add.w	r9, r0, r4
 800c878:	d1e5      	bne.n	800c846 <__cvt+0x6a>
 800c87a:	7803      	ldrb	r3, [r0, #0]
 800c87c:	2b30      	cmp	r3, #48	@ 0x30
 800c87e:	d10a      	bne.n	800c896 <__cvt+0xba>
 800c880:	2200      	movs	r2, #0
 800c882:	2300      	movs	r3, #0
 800c884:	4630      	mov	r0, r6
 800c886:	4639      	mov	r1, r7
 800c888:	f7f4 f92e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c88c:	b918      	cbnz	r0, 800c896 <__cvt+0xba>
 800c88e:	f1c4 0401 	rsb	r4, r4, #1
 800c892:	f8ca 4000 	str.w	r4, [sl]
 800c896:	f8da 3000 	ldr.w	r3, [sl]
 800c89a:	4499      	add	r9, r3
 800c89c:	e7d3      	b.n	800c846 <__cvt+0x6a>
 800c89e:	1c59      	adds	r1, r3, #1
 800c8a0:	9103      	str	r1, [sp, #12]
 800c8a2:	701a      	strb	r2, [r3, #0]
 800c8a4:	e7d9      	b.n	800c85a <__cvt+0x7e>

0800c8a6 <__exponent>:
 800c8a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8a8:	2900      	cmp	r1, #0
 800c8aa:	7002      	strb	r2, [r0, #0]
 800c8ac:	bfba      	itte	lt
 800c8ae:	4249      	neglt	r1, r1
 800c8b0:	232d      	movlt	r3, #45	@ 0x2d
 800c8b2:	232b      	movge	r3, #43	@ 0x2b
 800c8b4:	2909      	cmp	r1, #9
 800c8b6:	7043      	strb	r3, [r0, #1]
 800c8b8:	dd28      	ble.n	800c90c <__exponent+0x66>
 800c8ba:	f10d 0307 	add.w	r3, sp, #7
 800c8be:	270a      	movs	r7, #10
 800c8c0:	461d      	mov	r5, r3
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	fbb1 f6f7 	udiv	r6, r1, r7
 800c8ca:	fb07 1416 	mls	r4, r7, r6, r1
 800c8ce:	3430      	adds	r4, #48	@ 0x30
 800c8d0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c8d4:	460c      	mov	r4, r1
 800c8d6:	4631      	mov	r1, r6
 800c8d8:	2c63      	cmp	r4, #99	@ 0x63
 800c8da:	dcf2      	bgt.n	800c8c2 <__exponent+0x1c>
 800c8dc:	3130      	adds	r1, #48	@ 0x30
 800c8de:	1e94      	subs	r4, r2, #2
 800c8e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c8e4:	1c41      	adds	r1, r0, #1
 800c8e6:	4623      	mov	r3, r4
 800c8e8:	42ab      	cmp	r3, r5
 800c8ea:	d30a      	bcc.n	800c902 <__exponent+0x5c>
 800c8ec:	f10d 0309 	add.w	r3, sp, #9
 800c8f0:	1a9b      	subs	r3, r3, r2
 800c8f2:	42ac      	cmp	r4, r5
 800c8f4:	bf88      	it	hi
 800c8f6:	2300      	movhi	r3, #0
 800c8f8:	3302      	adds	r3, #2
 800c8fa:	4403      	add	r3, r0
 800c8fc:	1a18      	subs	r0, r3, r0
 800c8fe:	b003      	add	sp, #12
 800c900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c902:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c906:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c90a:	e7ed      	b.n	800c8e8 <__exponent+0x42>
 800c90c:	2330      	movs	r3, #48	@ 0x30
 800c90e:	3130      	adds	r1, #48	@ 0x30
 800c910:	7083      	strb	r3, [r0, #2]
 800c912:	1d03      	adds	r3, r0, #4
 800c914:	70c1      	strb	r1, [r0, #3]
 800c916:	e7f1      	b.n	800c8fc <__exponent+0x56>

0800c918 <_printf_float>:
 800c918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91c:	b08d      	sub	sp, #52	@ 0x34
 800c91e:	460c      	mov	r4, r1
 800c920:	4616      	mov	r6, r2
 800c922:	461f      	mov	r7, r3
 800c924:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c928:	4605      	mov	r5, r0
 800c92a:	f001 fda5 	bl	800e478 <_localeconv_r>
 800c92e:	6803      	ldr	r3, [r0, #0]
 800c930:	4618      	mov	r0, r3
 800c932:	9304      	str	r3, [sp, #16]
 800c934:	f7f3 fcac 	bl	8000290 <strlen>
 800c938:	2300      	movs	r3, #0
 800c93a:	9005      	str	r0, [sp, #20]
 800c93c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c93e:	f8d8 3000 	ldr.w	r3, [r8]
 800c942:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c946:	3307      	adds	r3, #7
 800c948:	f8d4 b000 	ldr.w	fp, [r4]
 800c94c:	f023 0307 	bic.w	r3, r3, #7
 800c950:	f103 0208 	add.w	r2, r3, #8
 800c954:	f8c8 2000 	str.w	r2, [r8]
 800c958:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c95c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c960:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c964:	f8cd 8018 	str.w	r8, [sp, #24]
 800c968:	9307      	str	r3, [sp, #28]
 800c96a:	4b9d      	ldr	r3, [pc, #628]	@ (800cbe0 <_printf_float+0x2c8>)
 800c96c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c970:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c974:	f7f4 f8ea 	bl	8000b4c <__aeabi_dcmpun>
 800c978:	bb70      	cbnz	r0, 800c9d8 <_printf_float+0xc0>
 800c97a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c97e:	4b98      	ldr	r3, [pc, #608]	@ (800cbe0 <_printf_float+0x2c8>)
 800c980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c984:	f7f4 f8c4 	bl	8000b10 <__aeabi_dcmple>
 800c988:	bb30      	cbnz	r0, 800c9d8 <_printf_float+0xc0>
 800c98a:	2200      	movs	r2, #0
 800c98c:	2300      	movs	r3, #0
 800c98e:	4640      	mov	r0, r8
 800c990:	4649      	mov	r1, r9
 800c992:	f7f4 f8b3 	bl	8000afc <__aeabi_dcmplt>
 800c996:	b110      	cbz	r0, 800c99e <_printf_float+0x86>
 800c998:	232d      	movs	r3, #45	@ 0x2d
 800c99a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c99e:	4a91      	ldr	r2, [pc, #580]	@ (800cbe4 <_printf_float+0x2cc>)
 800c9a0:	4b91      	ldr	r3, [pc, #580]	@ (800cbe8 <_printf_float+0x2d0>)
 800c9a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c9a6:	bf8c      	ite	hi
 800c9a8:	4690      	movhi	r8, r2
 800c9aa:	4698      	movls	r8, r3
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	f04f 0900 	mov.w	r9, #0
 800c9b2:	6123      	str	r3, [r4, #16]
 800c9b4:	f02b 0304 	bic.w	r3, fp, #4
 800c9b8:	6023      	str	r3, [r4, #0]
 800c9ba:	4633      	mov	r3, r6
 800c9bc:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	9700      	str	r7, [sp, #0]
 800c9c4:	f000 f9d2 	bl	800cd6c <_printf_common>
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	f040 808d 	bne.w	800cae8 <_printf_float+0x1d0>
 800c9ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9d2:	b00d      	add	sp, #52	@ 0x34
 800c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d8:	4642      	mov	r2, r8
 800c9da:	464b      	mov	r3, r9
 800c9dc:	4640      	mov	r0, r8
 800c9de:	4649      	mov	r1, r9
 800c9e0:	f7f4 f8b4 	bl	8000b4c <__aeabi_dcmpun>
 800c9e4:	b140      	cbz	r0, 800c9f8 <_printf_float+0xe0>
 800c9e6:	464b      	mov	r3, r9
 800c9e8:	4a80      	ldr	r2, [pc, #512]	@ (800cbec <_printf_float+0x2d4>)
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	bfbc      	itt	lt
 800c9ee:	232d      	movlt	r3, #45	@ 0x2d
 800c9f0:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c9f4:	4b7e      	ldr	r3, [pc, #504]	@ (800cbf0 <_printf_float+0x2d8>)
 800c9f6:	e7d4      	b.n	800c9a2 <_printf_float+0x8a>
 800c9f8:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c9fc:	6863      	ldr	r3, [r4, #4]
 800c9fe:	9206      	str	r2, [sp, #24]
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	d13b      	bne.n	800ca7c <_printf_float+0x164>
 800ca04:	2306      	movs	r3, #6
 800ca06:	6063      	str	r3, [r4, #4]
 800ca08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	4628      	mov	r0, r5
 800ca10:	6022      	str	r2, [r4, #0]
 800ca12:	9303      	str	r3, [sp, #12]
 800ca14:	ab0a      	add	r3, sp, #40	@ 0x28
 800ca16:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ca1a:	ab09      	add	r3, sp, #36	@ 0x24
 800ca1c:	ec49 8b10 	vmov	d0, r8, r9
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ca26:	6861      	ldr	r1, [r4, #4]
 800ca28:	f7ff fed8 	bl	800c7dc <__cvt>
 800ca2c:	9b06      	ldr	r3, [sp, #24]
 800ca2e:	4680      	mov	r8, r0
 800ca30:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca32:	2b47      	cmp	r3, #71	@ 0x47
 800ca34:	d129      	bne.n	800ca8a <_printf_float+0x172>
 800ca36:	1cc8      	adds	r0, r1, #3
 800ca38:	db02      	blt.n	800ca40 <_printf_float+0x128>
 800ca3a:	6863      	ldr	r3, [r4, #4]
 800ca3c:	4299      	cmp	r1, r3
 800ca3e:	dd41      	ble.n	800cac4 <_printf_float+0x1ac>
 800ca40:	f1aa 0a02 	sub.w	sl, sl, #2
 800ca44:	fa5f fa8a 	uxtb.w	sl, sl
 800ca48:	3901      	subs	r1, #1
 800ca4a:	4652      	mov	r2, sl
 800ca4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ca50:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca52:	f7ff ff28 	bl	800c8a6 <__exponent>
 800ca56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca58:	4681      	mov	r9, r0
 800ca5a:	1813      	adds	r3, r2, r0
 800ca5c:	2a01      	cmp	r2, #1
 800ca5e:	6123      	str	r3, [r4, #16]
 800ca60:	dc02      	bgt.n	800ca68 <_printf_float+0x150>
 800ca62:	6822      	ldr	r2, [r4, #0]
 800ca64:	07d2      	lsls	r2, r2, #31
 800ca66:	d501      	bpl.n	800ca6c <_printf_float+0x154>
 800ca68:	3301      	adds	r3, #1
 800ca6a:	6123      	str	r3, [r4, #16]
 800ca6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d0a2      	beq.n	800c9ba <_printf_float+0xa2>
 800ca74:	232d      	movs	r3, #45	@ 0x2d
 800ca76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca7a:	e79e      	b.n	800c9ba <_printf_float+0xa2>
 800ca7c:	9a06      	ldr	r2, [sp, #24]
 800ca7e:	2a47      	cmp	r2, #71	@ 0x47
 800ca80:	d1c2      	bne.n	800ca08 <_printf_float+0xf0>
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1c0      	bne.n	800ca08 <_printf_float+0xf0>
 800ca86:	2301      	movs	r3, #1
 800ca88:	e7bd      	b.n	800ca06 <_printf_float+0xee>
 800ca8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ca8e:	d9db      	bls.n	800ca48 <_printf_float+0x130>
 800ca90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ca94:	d118      	bne.n	800cac8 <_printf_float+0x1b0>
 800ca96:	2900      	cmp	r1, #0
 800ca98:	6863      	ldr	r3, [r4, #4]
 800ca9a:	dd0b      	ble.n	800cab4 <_printf_float+0x19c>
 800ca9c:	6121      	str	r1, [r4, #16]
 800ca9e:	b913      	cbnz	r3, 800caa6 <_printf_float+0x18e>
 800caa0:	6822      	ldr	r2, [r4, #0]
 800caa2:	07d0      	lsls	r0, r2, #31
 800caa4:	d502      	bpl.n	800caac <_printf_float+0x194>
 800caa6:	3301      	adds	r3, #1
 800caa8:	440b      	add	r3, r1
 800caaa:	6123      	str	r3, [r4, #16]
 800caac:	f04f 0900 	mov.w	r9, #0
 800cab0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cab2:	e7db      	b.n	800ca6c <_printf_float+0x154>
 800cab4:	b913      	cbnz	r3, 800cabc <_printf_float+0x1a4>
 800cab6:	6822      	ldr	r2, [r4, #0]
 800cab8:	07d2      	lsls	r2, r2, #31
 800caba:	d501      	bpl.n	800cac0 <_printf_float+0x1a8>
 800cabc:	3302      	adds	r3, #2
 800cabe:	e7f4      	b.n	800caaa <_printf_float+0x192>
 800cac0:	2301      	movs	r3, #1
 800cac2:	e7f2      	b.n	800caaa <_printf_float+0x192>
 800cac4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caca:	4299      	cmp	r1, r3
 800cacc:	db05      	blt.n	800cada <_printf_float+0x1c2>
 800cace:	6823      	ldr	r3, [r4, #0]
 800cad0:	6121      	str	r1, [r4, #16]
 800cad2:	07d8      	lsls	r0, r3, #31
 800cad4:	d5ea      	bpl.n	800caac <_printf_float+0x194>
 800cad6:	1c4b      	adds	r3, r1, #1
 800cad8:	e7e7      	b.n	800caaa <_printf_float+0x192>
 800cada:	2900      	cmp	r1, #0
 800cadc:	bfd4      	ite	le
 800cade:	f1c1 0202 	rsble	r2, r1, #2
 800cae2:	2201      	movgt	r2, #1
 800cae4:	4413      	add	r3, r2
 800cae6:	e7e0      	b.n	800caaa <_printf_float+0x192>
 800cae8:	6823      	ldr	r3, [r4, #0]
 800caea:	055a      	lsls	r2, r3, #21
 800caec:	d407      	bmi.n	800cafe <_printf_float+0x1e6>
 800caee:	6923      	ldr	r3, [r4, #16]
 800caf0:	4642      	mov	r2, r8
 800caf2:	4631      	mov	r1, r6
 800caf4:	4628      	mov	r0, r5
 800caf6:	47b8      	blx	r7
 800caf8:	3001      	adds	r0, #1
 800cafa:	d12b      	bne.n	800cb54 <_printf_float+0x23c>
 800cafc:	e767      	b.n	800c9ce <_printf_float+0xb6>
 800cafe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cb02:	f240 80dd 	bls.w	800ccc0 <_printf_float+0x3a8>
 800cb06:	2200      	movs	r2, #0
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cb0e:	f7f3 ffeb 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d033      	beq.n	800cb7e <_printf_float+0x266>
 800cb16:	2301      	movs	r3, #1
 800cb18:	4a36      	ldr	r2, [pc, #216]	@ (800cbf4 <_printf_float+0x2dc>)
 800cb1a:	4631      	mov	r1, r6
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	47b8      	blx	r7
 800cb20:	3001      	adds	r0, #1
 800cb22:	f43f af54 	beq.w	800c9ce <_printf_float+0xb6>
 800cb26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cb2a:	4543      	cmp	r3, r8
 800cb2c:	db02      	blt.n	800cb34 <_printf_float+0x21c>
 800cb2e:	6823      	ldr	r3, [r4, #0]
 800cb30:	07d8      	lsls	r0, r3, #31
 800cb32:	d50f      	bpl.n	800cb54 <_printf_float+0x23c>
 800cb34:	4631      	mov	r1, r6
 800cb36:	4628      	mov	r0, r5
 800cb38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb3c:	47b8      	blx	r7
 800cb3e:	3001      	adds	r0, #1
 800cb40:	f43f af45 	beq.w	800c9ce <_printf_float+0xb6>
 800cb44:	f04f 0900 	mov.w	r9, #0
 800cb48:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cb4c:	f104 0a1a 	add.w	sl, r4, #26
 800cb50:	45c8      	cmp	r8, r9
 800cb52:	dc09      	bgt.n	800cb68 <_printf_float+0x250>
 800cb54:	6823      	ldr	r3, [r4, #0]
 800cb56:	079b      	lsls	r3, r3, #30
 800cb58:	f100 8103 	bmi.w	800cd62 <_printf_float+0x44a>
 800cb5c:	68e0      	ldr	r0, [r4, #12]
 800cb5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb60:	4298      	cmp	r0, r3
 800cb62:	bfb8      	it	lt
 800cb64:	4618      	movlt	r0, r3
 800cb66:	e734      	b.n	800c9d2 <_printf_float+0xba>
 800cb68:	2301      	movs	r3, #1
 800cb6a:	4652      	mov	r2, sl
 800cb6c:	4631      	mov	r1, r6
 800cb6e:	4628      	mov	r0, r5
 800cb70:	47b8      	blx	r7
 800cb72:	3001      	adds	r0, #1
 800cb74:	f43f af2b 	beq.w	800c9ce <_printf_float+0xb6>
 800cb78:	f109 0901 	add.w	r9, r9, #1
 800cb7c:	e7e8      	b.n	800cb50 <_printf_float+0x238>
 800cb7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	dc39      	bgt.n	800cbf8 <_printf_float+0x2e0>
 800cb84:	2301      	movs	r3, #1
 800cb86:	4a1b      	ldr	r2, [pc, #108]	@ (800cbf4 <_printf_float+0x2dc>)
 800cb88:	4631      	mov	r1, r6
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	47b8      	blx	r7
 800cb8e:	3001      	adds	r0, #1
 800cb90:	f43f af1d 	beq.w	800c9ce <_printf_float+0xb6>
 800cb94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cb98:	ea59 0303 	orrs.w	r3, r9, r3
 800cb9c:	d102      	bne.n	800cba4 <_printf_float+0x28c>
 800cb9e:	6823      	ldr	r3, [r4, #0]
 800cba0:	07d9      	lsls	r1, r3, #31
 800cba2:	d5d7      	bpl.n	800cb54 <_printf_float+0x23c>
 800cba4:	4631      	mov	r1, r6
 800cba6:	4628      	mov	r0, r5
 800cba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbac:	47b8      	blx	r7
 800cbae:	3001      	adds	r0, #1
 800cbb0:	f43f af0d 	beq.w	800c9ce <_printf_float+0xb6>
 800cbb4:	f04f 0a00 	mov.w	sl, #0
 800cbb8:	f104 0b1a 	add.w	fp, r4, #26
 800cbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbbe:	425b      	negs	r3, r3
 800cbc0:	4553      	cmp	r3, sl
 800cbc2:	dc01      	bgt.n	800cbc8 <_printf_float+0x2b0>
 800cbc4:	464b      	mov	r3, r9
 800cbc6:	e793      	b.n	800caf0 <_printf_float+0x1d8>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	465a      	mov	r2, fp
 800cbcc:	4631      	mov	r1, r6
 800cbce:	4628      	mov	r0, r5
 800cbd0:	47b8      	blx	r7
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	f43f aefb 	beq.w	800c9ce <_printf_float+0xb6>
 800cbd8:	f10a 0a01 	add.w	sl, sl, #1
 800cbdc:	e7ee      	b.n	800cbbc <_printf_float+0x2a4>
 800cbde:	bf00      	nop
 800cbe0:	7fefffff 	.word	0x7fefffff
 800cbe4:	08011550 	.word	0x08011550
 800cbe8:	0801154c 	.word	0x0801154c
 800cbec:	08011558 	.word	0x08011558
 800cbf0:	08011554 	.word	0x08011554
 800cbf4:	0801155c 	.word	0x0801155c
 800cbf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cbfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cbfe:	4553      	cmp	r3, sl
 800cc00:	bfa8      	it	ge
 800cc02:	4653      	movge	r3, sl
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	4699      	mov	r9, r3
 800cc08:	dc36      	bgt.n	800cc78 <_printf_float+0x360>
 800cc0a:	f04f 0b00 	mov.w	fp, #0
 800cc0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc12:	f104 021a 	add.w	r2, r4, #26
 800cc16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cc18:	9306      	str	r3, [sp, #24]
 800cc1a:	eba3 0309 	sub.w	r3, r3, r9
 800cc1e:	455b      	cmp	r3, fp
 800cc20:	dc31      	bgt.n	800cc86 <_printf_float+0x36e>
 800cc22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc24:	459a      	cmp	sl, r3
 800cc26:	dc3a      	bgt.n	800cc9e <_printf_float+0x386>
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	07da      	lsls	r2, r3, #31
 800cc2c:	d437      	bmi.n	800cc9e <_printf_float+0x386>
 800cc2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc30:	ebaa 0903 	sub.w	r9, sl, r3
 800cc34:	9b06      	ldr	r3, [sp, #24]
 800cc36:	ebaa 0303 	sub.w	r3, sl, r3
 800cc3a:	4599      	cmp	r9, r3
 800cc3c:	bfa8      	it	ge
 800cc3e:	4699      	movge	r9, r3
 800cc40:	f1b9 0f00 	cmp.w	r9, #0
 800cc44:	dc33      	bgt.n	800ccae <_printf_float+0x396>
 800cc46:	f04f 0800 	mov.w	r8, #0
 800cc4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc4e:	f104 0b1a 	add.w	fp, r4, #26
 800cc52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc54:	ebaa 0303 	sub.w	r3, sl, r3
 800cc58:	eba3 0309 	sub.w	r3, r3, r9
 800cc5c:	4543      	cmp	r3, r8
 800cc5e:	f77f af79 	ble.w	800cb54 <_printf_float+0x23c>
 800cc62:	2301      	movs	r3, #1
 800cc64:	465a      	mov	r2, fp
 800cc66:	4631      	mov	r1, r6
 800cc68:	4628      	mov	r0, r5
 800cc6a:	47b8      	blx	r7
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	f43f aeae 	beq.w	800c9ce <_printf_float+0xb6>
 800cc72:	f108 0801 	add.w	r8, r8, #1
 800cc76:	e7ec      	b.n	800cc52 <_printf_float+0x33a>
 800cc78:	4642      	mov	r2, r8
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b8      	blx	r7
 800cc80:	3001      	adds	r0, #1
 800cc82:	d1c2      	bne.n	800cc0a <_printf_float+0x2f2>
 800cc84:	e6a3      	b.n	800c9ce <_printf_float+0xb6>
 800cc86:	2301      	movs	r3, #1
 800cc88:	4631      	mov	r1, r6
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	9206      	str	r2, [sp, #24]
 800cc8e:	47b8      	blx	r7
 800cc90:	3001      	adds	r0, #1
 800cc92:	f43f ae9c 	beq.w	800c9ce <_printf_float+0xb6>
 800cc96:	f10b 0b01 	add.w	fp, fp, #1
 800cc9a:	9a06      	ldr	r2, [sp, #24]
 800cc9c:	e7bb      	b.n	800cc16 <_printf_float+0x2fe>
 800cc9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cca2:	4631      	mov	r1, r6
 800cca4:	4628      	mov	r0, r5
 800cca6:	47b8      	blx	r7
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d1c0      	bne.n	800cc2e <_printf_float+0x316>
 800ccac:	e68f      	b.n	800c9ce <_printf_float+0xb6>
 800ccae:	9a06      	ldr	r2, [sp, #24]
 800ccb0:	464b      	mov	r3, r9
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	4442      	add	r2, r8
 800ccb8:	47b8      	blx	r7
 800ccba:	3001      	adds	r0, #1
 800ccbc:	d1c3      	bne.n	800cc46 <_printf_float+0x32e>
 800ccbe:	e686      	b.n	800c9ce <_printf_float+0xb6>
 800ccc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ccc4:	f1ba 0f01 	cmp.w	sl, #1
 800ccc8:	dc01      	bgt.n	800ccce <_printf_float+0x3b6>
 800ccca:	07db      	lsls	r3, r3, #31
 800cccc:	d536      	bpl.n	800cd3c <_printf_float+0x424>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	4642      	mov	r2, r8
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	47b8      	blx	r7
 800ccd8:	3001      	adds	r0, #1
 800ccda:	f43f ae78 	beq.w	800c9ce <_printf_float+0xb6>
 800ccde:	4631      	mov	r1, r6
 800cce0:	4628      	mov	r0, r5
 800cce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cce6:	47b8      	blx	r7
 800cce8:	3001      	adds	r0, #1
 800ccea:	f43f ae70 	beq.w	800c9ce <_printf_float+0xb6>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ccf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ccfa:	f7f3 fef5 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccfe:	b9c0      	cbnz	r0, 800cd32 <_printf_float+0x41a>
 800cd00:	4653      	mov	r3, sl
 800cd02:	f108 0201 	add.w	r2, r8, #1
 800cd06:	4631      	mov	r1, r6
 800cd08:	4628      	mov	r0, r5
 800cd0a:	47b8      	blx	r7
 800cd0c:	3001      	adds	r0, #1
 800cd0e:	d10c      	bne.n	800cd2a <_printf_float+0x412>
 800cd10:	e65d      	b.n	800c9ce <_printf_float+0xb6>
 800cd12:	2301      	movs	r3, #1
 800cd14:	465a      	mov	r2, fp
 800cd16:	4631      	mov	r1, r6
 800cd18:	4628      	mov	r0, r5
 800cd1a:	47b8      	blx	r7
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	f43f ae56 	beq.w	800c9ce <_printf_float+0xb6>
 800cd22:	f108 0801 	add.w	r8, r8, #1
 800cd26:	45d0      	cmp	r8, sl
 800cd28:	dbf3      	blt.n	800cd12 <_printf_float+0x3fa>
 800cd2a:	464b      	mov	r3, r9
 800cd2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cd30:	e6df      	b.n	800caf2 <_printf_float+0x1da>
 800cd32:	f04f 0800 	mov.w	r8, #0
 800cd36:	f104 0b1a 	add.w	fp, r4, #26
 800cd3a:	e7f4      	b.n	800cd26 <_printf_float+0x40e>
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	4642      	mov	r2, r8
 800cd40:	e7e1      	b.n	800cd06 <_printf_float+0x3ee>
 800cd42:	2301      	movs	r3, #1
 800cd44:	464a      	mov	r2, r9
 800cd46:	4631      	mov	r1, r6
 800cd48:	4628      	mov	r0, r5
 800cd4a:	47b8      	blx	r7
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	f43f ae3e 	beq.w	800c9ce <_printf_float+0xb6>
 800cd52:	f108 0801 	add.w	r8, r8, #1
 800cd56:	68e3      	ldr	r3, [r4, #12]
 800cd58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd5a:	1a5b      	subs	r3, r3, r1
 800cd5c:	4543      	cmp	r3, r8
 800cd5e:	dcf0      	bgt.n	800cd42 <_printf_float+0x42a>
 800cd60:	e6fc      	b.n	800cb5c <_printf_float+0x244>
 800cd62:	f04f 0800 	mov.w	r8, #0
 800cd66:	f104 0919 	add.w	r9, r4, #25
 800cd6a:	e7f4      	b.n	800cd56 <_printf_float+0x43e>

0800cd6c <_printf_common>:
 800cd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd70:	4616      	mov	r6, r2
 800cd72:	4698      	mov	r8, r3
 800cd74:	688a      	ldr	r2, [r1, #8]
 800cd76:	4607      	mov	r7, r0
 800cd78:	690b      	ldr	r3, [r1, #16]
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cd80:	4293      	cmp	r3, r2
 800cd82:	bfb8      	it	lt
 800cd84:	4613      	movlt	r3, r2
 800cd86:	6033      	str	r3, [r6, #0]
 800cd88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cd8c:	b10a      	cbz	r2, 800cd92 <_printf_common+0x26>
 800cd8e:	3301      	adds	r3, #1
 800cd90:	6033      	str	r3, [r6, #0]
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	0699      	lsls	r1, r3, #26
 800cd96:	bf42      	ittt	mi
 800cd98:	6833      	ldrmi	r3, [r6, #0]
 800cd9a:	3302      	addmi	r3, #2
 800cd9c:	6033      	strmi	r3, [r6, #0]
 800cd9e:	6825      	ldr	r5, [r4, #0]
 800cda0:	f015 0506 	ands.w	r5, r5, #6
 800cda4:	d106      	bne.n	800cdb4 <_printf_common+0x48>
 800cda6:	f104 0a19 	add.w	sl, r4, #25
 800cdaa:	68e3      	ldr	r3, [r4, #12]
 800cdac:	6832      	ldr	r2, [r6, #0]
 800cdae:	1a9b      	subs	r3, r3, r2
 800cdb0:	42ab      	cmp	r3, r5
 800cdb2:	dc2b      	bgt.n	800ce0c <_printf_common+0xa0>
 800cdb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cdb8:	6822      	ldr	r2, [r4, #0]
 800cdba:	3b00      	subs	r3, #0
 800cdbc:	bf18      	it	ne
 800cdbe:	2301      	movne	r3, #1
 800cdc0:	0692      	lsls	r2, r2, #26
 800cdc2:	d430      	bmi.n	800ce26 <_printf_common+0xba>
 800cdc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cdc8:	4641      	mov	r1, r8
 800cdca:	4638      	mov	r0, r7
 800cdcc:	47c8      	blx	r9
 800cdce:	3001      	adds	r0, #1
 800cdd0:	d023      	beq.n	800ce1a <_printf_common+0xae>
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	341a      	adds	r4, #26
 800cdd6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800cdda:	f003 0306 	and.w	r3, r3, #6
 800cdde:	2b04      	cmp	r3, #4
 800cde0:	bf0a      	itet	eq
 800cde2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800cde6:	2500      	movne	r5, #0
 800cde8:	6833      	ldreq	r3, [r6, #0]
 800cdea:	f04f 0600 	mov.w	r6, #0
 800cdee:	bf08      	it	eq
 800cdf0:	1aed      	subeq	r5, r5, r3
 800cdf2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cdf6:	bf08      	it	eq
 800cdf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	bfc4      	itt	gt
 800ce00:	1a9b      	subgt	r3, r3, r2
 800ce02:	18ed      	addgt	r5, r5, r3
 800ce04:	42b5      	cmp	r5, r6
 800ce06:	d11a      	bne.n	800ce3e <_printf_common+0xd2>
 800ce08:	2000      	movs	r0, #0
 800ce0a:	e008      	b.n	800ce1e <_printf_common+0xb2>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	4652      	mov	r2, sl
 800ce10:	4641      	mov	r1, r8
 800ce12:	4638      	mov	r0, r7
 800ce14:	47c8      	blx	r9
 800ce16:	3001      	adds	r0, #1
 800ce18:	d103      	bne.n	800ce22 <_printf_common+0xb6>
 800ce1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce22:	3501      	adds	r5, #1
 800ce24:	e7c1      	b.n	800cdaa <_printf_common+0x3e>
 800ce26:	18e1      	adds	r1, r4, r3
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	2030      	movs	r0, #48	@ 0x30
 800ce2c:	3302      	adds	r3, #2
 800ce2e:	4422      	add	r2, r4
 800ce30:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ce34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ce38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ce3c:	e7c2      	b.n	800cdc4 <_printf_common+0x58>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	4622      	mov	r2, r4
 800ce42:	4641      	mov	r1, r8
 800ce44:	4638      	mov	r0, r7
 800ce46:	47c8      	blx	r9
 800ce48:	3001      	adds	r0, #1
 800ce4a:	d0e6      	beq.n	800ce1a <_printf_common+0xae>
 800ce4c:	3601      	adds	r6, #1
 800ce4e:	e7d9      	b.n	800ce04 <_printf_common+0x98>

0800ce50 <_printf_i>:
 800ce50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce54:	7e0f      	ldrb	r7, [r1, #24]
 800ce56:	4691      	mov	r9, r2
 800ce58:	4680      	mov	r8, r0
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	2f78      	cmp	r7, #120	@ 0x78
 800ce5e:	469a      	mov	sl, r3
 800ce60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ce62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ce66:	d807      	bhi.n	800ce78 <_printf_i+0x28>
 800ce68:	2f62      	cmp	r7, #98	@ 0x62
 800ce6a:	d80a      	bhi.n	800ce82 <_printf_i+0x32>
 800ce6c:	2f00      	cmp	r7, #0
 800ce6e:	f000 80d1 	beq.w	800d014 <_printf_i+0x1c4>
 800ce72:	2f58      	cmp	r7, #88	@ 0x58
 800ce74:	f000 80b8 	beq.w	800cfe8 <_printf_i+0x198>
 800ce78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ce80:	e03a      	b.n	800cef8 <_printf_i+0xa8>
 800ce82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ce86:	2b15      	cmp	r3, #21
 800ce88:	d8f6      	bhi.n	800ce78 <_printf_i+0x28>
 800ce8a:	a101      	add	r1, pc, #4	@ (adr r1, 800ce90 <_printf_i+0x40>)
 800ce8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce90:	0800cee9 	.word	0x0800cee9
 800ce94:	0800cefd 	.word	0x0800cefd
 800ce98:	0800ce79 	.word	0x0800ce79
 800ce9c:	0800ce79 	.word	0x0800ce79
 800cea0:	0800ce79 	.word	0x0800ce79
 800cea4:	0800ce79 	.word	0x0800ce79
 800cea8:	0800cefd 	.word	0x0800cefd
 800ceac:	0800ce79 	.word	0x0800ce79
 800ceb0:	0800ce79 	.word	0x0800ce79
 800ceb4:	0800ce79 	.word	0x0800ce79
 800ceb8:	0800ce79 	.word	0x0800ce79
 800cebc:	0800cffb 	.word	0x0800cffb
 800cec0:	0800cf27 	.word	0x0800cf27
 800cec4:	0800cfb5 	.word	0x0800cfb5
 800cec8:	0800ce79 	.word	0x0800ce79
 800cecc:	0800ce79 	.word	0x0800ce79
 800ced0:	0800d01d 	.word	0x0800d01d
 800ced4:	0800ce79 	.word	0x0800ce79
 800ced8:	0800cf27 	.word	0x0800cf27
 800cedc:	0800ce79 	.word	0x0800ce79
 800cee0:	0800ce79 	.word	0x0800ce79
 800cee4:	0800cfbd 	.word	0x0800cfbd
 800cee8:	6833      	ldr	r3, [r6, #0]
 800ceea:	1d1a      	adds	r2, r3, #4
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6032      	str	r2, [r6, #0]
 800cef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cef8:	2301      	movs	r3, #1
 800cefa:	e09c      	b.n	800d036 <_printf_i+0x1e6>
 800cefc:	6833      	ldr	r3, [r6, #0]
 800cefe:	6820      	ldr	r0, [r4, #0]
 800cf00:	1d19      	adds	r1, r3, #4
 800cf02:	6031      	str	r1, [r6, #0]
 800cf04:	0606      	lsls	r6, r0, #24
 800cf06:	d501      	bpl.n	800cf0c <_printf_i+0xbc>
 800cf08:	681d      	ldr	r5, [r3, #0]
 800cf0a:	e003      	b.n	800cf14 <_printf_i+0xc4>
 800cf0c:	0645      	lsls	r5, r0, #25
 800cf0e:	d5fb      	bpl.n	800cf08 <_printf_i+0xb8>
 800cf10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cf14:	2d00      	cmp	r5, #0
 800cf16:	da03      	bge.n	800cf20 <_printf_i+0xd0>
 800cf18:	232d      	movs	r3, #45	@ 0x2d
 800cf1a:	426d      	negs	r5, r5
 800cf1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf20:	4858      	ldr	r0, [pc, #352]	@ (800d084 <_printf_i+0x234>)
 800cf22:	230a      	movs	r3, #10
 800cf24:	e011      	b.n	800cf4a <_printf_i+0xfa>
 800cf26:	6821      	ldr	r1, [r4, #0]
 800cf28:	6833      	ldr	r3, [r6, #0]
 800cf2a:	0608      	lsls	r0, r1, #24
 800cf2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf30:	d402      	bmi.n	800cf38 <_printf_i+0xe8>
 800cf32:	0649      	lsls	r1, r1, #25
 800cf34:	bf48      	it	mi
 800cf36:	b2ad      	uxthmi	r5, r5
 800cf38:	2f6f      	cmp	r7, #111	@ 0x6f
 800cf3a:	6033      	str	r3, [r6, #0]
 800cf3c:	4851      	ldr	r0, [pc, #324]	@ (800d084 <_printf_i+0x234>)
 800cf3e:	bf14      	ite	ne
 800cf40:	230a      	movne	r3, #10
 800cf42:	2308      	moveq	r3, #8
 800cf44:	2100      	movs	r1, #0
 800cf46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf4a:	6866      	ldr	r6, [r4, #4]
 800cf4c:	2e00      	cmp	r6, #0
 800cf4e:	60a6      	str	r6, [r4, #8]
 800cf50:	db05      	blt.n	800cf5e <_printf_i+0x10e>
 800cf52:	6821      	ldr	r1, [r4, #0]
 800cf54:	432e      	orrs	r6, r5
 800cf56:	f021 0104 	bic.w	r1, r1, #4
 800cf5a:	6021      	str	r1, [r4, #0]
 800cf5c:	d04b      	beq.n	800cff6 <_printf_i+0x1a6>
 800cf5e:	4616      	mov	r6, r2
 800cf60:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf64:	fb03 5711 	mls	r7, r3, r1, r5
 800cf68:	5dc7      	ldrb	r7, [r0, r7]
 800cf6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf6e:	462f      	mov	r7, r5
 800cf70:	460d      	mov	r5, r1
 800cf72:	42bb      	cmp	r3, r7
 800cf74:	d9f4      	bls.n	800cf60 <_printf_i+0x110>
 800cf76:	2b08      	cmp	r3, #8
 800cf78:	d10b      	bne.n	800cf92 <_printf_i+0x142>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	07df      	lsls	r7, r3, #31
 800cf7e:	d508      	bpl.n	800cf92 <_printf_i+0x142>
 800cf80:	6923      	ldr	r3, [r4, #16]
 800cf82:	6861      	ldr	r1, [r4, #4]
 800cf84:	4299      	cmp	r1, r3
 800cf86:	bfde      	ittt	le
 800cf88:	2330      	movle	r3, #48	@ 0x30
 800cf8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf8e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cf92:	1b92      	subs	r2, r2, r6
 800cf94:	6122      	str	r2, [r4, #16]
 800cf96:	464b      	mov	r3, r9
 800cf98:	aa03      	add	r2, sp, #12
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	f8cd a000 	str.w	sl, [sp]
 800cfa2:	f7ff fee3 	bl	800cd6c <_printf_common>
 800cfa6:	3001      	adds	r0, #1
 800cfa8:	d14a      	bne.n	800d040 <_printf_i+0x1f0>
 800cfaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfae:	b004      	add	sp, #16
 800cfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	f043 0320 	orr.w	r3, r3, #32
 800cfba:	6023      	str	r3, [r4, #0]
 800cfbc:	2778      	movs	r7, #120	@ 0x78
 800cfbe:	4832      	ldr	r0, [pc, #200]	@ (800d088 <_printf_i+0x238>)
 800cfc0:	6823      	ldr	r3, [r4, #0]
 800cfc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cfc6:	061f      	lsls	r7, r3, #24
 800cfc8:	6831      	ldr	r1, [r6, #0]
 800cfca:	f851 5b04 	ldr.w	r5, [r1], #4
 800cfce:	d402      	bmi.n	800cfd6 <_printf_i+0x186>
 800cfd0:	065f      	lsls	r7, r3, #25
 800cfd2:	bf48      	it	mi
 800cfd4:	b2ad      	uxthmi	r5, r5
 800cfd6:	6031      	str	r1, [r6, #0]
 800cfd8:	07d9      	lsls	r1, r3, #31
 800cfda:	bf44      	itt	mi
 800cfdc:	f043 0320 	orrmi.w	r3, r3, #32
 800cfe0:	6023      	strmi	r3, [r4, #0]
 800cfe2:	b11d      	cbz	r5, 800cfec <_printf_i+0x19c>
 800cfe4:	2310      	movs	r3, #16
 800cfe6:	e7ad      	b.n	800cf44 <_printf_i+0xf4>
 800cfe8:	4826      	ldr	r0, [pc, #152]	@ (800d084 <_printf_i+0x234>)
 800cfea:	e7e9      	b.n	800cfc0 <_printf_i+0x170>
 800cfec:	6823      	ldr	r3, [r4, #0]
 800cfee:	f023 0320 	bic.w	r3, r3, #32
 800cff2:	6023      	str	r3, [r4, #0]
 800cff4:	e7f6      	b.n	800cfe4 <_printf_i+0x194>
 800cff6:	4616      	mov	r6, r2
 800cff8:	e7bd      	b.n	800cf76 <_printf_i+0x126>
 800cffa:	6833      	ldr	r3, [r6, #0]
 800cffc:	6825      	ldr	r5, [r4, #0]
 800cffe:	1d18      	adds	r0, r3, #4
 800d000:	6961      	ldr	r1, [r4, #20]
 800d002:	6030      	str	r0, [r6, #0]
 800d004:	062e      	lsls	r6, r5, #24
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	d501      	bpl.n	800d00e <_printf_i+0x1be>
 800d00a:	6019      	str	r1, [r3, #0]
 800d00c:	e002      	b.n	800d014 <_printf_i+0x1c4>
 800d00e:	0668      	lsls	r0, r5, #25
 800d010:	d5fb      	bpl.n	800d00a <_printf_i+0x1ba>
 800d012:	8019      	strh	r1, [r3, #0]
 800d014:	2300      	movs	r3, #0
 800d016:	4616      	mov	r6, r2
 800d018:	6123      	str	r3, [r4, #16]
 800d01a:	e7bc      	b.n	800cf96 <_printf_i+0x146>
 800d01c:	6833      	ldr	r3, [r6, #0]
 800d01e:	2100      	movs	r1, #0
 800d020:	1d1a      	adds	r2, r3, #4
 800d022:	6032      	str	r2, [r6, #0]
 800d024:	681e      	ldr	r6, [r3, #0]
 800d026:	6862      	ldr	r2, [r4, #4]
 800d028:	4630      	mov	r0, r6
 800d02a:	f001 fa29 	bl	800e480 <memchr>
 800d02e:	b108      	cbz	r0, 800d034 <_printf_i+0x1e4>
 800d030:	1b80      	subs	r0, r0, r6
 800d032:	6060      	str	r0, [r4, #4]
 800d034:	6863      	ldr	r3, [r4, #4]
 800d036:	6123      	str	r3, [r4, #16]
 800d038:	2300      	movs	r3, #0
 800d03a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d03e:	e7aa      	b.n	800cf96 <_printf_i+0x146>
 800d040:	6923      	ldr	r3, [r4, #16]
 800d042:	4632      	mov	r2, r6
 800d044:	4649      	mov	r1, r9
 800d046:	4640      	mov	r0, r8
 800d048:	47d0      	blx	sl
 800d04a:	3001      	adds	r0, #1
 800d04c:	d0ad      	beq.n	800cfaa <_printf_i+0x15a>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	079b      	lsls	r3, r3, #30
 800d052:	d413      	bmi.n	800d07c <_printf_i+0x22c>
 800d054:	68e0      	ldr	r0, [r4, #12]
 800d056:	9b03      	ldr	r3, [sp, #12]
 800d058:	4298      	cmp	r0, r3
 800d05a:	bfb8      	it	lt
 800d05c:	4618      	movlt	r0, r3
 800d05e:	e7a6      	b.n	800cfae <_printf_i+0x15e>
 800d060:	2301      	movs	r3, #1
 800d062:	4632      	mov	r2, r6
 800d064:	4649      	mov	r1, r9
 800d066:	4640      	mov	r0, r8
 800d068:	47d0      	blx	sl
 800d06a:	3001      	adds	r0, #1
 800d06c:	d09d      	beq.n	800cfaa <_printf_i+0x15a>
 800d06e:	3501      	adds	r5, #1
 800d070:	68e3      	ldr	r3, [r4, #12]
 800d072:	9903      	ldr	r1, [sp, #12]
 800d074:	1a5b      	subs	r3, r3, r1
 800d076:	42ab      	cmp	r3, r5
 800d078:	dcf2      	bgt.n	800d060 <_printf_i+0x210>
 800d07a:	e7eb      	b.n	800d054 <_printf_i+0x204>
 800d07c:	2500      	movs	r5, #0
 800d07e:	f104 0619 	add.w	r6, r4, #25
 800d082:	e7f5      	b.n	800d070 <_printf_i+0x220>
 800d084:	0801155e 	.word	0x0801155e
 800d088:	0801156f 	.word	0x0801156f

0800d08c <_scanf_float>:
 800d08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d090:	b087      	sub	sp, #28
 800d092:	4691      	mov	r9, r2
 800d094:	4680      	mov	r8, r0
 800d096:	460c      	mov	r4, r1
 800d098:	9303      	str	r3, [sp, #12]
 800d09a:	688b      	ldr	r3, [r1, #8]
 800d09c:	1e5a      	subs	r2, r3, #1
 800d09e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d0a2:	460a      	mov	r2, r1
 800d0a4:	bf89      	itett	hi
 800d0a6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d0aa:	f04f 0b00 	movls.w	fp, #0
 800d0ae:	eb03 0b05 	addhi.w	fp, r3, r5
 800d0b2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d0b6:	f04f 0500 	mov.w	r5, #0
 800d0ba:	bf88      	it	hi
 800d0bc:	608b      	strhi	r3, [r1, #8]
 800d0be:	680b      	ldr	r3, [r1, #0]
 800d0c0:	46aa      	mov	sl, r5
 800d0c2:	462f      	mov	r7, r5
 800d0c4:	9502      	str	r5, [sp, #8]
 800d0c6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d0ca:	f842 3b1c 	str.w	r3, [r2], #28
 800d0ce:	4616      	mov	r6, r2
 800d0d0:	9201      	str	r2, [sp, #4]
 800d0d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d0d6:	68a2      	ldr	r2, [r4, #8]
 800d0d8:	b15a      	cbz	r2, 800d0f2 <_scanf_float+0x66>
 800d0da:	f8d9 3000 	ldr.w	r3, [r9]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	2b4e      	cmp	r3, #78	@ 0x4e
 800d0e2:	d863      	bhi.n	800d1ac <_scanf_float+0x120>
 800d0e4:	2b40      	cmp	r3, #64	@ 0x40
 800d0e6:	d83b      	bhi.n	800d160 <_scanf_float+0xd4>
 800d0e8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d0ec:	b2c8      	uxtb	r0, r1
 800d0ee:	280e      	cmp	r0, #14
 800d0f0:	d939      	bls.n	800d166 <_scanf_float+0xda>
 800d0f2:	b11f      	cbz	r7, 800d0fc <_scanf_float+0x70>
 800d0f4:	6823      	ldr	r3, [r4, #0]
 800d0f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0fa:	6023      	str	r3, [r4, #0]
 800d0fc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d100:	f1ba 0f01 	cmp.w	sl, #1
 800d104:	f200 8115 	bhi.w	800d332 <_scanf_float+0x2a6>
 800d108:	9b01      	ldr	r3, [sp, #4]
 800d10a:	429e      	cmp	r6, r3
 800d10c:	f200 8106 	bhi.w	800d31c <_scanf_float+0x290>
 800d110:	2001      	movs	r0, #1
 800d112:	b007      	add	sp, #28
 800d114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d118:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d11c:	2a0d      	cmp	r2, #13
 800d11e:	d8e8      	bhi.n	800d0f2 <_scanf_float+0x66>
 800d120:	a101      	add	r1, pc, #4	@ (adr r1, 800d128 <_scanf_float+0x9c>)
 800d122:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d126:	bf00      	nop
 800d128:	0800d271 	.word	0x0800d271
 800d12c:	0800d0f3 	.word	0x0800d0f3
 800d130:	0800d0f3 	.word	0x0800d0f3
 800d134:	0800d0f3 	.word	0x0800d0f3
 800d138:	0800d2cd 	.word	0x0800d2cd
 800d13c:	0800d2a7 	.word	0x0800d2a7
 800d140:	0800d0f3 	.word	0x0800d0f3
 800d144:	0800d0f3 	.word	0x0800d0f3
 800d148:	0800d27f 	.word	0x0800d27f
 800d14c:	0800d0f3 	.word	0x0800d0f3
 800d150:	0800d0f3 	.word	0x0800d0f3
 800d154:	0800d0f3 	.word	0x0800d0f3
 800d158:	0800d0f3 	.word	0x0800d0f3
 800d15c:	0800d23b 	.word	0x0800d23b
 800d160:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d164:	e7da      	b.n	800d11c <_scanf_float+0x90>
 800d166:	290e      	cmp	r1, #14
 800d168:	d8c3      	bhi.n	800d0f2 <_scanf_float+0x66>
 800d16a:	a001      	add	r0, pc, #4	@ (adr r0, 800d170 <_scanf_float+0xe4>)
 800d16c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d170:	0800d22b 	.word	0x0800d22b
 800d174:	0800d0f3 	.word	0x0800d0f3
 800d178:	0800d22b 	.word	0x0800d22b
 800d17c:	0800d2bb 	.word	0x0800d2bb
 800d180:	0800d0f3 	.word	0x0800d0f3
 800d184:	0800d1cd 	.word	0x0800d1cd
 800d188:	0800d211 	.word	0x0800d211
 800d18c:	0800d211 	.word	0x0800d211
 800d190:	0800d211 	.word	0x0800d211
 800d194:	0800d211 	.word	0x0800d211
 800d198:	0800d211 	.word	0x0800d211
 800d19c:	0800d211 	.word	0x0800d211
 800d1a0:	0800d211 	.word	0x0800d211
 800d1a4:	0800d211 	.word	0x0800d211
 800d1a8:	0800d211 	.word	0x0800d211
 800d1ac:	2b6e      	cmp	r3, #110	@ 0x6e
 800d1ae:	d809      	bhi.n	800d1c4 <_scanf_float+0x138>
 800d1b0:	2b60      	cmp	r3, #96	@ 0x60
 800d1b2:	d8b1      	bhi.n	800d118 <_scanf_float+0x8c>
 800d1b4:	2b54      	cmp	r3, #84	@ 0x54
 800d1b6:	d07b      	beq.n	800d2b0 <_scanf_float+0x224>
 800d1b8:	2b59      	cmp	r3, #89	@ 0x59
 800d1ba:	d19a      	bne.n	800d0f2 <_scanf_float+0x66>
 800d1bc:	2d07      	cmp	r5, #7
 800d1be:	d198      	bne.n	800d0f2 <_scanf_float+0x66>
 800d1c0:	2508      	movs	r5, #8
 800d1c2:	e02f      	b.n	800d224 <_scanf_float+0x198>
 800d1c4:	2b74      	cmp	r3, #116	@ 0x74
 800d1c6:	d073      	beq.n	800d2b0 <_scanf_float+0x224>
 800d1c8:	2b79      	cmp	r3, #121	@ 0x79
 800d1ca:	e7f6      	b.n	800d1ba <_scanf_float+0x12e>
 800d1cc:	6821      	ldr	r1, [r4, #0]
 800d1ce:	05c8      	lsls	r0, r1, #23
 800d1d0:	d51e      	bpl.n	800d210 <_scanf_float+0x184>
 800d1d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d1d6:	3701      	adds	r7, #1
 800d1d8:	6021      	str	r1, [r4, #0]
 800d1da:	f1bb 0f00 	cmp.w	fp, #0
 800d1de:	d003      	beq.n	800d1e8 <_scanf_float+0x15c>
 800d1e0:	3201      	adds	r2, #1
 800d1e2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800d1e6:	60a2      	str	r2, [r4, #8]
 800d1e8:	68a3      	ldr	r3, [r4, #8]
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	60a3      	str	r3, [r4, #8]
 800d1ee:	6923      	ldr	r3, [r4, #16]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	6123      	str	r3, [r4, #16]
 800d1f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f8c9 3004 	str.w	r3, [r9, #4]
 800d200:	f340 8083 	ble.w	800d30a <_scanf_float+0x27e>
 800d204:	f8d9 3000 	ldr.w	r3, [r9]
 800d208:	3301      	adds	r3, #1
 800d20a:	f8c9 3000 	str.w	r3, [r9]
 800d20e:	e762      	b.n	800d0d6 <_scanf_float+0x4a>
 800d210:	eb1a 0105 	adds.w	r1, sl, r5
 800d214:	f47f af6d 	bne.w	800d0f2 <_scanf_float+0x66>
 800d218:	6822      	ldr	r2, [r4, #0]
 800d21a:	460d      	mov	r5, r1
 800d21c:	468a      	mov	sl, r1
 800d21e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d222:	6022      	str	r2, [r4, #0]
 800d224:	f806 3b01 	strb.w	r3, [r6], #1
 800d228:	e7de      	b.n	800d1e8 <_scanf_float+0x15c>
 800d22a:	6822      	ldr	r2, [r4, #0]
 800d22c:	0610      	lsls	r0, r2, #24
 800d22e:	f57f af60 	bpl.w	800d0f2 <_scanf_float+0x66>
 800d232:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d236:	6022      	str	r2, [r4, #0]
 800d238:	e7f4      	b.n	800d224 <_scanf_float+0x198>
 800d23a:	f1ba 0f00 	cmp.w	sl, #0
 800d23e:	d10c      	bne.n	800d25a <_scanf_float+0x1ce>
 800d240:	b977      	cbnz	r7, 800d260 <_scanf_float+0x1d4>
 800d242:	6822      	ldr	r2, [r4, #0]
 800d244:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d248:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d24c:	d108      	bne.n	800d260 <_scanf_float+0x1d4>
 800d24e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d252:	f04f 0a01 	mov.w	sl, #1
 800d256:	6022      	str	r2, [r4, #0]
 800d258:	e7e4      	b.n	800d224 <_scanf_float+0x198>
 800d25a:	f1ba 0f02 	cmp.w	sl, #2
 800d25e:	d051      	beq.n	800d304 <_scanf_float+0x278>
 800d260:	2d01      	cmp	r5, #1
 800d262:	d002      	beq.n	800d26a <_scanf_float+0x1de>
 800d264:	2d04      	cmp	r5, #4
 800d266:	f47f af44 	bne.w	800d0f2 <_scanf_float+0x66>
 800d26a:	3501      	adds	r5, #1
 800d26c:	b2ed      	uxtb	r5, r5
 800d26e:	e7d9      	b.n	800d224 <_scanf_float+0x198>
 800d270:	f1ba 0f01 	cmp.w	sl, #1
 800d274:	f47f af3d 	bne.w	800d0f2 <_scanf_float+0x66>
 800d278:	f04f 0a02 	mov.w	sl, #2
 800d27c:	e7d2      	b.n	800d224 <_scanf_float+0x198>
 800d27e:	b975      	cbnz	r5, 800d29e <_scanf_float+0x212>
 800d280:	2f00      	cmp	r7, #0
 800d282:	f47f af37 	bne.w	800d0f4 <_scanf_float+0x68>
 800d286:	6822      	ldr	r2, [r4, #0]
 800d288:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d28c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d290:	f040 8103 	bne.w	800d49a <_scanf_float+0x40e>
 800d294:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d298:	2501      	movs	r5, #1
 800d29a:	6022      	str	r2, [r4, #0]
 800d29c:	e7c2      	b.n	800d224 <_scanf_float+0x198>
 800d29e:	2d03      	cmp	r5, #3
 800d2a0:	d0e3      	beq.n	800d26a <_scanf_float+0x1de>
 800d2a2:	2d05      	cmp	r5, #5
 800d2a4:	e7df      	b.n	800d266 <_scanf_float+0x1da>
 800d2a6:	2d02      	cmp	r5, #2
 800d2a8:	f47f af23 	bne.w	800d0f2 <_scanf_float+0x66>
 800d2ac:	2503      	movs	r5, #3
 800d2ae:	e7b9      	b.n	800d224 <_scanf_float+0x198>
 800d2b0:	2d06      	cmp	r5, #6
 800d2b2:	f47f af1e 	bne.w	800d0f2 <_scanf_float+0x66>
 800d2b6:	2507      	movs	r5, #7
 800d2b8:	e7b4      	b.n	800d224 <_scanf_float+0x198>
 800d2ba:	6822      	ldr	r2, [r4, #0]
 800d2bc:	0591      	lsls	r1, r2, #22
 800d2be:	f57f af18 	bpl.w	800d0f2 <_scanf_float+0x66>
 800d2c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d2c6:	9702      	str	r7, [sp, #8]
 800d2c8:	6022      	str	r2, [r4, #0]
 800d2ca:	e7ab      	b.n	800d224 <_scanf_float+0x198>
 800d2cc:	6822      	ldr	r2, [r4, #0]
 800d2ce:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d2d2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d2d6:	d005      	beq.n	800d2e4 <_scanf_float+0x258>
 800d2d8:	0550      	lsls	r0, r2, #21
 800d2da:	f57f af0a 	bpl.w	800d0f2 <_scanf_float+0x66>
 800d2de:	2f00      	cmp	r7, #0
 800d2e0:	f000 80db 	beq.w	800d49a <_scanf_float+0x40e>
 800d2e4:	0591      	lsls	r1, r2, #22
 800d2e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d2ea:	bf58      	it	pl
 800d2ec:	9902      	ldrpl	r1, [sp, #8]
 800d2ee:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d2f2:	bf58      	it	pl
 800d2f4:	1a79      	subpl	r1, r7, r1
 800d2f6:	6022      	str	r2, [r4, #0]
 800d2f8:	f04f 0700 	mov.w	r7, #0
 800d2fc:	bf58      	it	pl
 800d2fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d302:	e78f      	b.n	800d224 <_scanf_float+0x198>
 800d304:	f04f 0a03 	mov.w	sl, #3
 800d308:	e78c      	b.n	800d224 <_scanf_float+0x198>
 800d30a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d30e:	4649      	mov	r1, r9
 800d310:	4640      	mov	r0, r8
 800d312:	4798      	blx	r3
 800d314:	2800      	cmp	r0, #0
 800d316:	f43f aede 	beq.w	800d0d6 <_scanf_float+0x4a>
 800d31a:	e6ea      	b.n	800d0f2 <_scanf_float+0x66>
 800d31c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d320:	464a      	mov	r2, r9
 800d322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d326:	4640      	mov	r0, r8
 800d328:	4798      	blx	r3
 800d32a:	6923      	ldr	r3, [r4, #16]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	6123      	str	r3, [r4, #16]
 800d330:	e6ea      	b.n	800d108 <_scanf_float+0x7c>
 800d332:	1e6b      	subs	r3, r5, #1
 800d334:	2b06      	cmp	r3, #6
 800d336:	d824      	bhi.n	800d382 <_scanf_float+0x2f6>
 800d338:	2d02      	cmp	r5, #2
 800d33a:	d836      	bhi.n	800d3aa <_scanf_float+0x31e>
 800d33c:	9b01      	ldr	r3, [sp, #4]
 800d33e:	429e      	cmp	r6, r3
 800d340:	f67f aee6 	bls.w	800d110 <_scanf_float+0x84>
 800d344:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d348:	464a      	mov	r2, r9
 800d34a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d34e:	4640      	mov	r0, r8
 800d350:	4798      	blx	r3
 800d352:	6923      	ldr	r3, [r4, #16]
 800d354:	3b01      	subs	r3, #1
 800d356:	6123      	str	r3, [r4, #16]
 800d358:	e7f0      	b.n	800d33c <_scanf_float+0x2b0>
 800d35a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d35e:	464a      	mov	r2, r9
 800d360:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d364:	4640      	mov	r0, r8
 800d366:	4798      	blx	r3
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	3b01      	subs	r3, #1
 800d36c:	6123      	str	r3, [r4, #16]
 800d36e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d372:	fa5f fa8a 	uxtb.w	sl, sl
 800d376:	f1ba 0f02 	cmp.w	sl, #2
 800d37a:	d1ee      	bne.n	800d35a <_scanf_float+0x2ce>
 800d37c:	3d03      	subs	r5, #3
 800d37e:	b2ed      	uxtb	r5, r5
 800d380:	1b76      	subs	r6, r6, r5
 800d382:	6823      	ldr	r3, [r4, #0]
 800d384:	05da      	lsls	r2, r3, #23
 800d386:	d52f      	bpl.n	800d3e8 <_scanf_float+0x35c>
 800d388:	055b      	lsls	r3, r3, #21
 800d38a:	d511      	bpl.n	800d3b0 <_scanf_float+0x324>
 800d38c:	9b01      	ldr	r3, [sp, #4]
 800d38e:	429e      	cmp	r6, r3
 800d390:	f67f aebe 	bls.w	800d110 <_scanf_float+0x84>
 800d394:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d398:	464a      	mov	r2, r9
 800d39a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d39e:	4640      	mov	r0, r8
 800d3a0:	4798      	blx	r3
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	6123      	str	r3, [r4, #16]
 800d3a8:	e7f0      	b.n	800d38c <_scanf_float+0x300>
 800d3aa:	46aa      	mov	sl, r5
 800d3ac:	46b3      	mov	fp, r6
 800d3ae:	e7de      	b.n	800d36e <_scanf_float+0x2e2>
 800d3b0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d3b4:	1e75      	subs	r5, r6, #1
 800d3b6:	6923      	ldr	r3, [r4, #16]
 800d3b8:	2965      	cmp	r1, #101	@ 0x65
 800d3ba:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d3be:	6123      	str	r3, [r4, #16]
 800d3c0:	d00c      	beq.n	800d3dc <_scanf_float+0x350>
 800d3c2:	2945      	cmp	r1, #69	@ 0x45
 800d3c4:	d00a      	beq.n	800d3dc <_scanf_float+0x350>
 800d3c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d3ca:	464a      	mov	r2, r9
 800d3cc:	4640      	mov	r0, r8
 800d3ce:	1eb5      	subs	r5, r6, #2
 800d3d0:	4798      	blx	r3
 800d3d2:	6923      	ldr	r3, [r4, #16]
 800d3d4:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	6123      	str	r3, [r4, #16]
 800d3dc:	462e      	mov	r6, r5
 800d3de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d3e2:	464a      	mov	r2, r9
 800d3e4:	4640      	mov	r0, r8
 800d3e6:	4798      	blx	r3
 800d3e8:	6822      	ldr	r2, [r4, #0]
 800d3ea:	f012 0210 	ands.w	r2, r2, #16
 800d3ee:	d001      	beq.n	800d3f4 <_scanf_float+0x368>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	e68e      	b.n	800d112 <_scanf_float+0x86>
 800d3f4:	7032      	strb	r2, [r6, #0]
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d3fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d400:	d125      	bne.n	800d44e <_scanf_float+0x3c2>
 800d402:	9b02      	ldr	r3, [sp, #8]
 800d404:	429f      	cmp	r7, r3
 800d406:	d00a      	beq.n	800d41e <_scanf_float+0x392>
 800d408:	1bda      	subs	r2, r3, r7
 800d40a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d40e:	4924      	ldr	r1, [pc, #144]	@ (800d4a0 <_scanf_float+0x414>)
 800d410:	429e      	cmp	r6, r3
 800d412:	bf28      	it	cs
 800d414:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d418:	4630      	mov	r0, r6
 800d41a:	f000 f87b 	bl	800d514 <siprintf>
 800d41e:	2200      	movs	r2, #0
 800d420:	9901      	ldr	r1, [sp, #4]
 800d422:	4640      	mov	r0, r8
 800d424:	f000 ff40 	bl	800e2a8 <_strtod_r>
 800d428:	6821      	ldr	r1, [r4, #0]
 800d42a:	9b03      	ldr	r3, [sp, #12]
 800d42c:	f011 0f02 	tst.w	r1, #2
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	ec57 6b10 	vmov	r6, r7, d0
 800d436:	f103 0204 	add.w	r2, r3, #4
 800d43a:	d015      	beq.n	800d468 <_scanf_float+0x3dc>
 800d43c:	9903      	ldr	r1, [sp, #12]
 800d43e:	600a      	str	r2, [r1, #0]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	e9c3 6700 	strd	r6, r7, [r3]
 800d446:	68e3      	ldr	r3, [r4, #12]
 800d448:	3301      	adds	r3, #1
 800d44a:	60e3      	str	r3, [r4, #12]
 800d44c:	e7d0      	b.n	800d3f0 <_scanf_float+0x364>
 800d44e:	9b04      	ldr	r3, [sp, #16]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d0e4      	beq.n	800d41e <_scanf_float+0x392>
 800d454:	9905      	ldr	r1, [sp, #20]
 800d456:	230a      	movs	r3, #10
 800d458:	4640      	mov	r0, r8
 800d45a:	3101      	adds	r1, #1
 800d45c:	f000 ffa4 	bl	800e3a8 <_strtol_r>
 800d460:	9b04      	ldr	r3, [sp, #16]
 800d462:	9e05      	ldr	r6, [sp, #20]
 800d464:	1ac2      	subs	r2, r0, r3
 800d466:	e7d0      	b.n	800d40a <_scanf_float+0x37e>
 800d468:	f011 0f04 	tst.w	r1, #4
 800d46c:	9903      	ldr	r1, [sp, #12]
 800d46e:	600a      	str	r2, [r1, #0]
 800d470:	d1e6      	bne.n	800d440 <_scanf_float+0x3b4>
 800d472:	681d      	ldr	r5, [r3, #0]
 800d474:	4632      	mov	r2, r6
 800d476:	463b      	mov	r3, r7
 800d478:	4630      	mov	r0, r6
 800d47a:	4639      	mov	r1, r7
 800d47c:	f7f3 fb66 	bl	8000b4c <__aeabi_dcmpun>
 800d480:	b128      	cbz	r0, 800d48e <_scanf_float+0x402>
 800d482:	4808      	ldr	r0, [pc, #32]	@ (800d4a4 <_scanf_float+0x418>)
 800d484:	f001 f820 	bl	800e4c8 <nanf>
 800d488:	ed85 0a00 	vstr	s0, [r5]
 800d48c:	e7db      	b.n	800d446 <_scanf_float+0x3ba>
 800d48e:	4630      	mov	r0, r6
 800d490:	4639      	mov	r1, r7
 800d492:	f7f3 fbb9 	bl	8000c08 <__aeabi_d2f>
 800d496:	6028      	str	r0, [r5, #0]
 800d498:	e7d5      	b.n	800d446 <_scanf_float+0x3ba>
 800d49a:	2700      	movs	r7, #0
 800d49c:	e62e      	b.n	800d0fc <_scanf_float+0x70>
 800d49e:	bf00      	nop
 800d4a0:	08011580 	.word	0x08011580
 800d4a4:	08011721 	.word	0x08011721

0800d4a8 <sniprintf>:
 800d4a8:	b40c      	push	{r2, r3}
 800d4aa:	4b19      	ldr	r3, [pc, #100]	@ (800d510 <sniprintf+0x68>)
 800d4ac:	b530      	push	{r4, r5, lr}
 800d4ae:	1e0c      	subs	r4, r1, #0
 800d4b0:	b09d      	sub	sp, #116	@ 0x74
 800d4b2:	681d      	ldr	r5, [r3, #0]
 800d4b4:	da08      	bge.n	800d4c8 <sniprintf+0x20>
 800d4b6:	238b      	movs	r3, #139	@ 0x8b
 800d4b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4bc:	602b      	str	r3, [r5, #0]
 800d4be:	b01d      	add	sp, #116	@ 0x74
 800d4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4c4:	b002      	add	sp, #8
 800d4c6:	4770      	bx	lr
 800d4c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d4cc:	9002      	str	r0, [sp, #8]
 800d4ce:	9006      	str	r0, [sp, #24]
 800d4d0:	a902      	add	r1, sp, #8
 800d4d2:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d4d6:	f04f 0300 	mov.w	r3, #0
 800d4da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d4dc:	4628      	mov	r0, r5
 800d4de:	931b      	str	r3, [sp, #108]	@ 0x6c
 800d4e0:	bf14      	ite	ne
 800d4e2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d4e6:	4623      	moveq	r3, r4
 800d4e8:	9304      	str	r3, [sp, #16]
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d4f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d4f4:	ab21      	add	r3, sp, #132	@ 0x84
 800d4f6:	9301      	str	r3, [sp, #4]
 800d4f8:	f002 f9dc 	bl	800f8b4 <_svfiprintf_r>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	bfbc      	itt	lt
 800d500:	238b      	movlt	r3, #139	@ 0x8b
 800d502:	602b      	strlt	r3, [r5, #0]
 800d504:	2c00      	cmp	r4, #0
 800d506:	d0da      	beq.n	800d4be <sniprintf+0x16>
 800d508:	9b02      	ldr	r3, [sp, #8]
 800d50a:	2200      	movs	r2, #0
 800d50c:	701a      	strb	r2, [r3, #0]
 800d50e:	e7d6      	b.n	800d4be <sniprintf+0x16>
 800d510:	2000019c 	.word	0x2000019c

0800d514 <siprintf>:
 800d514:	b40e      	push	{r1, r2, r3}
 800d516:	b510      	push	{r4, lr}
 800d518:	b09d      	sub	sp, #116	@ 0x74
 800d51a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d51e:	2400      	movs	r4, #0
 800d520:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d522:	9002      	str	r0, [sp, #8]
 800d524:	9006      	str	r0, [sp, #24]
 800d526:	9107      	str	r1, [sp, #28]
 800d528:	9104      	str	r1, [sp, #16]
 800d52a:	4809      	ldr	r0, [pc, #36]	@ (800d550 <siprintf+0x3c>)
 800d52c:	4909      	ldr	r1, [pc, #36]	@ (800d554 <siprintf+0x40>)
 800d52e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d532:	9105      	str	r1, [sp, #20]
 800d534:	a902      	add	r1, sp, #8
 800d536:	6800      	ldr	r0, [r0, #0]
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d53c:	f002 f9ba 	bl	800f8b4 <_svfiprintf_r>
 800d540:	9b02      	ldr	r3, [sp, #8]
 800d542:	701c      	strb	r4, [r3, #0]
 800d544:	b01d      	add	sp, #116	@ 0x74
 800d546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d54a:	b003      	add	sp, #12
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	2000019c 	.word	0x2000019c
 800d554:	ffff0208 	.word	0xffff0208

0800d558 <std>:
 800d558:	2300      	movs	r3, #0
 800d55a:	b510      	push	{r4, lr}
 800d55c:	4604      	mov	r4, r0
 800d55e:	6083      	str	r3, [r0, #8]
 800d560:	8181      	strh	r1, [r0, #12]
 800d562:	4619      	mov	r1, r3
 800d564:	6643      	str	r3, [r0, #100]	@ 0x64
 800d566:	81c2      	strh	r2, [r0, #14]
 800d568:	2208      	movs	r2, #8
 800d56a:	6183      	str	r3, [r0, #24]
 800d56c:	e9c0 3300 	strd	r3, r3, [r0]
 800d570:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d574:	305c      	adds	r0, #92	@ 0x5c
 800d576:	f000 ff37 	bl	800e3e8 <memset>
 800d57a:	4b0d      	ldr	r3, [pc, #52]	@ (800d5b0 <std+0x58>)
 800d57c:	6224      	str	r4, [r4, #32]
 800d57e:	6263      	str	r3, [r4, #36]	@ 0x24
 800d580:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b4 <std+0x5c>)
 800d582:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d584:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b8 <std+0x60>)
 800d586:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d588:	4b0c      	ldr	r3, [pc, #48]	@ (800d5bc <std+0x64>)
 800d58a:	6323      	str	r3, [r4, #48]	@ 0x30
 800d58c:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c0 <std+0x68>)
 800d58e:	429c      	cmp	r4, r3
 800d590:	d006      	beq.n	800d5a0 <std+0x48>
 800d592:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d596:	4294      	cmp	r4, r2
 800d598:	d002      	beq.n	800d5a0 <std+0x48>
 800d59a:	33d0      	adds	r3, #208	@ 0xd0
 800d59c:	429c      	cmp	r4, r3
 800d59e:	d105      	bne.n	800d5ac <std+0x54>
 800d5a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5a8:	f000 bf62 	b.w	800e470 <__retarget_lock_init_recursive>
 800d5ac:	bd10      	pop	{r4, pc}
 800d5ae:	bf00      	nop
 800d5b0:	08010701 	.word	0x08010701
 800d5b4:	08010723 	.word	0x08010723
 800d5b8:	0801075b 	.word	0x0801075b
 800d5bc:	0801077f 	.word	0x0801077f
 800d5c0:	20000448 	.word	0x20000448

0800d5c4 <stdio_exit_handler>:
 800d5c4:	4a02      	ldr	r2, [pc, #8]	@ (800d5d0 <stdio_exit_handler+0xc>)
 800d5c6:	4903      	ldr	r1, [pc, #12]	@ (800d5d4 <stdio_exit_handler+0x10>)
 800d5c8:	4803      	ldr	r0, [pc, #12]	@ (800d5d8 <stdio_exit_handler+0x14>)
 800d5ca:	f000 beef 	b.w	800e3ac <_fwalk_sglue>
 800d5ce:	bf00      	nop
 800d5d0:	20000024 	.word	0x20000024
 800d5d4:	0800fd2d 	.word	0x0800fd2d
 800d5d8:	200001a0 	.word	0x200001a0

0800d5dc <cleanup_stdio>:
 800d5dc:	6841      	ldr	r1, [r0, #4]
 800d5de:	4b0c      	ldr	r3, [pc, #48]	@ (800d610 <cleanup_stdio+0x34>)
 800d5e0:	4299      	cmp	r1, r3
 800d5e2:	b510      	push	{r4, lr}
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	d001      	beq.n	800d5ec <cleanup_stdio+0x10>
 800d5e8:	f002 fba0 	bl	800fd2c <_fflush_r>
 800d5ec:	68a1      	ldr	r1, [r4, #8]
 800d5ee:	4b09      	ldr	r3, [pc, #36]	@ (800d614 <cleanup_stdio+0x38>)
 800d5f0:	4299      	cmp	r1, r3
 800d5f2:	d002      	beq.n	800d5fa <cleanup_stdio+0x1e>
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f002 fb99 	bl	800fd2c <_fflush_r>
 800d5fa:	68e1      	ldr	r1, [r4, #12]
 800d5fc:	4b06      	ldr	r3, [pc, #24]	@ (800d618 <cleanup_stdio+0x3c>)
 800d5fe:	4299      	cmp	r1, r3
 800d600:	d004      	beq.n	800d60c <cleanup_stdio+0x30>
 800d602:	4620      	mov	r0, r4
 800d604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d608:	f002 bb90 	b.w	800fd2c <_fflush_r>
 800d60c:	bd10      	pop	{r4, pc}
 800d60e:	bf00      	nop
 800d610:	20000448 	.word	0x20000448
 800d614:	200004b0 	.word	0x200004b0
 800d618:	20000518 	.word	0x20000518

0800d61c <global_stdio_init.part.0>:
 800d61c:	b510      	push	{r4, lr}
 800d61e:	4b0b      	ldr	r3, [pc, #44]	@ (800d64c <global_stdio_init.part.0+0x30>)
 800d620:	2104      	movs	r1, #4
 800d622:	4c0b      	ldr	r4, [pc, #44]	@ (800d650 <global_stdio_init.part.0+0x34>)
 800d624:	4a0b      	ldr	r2, [pc, #44]	@ (800d654 <global_stdio_init.part.0+0x38>)
 800d626:	4620      	mov	r0, r4
 800d628:	601a      	str	r2, [r3, #0]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f7ff ff94 	bl	800d558 <std>
 800d630:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d634:	2201      	movs	r2, #1
 800d636:	2109      	movs	r1, #9
 800d638:	f7ff ff8e 	bl	800d558 <std>
 800d63c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d640:	2202      	movs	r2, #2
 800d642:	2112      	movs	r1, #18
 800d644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d648:	f7ff bf86 	b.w	800d558 <std>
 800d64c:	20000580 	.word	0x20000580
 800d650:	20000448 	.word	0x20000448
 800d654:	0800d5c5 	.word	0x0800d5c5

0800d658 <__sfp_lock_acquire>:
 800d658:	4801      	ldr	r0, [pc, #4]	@ (800d660 <__sfp_lock_acquire+0x8>)
 800d65a:	f000 bf0a 	b.w	800e472 <__retarget_lock_acquire_recursive>
 800d65e:	bf00      	nop
 800d660:	20000585 	.word	0x20000585

0800d664 <__sfp_lock_release>:
 800d664:	4801      	ldr	r0, [pc, #4]	@ (800d66c <__sfp_lock_release+0x8>)
 800d666:	f000 bf05 	b.w	800e474 <__retarget_lock_release_recursive>
 800d66a:	bf00      	nop
 800d66c:	20000585 	.word	0x20000585

0800d670 <__sinit>:
 800d670:	b510      	push	{r4, lr}
 800d672:	4604      	mov	r4, r0
 800d674:	f7ff fff0 	bl	800d658 <__sfp_lock_acquire>
 800d678:	6a23      	ldr	r3, [r4, #32]
 800d67a:	b11b      	cbz	r3, 800d684 <__sinit+0x14>
 800d67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d680:	f7ff bff0 	b.w	800d664 <__sfp_lock_release>
 800d684:	4b04      	ldr	r3, [pc, #16]	@ (800d698 <__sinit+0x28>)
 800d686:	6223      	str	r3, [r4, #32]
 800d688:	4b04      	ldr	r3, [pc, #16]	@ (800d69c <__sinit+0x2c>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1f5      	bne.n	800d67c <__sinit+0xc>
 800d690:	f7ff ffc4 	bl	800d61c <global_stdio_init.part.0>
 800d694:	e7f2      	b.n	800d67c <__sinit+0xc>
 800d696:	bf00      	nop
 800d698:	0800d5dd 	.word	0x0800d5dd
 800d69c:	20000580 	.word	0x20000580

0800d6a0 <sulp>:
 800d6a0:	b570      	push	{r4, r5, r6, lr}
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	4616      	mov	r6, r2
 800d6a8:	ec45 4b10 	vmov	d0, r4, r5
 800d6ac:	f002 fee6 	bl	801047c <__ulp>
 800d6b0:	ec51 0b10 	vmov	r0, r1, d0
 800d6b4:	b17e      	cbz	r6, 800d6d6 <sulp+0x36>
 800d6b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d6ba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	dd09      	ble.n	800d6d6 <sulp+0x36>
 800d6c2:	051b      	lsls	r3, r3, #20
 800d6c4:	2400      	movs	r4, #0
 800d6c6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d6ca:	4622      	mov	r2, r4
 800d6cc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d6d0:	462b      	mov	r3, r5
 800d6d2:	f7f2 ffa1 	bl	8000618 <__aeabi_dmul>
 800d6d6:	ec41 0b10 	vmov	d0, r0, r1
 800d6da:	bd70      	pop	{r4, r5, r6, pc}
 800d6dc:	0000      	movs	r0, r0
	...

0800d6e0 <_strtod_l>:
 800d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e4:	b09f      	sub	sp, #124	@ 0x7c
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	f04f 0a00 	mov.w	sl, #0
 800d6ec:	f04f 0b00 	mov.w	fp, #0
 800d6f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	9005      	str	r0, [sp, #20]
 800d6f6:	921a      	str	r2, [sp, #104]	@ 0x68
 800d6f8:	460a      	mov	r2, r1
 800d6fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6fc:	7811      	ldrb	r1, [r2, #0]
 800d6fe:	292b      	cmp	r1, #43	@ 0x2b
 800d700:	d04a      	beq.n	800d798 <_strtod_l+0xb8>
 800d702:	d838      	bhi.n	800d776 <_strtod_l+0x96>
 800d704:	290d      	cmp	r1, #13
 800d706:	d832      	bhi.n	800d76e <_strtod_l+0x8e>
 800d708:	2908      	cmp	r1, #8
 800d70a:	d832      	bhi.n	800d772 <_strtod_l+0x92>
 800d70c:	2900      	cmp	r1, #0
 800d70e:	d03b      	beq.n	800d788 <_strtod_l+0xa8>
 800d710:	2200      	movs	r2, #0
 800d712:	920e      	str	r2, [sp, #56]	@ 0x38
 800d714:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d716:	782a      	ldrb	r2, [r5, #0]
 800d718:	2a30      	cmp	r2, #48	@ 0x30
 800d71a:	f040 80b2 	bne.w	800d882 <_strtod_l+0x1a2>
 800d71e:	786a      	ldrb	r2, [r5, #1]
 800d720:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d724:	2a58      	cmp	r2, #88	@ 0x58
 800d726:	d16e      	bne.n	800d806 <_strtod_l+0x126>
 800d728:	9302      	str	r3, [sp, #8]
 800d72a:	a919      	add	r1, sp, #100	@ 0x64
 800d72c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d72e:	4a90      	ldr	r2, [pc, #576]	@ (800d970 <_strtod_l+0x290>)
 800d730:	9301      	str	r3, [sp, #4]
 800d732:	ab1a      	add	r3, sp, #104	@ 0x68
 800d734:	9805      	ldr	r0, [sp, #20]
 800d736:	9300      	str	r3, [sp, #0]
 800d738:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d73a:	f001 fd91 	bl	800f260 <__gethex>
 800d73e:	f010 060f 	ands.w	r6, r0, #15
 800d742:	4604      	mov	r4, r0
 800d744:	d005      	beq.n	800d752 <_strtod_l+0x72>
 800d746:	2e06      	cmp	r6, #6
 800d748:	d128      	bne.n	800d79c <_strtod_l+0xbc>
 800d74a:	3501      	adds	r5, #1
 800d74c:	2300      	movs	r3, #0
 800d74e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d750:	930e      	str	r3, [sp, #56]	@ 0x38
 800d752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d754:	2b00      	cmp	r3, #0
 800d756:	f040 858e 	bne.w	800e276 <_strtod_l+0xb96>
 800d75a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d75c:	b1cb      	cbz	r3, 800d792 <_strtod_l+0xb2>
 800d75e:	4652      	mov	r2, sl
 800d760:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d764:	ec43 2b10 	vmov	d0, r2, r3
 800d768:	b01f      	add	sp, #124	@ 0x7c
 800d76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76e:	2920      	cmp	r1, #32
 800d770:	d1ce      	bne.n	800d710 <_strtod_l+0x30>
 800d772:	3201      	adds	r2, #1
 800d774:	e7c1      	b.n	800d6fa <_strtod_l+0x1a>
 800d776:	292d      	cmp	r1, #45	@ 0x2d
 800d778:	d1ca      	bne.n	800d710 <_strtod_l+0x30>
 800d77a:	2101      	movs	r1, #1
 800d77c:	910e      	str	r1, [sp, #56]	@ 0x38
 800d77e:	1c51      	adds	r1, r2, #1
 800d780:	9119      	str	r1, [sp, #100]	@ 0x64
 800d782:	7852      	ldrb	r2, [r2, #1]
 800d784:	2a00      	cmp	r2, #0
 800d786:	d1c5      	bne.n	800d714 <_strtod_l+0x34>
 800d788:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d78a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f040 8570 	bne.w	800e272 <_strtod_l+0xb92>
 800d792:	4652      	mov	r2, sl
 800d794:	465b      	mov	r3, fp
 800d796:	e7e5      	b.n	800d764 <_strtod_l+0x84>
 800d798:	2100      	movs	r1, #0
 800d79a:	e7ef      	b.n	800d77c <_strtod_l+0x9c>
 800d79c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d79e:	b13a      	cbz	r2, 800d7b0 <_strtod_l+0xd0>
 800d7a0:	2135      	movs	r1, #53	@ 0x35
 800d7a2:	a81c      	add	r0, sp, #112	@ 0x70
 800d7a4:	f002 ff68 	bl	8010678 <__copybits>
 800d7a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7aa:	9805      	ldr	r0, [sp, #20]
 800d7ac:	f002 fb32 	bl	800fe14 <_Bfree>
 800d7b0:	3e01      	subs	r6, #1
 800d7b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d7b4:	2e04      	cmp	r6, #4
 800d7b6:	d806      	bhi.n	800d7c6 <_strtod_l+0xe6>
 800d7b8:	e8df f006 	tbb	[pc, r6]
 800d7bc:	201d0314 	.word	0x201d0314
 800d7c0:	14          	.byte	0x14
 800d7c1:	00          	.byte	0x00
 800d7c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d7c6:	05e1      	lsls	r1, r4, #23
 800d7c8:	bf48      	it	mi
 800d7ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d7ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d7d2:	0d1b      	lsrs	r3, r3, #20
 800d7d4:	051b      	lsls	r3, r3, #20
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1bb      	bne.n	800d752 <_strtod_l+0x72>
 800d7da:	f000 fe1f 	bl	800e41c <__errno>
 800d7de:	2322      	movs	r3, #34	@ 0x22
 800d7e0:	6003      	str	r3, [r0, #0]
 800d7e2:	e7b6      	b.n	800d752 <_strtod_l+0x72>
 800d7e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d7e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d7ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d7f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d7f4:	e7e7      	b.n	800d7c6 <_strtod_l+0xe6>
 800d7f6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d978 <_strtod_l+0x298>
 800d7fa:	e7e4      	b.n	800d7c6 <_strtod_l+0xe6>
 800d7fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d800:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d804:	e7df      	b.n	800d7c6 <_strtod_l+0xe6>
 800d806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d808:	1c5a      	adds	r2, r3, #1
 800d80a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d80c:	785b      	ldrb	r3, [r3, #1]
 800d80e:	2b30      	cmp	r3, #48	@ 0x30
 800d810:	d0f9      	beq.n	800d806 <_strtod_l+0x126>
 800d812:	2b00      	cmp	r3, #0
 800d814:	d09d      	beq.n	800d752 <_strtod_l+0x72>
 800d816:	2301      	movs	r3, #1
 800d818:	2700      	movs	r7, #0
 800d81a:	9308      	str	r3, [sp, #32]
 800d81c:	220a      	movs	r2, #10
 800d81e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d820:	46b9      	mov	r9, r7
 800d822:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d824:	930c      	str	r3, [sp, #48]	@ 0x30
 800d826:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d828:	7805      	ldrb	r5, [r0, #0]
 800d82a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d82e:	b2d9      	uxtb	r1, r3
 800d830:	2909      	cmp	r1, #9
 800d832:	d928      	bls.n	800d886 <_strtod_l+0x1a6>
 800d834:	2201      	movs	r2, #1
 800d836:	494f      	ldr	r1, [pc, #316]	@ (800d974 <_strtod_l+0x294>)
 800d838:	f000 fdde 	bl	800e3f8 <strncmp>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d032      	beq.n	800d8a6 <_strtod_l+0x1c6>
 800d840:	2000      	movs	r0, #0
 800d842:	462a      	mov	r2, r5
 800d844:	464d      	mov	r5, r9
 800d846:	4603      	mov	r3, r0
 800d848:	900a      	str	r0, [sp, #40]	@ 0x28
 800d84a:	2a65      	cmp	r2, #101	@ 0x65
 800d84c:	d001      	beq.n	800d852 <_strtod_l+0x172>
 800d84e:	2a45      	cmp	r2, #69	@ 0x45
 800d850:	d114      	bne.n	800d87c <_strtod_l+0x19c>
 800d852:	b91d      	cbnz	r5, 800d85c <_strtod_l+0x17c>
 800d854:	9a08      	ldr	r2, [sp, #32]
 800d856:	4302      	orrs	r2, r0
 800d858:	d096      	beq.n	800d788 <_strtod_l+0xa8>
 800d85a:	2500      	movs	r5, #0
 800d85c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d85e:	1c62      	adds	r2, r4, #1
 800d860:	9219      	str	r2, [sp, #100]	@ 0x64
 800d862:	7862      	ldrb	r2, [r4, #1]
 800d864:	2a2b      	cmp	r2, #43	@ 0x2b
 800d866:	d079      	beq.n	800d95c <_strtod_l+0x27c>
 800d868:	2a2d      	cmp	r2, #45	@ 0x2d
 800d86a:	d07d      	beq.n	800d968 <_strtod_l+0x288>
 800d86c:	f04f 0c00 	mov.w	ip, #0
 800d870:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d874:	2909      	cmp	r1, #9
 800d876:	f240 8085 	bls.w	800d984 <_strtod_l+0x2a4>
 800d87a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d87c:	f04f 0800 	mov.w	r8, #0
 800d880:	e0a5      	b.n	800d9ce <_strtod_l+0x2ee>
 800d882:	2300      	movs	r3, #0
 800d884:	e7c8      	b.n	800d818 <_strtod_l+0x138>
 800d886:	f1b9 0f08 	cmp.w	r9, #8
 800d88a:	f100 0001 	add.w	r0, r0, #1
 800d88e:	f109 0901 	add.w	r9, r9, #1
 800d892:	bfd4      	ite	le
 800d894:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d896:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d89a:	9019      	str	r0, [sp, #100]	@ 0x64
 800d89c:	bfdc      	itt	le
 800d89e:	fb02 3301 	mlale	r3, r2, r1, r3
 800d8a2:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d8a4:	e7bf      	b.n	800d826 <_strtod_l+0x146>
 800d8a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8a8:	1c5a      	adds	r2, r3, #1
 800d8aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8ac:	785a      	ldrb	r2, [r3, #1]
 800d8ae:	f1b9 0f00 	cmp.w	r9, #0
 800d8b2:	d03a      	beq.n	800d92a <_strtod_l+0x24a>
 800d8b4:	464d      	mov	r5, r9
 800d8b6:	900a      	str	r0, [sp, #40]	@ 0x28
 800d8b8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d8bc:	2b09      	cmp	r3, #9
 800d8be:	d912      	bls.n	800d8e6 <_strtod_l+0x206>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e7c2      	b.n	800d84a <_strtod_l+0x16a>
 800d8c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	1c5a      	adds	r2, r3, #1
 800d8ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8cc:	785a      	ldrb	r2, [r3, #1]
 800d8ce:	2a30      	cmp	r2, #48	@ 0x30
 800d8d0:	d0f8      	beq.n	800d8c4 <_strtod_l+0x1e4>
 800d8d2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d8d6:	2b08      	cmp	r3, #8
 800d8d8:	f200 84d2 	bhi.w	800e280 <_strtod_l+0xba0>
 800d8dc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d8de:	2000      	movs	r0, #0
 800d8e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d8e6:	3a30      	subs	r2, #48	@ 0x30
 800d8e8:	f100 0301 	add.w	r3, r0, #1
 800d8ec:	d017      	beq.n	800d91e <_strtod_l+0x23e>
 800d8ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d8f0:	462e      	mov	r6, r5
 800d8f2:	f04f 0e0a 	mov.w	lr, #10
 800d8f6:	4419      	add	r1, r3
 800d8f8:	910a      	str	r1, [sp, #40]	@ 0x28
 800d8fa:	1c71      	adds	r1, r6, #1
 800d8fc:	eba1 0c05 	sub.w	ip, r1, r5
 800d900:	4563      	cmp	r3, ip
 800d902:	dc14      	bgt.n	800d92e <_strtod_l+0x24e>
 800d904:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d908:	182b      	adds	r3, r5, r0
 800d90a:	3501      	adds	r5, #1
 800d90c:	2b08      	cmp	r3, #8
 800d90e:	4405      	add	r5, r0
 800d910:	dc1a      	bgt.n	800d948 <_strtod_l+0x268>
 800d912:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d914:	230a      	movs	r3, #10
 800d916:	fb03 2301 	mla	r3, r3, r1, r2
 800d91a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d91c:	2300      	movs	r3, #0
 800d91e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d920:	4618      	mov	r0, r3
 800d922:	1c51      	adds	r1, r2, #1
 800d924:	9119      	str	r1, [sp, #100]	@ 0x64
 800d926:	7852      	ldrb	r2, [r2, #1]
 800d928:	e7c6      	b.n	800d8b8 <_strtod_l+0x1d8>
 800d92a:	4648      	mov	r0, r9
 800d92c:	e7cf      	b.n	800d8ce <_strtod_l+0x1ee>
 800d92e:	2e08      	cmp	r6, #8
 800d930:	dc05      	bgt.n	800d93e <_strtod_l+0x25e>
 800d932:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d934:	fb0e f606 	mul.w	r6, lr, r6
 800d938:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d93a:	460e      	mov	r6, r1
 800d93c:	e7dd      	b.n	800d8fa <_strtod_l+0x21a>
 800d93e:	2910      	cmp	r1, #16
 800d940:	bfd8      	it	le
 800d942:	fb0e f707 	mulle.w	r7, lr, r7
 800d946:	e7f8      	b.n	800d93a <_strtod_l+0x25a>
 800d948:	2b0f      	cmp	r3, #15
 800d94a:	bfdc      	itt	le
 800d94c:	230a      	movle	r3, #10
 800d94e:	fb03 2707 	mlale	r7, r3, r7, r2
 800d952:	e7e3      	b.n	800d91c <_strtod_l+0x23c>
 800d954:	2300      	movs	r3, #0
 800d956:	930a      	str	r3, [sp, #40]	@ 0x28
 800d958:	2301      	movs	r3, #1
 800d95a:	e77b      	b.n	800d854 <_strtod_l+0x174>
 800d95c:	f04f 0c00 	mov.w	ip, #0
 800d960:	1ca2      	adds	r2, r4, #2
 800d962:	9219      	str	r2, [sp, #100]	@ 0x64
 800d964:	78a2      	ldrb	r2, [r4, #2]
 800d966:	e783      	b.n	800d870 <_strtod_l+0x190>
 800d968:	f04f 0c01 	mov.w	ip, #1
 800d96c:	e7f8      	b.n	800d960 <_strtod_l+0x280>
 800d96e:	bf00      	nop
 800d970:	08011738 	.word	0x08011738
 800d974:	08011585 	.word	0x08011585
 800d978:	7ff00000 	.word	0x7ff00000
 800d97c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d97e:	1c51      	adds	r1, r2, #1
 800d980:	9119      	str	r1, [sp, #100]	@ 0x64
 800d982:	7852      	ldrb	r2, [r2, #1]
 800d984:	2a30      	cmp	r2, #48	@ 0x30
 800d986:	d0f9      	beq.n	800d97c <_strtod_l+0x29c>
 800d988:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d98c:	2908      	cmp	r1, #8
 800d98e:	f63f af75 	bhi.w	800d87c <_strtod_l+0x19c>
 800d992:	3a30      	subs	r2, #48	@ 0x30
 800d994:	f04f 080a 	mov.w	r8, #10
 800d998:	9209      	str	r2, [sp, #36]	@ 0x24
 800d99a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d99c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d99e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d9a0:	1c56      	adds	r6, r2, #1
 800d9a2:	9619      	str	r6, [sp, #100]	@ 0x64
 800d9a4:	7852      	ldrb	r2, [r2, #1]
 800d9a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d9aa:	f1be 0f09 	cmp.w	lr, #9
 800d9ae:	d939      	bls.n	800da24 <_strtod_l+0x344>
 800d9b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d9b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d9b6:	1a76      	subs	r6, r6, r1
 800d9b8:	2e08      	cmp	r6, #8
 800d9ba:	dc03      	bgt.n	800d9c4 <_strtod_l+0x2e4>
 800d9bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d9be:	4588      	cmp	r8, r1
 800d9c0:	bfa8      	it	ge
 800d9c2:	4688      	movge	r8, r1
 800d9c4:	f1bc 0f00 	cmp.w	ip, #0
 800d9c8:	d001      	beq.n	800d9ce <_strtod_l+0x2ee>
 800d9ca:	f1c8 0800 	rsb	r8, r8, #0
 800d9ce:	2d00      	cmp	r5, #0
 800d9d0:	d14e      	bne.n	800da70 <_strtod_l+0x390>
 800d9d2:	9908      	ldr	r1, [sp, #32]
 800d9d4:	4308      	orrs	r0, r1
 800d9d6:	f47f aebc 	bne.w	800d752 <_strtod_l+0x72>
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f47f aed4 	bne.w	800d788 <_strtod_l+0xa8>
 800d9e0:	2a69      	cmp	r2, #105	@ 0x69
 800d9e2:	d028      	beq.n	800da36 <_strtod_l+0x356>
 800d9e4:	dc25      	bgt.n	800da32 <_strtod_l+0x352>
 800d9e6:	2a49      	cmp	r2, #73	@ 0x49
 800d9e8:	d025      	beq.n	800da36 <_strtod_l+0x356>
 800d9ea:	2a4e      	cmp	r2, #78	@ 0x4e
 800d9ec:	f47f aecc 	bne.w	800d788 <_strtod_l+0xa8>
 800d9f0:	499a      	ldr	r1, [pc, #616]	@ (800dc5c <_strtod_l+0x57c>)
 800d9f2:	a819      	add	r0, sp, #100	@ 0x64
 800d9f4:	f001 fe54 	bl	800f6a0 <__match>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	f43f aec5 	beq.w	800d788 <_strtod_l+0xa8>
 800d9fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b28      	cmp	r3, #40	@ 0x28
 800da04:	d12e      	bne.n	800da64 <_strtod_l+0x384>
 800da06:	aa1c      	add	r2, sp, #112	@ 0x70
 800da08:	4995      	ldr	r1, [pc, #596]	@ (800dc60 <_strtod_l+0x580>)
 800da0a:	a819      	add	r0, sp, #100	@ 0x64
 800da0c:	f001 fe5c 	bl	800f6c8 <__hexnan>
 800da10:	2805      	cmp	r0, #5
 800da12:	d127      	bne.n	800da64 <_strtod_l+0x384>
 800da14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800da16:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800da1a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800da1e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800da22:	e696      	b.n	800d752 <_strtod_l+0x72>
 800da24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da26:	fb08 2101 	mla	r1, r8, r1, r2
 800da2a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800da2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800da30:	e7b5      	b.n	800d99e <_strtod_l+0x2be>
 800da32:	2a6e      	cmp	r2, #110	@ 0x6e
 800da34:	e7da      	b.n	800d9ec <_strtod_l+0x30c>
 800da36:	498b      	ldr	r1, [pc, #556]	@ (800dc64 <_strtod_l+0x584>)
 800da38:	a819      	add	r0, sp, #100	@ 0x64
 800da3a:	f001 fe31 	bl	800f6a0 <__match>
 800da3e:	2800      	cmp	r0, #0
 800da40:	f43f aea2 	beq.w	800d788 <_strtod_l+0xa8>
 800da44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da46:	a819      	add	r0, sp, #100	@ 0x64
 800da48:	4987      	ldr	r1, [pc, #540]	@ (800dc68 <_strtod_l+0x588>)
 800da4a:	3b01      	subs	r3, #1
 800da4c:	9319      	str	r3, [sp, #100]	@ 0x64
 800da4e:	f001 fe27 	bl	800f6a0 <__match>
 800da52:	b910      	cbnz	r0, 800da5a <_strtod_l+0x37a>
 800da54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da56:	3301      	adds	r3, #1
 800da58:	9319      	str	r3, [sp, #100]	@ 0x64
 800da5a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800dc78 <_strtod_l+0x598>
 800da5e:	f04f 0a00 	mov.w	sl, #0
 800da62:	e676      	b.n	800d752 <_strtod_l+0x72>
 800da64:	4881      	ldr	r0, [pc, #516]	@ (800dc6c <_strtod_l+0x58c>)
 800da66:	f000 fd27 	bl	800e4b8 <nan>
 800da6a:	ec5b ab10 	vmov	sl, fp, d0
 800da6e:	e670      	b.n	800d752 <_strtod_l+0x72>
 800da70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da72:	f1b9 0f00 	cmp.w	r9, #0
 800da76:	bf08      	it	eq
 800da78:	46a9      	moveq	r9, r5
 800da7a:	2d10      	cmp	r5, #16
 800da7c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800da7e:	eba8 0303 	sub.w	r3, r8, r3
 800da82:	462c      	mov	r4, r5
 800da84:	bfa8      	it	ge
 800da86:	2410      	movge	r4, #16
 800da88:	9309      	str	r3, [sp, #36]	@ 0x24
 800da8a:	f7f2 fd4b 	bl	8000524 <__aeabi_ui2d>
 800da8e:	2d09      	cmp	r5, #9
 800da90:	4682      	mov	sl, r0
 800da92:	468b      	mov	fp, r1
 800da94:	dc13      	bgt.n	800dabe <_strtod_l+0x3de>
 800da96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da98:	2b00      	cmp	r3, #0
 800da9a:	f43f ae5a 	beq.w	800d752 <_strtod_l+0x72>
 800da9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daa0:	dd78      	ble.n	800db94 <_strtod_l+0x4b4>
 800daa2:	2b16      	cmp	r3, #22
 800daa4:	dc5f      	bgt.n	800db66 <_strtod_l+0x486>
 800daa6:	4972      	ldr	r1, [pc, #456]	@ (800dc70 <_strtod_l+0x590>)
 800daa8:	4652      	mov	r2, sl
 800daaa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800daae:	465b      	mov	r3, fp
 800dab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dab4:	f7f2 fdb0 	bl	8000618 <__aeabi_dmul>
 800dab8:	4682      	mov	sl, r0
 800daba:	468b      	mov	fp, r1
 800dabc:	e649      	b.n	800d752 <_strtod_l+0x72>
 800dabe:	4b6c      	ldr	r3, [pc, #432]	@ (800dc70 <_strtod_l+0x590>)
 800dac0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dac4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dac8:	f7f2 fda6 	bl	8000618 <__aeabi_dmul>
 800dacc:	4682      	mov	sl, r0
 800dace:	468b      	mov	fp, r1
 800dad0:	4638      	mov	r0, r7
 800dad2:	f7f2 fd27 	bl	8000524 <__aeabi_ui2d>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	4650      	mov	r0, sl
 800dadc:	4659      	mov	r1, fp
 800dade:	f7f2 fbe5 	bl	80002ac <__adddf3>
 800dae2:	2d0f      	cmp	r5, #15
 800dae4:	4682      	mov	sl, r0
 800dae6:	468b      	mov	fp, r1
 800dae8:	ddd5      	ble.n	800da96 <_strtod_l+0x3b6>
 800daea:	1b2c      	subs	r4, r5, r4
 800daec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daee:	441c      	add	r4, r3
 800daf0:	2c00      	cmp	r4, #0
 800daf2:	f340 8093 	ble.w	800dc1c <_strtod_l+0x53c>
 800daf6:	f014 030f 	ands.w	r3, r4, #15
 800dafa:	d00a      	beq.n	800db12 <_strtod_l+0x432>
 800dafc:	495c      	ldr	r1, [pc, #368]	@ (800dc70 <_strtod_l+0x590>)
 800dafe:	4652      	mov	r2, sl
 800db00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db04:	465b      	mov	r3, fp
 800db06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db0a:	f7f2 fd85 	bl	8000618 <__aeabi_dmul>
 800db0e:	4682      	mov	sl, r0
 800db10:	468b      	mov	fp, r1
 800db12:	f034 040f 	bics.w	r4, r4, #15
 800db16:	d073      	beq.n	800dc00 <_strtod_l+0x520>
 800db18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800db1c:	dd49      	ble.n	800dbb2 <_strtod_l+0x4d2>
 800db1e:	2400      	movs	r4, #0
 800db20:	46a0      	mov	r8, r4
 800db22:	46a1      	mov	r9, r4
 800db24:	940b      	str	r4, [sp, #44]	@ 0x2c
 800db26:	2322      	movs	r3, #34	@ 0x22
 800db28:	9a05      	ldr	r2, [sp, #20]
 800db2a:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800dc78 <_strtod_l+0x598>
 800db2e:	f04f 0a00 	mov.w	sl, #0
 800db32:	6013      	str	r3, [r2, #0]
 800db34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db36:	2b00      	cmp	r3, #0
 800db38:	f43f ae0b 	beq.w	800d752 <_strtod_l+0x72>
 800db3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db3e:	9805      	ldr	r0, [sp, #20]
 800db40:	f002 f968 	bl	800fe14 <_Bfree>
 800db44:	4649      	mov	r1, r9
 800db46:	9805      	ldr	r0, [sp, #20]
 800db48:	f002 f964 	bl	800fe14 <_Bfree>
 800db4c:	4641      	mov	r1, r8
 800db4e:	9805      	ldr	r0, [sp, #20]
 800db50:	f002 f960 	bl	800fe14 <_Bfree>
 800db54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db56:	9805      	ldr	r0, [sp, #20]
 800db58:	f002 f95c 	bl	800fe14 <_Bfree>
 800db5c:	4621      	mov	r1, r4
 800db5e:	9805      	ldr	r0, [sp, #20]
 800db60:	f002 f958 	bl	800fe14 <_Bfree>
 800db64:	e5f5      	b.n	800d752 <_strtod_l+0x72>
 800db66:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800db6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db6c:	4293      	cmp	r3, r2
 800db6e:	dbbc      	blt.n	800daea <_strtod_l+0x40a>
 800db70:	f1c5 050f 	rsb	r5, r5, #15
 800db74:	4c3e      	ldr	r4, [pc, #248]	@ (800dc70 <_strtod_l+0x590>)
 800db76:	4652      	mov	r2, sl
 800db78:	465b      	mov	r3, fp
 800db7a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800db7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db82:	f7f2 fd49 	bl	8000618 <__aeabi_dmul>
 800db86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db88:	1b5d      	subs	r5, r3, r5
 800db8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800db8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800db92:	e78f      	b.n	800dab4 <_strtod_l+0x3d4>
 800db94:	3316      	adds	r3, #22
 800db96:	dba8      	blt.n	800daea <_strtod_l+0x40a>
 800db98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db9a:	4650      	mov	r0, sl
 800db9c:	4659      	mov	r1, fp
 800db9e:	eba3 0808 	sub.w	r8, r3, r8
 800dba2:	4b33      	ldr	r3, [pc, #204]	@ (800dc70 <_strtod_l+0x590>)
 800dba4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dba8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dbac:	f7f2 fe5e 	bl	800086c <__aeabi_ddiv>
 800dbb0:	e782      	b.n	800dab8 <_strtod_l+0x3d8>
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	1124      	asrs	r4, r4, #4
 800dbb6:	4650      	mov	r0, sl
 800dbb8:	4659      	mov	r1, fp
 800dbba:	4f2e      	ldr	r7, [pc, #184]	@ (800dc74 <_strtod_l+0x594>)
 800dbbc:	461e      	mov	r6, r3
 800dbbe:	2c01      	cmp	r4, #1
 800dbc0:	dc21      	bgt.n	800dc06 <_strtod_l+0x526>
 800dbc2:	b10b      	cbz	r3, 800dbc8 <_strtod_l+0x4e8>
 800dbc4:	4682      	mov	sl, r0
 800dbc6:	468b      	mov	fp, r1
 800dbc8:	492a      	ldr	r1, [pc, #168]	@ (800dc74 <_strtod_l+0x594>)
 800dbca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dbce:	4652      	mov	r2, sl
 800dbd0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dbd4:	465b      	mov	r3, fp
 800dbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbda:	f7f2 fd1d 	bl	8000618 <__aeabi_dmul>
 800dbde:	4b26      	ldr	r3, [pc, #152]	@ (800dc78 <_strtod_l+0x598>)
 800dbe0:	460a      	mov	r2, r1
 800dbe2:	4682      	mov	sl, r0
 800dbe4:	400b      	ands	r3, r1
 800dbe6:	4925      	ldr	r1, [pc, #148]	@ (800dc7c <_strtod_l+0x59c>)
 800dbe8:	428b      	cmp	r3, r1
 800dbea:	d898      	bhi.n	800db1e <_strtod_l+0x43e>
 800dbec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dbf0:	428b      	cmp	r3, r1
 800dbf2:	bf86      	itte	hi
 800dbf4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800dc80 <_strtod_l+0x5a0>
 800dbf8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800dbfc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dc00:	2300      	movs	r3, #0
 800dc02:	9308      	str	r3, [sp, #32]
 800dc04:	e076      	b.n	800dcf4 <_strtod_l+0x614>
 800dc06:	07e2      	lsls	r2, r4, #31
 800dc08:	d504      	bpl.n	800dc14 <_strtod_l+0x534>
 800dc0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc0e:	f7f2 fd03 	bl	8000618 <__aeabi_dmul>
 800dc12:	2301      	movs	r3, #1
 800dc14:	3601      	adds	r6, #1
 800dc16:	1064      	asrs	r4, r4, #1
 800dc18:	3708      	adds	r7, #8
 800dc1a:	e7d0      	b.n	800dbbe <_strtod_l+0x4de>
 800dc1c:	d0f0      	beq.n	800dc00 <_strtod_l+0x520>
 800dc1e:	4264      	negs	r4, r4
 800dc20:	f014 020f 	ands.w	r2, r4, #15
 800dc24:	d00a      	beq.n	800dc3c <_strtod_l+0x55c>
 800dc26:	4b12      	ldr	r3, [pc, #72]	@ (800dc70 <_strtod_l+0x590>)
 800dc28:	4650      	mov	r0, sl
 800dc2a:	4659      	mov	r1, fp
 800dc2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	f7f2 fe1a 	bl	800086c <__aeabi_ddiv>
 800dc38:	4682      	mov	sl, r0
 800dc3a:	468b      	mov	fp, r1
 800dc3c:	1124      	asrs	r4, r4, #4
 800dc3e:	d0df      	beq.n	800dc00 <_strtod_l+0x520>
 800dc40:	2c1f      	cmp	r4, #31
 800dc42:	dd1f      	ble.n	800dc84 <_strtod_l+0x5a4>
 800dc44:	2400      	movs	r4, #0
 800dc46:	46a0      	mov	r8, r4
 800dc48:	46a1      	mov	r9, r4
 800dc4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dc4c:	2322      	movs	r3, #34	@ 0x22
 800dc4e:	9a05      	ldr	r2, [sp, #20]
 800dc50:	f04f 0a00 	mov.w	sl, #0
 800dc54:	f04f 0b00 	mov.w	fp, #0
 800dc58:	6013      	str	r3, [r2, #0]
 800dc5a:	e76b      	b.n	800db34 <_strtod_l+0x454>
 800dc5c:	08011559 	.word	0x08011559
 800dc60:	08011724 	.word	0x08011724
 800dc64:	08011551 	.word	0x08011551
 800dc68:	08011592 	.word	0x08011592
 800dc6c:	08011721 	.word	0x08011721
 800dc70:	080118b0 	.word	0x080118b0
 800dc74:	08011888 	.word	0x08011888
 800dc78:	7ff00000 	.word	0x7ff00000
 800dc7c:	7ca00000 	.word	0x7ca00000
 800dc80:	7fefffff 	.word	0x7fefffff
 800dc84:	f014 0310 	ands.w	r3, r4, #16
 800dc88:	4650      	mov	r0, sl
 800dc8a:	4659      	mov	r1, fp
 800dc8c:	4ea9      	ldr	r6, [pc, #676]	@ (800df34 <_strtod_l+0x854>)
 800dc8e:	bf18      	it	ne
 800dc90:	236a      	movne	r3, #106	@ 0x6a
 800dc92:	9308      	str	r3, [sp, #32]
 800dc94:	2300      	movs	r3, #0
 800dc96:	07e7      	lsls	r7, r4, #31
 800dc98:	d504      	bpl.n	800dca4 <_strtod_l+0x5c4>
 800dc9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc9e:	f7f2 fcbb 	bl	8000618 <__aeabi_dmul>
 800dca2:	2301      	movs	r3, #1
 800dca4:	1064      	asrs	r4, r4, #1
 800dca6:	f106 0608 	add.w	r6, r6, #8
 800dcaa:	d1f4      	bne.n	800dc96 <_strtod_l+0x5b6>
 800dcac:	b10b      	cbz	r3, 800dcb2 <_strtod_l+0x5d2>
 800dcae:	4682      	mov	sl, r0
 800dcb0:	468b      	mov	fp, r1
 800dcb2:	9b08      	ldr	r3, [sp, #32]
 800dcb4:	b1b3      	cbz	r3, 800dce4 <_strtod_l+0x604>
 800dcb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dcba:	4659      	mov	r1, fp
 800dcbc:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	dd0f      	ble.n	800dce4 <_strtod_l+0x604>
 800dcc4:	2b1f      	cmp	r3, #31
 800dcc6:	dd56      	ble.n	800dd76 <_strtod_l+0x696>
 800dcc8:	2b34      	cmp	r3, #52	@ 0x34
 800dcca:	f04f 0a00 	mov.w	sl, #0
 800dcce:	bfdb      	ittet	le
 800dcd0:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800dcd4:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dcd8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dcdc:	4093      	lslle	r3, r2
 800dcde:	bfd8      	it	le
 800dce0:	ea03 0b01 	andle.w	fp, r3, r1
 800dce4:	2200      	movs	r2, #0
 800dce6:	2300      	movs	r3, #0
 800dce8:	4650      	mov	r0, sl
 800dcea:	4659      	mov	r1, fp
 800dcec:	f7f2 fefc 	bl	8000ae8 <__aeabi_dcmpeq>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d1a7      	bne.n	800dc44 <_strtod_l+0x564>
 800dcf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcf6:	464a      	mov	r2, r9
 800dcf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dcfa:	9300      	str	r3, [sp, #0]
 800dcfc:	462b      	mov	r3, r5
 800dcfe:	9805      	ldr	r0, [sp, #20]
 800dd00:	f002 f8f2 	bl	800fee8 <__s2b>
 800dd04:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dd06:	2800      	cmp	r0, #0
 800dd08:	f43f af09 	beq.w	800db1e <_strtod_l+0x43e>
 800dd0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd0e:	2400      	movs	r4, #0
 800dd10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd12:	2a00      	cmp	r2, #0
 800dd14:	eba3 0308 	sub.w	r3, r3, r8
 800dd18:	46a0      	mov	r8, r4
 800dd1a:	bfa8      	it	ge
 800dd1c:	2300      	movge	r3, #0
 800dd1e:	9312      	str	r3, [sp, #72]	@ 0x48
 800dd20:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dd24:	9316      	str	r3, [sp, #88]	@ 0x58
 800dd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd28:	9805      	ldr	r0, [sp, #20]
 800dd2a:	6859      	ldr	r1, [r3, #4]
 800dd2c:	f002 f832 	bl	800fd94 <_Balloc>
 800dd30:	4681      	mov	r9, r0
 800dd32:	2800      	cmp	r0, #0
 800dd34:	f43f aef7 	beq.w	800db26 <_strtod_l+0x446>
 800dd38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd3a:	300c      	adds	r0, #12
 800dd3c:	691a      	ldr	r2, [r3, #16]
 800dd3e:	f103 010c 	add.w	r1, r3, #12
 800dd42:	3202      	adds	r2, #2
 800dd44:	0092      	lsls	r2, r2, #2
 800dd46:	f000 fba9 	bl	800e49c <memcpy>
 800dd4a:	aa1c      	add	r2, sp, #112	@ 0x70
 800dd4c:	a91b      	add	r1, sp, #108	@ 0x6c
 800dd4e:	9805      	ldr	r0, [sp, #20]
 800dd50:	ec4b ab10 	vmov	d0, sl, fp
 800dd54:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dd58:	f002 fc04 	bl	8010564 <__d2b>
 800dd5c:	901a      	str	r0, [sp, #104]	@ 0x68
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	f43f aee1 	beq.w	800db26 <_strtod_l+0x446>
 800dd64:	2101      	movs	r1, #1
 800dd66:	9805      	ldr	r0, [sp, #20]
 800dd68:	f002 f954 	bl	8010014 <__i2b>
 800dd6c:	4680      	mov	r8, r0
 800dd6e:	b948      	cbnz	r0, 800dd84 <_strtod_l+0x6a4>
 800dd70:	f04f 0800 	mov.w	r8, #0
 800dd74:	e6d7      	b.n	800db26 <_strtod_l+0x446>
 800dd76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd7a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd7e:	ea03 0a0a 	and.w	sl, r3, sl
 800dd82:	e7af      	b.n	800dce4 <_strtod_l+0x604>
 800dd84:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dd86:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dd88:	2d00      	cmp	r5, #0
 800dd8a:	bfa9      	itett	ge
 800dd8c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dd8e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dd90:	18ef      	addge	r7, r5, r3
 800dd92:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dd94:	bfb8      	it	lt
 800dd96:	1b5e      	sublt	r6, r3, r5
 800dd98:	9b08      	ldr	r3, [sp, #32]
 800dd9a:	bfb8      	it	lt
 800dd9c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dd9e:	1aed      	subs	r5, r5, r3
 800dda0:	4b65      	ldr	r3, [pc, #404]	@ (800df38 <_strtod_l+0x858>)
 800dda2:	4415      	add	r5, r2
 800dda4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dda8:	3d01      	subs	r5, #1
 800ddaa:	429d      	cmp	r5, r3
 800ddac:	da4f      	bge.n	800de4e <_strtod_l+0x76e>
 800ddae:	1b5b      	subs	r3, r3, r5
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	2b1f      	cmp	r3, #31
 800ddb4:	eba2 0203 	sub.w	r2, r2, r3
 800ddb8:	dc3d      	bgt.n	800de36 <_strtod_l+0x756>
 800ddba:	fa01 f303 	lsl.w	r3, r1, r3
 800ddbe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	9310      	str	r3, [sp, #64]	@ 0x40
 800ddc4:	18bd      	adds	r5, r7, r2
 800ddc6:	9b08      	ldr	r3, [sp, #32]
 800ddc8:	4416      	add	r6, r2
 800ddca:	42af      	cmp	r7, r5
 800ddcc:	441e      	add	r6, r3
 800ddce:	463b      	mov	r3, r7
 800ddd0:	bfa8      	it	ge
 800ddd2:	462b      	movge	r3, r5
 800ddd4:	42b3      	cmp	r3, r6
 800ddd6:	bfa8      	it	ge
 800ddd8:	4633      	movge	r3, r6
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	bfc2      	ittt	gt
 800ddde:	1aed      	subgt	r5, r5, r3
 800dde0:	1af6      	subgt	r6, r6, r3
 800dde2:	1aff      	subgt	r7, r7, r3
 800dde4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	dd16      	ble.n	800de18 <_strtod_l+0x738>
 800ddea:	4641      	mov	r1, r8
 800ddec:	461a      	mov	r2, r3
 800ddee:	9805      	ldr	r0, [sp, #20]
 800ddf0:	f002 f9ca 	bl	8010188 <__pow5mult>
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d0ba      	beq.n	800dd70 <_strtod_l+0x690>
 800ddfa:	4601      	mov	r1, r0
 800ddfc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ddfe:	9805      	ldr	r0, [sp, #20]
 800de00:	f002 f91e 	bl	8010040 <__multiply>
 800de04:	900a      	str	r0, [sp, #40]	@ 0x28
 800de06:	2800      	cmp	r0, #0
 800de08:	f43f ae8d 	beq.w	800db26 <_strtod_l+0x446>
 800de0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de0e:	9805      	ldr	r0, [sp, #20]
 800de10:	f002 f800 	bl	800fe14 <_Bfree>
 800de14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de16:	931a      	str	r3, [sp, #104]	@ 0x68
 800de18:	2d00      	cmp	r5, #0
 800de1a:	dc1d      	bgt.n	800de58 <_strtod_l+0x778>
 800de1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de1e:	2b00      	cmp	r3, #0
 800de20:	dd23      	ble.n	800de6a <_strtod_l+0x78a>
 800de22:	4649      	mov	r1, r9
 800de24:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800de26:	9805      	ldr	r0, [sp, #20]
 800de28:	f002 f9ae 	bl	8010188 <__pow5mult>
 800de2c:	4681      	mov	r9, r0
 800de2e:	b9e0      	cbnz	r0, 800de6a <_strtod_l+0x78a>
 800de30:	f04f 0900 	mov.w	r9, #0
 800de34:	e677      	b.n	800db26 <_strtod_l+0x446>
 800de36:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800de3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800de3c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800de40:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800de44:	35e2      	adds	r5, #226	@ 0xe2
 800de46:	fa01 f305 	lsl.w	r3, r1, r5
 800de4a:	9310      	str	r3, [sp, #64]	@ 0x40
 800de4c:	e7ba      	b.n	800ddc4 <_strtod_l+0x6e4>
 800de4e:	2300      	movs	r3, #0
 800de50:	9310      	str	r3, [sp, #64]	@ 0x40
 800de52:	2301      	movs	r3, #1
 800de54:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de56:	e7b5      	b.n	800ddc4 <_strtod_l+0x6e4>
 800de58:	462a      	mov	r2, r5
 800de5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de5c:	9805      	ldr	r0, [sp, #20]
 800de5e:	f002 f9ed 	bl	801023c <__lshift>
 800de62:	901a      	str	r0, [sp, #104]	@ 0x68
 800de64:	2800      	cmp	r0, #0
 800de66:	d1d9      	bne.n	800de1c <_strtod_l+0x73c>
 800de68:	e65d      	b.n	800db26 <_strtod_l+0x446>
 800de6a:	2e00      	cmp	r6, #0
 800de6c:	dd07      	ble.n	800de7e <_strtod_l+0x79e>
 800de6e:	4649      	mov	r1, r9
 800de70:	4632      	mov	r2, r6
 800de72:	9805      	ldr	r0, [sp, #20]
 800de74:	f002 f9e2 	bl	801023c <__lshift>
 800de78:	4681      	mov	r9, r0
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d0d8      	beq.n	800de30 <_strtod_l+0x750>
 800de7e:	2f00      	cmp	r7, #0
 800de80:	dd08      	ble.n	800de94 <_strtod_l+0x7b4>
 800de82:	4641      	mov	r1, r8
 800de84:	463a      	mov	r2, r7
 800de86:	9805      	ldr	r0, [sp, #20]
 800de88:	f002 f9d8 	bl	801023c <__lshift>
 800de8c:	4680      	mov	r8, r0
 800de8e:	2800      	cmp	r0, #0
 800de90:	f43f ae49 	beq.w	800db26 <_strtod_l+0x446>
 800de94:	464a      	mov	r2, r9
 800de96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de98:	9805      	ldr	r0, [sp, #20]
 800de9a:	f002 fa57 	bl	801034c <__mdiff>
 800de9e:	4604      	mov	r4, r0
 800dea0:	2800      	cmp	r0, #0
 800dea2:	f43f ae40 	beq.w	800db26 <_strtod_l+0x446>
 800dea6:	68c3      	ldr	r3, [r0, #12]
 800dea8:	4641      	mov	r1, r8
 800deaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800deac:	2300      	movs	r3, #0
 800deae:	60c3      	str	r3, [r0, #12]
 800deb0:	f002 fa30 	bl	8010314 <__mcmp>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	da45      	bge.n	800df44 <_strtod_l+0x864>
 800deb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deba:	ea53 030a 	orrs.w	r3, r3, sl
 800debe:	d16b      	bne.n	800df98 <_strtod_l+0x8b8>
 800dec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d167      	bne.n	800df98 <_strtod_l+0x8b8>
 800dec8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800decc:	0d1b      	lsrs	r3, r3, #20
 800dece:	051b      	lsls	r3, r3, #20
 800ded0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ded4:	d960      	bls.n	800df98 <_strtod_l+0x8b8>
 800ded6:	6963      	ldr	r3, [r4, #20]
 800ded8:	b913      	cbnz	r3, 800dee0 <_strtod_l+0x800>
 800deda:	6923      	ldr	r3, [r4, #16]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	dd5b      	ble.n	800df98 <_strtod_l+0x8b8>
 800dee0:	4621      	mov	r1, r4
 800dee2:	2201      	movs	r2, #1
 800dee4:	9805      	ldr	r0, [sp, #20]
 800dee6:	f002 f9a9 	bl	801023c <__lshift>
 800deea:	4641      	mov	r1, r8
 800deec:	4604      	mov	r4, r0
 800deee:	f002 fa11 	bl	8010314 <__mcmp>
 800def2:	2800      	cmp	r0, #0
 800def4:	dd50      	ble.n	800df98 <_strtod_l+0x8b8>
 800def6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800defa:	9a08      	ldr	r2, [sp, #32]
 800defc:	0d1b      	lsrs	r3, r3, #20
 800defe:	051b      	lsls	r3, r3, #20
 800df00:	2a00      	cmp	r2, #0
 800df02:	d06a      	beq.n	800dfda <_strtod_l+0x8fa>
 800df04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800df08:	d867      	bhi.n	800dfda <_strtod_l+0x8fa>
 800df0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800df0e:	f67f ae9d 	bls.w	800dc4c <_strtod_l+0x56c>
 800df12:	4b0a      	ldr	r3, [pc, #40]	@ (800df3c <_strtod_l+0x85c>)
 800df14:	4650      	mov	r0, sl
 800df16:	4659      	mov	r1, fp
 800df18:	2200      	movs	r2, #0
 800df1a:	f7f2 fb7d 	bl	8000618 <__aeabi_dmul>
 800df1e:	4b08      	ldr	r3, [pc, #32]	@ (800df40 <_strtod_l+0x860>)
 800df20:	4682      	mov	sl, r0
 800df22:	468b      	mov	fp, r1
 800df24:	400b      	ands	r3, r1
 800df26:	2b00      	cmp	r3, #0
 800df28:	f47f ae08 	bne.w	800db3c <_strtod_l+0x45c>
 800df2c:	2322      	movs	r3, #34	@ 0x22
 800df2e:	9a05      	ldr	r2, [sp, #20]
 800df30:	6013      	str	r3, [r2, #0]
 800df32:	e603      	b.n	800db3c <_strtod_l+0x45c>
 800df34:	08011750 	.word	0x08011750
 800df38:	fffffc02 	.word	0xfffffc02
 800df3c:	39500000 	.word	0x39500000
 800df40:	7ff00000 	.word	0x7ff00000
 800df44:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800df48:	d165      	bne.n	800e016 <_strtod_l+0x936>
 800df4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800df4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df50:	b35a      	cbz	r2, 800dfaa <_strtod_l+0x8ca>
 800df52:	4a9f      	ldr	r2, [pc, #636]	@ (800e1d0 <_strtod_l+0xaf0>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d12b      	bne.n	800dfb0 <_strtod_l+0x8d0>
 800df58:	9b08      	ldr	r3, [sp, #32]
 800df5a:	4651      	mov	r1, sl
 800df5c:	b303      	cbz	r3, 800dfa0 <_strtod_l+0x8c0>
 800df5e:	465a      	mov	r2, fp
 800df60:	4b9c      	ldr	r3, [pc, #624]	@ (800e1d4 <_strtod_l+0xaf4>)
 800df62:	4013      	ands	r3, r2
 800df64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df68:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800df6c:	d81b      	bhi.n	800dfa6 <_strtod_l+0x8c6>
 800df6e:	0d1b      	lsrs	r3, r3, #20
 800df70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800df74:	fa02 f303 	lsl.w	r3, r2, r3
 800df78:	4299      	cmp	r1, r3
 800df7a:	d119      	bne.n	800dfb0 <_strtod_l+0x8d0>
 800df7c:	4b96      	ldr	r3, [pc, #600]	@ (800e1d8 <_strtod_l+0xaf8>)
 800df7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df80:	429a      	cmp	r2, r3
 800df82:	d102      	bne.n	800df8a <_strtod_l+0x8aa>
 800df84:	3101      	adds	r1, #1
 800df86:	f43f adce 	beq.w	800db26 <_strtod_l+0x446>
 800df8a:	4b92      	ldr	r3, [pc, #584]	@ (800e1d4 <_strtod_l+0xaf4>)
 800df8c:	f04f 0a00 	mov.w	sl, #0
 800df90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df92:	401a      	ands	r2, r3
 800df94:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800df98:	9b08      	ldr	r3, [sp, #32]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1b9      	bne.n	800df12 <_strtod_l+0x832>
 800df9e:	e5cd      	b.n	800db3c <_strtod_l+0x45c>
 800dfa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfa4:	e7e8      	b.n	800df78 <_strtod_l+0x898>
 800dfa6:	4613      	mov	r3, r2
 800dfa8:	e7e6      	b.n	800df78 <_strtod_l+0x898>
 800dfaa:	ea53 030a 	orrs.w	r3, r3, sl
 800dfae:	d0a2      	beq.n	800def6 <_strtod_l+0x816>
 800dfb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dfb2:	b1db      	cbz	r3, 800dfec <_strtod_l+0x90c>
 800dfb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dfb6:	4213      	tst	r3, r2
 800dfb8:	d0ee      	beq.n	800df98 <_strtod_l+0x8b8>
 800dfba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfbc:	4650      	mov	r0, sl
 800dfbe:	9a08      	ldr	r2, [sp, #32]
 800dfc0:	4659      	mov	r1, fp
 800dfc2:	b1bb      	cbz	r3, 800dff4 <_strtod_l+0x914>
 800dfc4:	f7ff fb6c 	bl	800d6a0 <sulp>
 800dfc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfcc:	ec53 2b10 	vmov	r2, r3, d0
 800dfd0:	f7f2 f96c 	bl	80002ac <__adddf3>
 800dfd4:	4682      	mov	sl, r0
 800dfd6:	468b      	mov	fp, r1
 800dfd8:	e7de      	b.n	800df98 <_strtod_l+0x8b8>
 800dfda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dfde:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800dfe2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dfe6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dfea:	e7d5      	b.n	800df98 <_strtod_l+0x8b8>
 800dfec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dfee:	ea13 0f0a 	tst.w	r3, sl
 800dff2:	e7e1      	b.n	800dfb8 <_strtod_l+0x8d8>
 800dff4:	f7ff fb54 	bl	800d6a0 <sulp>
 800dff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dffc:	ec53 2b10 	vmov	r2, r3, d0
 800e000:	f7f2 f952 	bl	80002a8 <__aeabi_dsub>
 800e004:	2200      	movs	r2, #0
 800e006:	2300      	movs	r3, #0
 800e008:	4682      	mov	sl, r0
 800e00a:	468b      	mov	fp, r1
 800e00c:	f7f2 fd6c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e010:	2800      	cmp	r0, #0
 800e012:	d0c1      	beq.n	800df98 <_strtod_l+0x8b8>
 800e014:	e61a      	b.n	800dc4c <_strtod_l+0x56c>
 800e016:	4641      	mov	r1, r8
 800e018:	4620      	mov	r0, r4
 800e01a:	f002 fafb 	bl	8010614 <__ratio>
 800e01e:	2200      	movs	r2, #0
 800e020:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e024:	ec57 6b10 	vmov	r6, r7, d0
 800e028:	4630      	mov	r0, r6
 800e02a:	4639      	mov	r1, r7
 800e02c:	f7f2 fd70 	bl	8000b10 <__aeabi_dcmple>
 800e030:	2800      	cmp	r0, #0
 800e032:	d06f      	beq.n	800e114 <_strtod_l+0xa34>
 800e034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e036:	2b00      	cmp	r3, #0
 800e038:	d17a      	bne.n	800e130 <_strtod_l+0xa50>
 800e03a:	f1ba 0f00 	cmp.w	sl, #0
 800e03e:	d158      	bne.n	800e0f2 <_strtod_l+0xa12>
 800e040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e046:	2b00      	cmp	r3, #0
 800e048:	d15a      	bne.n	800e100 <_strtod_l+0xa20>
 800e04a:	2200      	movs	r2, #0
 800e04c:	4b63      	ldr	r3, [pc, #396]	@ (800e1dc <_strtod_l+0xafc>)
 800e04e:	4630      	mov	r0, r6
 800e050:	4639      	mov	r1, r7
 800e052:	f7f2 fd53 	bl	8000afc <__aeabi_dcmplt>
 800e056:	2800      	cmp	r0, #0
 800e058:	d159      	bne.n	800e10e <_strtod_l+0xa2e>
 800e05a:	4630      	mov	r0, r6
 800e05c:	4639      	mov	r1, r7
 800e05e:	2200      	movs	r2, #0
 800e060:	4b5f      	ldr	r3, [pc, #380]	@ (800e1e0 <_strtod_l+0xb00>)
 800e062:	f7f2 fad9 	bl	8000618 <__aeabi_dmul>
 800e066:	4606      	mov	r6, r0
 800e068:	460f      	mov	r7, r1
 800e06a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e06e:	9606      	str	r6, [sp, #24]
 800e070:	9307      	str	r3, [sp, #28]
 800e072:	4d58      	ldr	r5, [pc, #352]	@ (800e1d4 <_strtod_l+0xaf4>)
 800e074:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e078:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e07c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e07e:	401d      	ands	r5, r3
 800e080:	4b58      	ldr	r3, [pc, #352]	@ (800e1e4 <_strtod_l+0xb04>)
 800e082:	429d      	cmp	r5, r3
 800e084:	f040 80b2 	bne.w	800e1ec <_strtod_l+0xb0c>
 800e088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e08a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e08e:	ec4b ab10 	vmov	d0, sl, fp
 800e092:	f002 f9f3 	bl	801047c <__ulp>
 800e096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e09a:	ec51 0b10 	vmov	r0, r1, d0
 800e09e:	f7f2 fabb 	bl	8000618 <__aeabi_dmul>
 800e0a2:	4652      	mov	r2, sl
 800e0a4:	465b      	mov	r3, fp
 800e0a6:	f7f2 f901 	bl	80002ac <__adddf3>
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	4949      	ldr	r1, [pc, #292]	@ (800e1d4 <_strtod_l+0xaf4>)
 800e0ae:	4682      	mov	sl, r0
 800e0b0:	4a4d      	ldr	r2, [pc, #308]	@ (800e1e8 <_strtod_l+0xb08>)
 800e0b2:	4019      	ands	r1, r3
 800e0b4:	4291      	cmp	r1, r2
 800e0b6:	d942      	bls.n	800e13e <_strtod_l+0xa5e>
 800e0b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e0ba:	4b47      	ldr	r3, [pc, #284]	@ (800e1d8 <_strtod_l+0xaf8>)
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d103      	bne.n	800e0c8 <_strtod_l+0x9e8>
 800e0c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	f43f ad2f 	beq.w	800db26 <_strtod_l+0x446>
 800e0c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e1d8 <_strtod_l+0xaf8>
 800e0cc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e0d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0d2:	9805      	ldr	r0, [sp, #20]
 800e0d4:	f001 fe9e 	bl	800fe14 <_Bfree>
 800e0d8:	4649      	mov	r1, r9
 800e0da:	9805      	ldr	r0, [sp, #20]
 800e0dc:	f001 fe9a 	bl	800fe14 <_Bfree>
 800e0e0:	4641      	mov	r1, r8
 800e0e2:	9805      	ldr	r0, [sp, #20]
 800e0e4:	f001 fe96 	bl	800fe14 <_Bfree>
 800e0e8:	4621      	mov	r1, r4
 800e0ea:	9805      	ldr	r0, [sp, #20]
 800e0ec:	f001 fe92 	bl	800fe14 <_Bfree>
 800e0f0:	e619      	b.n	800dd26 <_strtod_l+0x646>
 800e0f2:	f1ba 0f01 	cmp.w	sl, #1
 800e0f6:	d103      	bne.n	800e100 <_strtod_l+0xa20>
 800e0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	f43f ada6 	beq.w	800dc4c <_strtod_l+0x56c>
 800e100:	2600      	movs	r6, #0
 800e102:	4f36      	ldr	r7, [pc, #216]	@ (800e1dc <_strtod_l+0xafc>)
 800e104:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e1b0 <_strtod_l+0xad0>
 800e108:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e10c:	e7b1      	b.n	800e072 <_strtod_l+0x992>
 800e10e:	2600      	movs	r6, #0
 800e110:	4f33      	ldr	r7, [pc, #204]	@ (800e1e0 <_strtod_l+0xb00>)
 800e112:	e7aa      	b.n	800e06a <_strtod_l+0x98a>
 800e114:	4b32      	ldr	r3, [pc, #200]	@ (800e1e0 <_strtod_l+0xb00>)
 800e116:	4630      	mov	r0, r6
 800e118:	4639      	mov	r1, r7
 800e11a:	2200      	movs	r2, #0
 800e11c:	f7f2 fa7c 	bl	8000618 <__aeabi_dmul>
 800e120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e122:	4606      	mov	r6, r0
 800e124:	460f      	mov	r7, r1
 800e126:	2b00      	cmp	r3, #0
 800e128:	d09f      	beq.n	800e06a <_strtod_l+0x98a>
 800e12a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e12e:	e7a0      	b.n	800e072 <_strtod_l+0x992>
 800e130:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e1b8 <_strtod_l+0xad8>
 800e134:	ec57 6b17 	vmov	r6, r7, d7
 800e138:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e13c:	e799      	b.n	800e072 <_strtod_l+0x992>
 800e13e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e142:	9b08      	ldr	r3, [sp, #32]
 800e144:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1c1      	bne.n	800e0d0 <_strtod_l+0x9f0>
 800e14c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e150:	0d1b      	lsrs	r3, r3, #20
 800e152:	051b      	lsls	r3, r3, #20
 800e154:	429d      	cmp	r5, r3
 800e156:	d1bb      	bne.n	800e0d0 <_strtod_l+0x9f0>
 800e158:	4630      	mov	r0, r6
 800e15a:	4639      	mov	r1, r7
 800e15c:	f7f2 fdbc 	bl	8000cd8 <__aeabi_d2lz>
 800e160:	f7f2 fa2c 	bl	80005bc <__aeabi_l2d>
 800e164:	4602      	mov	r2, r0
 800e166:	460b      	mov	r3, r1
 800e168:	4630      	mov	r0, r6
 800e16a:	4639      	mov	r1, r7
 800e16c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e170:	f7f2 f89a 	bl	80002a8 <__aeabi_dsub>
 800e174:	460b      	mov	r3, r1
 800e176:	4602      	mov	r2, r0
 800e178:	ea46 060a 	orr.w	r6, r6, sl
 800e17c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e182:	431e      	orrs	r6, r3
 800e184:	d06f      	beq.n	800e266 <_strtod_l+0xb86>
 800e186:	a30e      	add	r3, pc, #56	@ (adr r3, 800e1c0 <_strtod_l+0xae0>)
 800e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18c:	f7f2 fcb6 	bl	8000afc <__aeabi_dcmplt>
 800e190:	2800      	cmp	r0, #0
 800e192:	f47f acd3 	bne.w	800db3c <_strtod_l+0x45c>
 800e196:	a30c      	add	r3, pc, #48	@ (adr r3, 800e1c8 <_strtod_l+0xae8>)
 800e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1a0:	f7f2 fcca 	bl	8000b38 <__aeabi_dcmpgt>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d093      	beq.n	800e0d0 <_strtod_l+0x9f0>
 800e1a8:	e4c8      	b.n	800db3c <_strtod_l+0x45c>
 800e1aa:	bf00      	nop
 800e1ac:	f3af 8000 	nop.w
 800e1b0:	00000000 	.word	0x00000000
 800e1b4:	bff00000 	.word	0xbff00000
 800e1b8:	00000000 	.word	0x00000000
 800e1bc:	3ff00000 	.word	0x3ff00000
 800e1c0:	94a03595 	.word	0x94a03595
 800e1c4:	3fdfffff 	.word	0x3fdfffff
 800e1c8:	35afe535 	.word	0x35afe535
 800e1cc:	3fe00000 	.word	0x3fe00000
 800e1d0:	000fffff 	.word	0x000fffff
 800e1d4:	7ff00000 	.word	0x7ff00000
 800e1d8:	7fefffff 	.word	0x7fefffff
 800e1dc:	3ff00000 	.word	0x3ff00000
 800e1e0:	3fe00000 	.word	0x3fe00000
 800e1e4:	7fe00000 	.word	0x7fe00000
 800e1e8:	7c9fffff 	.word	0x7c9fffff
 800e1ec:	9b08      	ldr	r3, [sp, #32]
 800e1ee:	b323      	cbz	r3, 800e23a <_strtod_l+0xb5a>
 800e1f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e1f4:	d821      	bhi.n	800e23a <_strtod_l+0xb5a>
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	4639      	mov	r1, r7
 800e1fa:	a327      	add	r3, pc, #156	@ (adr r3, 800e298 <_strtod_l+0xbb8>)
 800e1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e200:	f7f2 fc86 	bl	8000b10 <__aeabi_dcmple>
 800e204:	b1a0      	cbz	r0, 800e230 <_strtod_l+0xb50>
 800e206:	4639      	mov	r1, r7
 800e208:	4630      	mov	r0, r6
 800e20a:	f7f2 fcdd 	bl	8000bc8 <__aeabi_d2uiz>
 800e20e:	2801      	cmp	r0, #1
 800e210:	bf38      	it	cc
 800e212:	2001      	movcc	r0, #1
 800e214:	f7f2 f986 	bl	8000524 <__aeabi_ui2d>
 800e218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e21a:	4606      	mov	r6, r0
 800e21c:	460f      	mov	r7, r1
 800e21e:	b9fb      	cbnz	r3, 800e260 <_strtod_l+0xb80>
 800e220:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e224:	9014      	str	r0, [sp, #80]	@ 0x50
 800e226:	9315      	str	r3, [sp, #84]	@ 0x54
 800e228:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e22c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e230:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e232:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e236:	1b5b      	subs	r3, r3, r5
 800e238:	9311      	str	r3, [sp, #68]	@ 0x44
 800e23a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e23e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e242:	f002 f91b 	bl	801047c <__ulp>
 800e246:	4650      	mov	r0, sl
 800e248:	4659      	mov	r1, fp
 800e24a:	ec53 2b10 	vmov	r2, r3, d0
 800e24e:	f7f2 f9e3 	bl	8000618 <__aeabi_dmul>
 800e252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e256:	f7f2 f829 	bl	80002ac <__adddf3>
 800e25a:	4682      	mov	sl, r0
 800e25c:	468b      	mov	fp, r1
 800e25e:	e770      	b.n	800e142 <_strtod_l+0xa62>
 800e260:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e264:	e7e0      	b.n	800e228 <_strtod_l+0xb48>
 800e266:	a30e      	add	r3, pc, #56	@ (adr r3, 800e2a0 <_strtod_l+0xbc0>)
 800e268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26c:	f7f2 fc46 	bl	8000afc <__aeabi_dcmplt>
 800e270:	e798      	b.n	800e1a4 <_strtod_l+0xac4>
 800e272:	2300      	movs	r3, #0
 800e274:	930e      	str	r3, [sp, #56]	@ 0x38
 800e276:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e278:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e27a:	6013      	str	r3, [r2, #0]
 800e27c:	f7ff ba6d 	b.w	800d75a <_strtod_l+0x7a>
 800e280:	2a65      	cmp	r2, #101	@ 0x65
 800e282:	f43f ab67 	beq.w	800d954 <_strtod_l+0x274>
 800e286:	2a45      	cmp	r2, #69	@ 0x45
 800e288:	f43f ab64 	beq.w	800d954 <_strtod_l+0x274>
 800e28c:	2301      	movs	r3, #1
 800e28e:	f7ff bba0 	b.w	800d9d2 <_strtod_l+0x2f2>
 800e292:	bf00      	nop
 800e294:	f3af 8000 	nop.w
 800e298:	ffc00000 	.word	0xffc00000
 800e29c:	41dfffff 	.word	0x41dfffff
 800e2a0:	94a03595 	.word	0x94a03595
 800e2a4:	3fcfffff 	.word	0x3fcfffff

0800e2a8 <_strtod_r>:
 800e2a8:	4b01      	ldr	r3, [pc, #4]	@ (800e2b0 <_strtod_r+0x8>)
 800e2aa:	f7ff ba19 	b.w	800d6e0 <_strtod_l>
 800e2ae:	bf00      	nop
 800e2b0:	20000030 	.word	0x20000030

0800e2b4 <_strtol_l.isra.0>:
 800e2b4:	2b24      	cmp	r3, #36	@ 0x24
 800e2b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ba:	4686      	mov	lr, r0
 800e2bc:	4690      	mov	r8, r2
 800e2be:	d801      	bhi.n	800e2c4 <_strtol_l.isra.0+0x10>
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d106      	bne.n	800e2d2 <_strtol_l.isra.0+0x1e>
 800e2c4:	f000 f8aa 	bl	800e41c <__errno>
 800e2c8:	2316      	movs	r3, #22
 800e2ca:	6003      	str	r3, [r0, #0]
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	4833      	ldr	r0, [pc, #204]	@ (800e3a4 <_strtol_l.isra.0+0xf0>)
 800e2d6:	462a      	mov	r2, r5
 800e2d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2dc:	5d06      	ldrb	r6, [r0, r4]
 800e2de:	f016 0608 	ands.w	r6, r6, #8
 800e2e2:	d1f8      	bne.n	800e2d6 <_strtol_l.isra.0+0x22>
 800e2e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800e2e6:	d110      	bne.n	800e30a <_strtol_l.isra.0+0x56>
 800e2e8:	782c      	ldrb	r4, [r5, #0]
 800e2ea:	2601      	movs	r6, #1
 800e2ec:	1c95      	adds	r5, r2, #2
 800e2ee:	f033 0210 	bics.w	r2, r3, #16
 800e2f2:	d115      	bne.n	800e320 <_strtol_l.isra.0+0x6c>
 800e2f4:	2c30      	cmp	r4, #48	@ 0x30
 800e2f6:	d10d      	bne.n	800e314 <_strtol_l.isra.0+0x60>
 800e2f8:	782a      	ldrb	r2, [r5, #0]
 800e2fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e2fe:	2a58      	cmp	r2, #88	@ 0x58
 800e300:	d108      	bne.n	800e314 <_strtol_l.isra.0+0x60>
 800e302:	786c      	ldrb	r4, [r5, #1]
 800e304:	3502      	adds	r5, #2
 800e306:	2310      	movs	r3, #16
 800e308:	e00a      	b.n	800e320 <_strtol_l.isra.0+0x6c>
 800e30a:	2c2b      	cmp	r4, #43	@ 0x2b
 800e30c:	bf04      	itt	eq
 800e30e:	782c      	ldrbeq	r4, [r5, #0]
 800e310:	1c95      	addeq	r5, r2, #2
 800e312:	e7ec      	b.n	800e2ee <_strtol_l.isra.0+0x3a>
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1f6      	bne.n	800e306 <_strtol_l.isra.0+0x52>
 800e318:	2c30      	cmp	r4, #48	@ 0x30
 800e31a:	bf14      	ite	ne
 800e31c:	230a      	movne	r3, #10
 800e31e:	2308      	moveq	r3, #8
 800e320:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e324:	2200      	movs	r2, #0
 800e326:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800e32a:	4610      	mov	r0, r2
 800e32c:	fbbc f9f3 	udiv	r9, ip, r3
 800e330:	fb03 ca19 	mls	sl, r3, r9, ip
 800e334:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e338:	2f09      	cmp	r7, #9
 800e33a:	d80f      	bhi.n	800e35c <_strtol_l.isra.0+0xa8>
 800e33c:	463c      	mov	r4, r7
 800e33e:	42a3      	cmp	r3, r4
 800e340:	dd1b      	ble.n	800e37a <_strtol_l.isra.0+0xc6>
 800e342:	1c57      	adds	r7, r2, #1
 800e344:	d007      	beq.n	800e356 <_strtol_l.isra.0+0xa2>
 800e346:	4581      	cmp	r9, r0
 800e348:	d314      	bcc.n	800e374 <_strtol_l.isra.0+0xc0>
 800e34a:	d101      	bne.n	800e350 <_strtol_l.isra.0+0x9c>
 800e34c:	45a2      	cmp	sl, r4
 800e34e:	db11      	blt.n	800e374 <_strtol_l.isra.0+0xc0>
 800e350:	fb00 4003 	mla	r0, r0, r3, r4
 800e354:	2201      	movs	r2, #1
 800e356:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e35a:	e7eb      	b.n	800e334 <_strtol_l.isra.0+0x80>
 800e35c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e360:	2f19      	cmp	r7, #25
 800e362:	d801      	bhi.n	800e368 <_strtol_l.isra.0+0xb4>
 800e364:	3c37      	subs	r4, #55	@ 0x37
 800e366:	e7ea      	b.n	800e33e <_strtol_l.isra.0+0x8a>
 800e368:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e36c:	2f19      	cmp	r7, #25
 800e36e:	d804      	bhi.n	800e37a <_strtol_l.isra.0+0xc6>
 800e370:	3c57      	subs	r4, #87	@ 0x57
 800e372:	e7e4      	b.n	800e33e <_strtol_l.isra.0+0x8a>
 800e374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e378:	e7ed      	b.n	800e356 <_strtol_l.isra.0+0xa2>
 800e37a:	1c53      	adds	r3, r2, #1
 800e37c:	d108      	bne.n	800e390 <_strtol_l.isra.0+0xdc>
 800e37e:	2322      	movs	r3, #34	@ 0x22
 800e380:	4660      	mov	r0, ip
 800e382:	f8ce 3000 	str.w	r3, [lr]
 800e386:	f1b8 0f00 	cmp.w	r8, #0
 800e38a:	d0a0      	beq.n	800e2ce <_strtol_l.isra.0+0x1a>
 800e38c:	1e69      	subs	r1, r5, #1
 800e38e:	e006      	b.n	800e39e <_strtol_l.isra.0+0xea>
 800e390:	b106      	cbz	r6, 800e394 <_strtol_l.isra.0+0xe0>
 800e392:	4240      	negs	r0, r0
 800e394:	f1b8 0f00 	cmp.w	r8, #0
 800e398:	d099      	beq.n	800e2ce <_strtol_l.isra.0+0x1a>
 800e39a:	2a00      	cmp	r2, #0
 800e39c:	d1f6      	bne.n	800e38c <_strtol_l.isra.0+0xd8>
 800e39e:	f8c8 1000 	str.w	r1, [r8]
 800e3a2:	e794      	b.n	800e2ce <_strtol_l.isra.0+0x1a>
 800e3a4:	08011779 	.word	0x08011779

0800e3a8 <_strtol_r>:
 800e3a8:	f7ff bf84 	b.w	800e2b4 <_strtol_l.isra.0>

0800e3ac <_fwalk_sglue>:
 800e3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b0:	4607      	mov	r7, r0
 800e3b2:	4688      	mov	r8, r1
 800e3b4:	4614      	mov	r4, r2
 800e3b6:	2600      	movs	r6, #0
 800e3b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3bc:	f1b9 0901 	subs.w	r9, r9, #1
 800e3c0:	d505      	bpl.n	800e3ce <_fwalk_sglue+0x22>
 800e3c2:	6824      	ldr	r4, [r4, #0]
 800e3c4:	2c00      	cmp	r4, #0
 800e3c6:	d1f7      	bne.n	800e3b8 <_fwalk_sglue+0xc>
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ce:	89ab      	ldrh	r3, [r5, #12]
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d907      	bls.n	800e3e4 <_fwalk_sglue+0x38>
 800e3d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	d003      	beq.n	800e3e4 <_fwalk_sglue+0x38>
 800e3dc:	4629      	mov	r1, r5
 800e3de:	4638      	mov	r0, r7
 800e3e0:	47c0      	blx	r8
 800e3e2:	4306      	orrs	r6, r0
 800e3e4:	3568      	adds	r5, #104	@ 0x68
 800e3e6:	e7e9      	b.n	800e3bc <_fwalk_sglue+0x10>

0800e3e8 <memset>:
 800e3e8:	4402      	add	r2, r0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d100      	bne.n	800e3f2 <memset+0xa>
 800e3f0:	4770      	bx	lr
 800e3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800e3f6:	e7f9      	b.n	800e3ec <memset+0x4>

0800e3f8 <strncmp>:
 800e3f8:	b510      	push	{r4, lr}
 800e3fa:	b16a      	cbz	r2, 800e418 <strncmp+0x20>
 800e3fc:	3901      	subs	r1, #1
 800e3fe:	1884      	adds	r4, r0, r2
 800e400:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e404:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e408:	429a      	cmp	r2, r3
 800e40a:	d103      	bne.n	800e414 <strncmp+0x1c>
 800e40c:	42a0      	cmp	r0, r4
 800e40e:	d001      	beq.n	800e414 <strncmp+0x1c>
 800e410:	2a00      	cmp	r2, #0
 800e412:	d1f5      	bne.n	800e400 <strncmp+0x8>
 800e414:	1ad0      	subs	r0, r2, r3
 800e416:	bd10      	pop	{r4, pc}
 800e418:	4610      	mov	r0, r2
 800e41a:	e7fc      	b.n	800e416 <strncmp+0x1e>

0800e41c <__errno>:
 800e41c:	4b01      	ldr	r3, [pc, #4]	@ (800e424 <__errno+0x8>)
 800e41e:	6818      	ldr	r0, [r3, #0]
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	2000019c 	.word	0x2000019c

0800e428 <__libc_init_array>:
 800e428:	b570      	push	{r4, r5, r6, lr}
 800e42a:	4d0d      	ldr	r5, [pc, #52]	@ (800e460 <__libc_init_array+0x38>)
 800e42c:	2600      	movs	r6, #0
 800e42e:	4c0d      	ldr	r4, [pc, #52]	@ (800e464 <__libc_init_array+0x3c>)
 800e430:	1b64      	subs	r4, r4, r5
 800e432:	10a4      	asrs	r4, r4, #2
 800e434:	42a6      	cmp	r6, r4
 800e436:	d109      	bne.n	800e44c <__libc_init_array+0x24>
 800e438:	4d0b      	ldr	r5, [pc, #44]	@ (800e468 <__libc_init_array+0x40>)
 800e43a:	2600      	movs	r6, #0
 800e43c:	4c0b      	ldr	r4, [pc, #44]	@ (800e46c <__libc_init_array+0x44>)
 800e43e:	f002 fda9 	bl	8010f94 <_init>
 800e442:	1b64      	subs	r4, r4, r5
 800e444:	10a4      	asrs	r4, r4, #2
 800e446:	42a6      	cmp	r6, r4
 800e448:	d105      	bne.n	800e456 <__libc_init_array+0x2e>
 800e44a:	bd70      	pop	{r4, r5, r6, pc}
 800e44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e450:	3601      	adds	r6, #1
 800e452:	4798      	blx	r3
 800e454:	e7ee      	b.n	800e434 <__libc_init_array+0xc>
 800e456:	f855 3b04 	ldr.w	r3, [r5], #4
 800e45a:	3601      	adds	r6, #1
 800e45c:	4798      	blx	r3
 800e45e:	e7f2      	b.n	800e446 <__libc_init_array+0x1e>
 800e460:	08011980 	.word	0x08011980
 800e464:	08011980 	.word	0x08011980
 800e468:	08011980 	.word	0x08011980
 800e46c:	08011984 	.word	0x08011984

0800e470 <__retarget_lock_init_recursive>:
 800e470:	4770      	bx	lr

0800e472 <__retarget_lock_acquire_recursive>:
 800e472:	4770      	bx	lr

0800e474 <__retarget_lock_release_recursive>:
 800e474:	4770      	bx	lr
	...

0800e478 <_localeconv_r>:
 800e478:	4800      	ldr	r0, [pc, #0]	@ (800e47c <_localeconv_r+0x4>)
 800e47a:	4770      	bx	lr
 800e47c:	20000120 	.word	0x20000120

0800e480 <memchr>:
 800e480:	b2c9      	uxtb	r1, r1
 800e482:	4603      	mov	r3, r0
 800e484:	4402      	add	r2, r0
 800e486:	b510      	push	{r4, lr}
 800e488:	4293      	cmp	r3, r2
 800e48a:	4618      	mov	r0, r3
 800e48c:	d101      	bne.n	800e492 <memchr+0x12>
 800e48e:	2000      	movs	r0, #0
 800e490:	e003      	b.n	800e49a <memchr+0x1a>
 800e492:	7804      	ldrb	r4, [r0, #0]
 800e494:	3301      	adds	r3, #1
 800e496:	428c      	cmp	r4, r1
 800e498:	d1f6      	bne.n	800e488 <memchr+0x8>
 800e49a:	bd10      	pop	{r4, pc}

0800e49c <memcpy>:
 800e49c:	440a      	add	r2, r1
 800e49e:	1e43      	subs	r3, r0, #1
 800e4a0:	4291      	cmp	r1, r2
 800e4a2:	d100      	bne.n	800e4a6 <memcpy+0xa>
 800e4a4:	4770      	bx	lr
 800e4a6:	b510      	push	{r4, lr}
 800e4a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4ac:	4291      	cmp	r1, r2
 800e4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4b2:	d1f9      	bne.n	800e4a8 <memcpy+0xc>
 800e4b4:	bd10      	pop	{r4, pc}
	...

0800e4b8 <nan>:
 800e4b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e4c0 <nan+0x8>
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	00000000 	.word	0x00000000
 800e4c4:	7ff80000 	.word	0x7ff80000

0800e4c8 <nanf>:
 800e4c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e4d0 <nanf+0x8>
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	7fc00000 	.word	0x7fc00000

0800e4d4 <quorem>:
 800e4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d8:	6903      	ldr	r3, [r0, #16]
 800e4da:	4607      	mov	r7, r0
 800e4dc:	690c      	ldr	r4, [r1, #16]
 800e4de:	42a3      	cmp	r3, r4
 800e4e0:	f2c0 8083 	blt.w	800e5ea <quorem+0x116>
 800e4e4:	3c01      	subs	r4, #1
 800e4e6:	f100 0514 	add.w	r5, r0, #20
 800e4ea:	f101 0814 	add.w	r8, r1, #20
 800e4ee:	00a3      	lsls	r3, r4, #2
 800e4f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4f8:	9300      	str	r3, [sp, #0]
 800e4fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4fe:	9301      	str	r3, [sp, #4]
 800e500:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e504:	3301      	adds	r3, #1
 800e506:	429a      	cmp	r2, r3
 800e508:	fbb2 f6f3 	udiv	r6, r2, r3
 800e50c:	d331      	bcc.n	800e572 <quorem+0x9e>
 800e50e:	f04f 0a00 	mov.w	sl, #0
 800e512:	46c4      	mov	ip, r8
 800e514:	46ae      	mov	lr, r5
 800e516:	46d3      	mov	fp, sl
 800e518:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e51c:	b298      	uxth	r0, r3
 800e51e:	45e1      	cmp	r9, ip
 800e520:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e524:	fb06 a000 	mla	r0, r6, r0, sl
 800e528:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e52c:	b280      	uxth	r0, r0
 800e52e:	fb06 2303 	mla	r3, r6, r3, r2
 800e532:	f8de 2000 	ldr.w	r2, [lr]
 800e536:	b292      	uxth	r2, r2
 800e538:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e53c:	eba2 0200 	sub.w	r2, r2, r0
 800e540:	b29b      	uxth	r3, r3
 800e542:	f8de 0000 	ldr.w	r0, [lr]
 800e546:	445a      	add	r2, fp
 800e548:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e54c:	b292      	uxth	r2, r2
 800e54e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e552:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e556:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e55a:	f84e 2b04 	str.w	r2, [lr], #4
 800e55e:	d2db      	bcs.n	800e518 <quorem+0x44>
 800e560:	9b00      	ldr	r3, [sp, #0]
 800e562:	58eb      	ldr	r3, [r5, r3]
 800e564:	b92b      	cbnz	r3, 800e572 <quorem+0x9e>
 800e566:	9b01      	ldr	r3, [sp, #4]
 800e568:	3b04      	subs	r3, #4
 800e56a:	429d      	cmp	r5, r3
 800e56c:	461a      	mov	r2, r3
 800e56e:	d330      	bcc.n	800e5d2 <quorem+0xfe>
 800e570:	613c      	str	r4, [r7, #16]
 800e572:	4638      	mov	r0, r7
 800e574:	f001 fece 	bl	8010314 <__mcmp>
 800e578:	2800      	cmp	r0, #0
 800e57a:	db26      	blt.n	800e5ca <quorem+0xf6>
 800e57c:	4629      	mov	r1, r5
 800e57e:	2000      	movs	r0, #0
 800e580:	f858 2b04 	ldr.w	r2, [r8], #4
 800e584:	f8d1 c000 	ldr.w	ip, [r1]
 800e588:	fa1f fe82 	uxth.w	lr, r2
 800e58c:	45c1      	cmp	r9, r8
 800e58e:	fa1f f38c 	uxth.w	r3, ip
 800e592:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e596:	eba3 030e 	sub.w	r3, r3, lr
 800e59a:	4403      	add	r3, r0
 800e59c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e5a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e5ae:	f841 3b04 	str.w	r3, [r1], #4
 800e5b2:	d2e5      	bcs.n	800e580 <quorem+0xac>
 800e5b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5bc:	b922      	cbnz	r2, 800e5c8 <quorem+0xf4>
 800e5be:	3b04      	subs	r3, #4
 800e5c0:	429d      	cmp	r5, r3
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	d30b      	bcc.n	800e5de <quorem+0x10a>
 800e5c6:	613c      	str	r4, [r7, #16]
 800e5c8:	3601      	adds	r6, #1
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	b003      	add	sp, #12
 800e5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d2:	6812      	ldr	r2, [r2, #0]
 800e5d4:	3b04      	subs	r3, #4
 800e5d6:	2a00      	cmp	r2, #0
 800e5d8:	d1ca      	bne.n	800e570 <quorem+0x9c>
 800e5da:	3c01      	subs	r4, #1
 800e5dc:	e7c5      	b.n	800e56a <quorem+0x96>
 800e5de:	6812      	ldr	r2, [r2, #0]
 800e5e0:	3b04      	subs	r3, #4
 800e5e2:	2a00      	cmp	r2, #0
 800e5e4:	d1ef      	bne.n	800e5c6 <quorem+0xf2>
 800e5e6:	3c01      	subs	r4, #1
 800e5e8:	e7ea      	b.n	800e5c0 <quorem+0xec>
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	e7ee      	b.n	800e5cc <quorem+0xf8>
	...

0800e5f0 <_dtoa_r>:
 800e5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	69c7      	ldr	r7, [r0, #28]
 800e5f6:	b097      	sub	sp, #92	@ 0x5c
 800e5f8:	4681      	mov	r9, r0
 800e5fa:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e5fc:	9107      	str	r1, [sp, #28]
 800e5fe:	920c      	str	r2, [sp, #48]	@ 0x30
 800e600:	9311      	str	r3, [sp, #68]	@ 0x44
 800e602:	ec55 4b10 	vmov	r4, r5, d0
 800e606:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e60a:	b97f      	cbnz	r7, 800e62c <_dtoa_r+0x3c>
 800e60c:	2010      	movs	r0, #16
 800e60e:	f001 fa4d 	bl	800faac <malloc>
 800e612:	4602      	mov	r2, r0
 800e614:	f8c9 001c 	str.w	r0, [r9, #28]
 800e618:	b920      	cbnz	r0, 800e624 <_dtoa_r+0x34>
 800e61a:	4ba9      	ldr	r3, [pc, #676]	@ (800e8c0 <_dtoa_r+0x2d0>)
 800e61c:	21ef      	movs	r1, #239	@ 0xef
 800e61e:	48a9      	ldr	r0, [pc, #676]	@ (800e8c4 <_dtoa_r+0x2d4>)
 800e620:	f002 f95c 	bl	80108dc <__assert_func>
 800e624:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e628:	6007      	str	r7, [r0, #0]
 800e62a:	60c7      	str	r7, [r0, #12]
 800e62c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e630:	6819      	ldr	r1, [r3, #0]
 800e632:	b159      	cbz	r1, 800e64c <_dtoa_r+0x5c>
 800e634:	685a      	ldr	r2, [r3, #4]
 800e636:	2301      	movs	r3, #1
 800e638:	4648      	mov	r0, r9
 800e63a:	4093      	lsls	r3, r2
 800e63c:	604a      	str	r2, [r1, #4]
 800e63e:	608b      	str	r3, [r1, #8]
 800e640:	f001 fbe8 	bl	800fe14 <_Bfree>
 800e644:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e648:	2200      	movs	r2, #0
 800e64a:	601a      	str	r2, [r3, #0]
 800e64c:	1e2b      	subs	r3, r5, #0
 800e64e:	bfb7      	itett	lt
 800e650:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e654:	2300      	movge	r3, #0
 800e656:	2201      	movlt	r2, #1
 800e658:	9305      	strlt	r3, [sp, #20]
 800e65a:	bfa8      	it	ge
 800e65c:	6033      	strge	r3, [r6, #0]
 800e65e:	9f05      	ldr	r7, [sp, #20]
 800e660:	4b99      	ldr	r3, [pc, #612]	@ (800e8c8 <_dtoa_r+0x2d8>)
 800e662:	bfb8      	it	lt
 800e664:	6032      	strlt	r2, [r6, #0]
 800e666:	43bb      	bics	r3, r7
 800e668:	d112      	bne.n	800e690 <_dtoa_r+0xa0>
 800e66a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e66e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e670:	6013      	str	r3, [r2, #0]
 800e672:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e676:	4323      	orrs	r3, r4
 800e678:	f000 855a 	beq.w	800f130 <_dtoa_r+0xb40>
 800e67c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e67e:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e8dc <_dtoa_r+0x2ec>
 800e682:	2b00      	cmp	r3, #0
 800e684:	f000 855c 	beq.w	800f140 <_dtoa_r+0xb50>
 800e688:	f10a 0303 	add.w	r3, sl, #3
 800e68c:	f000 bd56 	b.w	800f13c <_dtoa_r+0xb4c>
 800e690:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e694:	2200      	movs	r2, #0
 800e696:	2300      	movs	r3, #0
 800e698:	ec51 0b17 	vmov	r0, r1, d7
 800e69c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e6a0:	f7f2 fa22 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6a4:	4680      	mov	r8, r0
 800e6a6:	b158      	cbz	r0, 800e6c0 <_dtoa_r+0xd0>
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e6ac:	6013      	str	r3, [r2, #0]
 800e6ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e6b0:	b113      	cbz	r3, 800e6b8 <_dtoa_r+0xc8>
 800e6b2:	4b86      	ldr	r3, [pc, #536]	@ (800e8cc <_dtoa_r+0x2dc>)
 800e6b4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e6b6:	6013      	str	r3, [r2, #0]
 800e6b8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800e8e0 <_dtoa_r+0x2f0>
 800e6bc:	f000 bd40 	b.w	800f140 <_dtoa_r+0xb50>
 800e6c0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e6c4:	aa14      	add	r2, sp, #80	@ 0x50
 800e6c6:	a915      	add	r1, sp, #84	@ 0x54
 800e6c8:	4648      	mov	r0, r9
 800e6ca:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e6ce:	f001 ff49 	bl	8010564 <__d2b>
 800e6d2:	9002      	str	r0, [sp, #8]
 800e6d4:	2e00      	cmp	r6, #0
 800e6d6:	d076      	beq.n	800e7c6 <_dtoa_r+0x1d6>
 800e6d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6da:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e6de:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e6e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6e6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e6ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e6ee:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	4b76      	ldr	r3, [pc, #472]	@ (800e8d0 <_dtoa_r+0x2e0>)
 800e6f8:	f7f1 fdd6 	bl	80002a8 <__aeabi_dsub>
 800e6fc:	a36a      	add	r3, pc, #424	@ (adr r3, 800e8a8 <_dtoa_r+0x2b8>)
 800e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e702:	f7f1 ff89 	bl	8000618 <__aeabi_dmul>
 800e706:	a36a      	add	r3, pc, #424	@ (adr r3, 800e8b0 <_dtoa_r+0x2c0>)
 800e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70c:	f7f1 fdce 	bl	80002ac <__adddf3>
 800e710:	4604      	mov	r4, r0
 800e712:	460d      	mov	r5, r1
 800e714:	4630      	mov	r0, r6
 800e716:	f7f1 ff15 	bl	8000544 <__aeabi_i2d>
 800e71a:	a367      	add	r3, pc, #412	@ (adr r3, 800e8b8 <_dtoa_r+0x2c8>)
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	f7f1 ff7a 	bl	8000618 <__aeabi_dmul>
 800e724:	4602      	mov	r2, r0
 800e726:	460b      	mov	r3, r1
 800e728:	4620      	mov	r0, r4
 800e72a:	4629      	mov	r1, r5
 800e72c:	f7f1 fdbe 	bl	80002ac <__adddf3>
 800e730:	4604      	mov	r4, r0
 800e732:	460d      	mov	r5, r1
 800e734:	f7f2 fa20 	bl	8000b78 <__aeabi_d2iz>
 800e738:	2200      	movs	r2, #0
 800e73a:	4607      	mov	r7, r0
 800e73c:	2300      	movs	r3, #0
 800e73e:	4620      	mov	r0, r4
 800e740:	4629      	mov	r1, r5
 800e742:	f7f2 f9db 	bl	8000afc <__aeabi_dcmplt>
 800e746:	b140      	cbz	r0, 800e75a <_dtoa_r+0x16a>
 800e748:	4638      	mov	r0, r7
 800e74a:	f7f1 fefb 	bl	8000544 <__aeabi_i2d>
 800e74e:	4622      	mov	r2, r4
 800e750:	462b      	mov	r3, r5
 800e752:	f7f2 f9c9 	bl	8000ae8 <__aeabi_dcmpeq>
 800e756:	b900      	cbnz	r0, 800e75a <_dtoa_r+0x16a>
 800e758:	3f01      	subs	r7, #1
 800e75a:	2f16      	cmp	r7, #22
 800e75c:	d852      	bhi.n	800e804 <_dtoa_r+0x214>
 800e75e:	4b5d      	ldr	r3, [pc, #372]	@ (800e8d4 <_dtoa_r+0x2e4>)
 800e760:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e764:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	f7f2 f9c6 	bl	8000afc <__aeabi_dcmplt>
 800e770:	2800      	cmp	r0, #0
 800e772:	d049      	beq.n	800e808 <_dtoa_r+0x218>
 800e774:	3f01      	subs	r7, #1
 800e776:	2300      	movs	r3, #0
 800e778:	9310      	str	r3, [sp, #64]	@ 0x40
 800e77a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e77c:	1b9b      	subs	r3, r3, r6
 800e77e:	1e5a      	subs	r2, r3, #1
 800e780:	bf4c      	ite	mi
 800e782:	f1c3 0301 	rsbmi	r3, r3, #1
 800e786:	2300      	movpl	r3, #0
 800e788:	9206      	str	r2, [sp, #24]
 800e78a:	bf45      	ittet	mi
 800e78c:	9300      	strmi	r3, [sp, #0]
 800e78e:	2300      	movmi	r3, #0
 800e790:	9300      	strpl	r3, [sp, #0]
 800e792:	9306      	strmi	r3, [sp, #24]
 800e794:	2f00      	cmp	r7, #0
 800e796:	db39      	blt.n	800e80c <_dtoa_r+0x21c>
 800e798:	9b06      	ldr	r3, [sp, #24]
 800e79a:	970d      	str	r7, [sp, #52]	@ 0x34
 800e79c:	443b      	add	r3, r7
 800e79e:	9306      	str	r3, [sp, #24]
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	9308      	str	r3, [sp, #32]
 800e7a4:	9b07      	ldr	r3, [sp, #28]
 800e7a6:	2b09      	cmp	r3, #9
 800e7a8:	d863      	bhi.n	800e872 <_dtoa_r+0x282>
 800e7aa:	2b05      	cmp	r3, #5
 800e7ac:	bfc5      	ittet	gt
 800e7ae:	3b04      	subgt	r3, #4
 800e7b0:	2400      	movgt	r4, #0
 800e7b2:	2401      	movle	r4, #1
 800e7b4:	9307      	strgt	r3, [sp, #28]
 800e7b6:	9b07      	ldr	r3, [sp, #28]
 800e7b8:	3b02      	subs	r3, #2
 800e7ba:	2b03      	cmp	r3, #3
 800e7bc:	d865      	bhi.n	800e88a <_dtoa_r+0x29a>
 800e7be:	e8df f003 	tbb	[pc, r3]
 800e7c2:	5654      	.short	0x5654
 800e7c4:	2d39      	.short	0x2d39
 800e7c6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e7ca:	441e      	add	r6, r3
 800e7cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e7d0:	2b20      	cmp	r3, #32
 800e7d2:	bfc9      	itett	gt
 800e7d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e7d8:	f1c3 0320 	rsble	r3, r3, #32
 800e7dc:	409f      	lslgt	r7, r3
 800e7de:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e7e2:	bfd8      	it	le
 800e7e4:	fa04 f003 	lslle.w	r0, r4, r3
 800e7e8:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800e7ec:	bfc4      	itt	gt
 800e7ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e7f2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e7f6:	f7f1 fe95 	bl	8000524 <__aeabi_ui2d>
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e800:	9212      	str	r2, [sp, #72]	@ 0x48
 800e802:	e776      	b.n	800e6f2 <_dtoa_r+0x102>
 800e804:	2301      	movs	r3, #1
 800e806:	e7b7      	b.n	800e778 <_dtoa_r+0x188>
 800e808:	9010      	str	r0, [sp, #64]	@ 0x40
 800e80a:	e7b6      	b.n	800e77a <_dtoa_r+0x18a>
 800e80c:	9b00      	ldr	r3, [sp, #0]
 800e80e:	1bdb      	subs	r3, r3, r7
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	427b      	negs	r3, r7
 800e814:	9308      	str	r3, [sp, #32]
 800e816:	2300      	movs	r3, #0
 800e818:	930d      	str	r3, [sp, #52]	@ 0x34
 800e81a:	e7c3      	b.n	800e7a4 <_dtoa_r+0x1b4>
 800e81c:	2301      	movs	r3, #1
 800e81e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e822:	eb07 0b03 	add.w	fp, r7, r3
 800e826:	f10b 0301 	add.w	r3, fp, #1
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	9303      	str	r3, [sp, #12]
 800e82e:	bfb8      	it	lt
 800e830:	2301      	movlt	r3, #1
 800e832:	e006      	b.n	800e842 <_dtoa_r+0x252>
 800e834:	2301      	movs	r3, #1
 800e836:	9309      	str	r3, [sp, #36]	@ 0x24
 800e838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	dd28      	ble.n	800e890 <_dtoa_r+0x2a0>
 800e83e:	469b      	mov	fp, r3
 800e840:	9303      	str	r3, [sp, #12]
 800e842:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e846:	2100      	movs	r1, #0
 800e848:	2204      	movs	r2, #4
 800e84a:	f102 0514 	add.w	r5, r2, #20
 800e84e:	429d      	cmp	r5, r3
 800e850:	d926      	bls.n	800e8a0 <_dtoa_r+0x2b0>
 800e852:	6041      	str	r1, [r0, #4]
 800e854:	4648      	mov	r0, r9
 800e856:	f001 fa9d 	bl	800fd94 <_Balloc>
 800e85a:	4682      	mov	sl, r0
 800e85c:	2800      	cmp	r0, #0
 800e85e:	d141      	bne.n	800e8e4 <_dtoa_r+0x2f4>
 800e860:	4b1d      	ldr	r3, [pc, #116]	@ (800e8d8 <_dtoa_r+0x2e8>)
 800e862:	4602      	mov	r2, r0
 800e864:	f240 11af 	movw	r1, #431	@ 0x1af
 800e868:	e6d9      	b.n	800e61e <_dtoa_r+0x2e>
 800e86a:	2300      	movs	r3, #0
 800e86c:	e7e3      	b.n	800e836 <_dtoa_r+0x246>
 800e86e:	2300      	movs	r3, #0
 800e870:	e7d5      	b.n	800e81e <_dtoa_r+0x22e>
 800e872:	2401      	movs	r4, #1
 800e874:	2300      	movs	r3, #0
 800e876:	9409      	str	r4, [sp, #36]	@ 0x24
 800e878:	9307      	str	r3, [sp, #28]
 800e87a:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e87e:	2200      	movs	r2, #0
 800e880:	2312      	movs	r3, #18
 800e882:	f8cd b00c 	str.w	fp, [sp, #12]
 800e886:	920c      	str	r2, [sp, #48]	@ 0x30
 800e888:	e7db      	b.n	800e842 <_dtoa_r+0x252>
 800e88a:	2301      	movs	r3, #1
 800e88c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e88e:	e7f4      	b.n	800e87a <_dtoa_r+0x28a>
 800e890:	f04f 0b01 	mov.w	fp, #1
 800e894:	465b      	mov	r3, fp
 800e896:	f8cd b00c 	str.w	fp, [sp, #12]
 800e89a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e89e:	e7d0      	b.n	800e842 <_dtoa_r+0x252>
 800e8a0:	3101      	adds	r1, #1
 800e8a2:	0052      	lsls	r2, r2, #1
 800e8a4:	e7d1      	b.n	800e84a <_dtoa_r+0x25a>
 800e8a6:	bf00      	nop
 800e8a8:	636f4361 	.word	0x636f4361
 800e8ac:	3fd287a7 	.word	0x3fd287a7
 800e8b0:	8b60c8b3 	.word	0x8b60c8b3
 800e8b4:	3fc68a28 	.word	0x3fc68a28
 800e8b8:	509f79fb 	.word	0x509f79fb
 800e8bc:	3fd34413 	.word	0x3fd34413
 800e8c0:	0801159c 	.word	0x0801159c
 800e8c4:	080115b3 	.word	0x080115b3
 800e8c8:	7ff00000 	.word	0x7ff00000
 800e8cc:	0801155d 	.word	0x0801155d
 800e8d0:	3ff80000 	.word	0x3ff80000
 800e8d4:	080118b0 	.word	0x080118b0
 800e8d8:	0801160b 	.word	0x0801160b
 800e8dc:	08011598 	.word	0x08011598
 800e8e0:	0801155c 	.word	0x0801155c
 800e8e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e8e8:	6018      	str	r0, [r3, #0]
 800e8ea:	9b03      	ldr	r3, [sp, #12]
 800e8ec:	2b0e      	cmp	r3, #14
 800e8ee:	f200 80a1 	bhi.w	800ea34 <_dtoa_r+0x444>
 800e8f2:	2c00      	cmp	r4, #0
 800e8f4:	f000 809e 	beq.w	800ea34 <_dtoa_r+0x444>
 800e8f8:	2f00      	cmp	r7, #0
 800e8fa:	dd33      	ble.n	800e964 <_dtoa_r+0x374>
 800e8fc:	f007 020f 	and.w	r2, r7, #15
 800e900:	4b9b      	ldr	r3, [pc, #620]	@ (800eb70 <_dtoa_r+0x580>)
 800e902:	05f8      	lsls	r0, r7, #23
 800e904:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e90c:	ed93 7b00 	vldr	d7, [r3]
 800e910:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e914:	d516      	bpl.n	800e944 <_dtoa_r+0x354>
 800e916:	4b97      	ldr	r3, [pc, #604]	@ (800eb74 <_dtoa_r+0x584>)
 800e918:	f004 040f 	and.w	r4, r4, #15
 800e91c:	2603      	movs	r6, #3
 800e91e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e922:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e926:	f7f1 ffa1 	bl	800086c <__aeabi_ddiv>
 800e92a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e92e:	4d91      	ldr	r5, [pc, #580]	@ (800eb74 <_dtoa_r+0x584>)
 800e930:	b954      	cbnz	r4, 800e948 <_dtoa_r+0x358>
 800e932:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e93a:	f7f1 ff97 	bl	800086c <__aeabi_ddiv>
 800e93e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e942:	e028      	b.n	800e996 <_dtoa_r+0x3a6>
 800e944:	2602      	movs	r6, #2
 800e946:	e7f2      	b.n	800e92e <_dtoa_r+0x33e>
 800e948:	07e1      	lsls	r1, r4, #31
 800e94a:	d508      	bpl.n	800e95e <_dtoa_r+0x36e>
 800e94c:	3601      	adds	r6, #1
 800e94e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e952:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e956:	f7f1 fe5f 	bl	8000618 <__aeabi_dmul>
 800e95a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e95e:	1064      	asrs	r4, r4, #1
 800e960:	3508      	adds	r5, #8
 800e962:	e7e5      	b.n	800e930 <_dtoa_r+0x340>
 800e964:	f000 80af 	beq.w	800eac6 <_dtoa_r+0x4d6>
 800e968:	427c      	negs	r4, r7
 800e96a:	4b81      	ldr	r3, [pc, #516]	@ (800eb70 <_dtoa_r+0x580>)
 800e96c:	4d81      	ldr	r5, [pc, #516]	@ (800eb74 <_dtoa_r+0x584>)
 800e96e:	2602      	movs	r6, #2
 800e970:	f004 020f 	and.w	r2, r4, #15
 800e974:	1124      	asrs	r4, r4, #4
 800e976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e97a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e982:	f7f1 fe49 	bl	8000618 <__aeabi_dmul>
 800e986:	2300      	movs	r3, #0
 800e988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e98c:	2c00      	cmp	r4, #0
 800e98e:	f040 808f 	bne.w	800eab0 <_dtoa_r+0x4c0>
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1d3      	bne.n	800e93e <_dtoa_r+0x34e>
 800e996:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e998:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f000 8094 	beq.w	800eaca <_dtoa_r+0x4da>
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	4b74      	ldr	r3, [pc, #464]	@ (800eb78 <_dtoa_r+0x588>)
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	f7f2 f8a7 	bl	8000afc <__aeabi_dcmplt>
 800e9ae:	2800      	cmp	r0, #0
 800e9b0:	f000 808b 	beq.w	800eaca <_dtoa_r+0x4da>
 800e9b4:	9b03      	ldr	r3, [sp, #12]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f000 8087 	beq.w	800eaca <_dtoa_r+0x4da>
 800e9bc:	f1bb 0f00 	cmp.w	fp, #0
 800e9c0:	dd34      	ble.n	800ea2c <_dtoa_r+0x43c>
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e9c8:	3601      	adds	r6, #1
 800e9ca:	465c      	mov	r4, fp
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	4b6b      	ldr	r3, [pc, #428]	@ (800eb7c <_dtoa_r+0x58c>)
 800e9d0:	4629      	mov	r1, r5
 800e9d2:	f7f1 fe21 	bl	8000618 <__aeabi_dmul>
 800e9d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f7f1 fdb2 	bl	8000544 <__aeabi_i2d>
 800e9e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9e4:	f7f1 fe18 	bl	8000618 <__aeabi_dmul>
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	4b65      	ldr	r3, [pc, #404]	@ (800eb80 <_dtoa_r+0x590>)
 800e9ec:	f7f1 fc5e 	bl	80002ac <__adddf3>
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e9f6:	2c00      	cmp	r4, #0
 800e9f8:	d16a      	bne.n	800ead0 <_dtoa_r+0x4e0>
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	4b61      	ldr	r3, [pc, #388]	@ (800eb84 <_dtoa_r+0x594>)
 800e9fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea02:	f7f1 fc51 	bl	80002a8 <__aeabi_dsub>
 800ea06:	4602      	mov	r2, r0
 800ea08:	460b      	mov	r3, r1
 800ea0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea0e:	462a      	mov	r2, r5
 800ea10:	4633      	mov	r3, r6
 800ea12:	f7f2 f891 	bl	8000b38 <__aeabi_dcmpgt>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	f040 8298 	bne.w	800ef4c <_dtoa_r+0x95c>
 800ea1c:	462a      	mov	r2, r5
 800ea1e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ea22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea26:	f7f2 f869 	bl	8000afc <__aeabi_dcmplt>
 800ea2a:	bb38      	cbnz	r0, 800ea7c <_dtoa_r+0x48c>
 800ea2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ea30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ea34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	f2c0 8157 	blt.w	800ecea <_dtoa_r+0x6fa>
 800ea3c:	2f0e      	cmp	r7, #14
 800ea3e:	f300 8154 	bgt.w	800ecea <_dtoa_r+0x6fa>
 800ea42:	4b4b      	ldr	r3, [pc, #300]	@ (800eb70 <_dtoa_r+0x580>)
 800ea44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea48:	ed93 7b00 	vldr	d7, [r3]
 800ea4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	ed8d 7b00 	vstr	d7, [sp]
 800ea54:	f280 80e5 	bge.w	800ec22 <_dtoa_r+0x632>
 800ea58:	9b03      	ldr	r3, [sp, #12]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	f300 80e1 	bgt.w	800ec22 <_dtoa_r+0x632>
 800ea60:	d10c      	bne.n	800ea7c <_dtoa_r+0x48c>
 800ea62:	2200      	movs	r2, #0
 800ea64:	4b47      	ldr	r3, [pc, #284]	@ (800eb84 <_dtoa_r+0x594>)
 800ea66:	ec51 0b17 	vmov	r0, r1, d7
 800ea6a:	f7f1 fdd5 	bl	8000618 <__aeabi_dmul>
 800ea6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea72:	f7f2 f857 	bl	8000b24 <__aeabi_dcmpge>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	f000 8266 	beq.w	800ef48 <_dtoa_r+0x958>
 800ea7c:	2400      	movs	r4, #0
 800ea7e:	4625      	mov	r5, r4
 800ea80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea82:	4656      	mov	r6, sl
 800ea84:	ea6f 0803 	mvn.w	r8, r3
 800ea88:	2700      	movs	r7, #0
 800ea8a:	4621      	mov	r1, r4
 800ea8c:	4648      	mov	r0, r9
 800ea8e:	f001 f9c1 	bl	800fe14 <_Bfree>
 800ea92:	2d00      	cmp	r5, #0
 800ea94:	f000 80bd 	beq.w	800ec12 <_dtoa_r+0x622>
 800ea98:	b12f      	cbz	r7, 800eaa6 <_dtoa_r+0x4b6>
 800ea9a:	42af      	cmp	r7, r5
 800ea9c:	d003      	beq.n	800eaa6 <_dtoa_r+0x4b6>
 800ea9e:	4639      	mov	r1, r7
 800eaa0:	4648      	mov	r0, r9
 800eaa2:	f001 f9b7 	bl	800fe14 <_Bfree>
 800eaa6:	4629      	mov	r1, r5
 800eaa8:	4648      	mov	r0, r9
 800eaaa:	f001 f9b3 	bl	800fe14 <_Bfree>
 800eaae:	e0b0      	b.n	800ec12 <_dtoa_r+0x622>
 800eab0:	07e2      	lsls	r2, r4, #31
 800eab2:	d505      	bpl.n	800eac0 <_dtoa_r+0x4d0>
 800eab4:	3601      	adds	r6, #1
 800eab6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eaba:	f7f1 fdad 	bl	8000618 <__aeabi_dmul>
 800eabe:	2301      	movs	r3, #1
 800eac0:	1064      	asrs	r4, r4, #1
 800eac2:	3508      	adds	r5, #8
 800eac4:	e762      	b.n	800e98c <_dtoa_r+0x39c>
 800eac6:	2602      	movs	r6, #2
 800eac8:	e765      	b.n	800e996 <_dtoa_r+0x3a6>
 800eaca:	46b8      	mov	r8, r7
 800eacc:	9c03      	ldr	r4, [sp, #12]
 800eace:	e784      	b.n	800e9da <_dtoa_r+0x3ea>
 800ead0:	4b27      	ldr	r3, [pc, #156]	@ (800eb70 <_dtoa_r+0x580>)
 800ead2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ead4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ead8:	4454      	add	r4, sl
 800eada:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eade:	2900      	cmp	r1, #0
 800eae0:	d054      	beq.n	800eb8c <_dtoa_r+0x59c>
 800eae2:	2000      	movs	r0, #0
 800eae4:	4928      	ldr	r1, [pc, #160]	@ (800eb88 <_dtoa_r+0x598>)
 800eae6:	f7f1 fec1 	bl	800086c <__aeabi_ddiv>
 800eaea:	4633      	mov	r3, r6
 800eaec:	4656      	mov	r6, sl
 800eaee:	462a      	mov	r2, r5
 800eaf0:	f7f1 fbda 	bl	80002a8 <__aeabi_dsub>
 800eaf4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eaf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eafc:	f7f2 f83c 	bl	8000b78 <__aeabi_d2iz>
 800eb00:	4605      	mov	r5, r0
 800eb02:	f7f1 fd1f 	bl	8000544 <__aeabi_i2d>
 800eb06:	4602      	mov	r2, r0
 800eb08:	460b      	mov	r3, r1
 800eb0a:	3530      	adds	r5, #48	@ 0x30
 800eb0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb10:	f7f1 fbca 	bl	80002a8 <__aeabi_dsub>
 800eb14:	4602      	mov	r2, r0
 800eb16:	460b      	mov	r3, r1
 800eb18:	f806 5b01 	strb.w	r5, [r6], #1
 800eb1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eb24:	f7f1 ffea 	bl	8000afc <__aeabi_dcmplt>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d172      	bne.n	800ec12 <_dtoa_r+0x622>
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	4912      	ldr	r1, [pc, #72]	@ (800eb78 <_dtoa_r+0x588>)
 800eb30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb34:	f7f1 fbb8 	bl	80002a8 <__aeabi_dsub>
 800eb38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eb3c:	f7f1 ffde 	bl	8000afc <__aeabi_dcmplt>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	f040 80b4 	bne.w	800ecae <_dtoa_r+0x6be>
 800eb46:	42a6      	cmp	r6, r4
 800eb48:	f43f af70 	beq.w	800ea2c <_dtoa_r+0x43c>
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	4b0b      	ldr	r3, [pc, #44]	@ (800eb7c <_dtoa_r+0x58c>)
 800eb50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eb54:	f7f1 fd60 	bl	8000618 <__aeabi_dmul>
 800eb58:	2200      	movs	r2, #0
 800eb5a:	4b08      	ldr	r3, [pc, #32]	@ (800eb7c <_dtoa_r+0x58c>)
 800eb5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eb60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb64:	f7f1 fd58 	bl	8000618 <__aeabi_dmul>
 800eb68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb6c:	e7c4      	b.n	800eaf8 <_dtoa_r+0x508>
 800eb6e:	bf00      	nop
 800eb70:	080118b0 	.word	0x080118b0
 800eb74:	08011888 	.word	0x08011888
 800eb78:	3ff00000 	.word	0x3ff00000
 800eb7c:	40240000 	.word	0x40240000
 800eb80:	401c0000 	.word	0x401c0000
 800eb84:	40140000 	.word	0x40140000
 800eb88:	3fe00000 	.word	0x3fe00000
 800eb8c:	4631      	mov	r1, r6
 800eb8e:	4656      	mov	r6, sl
 800eb90:	4628      	mov	r0, r5
 800eb92:	f7f1 fd41 	bl	8000618 <__aeabi_dmul>
 800eb96:	9413      	str	r4, [sp, #76]	@ 0x4c
 800eb98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eb9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eba0:	f7f1 ffea 	bl	8000b78 <__aeabi_d2iz>
 800eba4:	4605      	mov	r5, r0
 800eba6:	f7f1 fccd 	bl	8000544 <__aeabi_i2d>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	3530      	adds	r5, #48	@ 0x30
 800ebae:	460b      	mov	r3, r1
 800ebb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebb4:	f7f1 fb78 	bl	80002a8 <__aeabi_dsub>
 800ebb8:	f806 5b01 	strb.w	r5, [r6], #1
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	42a6      	cmp	r6, r4
 800ebc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ebc6:	f04f 0200 	mov.w	r2, #0
 800ebca:	d124      	bne.n	800ec16 <_dtoa_r+0x626>
 800ebcc:	4baf      	ldr	r3, [pc, #700]	@ (800ee8c <_dtoa_r+0x89c>)
 800ebce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ebd2:	f7f1 fb6b 	bl	80002ac <__adddf3>
 800ebd6:	4602      	mov	r2, r0
 800ebd8:	460b      	mov	r3, r1
 800ebda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebde:	f7f1 ffab 	bl	8000b38 <__aeabi_dcmpgt>
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d163      	bne.n	800ecae <_dtoa_r+0x6be>
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	49a8      	ldr	r1, [pc, #672]	@ (800ee8c <_dtoa_r+0x89c>)
 800ebea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ebee:	f7f1 fb5b 	bl	80002a8 <__aeabi_dsub>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebfa:	f7f1 ff7f 	bl	8000afc <__aeabi_dcmplt>
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	f43f af14 	beq.w	800ea2c <_dtoa_r+0x43c>
 800ec04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ec06:	1e73      	subs	r3, r6, #1
 800ec08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ec0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec0e:	2b30      	cmp	r3, #48	@ 0x30
 800ec10:	d0f8      	beq.n	800ec04 <_dtoa_r+0x614>
 800ec12:	4647      	mov	r7, r8
 800ec14:	e03b      	b.n	800ec8e <_dtoa_r+0x69e>
 800ec16:	4b9e      	ldr	r3, [pc, #632]	@ (800ee90 <_dtoa_r+0x8a0>)
 800ec18:	f7f1 fcfe 	bl	8000618 <__aeabi_dmul>
 800ec1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec20:	e7bc      	b.n	800eb9c <_dtoa_r+0x5ac>
 800ec22:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ec26:	4656      	mov	r6, sl
 800ec28:	4620      	mov	r0, r4
 800ec2a:	4629      	mov	r1, r5
 800ec2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec30:	f7f1 fe1c 	bl	800086c <__aeabi_ddiv>
 800ec34:	f7f1 ffa0 	bl	8000b78 <__aeabi_d2iz>
 800ec38:	4680      	mov	r8, r0
 800ec3a:	f7f1 fc83 	bl	8000544 <__aeabi_i2d>
 800ec3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec42:	f7f1 fce9 	bl	8000618 <__aeabi_dmul>
 800ec46:	4602      	mov	r2, r0
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ec4e:	460b      	mov	r3, r1
 800ec50:	4629      	mov	r1, r5
 800ec52:	f7f1 fb29 	bl	80002a8 <__aeabi_dsub>
 800ec56:	9d03      	ldr	r5, [sp, #12]
 800ec58:	f806 4b01 	strb.w	r4, [r6], #1
 800ec5c:	eba6 040a 	sub.w	r4, r6, sl
 800ec60:	4602      	mov	r2, r0
 800ec62:	460b      	mov	r3, r1
 800ec64:	42a5      	cmp	r5, r4
 800ec66:	d133      	bne.n	800ecd0 <_dtoa_r+0x6e0>
 800ec68:	f7f1 fb20 	bl	80002ac <__adddf3>
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	460d      	mov	r5, r1
 800ec70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec74:	f7f1 ff60 	bl	8000b38 <__aeabi_dcmpgt>
 800ec78:	b9c0      	cbnz	r0, 800ecac <_dtoa_r+0x6bc>
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec82:	f7f1 ff31 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec86:	b110      	cbz	r0, 800ec8e <_dtoa_r+0x69e>
 800ec88:	f018 0f01 	tst.w	r8, #1
 800ec8c:	d10e      	bne.n	800ecac <_dtoa_r+0x6bc>
 800ec8e:	9902      	ldr	r1, [sp, #8]
 800ec90:	4648      	mov	r0, r9
 800ec92:	f001 f8bf 	bl	800fe14 <_Bfree>
 800ec96:	2300      	movs	r3, #0
 800ec98:	3701      	adds	r7, #1
 800ec9a:	7033      	strb	r3, [r6, #0]
 800ec9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec9e:	601f      	str	r7, [r3, #0]
 800eca0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	f000 824c 	beq.w	800f140 <_dtoa_r+0xb50>
 800eca8:	601e      	str	r6, [r3, #0]
 800ecaa:	e249      	b.n	800f140 <_dtoa_r+0xb50>
 800ecac:	46b8      	mov	r8, r7
 800ecae:	4633      	mov	r3, r6
 800ecb0:	461e      	mov	r6, r3
 800ecb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecb6:	2a39      	cmp	r2, #57	@ 0x39
 800ecb8:	d106      	bne.n	800ecc8 <_dtoa_r+0x6d8>
 800ecba:	459a      	cmp	sl, r3
 800ecbc:	d1f8      	bne.n	800ecb0 <_dtoa_r+0x6c0>
 800ecbe:	2230      	movs	r2, #48	@ 0x30
 800ecc0:	f108 0801 	add.w	r8, r8, #1
 800ecc4:	f88a 2000 	strb.w	r2, [sl]
 800ecc8:	781a      	ldrb	r2, [r3, #0]
 800ecca:	3201      	adds	r2, #1
 800eccc:	701a      	strb	r2, [r3, #0]
 800ecce:	e7a0      	b.n	800ec12 <_dtoa_r+0x622>
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	4b6f      	ldr	r3, [pc, #444]	@ (800ee90 <_dtoa_r+0x8a0>)
 800ecd4:	f7f1 fca0 	bl	8000618 <__aeabi_dmul>
 800ecd8:	2200      	movs	r2, #0
 800ecda:	2300      	movs	r3, #0
 800ecdc:	4604      	mov	r4, r0
 800ecde:	460d      	mov	r5, r1
 800ece0:	f7f1 ff02 	bl	8000ae8 <__aeabi_dcmpeq>
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d09f      	beq.n	800ec28 <_dtoa_r+0x638>
 800ece8:	e7d1      	b.n	800ec8e <_dtoa_r+0x69e>
 800ecea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecec:	2a00      	cmp	r2, #0
 800ecee:	f000 80ea 	beq.w	800eec6 <_dtoa_r+0x8d6>
 800ecf2:	9a07      	ldr	r2, [sp, #28]
 800ecf4:	2a01      	cmp	r2, #1
 800ecf6:	f300 80cd 	bgt.w	800ee94 <_dtoa_r+0x8a4>
 800ecfa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ecfc:	2a00      	cmp	r2, #0
 800ecfe:	f000 80c1 	beq.w	800ee84 <_dtoa_r+0x894>
 800ed02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ed06:	9c08      	ldr	r4, [sp, #32]
 800ed08:	9e00      	ldr	r6, [sp, #0]
 800ed0a:	9a00      	ldr	r2, [sp, #0]
 800ed0c:	2101      	movs	r1, #1
 800ed0e:	4648      	mov	r0, r9
 800ed10:	441a      	add	r2, r3
 800ed12:	9200      	str	r2, [sp, #0]
 800ed14:	9a06      	ldr	r2, [sp, #24]
 800ed16:	441a      	add	r2, r3
 800ed18:	9206      	str	r2, [sp, #24]
 800ed1a:	f001 f97b 	bl	8010014 <__i2b>
 800ed1e:	4605      	mov	r5, r0
 800ed20:	b166      	cbz	r6, 800ed3c <_dtoa_r+0x74c>
 800ed22:	9b06      	ldr	r3, [sp, #24]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	dd09      	ble.n	800ed3c <_dtoa_r+0x74c>
 800ed28:	42b3      	cmp	r3, r6
 800ed2a:	9a00      	ldr	r2, [sp, #0]
 800ed2c:	bfa8      	it	ge
 800ed2e:	4633      	movge	r3, r6
 800ed30:	1ad2      	subs	r2, r2, r3
 800ed32:	1af6      	subs	r6, r6, r3
 800ed34:	9200      	str	r2, [sp, #0]
 800ed36:	9a06      	ldr	r2, [sp, #24]
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	9306      	str	r3, [sp, #24]
 800ed3c:	9b08      	ldr	r3, [sp, #32]
 800ed3e:	b30b      	cbz	r3, 800ed84 <_dtoa_r+0x794>
 800ed40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f000 80c6 	beq.w	800eed4 <_dtoa_r+0x8e4>
 800ed48:	2c00      	cmp	r4, #0
 800ed4a:	f000 80c0 	beq.w	800eece <_dtoa_r+0x8de>
 800ed4e:	4629      	mov	r1, r5
 800ed50:	4622      	mov	r2, r4
 800ed52:	4648      	mov	r0, r9
 800ed54:	f001 fa18 	bl	8010188 <__pow5mult>
 800ed58:	9a02      	ldr	r2, [sp, #8]
 800ed5a:	4601      	mov	r1, r0
 800ed5c:	4605      	mov	r5, r0
 800ed5e:	4648      	mov	r0, r9
 800ed60:	f001 f96e 	bl	8010040 <__multiply>
 800ed64:	9902      	ldr	r1, [sp, #8]
 800ed66:	4680      	mov	r8, r0
 800ed68:	4648      	mov	r0, r9
 800ed6a:	f001 f853 	bl	800fe14 <_Bfree>
 800ed6e:	9b08      	ldr	r3, [sp, #32]
 800ed70:	1b1b      	subs	r3, r3, r4
 800ed72:	9308      	str	r3, [sp, #32]
 800ed74:	f000 80b1 	beq.w	800eeda <_dtoa_r+0x8ea>
 800ed78:	9a08      	ldr	r2, [sp, #32]
 800ed7a:	4641      	mov	r1, r8
 800ed7c:	4648      	mov	r0, r9
 800ed7e:	f001 fa03 	bl	8010188 <__pow5mult>
 800ed82:	9002      	str	r0, [sp, #8]
 800ed84:	2101      	movs	r1, #1
 800ed86:	4648      	mov	r0, r9
 800ed88:	f001 f944 	bl	8010014 <__i2b>
 800ed8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed8e:	4604      	mov	r4, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f000 81d9 	beq.w	800f148 <_dtoa_r+0xb58>
 800ed96:	461a      	mov	r2, r3
 800ed98:	4601      	mov	r1, r0
 800ed9a:	4648      	mov	r0, r9
 800ed9c:	f001 f9f4 	bl	8010188 <__pow5mult>
 800eda0:	9b07      	ldr	r3, [sp, #28]
 800eda2:	4604      	mov	r4, r0
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	f300 809f 	bgt.w	800eee8 <_dtoa_r+0x8f8>
 800edaa:	9b04      	ldr	r3, [sp, #16]
 800edac:	2b00      	cmp	r3, #0
 800edae:	f040 8097 	bne.w	800eee0 <_dtoa_r+0x8f0>
 800edb2:	9b05      	ldr	r3, [sp, #20]
 800edb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f040 8093 	bne.w	800eee4 <_dtoa_r+0x8f4>
 800edbe:	9b05      	ldr	r3, [sp, #20]
 800edc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800edc4:	0d1b      	lsrs	r3, r3, #20
 800edc6:	051b      	lsls	r3, r3, #20
 800edc8:	b133      	cbz	r3, 800edd8 <_dtoa_r+0x7e8>
 800edca:	9b00      	ldr	r3, [sp, #0]
 800edcc:	3301      	adds	r3, #1
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	9b06      	ldr	r3, [sp, #24]
 800edd2:	3301      	adds	r3, #1
 800edd4:	9306      	str	r3, [sp, #24]
 800edd6:	2301      	movs	r3, #1
 800edd8:	9308      	str	r3, [sp, #32]
 800edda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f000 81b9 	beq.w	800f154 <_dtoa_r+0xb64>
 800ede2:	6923      	ldr	r3, [r4, #16]
 800ede4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ede8:	6918      	ldr	r0, [r3, #16]
 800edea:	f001 f8c7 	bl	800ff7c <__hi0bits>
 800edee:	f1c0 0020 	rsb	r0, r0, #32
 800edf2:	9b06      	ldr	r3, [sp, #24]
 800edf4:	4418      	add	r0, r3
 800edf6:	f010 001f 	ands.w	r0, r0, #31
 800edfa:	f000 8082 	beq.w	800ef02 <_dtoa_r+0x912>
 800edfe:	f1c0 0320 	rsb	r3, r0, #32
 800ee02:	2b04      	cmp	r3, #4
 800ee04:	dd73      	ble.n	800eeee <_dtoa_r+0x8fe>
 800ee06:	f1c0 001c 	rsb	r0, r0, #28
 800ee0a:	9b00      	ldr	r3, [sp, #0]
 800ee0c:	4403      	add	r3, r0
 800ee0e:	4406      	add	r6, r0
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	9b06      	ldr	r3, [sp, #24]
 800ee14:	4403      	add	r3, r0
 800ee16:	9306      	str	r3, [sp, #24]
 800ee18:	9b00      	ldr	r3, [sp, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	dd05      	ble.n	800ee2a <_dtoa_r+0x83a>
 800ee1e:	461a      	mov	r2, r3
 800ee20:	9902      	ldr	r1, [sp, #8]
 800ee22:	4648      	mov	r0, r9
 800ee24:	f001 fa0a 	bl	801023c <__lshift>
 800ee28:	9002      	str	r0, [sp, #8]
 800ee2a:	9b06      	ldr	r3, [sp, #24]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	dd05      	ble.n	800ee3c <_dtoa_r+0x84c>
 800ee30:	4621      	mov	r1, r4
 800ee32:	461a      	mov	r2, r3
 800ee34:	4648      	mov	r0, r9
 800ee36:	f001 fa01 	bl	801023c <__lshift>
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d061      	beq.n	800ef06 <_dtoa_r+0x916>
 800ee42:	4621      	mov	r1, r4
 800ee44:	9802      	ldr	r0, [sp, #8]
 800ee46:	f001 fa65 	bl	8010314 <__mcmp>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	da5b      	bge.n	800ef06 <_dtoa_r+0x916>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	220a      	movs	r2, #10
 800ee52:	9902      	ldr	r1, [sp, #8]
 800ee54:	4648      	mov	r0, r9
 800ee56:	f000 ffff 	bl	800fe58 <__multadd>
 800ee5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee5c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800ee60:	9002      	str	r0, [sp, #8]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	f000 8178 	beq.w	800f158 <_dtoa_r+0xb68>
 800ee68:	4629      	mov	r1, r5
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	220a      	movs	r2, #10
 800ee6e:	4648      	mov	r0, r9
 800ee70:	f000 fff2 	bl	800fe58 <__multadd>
 800ee74:	f1bb 0f00 	cmp.w	fp, #0
 800ee78:	4605      	mov	r5, r0
 800ee7a:	dc6f      	bgt.n	800ef5c <_dtoa_r+0x96c>
 800ee7c:	9b07      	ldr	r3, [sp, #28]
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	dc49      	bgt.n	800ef16 <_dtoa_r+0x926>
 800ee82:	e06b      	b.n	800ef5c <_dtoa_r+0x96c>
 800ee84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ee86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee8a:	e73c      	b.n	800ed06 <_dtoa_r+0x716>
 800ee8c:	3fe00000 	.word	0x3fe00000
 800ee90:	40240000 	.word	0x40240000
 800ee94:	9b03      	ldr	r3, [sp, #12]
 800ee96:	1e5c      	subs	r4, r3, #1
 800ee98:	9b08      	ldr	r3, [sp, #32]
 800ee9a:	42a3      	cmp	r3, r4
 800ee9c:	db09      	blt.n	800eeb2 <_dtoa_r+0x8c2>
 800ee9e:	1b1c      	subs	r4, r3, r4
 800eea0:	9b03      	ldr	r3, [sp, #12]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	f6bf af30 	bge.w	800ed08 <_dtoa_r+0x718>
 800eea8:	9b00      	ldr	r3, [sp, #0]
 800eeaa:	9a03      	ldr	r2, [sp, #12]
 800eeac:	1a9e      	subs	r6, r3, r2
 800eeae:	2300      	movs	r3, #0
 800eeb0:	e72b      	b.n	800ed0a <_dtoa_r+0x71a>
 800eeb2:	9b08      	ldr	r3, [sp, #32]
 800eeb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eeb6:	1ae3      	subs	r3, r4, r3
 800eeb8:	9408      	str	r4, [sp, #32]
 800eeba:	9e00      	ldr	r6, [sp, #0]
 800eebc:	2400      	movs	r4, #0
 800eebe:	441a      	add	r2, r3
 800eec0:	9b03      	ldr	r3, [sp, #12]
 800eec2:	920d      	str	r2, [sp, #52]	@ 0x34
 800eec4:	e721      	b.n	800ed0a <_dtoa_r+0x71a>
 800eec6:	9c08      	ldr	r4, [sp, #32]
 800eec8:	9e00      	ldr	r6, [sp, #0]
 800eeca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800eecc:	e728      	b.n	800ed20 <_dtoa_r+0x730>
 800eece:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800eed2:	e751      	b.n	800ed78 <_dtoa_r+0x788>
 800eed4:	9a08      	ldr	r2, [sp, #32]
 800eed6:	9902      	ldr	r1, [sp, #8]
 800eed8:	e750      	b.n	800ed7c <_dtoa_r+0x78c>
 800eeda:	f8cd 8008 	str.w	r8, [sp, #8]
 800eede:	e751      	b.n	800ed84 <_dtoa_r+0x794>
 800eee0:	2300      	movs	r3, #0
 800eee2:	e779      	b.n	800edd8 <_dtoa_r+0x7e8>
 800eee4:	9b04      	ldr	r3, [sp, #16]
 800eee6:	e777      	b.n	800edd8 <_dtoa_r+0x7e8>
 800eee8:	2300      	movs	r3, #0
 800eeea:	9308      	str	r3, [sp, #32]
 800eeec:	e779      	b.n	800ede2 <_dtoa_r+0x7f2>
 800eeee:	d093      	beq.n	800ee18 <_dtoa_r+0x828>
 800eef0:	331c      	adds	r3, #28
 800eef2:	9a00      	ldr	r2, [sp, #0]
 800eef4:	441a      	add	r2, r3
 800eef6:	441e      	add	r6, r3
 800eef8:	9200      	str	r2, [sp, #0]
 800eefa:	9a06      	ldr	r2, [sp, #24]
 800eefc:	441a      	add	r2, r3
 800eefe:	9206      	str	r2, [sp, #24]
 800ef00:	e78a      	b.n	800ee18 <_dtoa_r+0x828>
 800ef02:	4603      	mov	r3, r0
 800ef04:	e7f4      	b.n	800eef0 <_dtoa_r+0x900>
 800ef06:	9b03      	ldr	r3, [sp, #12]
 800ef08:	46b8      	mov	r8, r7
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	dc20      	bgt.n	800ef50 <_dtoa_r+0x960>
 800ef0e:	469b      	mov	fp, r3
 800ef10:	9b07      	ldr	r3, [sp, #28]
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	dd1e      	ble.n	800ef54 <_dtoa_r+0x964>
 800ef16:	f1bb 0f00 	cmp.w	fp, #0
 800ef1a:	f47f adb1 	bne.w	800ea80 <_dtoa_r+0x490>
 800ef1e:	4621      	mov	r1, r4
 800ef20:	465b      	mov	r3, fp
 800ef22:	2205      	movs	r2, #5
 800ef24:	4648      	mov	r0, r9
 800ef26:	f000 ff97 	bl	800fe58 <__multadd>
 800ef2a:	4601      	mov	r1, r0
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	9802      	ldr	r0, [sp, #8]
 800ef30:	f001 f9f0 	bl	8010314 <__mcmp>
 800ef34:	2800      	cmp	r0, #0
 800ef36:	f77f ada3 	ble.w	800ea80 <_dtoa_r+0x490>
 800ef3a:	4656      	mov	r6, sl
 800ef3c:	2331      	movs	r3, #49	@ 0x31
 800ef3e:	f108 0801 	add.w	r8, r8, #1
 800ef42:	f806 3b01 	strb.w	r3, [r6], #1
 800ef46:	e59f      	b.n	800ea88 <_dtoa_r+0x498>
 800ef48:	46b8      	mov	r8, r7
 800ef4a:	9c03      	ldr	r4, [sp, #12]
 800ef4c:	4625      	mov	r5, r4
 800ef4e:	e7f4      	b.n	800ef3a <_dtoa_r+0x94a>
 800ef50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ef54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f000 8102 	beq.w	800f160 <_dtoa_r+0xb70>
 800ef5c:	2e00      	cmp	r6, #0
 800ef5e:	dd05      	ble.n	800ef6c <_dtoa_r+0x97c>
 800ef60:	4629      	mov	r1, r5
 800ef62:	4632      	mov	r2, r6
 800ef64:	4648      	mov	r0, r9
 800ef66:	f001 f969 	bl	801023c <__lshift>
 800ef6a:	4605      	mov	r5, r0
 800ef6c:	9b08      	ldr	r3, [sp, #32]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d05c      	beq.n	800f02c <_dtoa_r+0xa3c>
 800ef72:	6869      	ldr	r1, [r5, #4]
 800ef74:	4648      	mov	r0, r9
 800ef76:	f000 ff0d 	bl	800fd94 <_Balloc>
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	b928      	cbnz	r0, 800ef8a <_dtoa_r+0x99a>
 800ef7e:	4b83      	ldr	r3, [pc, #524]	@ (800f18c <_dtoa_r+0xb9c>)
 800ef80:	4602      	mov	r2, r0
 800ef82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ef86:	f7ff bb4a 	b.w	800e61e <_dtoa_r+0x2e>
 800ef8a:	692a      	ldr	r2, [r5, #16]
 800ef8c:	f105 010c 	add.w	r1, r5, #12
 800ef90:	300c      	adds	r0, #12
 800ef92:	3202      	adds	r2, #2
 800ef94:	0092      	lsls	r2, r2, #2
 800ef96:	f7ff fa81 	bl	800e49c <memcpy>
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	4631      	mov	r1, r6
 800ef9e:	4648      	mov	r0, r9
 800efa0:	f001 f94c 	bl	801023c <__lshift>
 800efa4:	f10a 0301 	add.w	r3, sl, #1
 800efa8:	462f      	mov	r7, r5
 800efaa:	4605      	mov	r5, r0
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	eb0a 030b 	add.w	r3, sl, fp
 800efb2:	9308      	str	r3, [sp, #32]
 800efb4:	9b04      	ldr	r3, [sp, #16]
 800efb6:	f003 0301 	and.w	r3, r3, #1
 800efba:	9306      	str	r3, [sp, #24]
 800efbc:	9b00      	ldr	r3, [sp, #0]
 800efbe:	4621      	mov	r1, r4
 800efc0:	9802      	ldr	r0, [sp, #8]
 800efc2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800efc6:	f7ff fa85 	bl	800e4d4 <quorem>
 800efca:	4603      	mov	r3, r0
 800efcc:	4639      	mov	r1, r7
 800efce:	9003      	str	r0, [sp, #12]
 800efd0:	3330      	adds	r3, #48	@ 0x30
 800efd2:	9802      	ldr	r0, [sp, #8]
 800efd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800efd6:	f001 f99d 	bl	8010314 <__mcmp>
 800efda:	462a      	mov	r2, r5
 800efdc:	9004      	str	r0, [sp, #16]
 800efde:	4621      	mov	r1, r4
 800efe0:	4648      	mov	r0, r9
 800efe2:	f001 f9b3 	bl	801034c <__mdiff>
 800efe6:	68c2      	ldr	r2, [r0, #12]
 800efe8:	4606      	mov	r6, r0
 800efea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efec:	bb02      	cbnz	r2, 800f030 <_dtoa_r+0xa40>
 800efee:	4601      	mov	r1, r0
 800eff0:	9802      	ldr	r0, [sp, #8]
 800eff2:	f001 f98f 	bl	8010314 <__mcmp>
 800eff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eff8:	4602      	mov	r2, r0
 800effa:	4631      	mov	r1, r6
 800effc:	4648      	mov	r0, r9
 800effe:	920c      	str	r2, [sp, #48]	@ 0x30
 800f000:	9309      	str	r3, [sp, #36]	@ 0x24
 800f002:	f000 ff07 	bl	800fe14 <_Bfree>
 800f006:	9b07      	ldr	r3, [sp, #28]
 800f008:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f00a:	9e00      	ldr	r6, [sp, #0]
 800f00c:	ea42 0103 	orr.w	r1, r2, r3
 800f010:	9b06      	ldr	r3, [sp, #24]
 800f012:	4319      	orrs	r1, r3
 800f014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f016:	d10d      	bne.n	800f034 <_dtoa_r+0xa44>
 800f018:	2b39      	cmp	r3, #57	@ 0x39
 800f01a:	d027      	beq.n	800f06c <_dtoa_r+0xa7c>
 800f01c:	9a04      	ldr	r2, [sp, #16]
 800f01e:	2a00      	cmp	r2, #0
 800f020:	dd01      	ble.n	800f026 <_dtoa_r+0xa36>
 800f022:	9b03      	ldr	r3, [sp, #12]
 800f024:	3331      	adds	r3, #49	@ 0x31
 800f026:	f88b 3000 	strb.w	r3, [fp]
 800f02a:	e52e      	b.n	800ea8a <_dtoa_r+0x49a>
 800f02c:	4628      	mov	r0, r5
 800f02e:	e7b9      	b.n	800efa4 <_dtoa_r+0x9b4>
 800f030:	2201      	movs	r2, #1
 800f032:	e7e2      	b.n	800effa <_dtoa_r+0xa0a>
 800f034:	9904      	ldr	r1, [sp, #16]
 800f036:	2900      	cmp	r1, #0
 800f038:	db04      	blt.n	800f044 <_dtoa_r+0xa54>
 800f03a:	9807      	ldr	r0, [sp, #28]
 800f03c:	4301      	orrs	r1, r0
 800f03e:	9806      	ldr	r0, [sp, #24]
 800f040:	4301      	orrs	r1, r0
 800f042:	d120      	bne.n	800f086 <_dtoa_r+0xa96>
 800f044:	2a00      	cmp	r2, #0
 800f046:	ddee      	ble.n	800f026 <_dtoa_r+0xa36>
 800f048:	2201      	movs	r2, #1
 800f04a:	9902      	ldr	r1, [sp, #8]
 800f04c:	4648      	mov	r0, r9
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	f001 f8f4 	bl	801023c <__lshift>
 800f054:	4621      	mov	r1, r4
 800f056:	9002      	str	r0, [sp, #8]
 800f058:	f001 f95c 	bl	8010314 <__mcmp>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	9b00      	ldr	r3, [sp, #0]
 800f060:	dc02      	bgt.n	800f068 <_dtoa_r+0xa78>
 800f062:	d1e0      	bne.n	800f026 <_dtoa_r+0xa36>
 800f064:	07da      	lsls	r2, r3, #31
 800f066:	d5de      	bpl.n	800f026 <_dtoa_r+0xa36>
 800f068:	2b39      	cmp	r3, #57	@ 0x39
 800f06a:	d1da      	bne.n	800f022 <_dtoa_r+0xa32>
 800f06c:	2339      	movs	r3, #57	@ 0x39
 800f06e:	f88b 3000 	strb.w	r3, [fp]
 800f072:	4633      	mov	r3, r6
 800f074:	461e      	mov	r6, r3
 800f076:	3b01      	subs	r3, #1
 800f078:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f07c:	2a39      	cmp	r2, #57	@ 0x39
 800f07e:	d04f      	beq.n	800f120 <_dtoa_r+0xb30>
 800f080:	3201      	adds	r2, #1
 800f082:	701a      	strb	r2, [r3, #0]
 800f084:	e501      	b.n	800ea8a <_dtoa_r+0x49a>
 800f086:	2a00      	cmp	r2, #0
 800f088:	dd03      	ble.n	800f092 <_dtoa_r+0xaa2>
 800f08a:	2b39      	cmp	r3, #57	@ 0x39
 800f08c:	d0ee      	beq.n	800f06c <_dtoa_r+0xa7c>
 800f08e:	3301      	adds	r3, #1
 800f090:	e7c9      	b.n	800f026 <_dtoa_r+0xa36>
 800f092:	9a00      	ldr	r2, [sp, #0]
 800f094:	9908      	ldr	r1, [sp, #32]
 800f096:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f09a:	428a      	cmp	r2, r1
 800f09c:	d029      	beq.n	800f0f2 <_dtoa_r+0xb02>
 800f09e:	2300      	movs	r3, #0
 800f0a0:	220a      	movs	r2, #10
 800f0a2:	9902      	ldr	r1, [sp, #8]
 800f0a4:	4648      	mov	r0, r9
 800f0a6:	f000 fed7 	bl	800fe58 <__multadd>
 800f0aa:	42af      	cmp	r7, r5
 800f0ac:	9002      	str	r0, [sp, #8]
 800f0ae:	f04f 0300 	mov.w	r3, #0
 800f0b2:	f04f 020a 	mov.w	r2, #10
 800f0b6:	4639      	mov	r1, r7
 800f0b8:	4648      	mov	r0, r9
 800f0ba:	d107      	bne.n	800f0cc <_dtoa_r+0xadc>
 800f0bc:	f000 fecc 	bl	800fe58 <__multadd>
 800f0c0:	4607      	mov	r7, r0
 800f0c2:	4605      	mov	r5, r0
 800f0c4:	9b00      	ldr	r3, [sp, #0]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	e777      	b.n	800efbc <_dtoa_r+0x9cc>
 800f0cc:	f000 fec4 	bl	800fe58 <__multadd>
 800f0d0:	4629      	mov	r1, r5
 800f0d2:	4607      	mov	r7, r0
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	220a      	movs	r2, #10
 800f0d8:	4648      	mov	r0, r9
 800f0da:	f000 febd 	bl	800fe58 <__multadd>
 800f0de:	4605      	mov	r5, r0
 800f0e0:	e7f0      	b.n	800f0c4 <_dtoa_r+0xad4>
 800f0e2:	f1bb 0f00 	cmp.w	fp, #0
 800f0e6:	f04f 0700 	mov.w	r7, #0
 800f0ea:	bfcc      	ite	gt
 800f0ec:	465e      	movgt	r6, fp
 800f0ee:	2601      	movle	r6, #1
 800f0f0:	4456      	add	r6, sl
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	9902      	ldr	r1, [sp, #8]
 800f0f6:	4648      	mov	r0, r9
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	f001 f89f 	bl	801023c <__lshift>
 800f0fe:	4621      	mov	r1, r4
 800f100:	9002      	str	r0, [sp, #8]
 800f102:	f001 f907 	bl	8010314 <__mcmp>
 800f106:	2800      	cmp	r0, #0
 800f108:	dcb3      	bgt.n	800f072 <_dtoa_r+0xa82>
 800f10a:	d102      	bne.n	800f112 <_dtoa_r+0xb22>
 800f10c:	9b00      	ldr	r3, [sp, #0]
 800f10e:	07db      	lsls	r3, r3, #31
 800f110:	d4af      	bmi.n	800f072 <_dtoa_r+0xa82>
 800f112:	4633      	mov	r3, r6
 800f114:	461e      	mov	r6, r3
 800f116:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f11a:	2a30      	cmp	r2, #48	@ 0x30
 800f11c:	d0fa      	beq.n	800f114 <_dtoa_r+0xb24>
 800f11e:	e4b4      	b.n	800ea8a <_dtoa_r+0x49a>
 800f120:	459a      	cmp	sl, r3
 800f122:	d1a7      	bne.n	800f074 <_dtoa_r+0xa84>
 800f124:	2331      	movs	r3, #49	@ 0x31
 800f126:	f108 0801 	add.w	r8, r8, #1
 800f12a:	f88a 3000 	strb.w	r3, [sl]
 800f12e:	e4ac      	b.n	800ea8a <_dtoa_r+0x49a>
 800f130:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f132:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f190 <_dtoa_r+0xba0>
 800f136:	b11b      	cbz	r3, 800f140 <_dtoa_r+0xb50>
 800f138:	f10a 0308 	add.w	r3, sl, #8
 800f13c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f13e:	6013      	str	r3, [r2, #0]
 800f140:	4650      	mov	r0, sl
 800f142:	b017      	add	sp, #92	@ 0x5c
 800f144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f148:	9b07      	ldr	r3, [sp, #28]
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	f77f ae2d 	ble.w	800edaa <_dtoa_r+0x7ba>
 800f150:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f152:	9308      	str	r3, [sp, #32]
 800f154:	2001      	movs	r0, #1
 800f156:	e64c      	b.n	800edf2 <_dtoa_r+0x802>
 800f158:	f1bb 0f00 	cmp.w	fp, #0
 800f15c:	f77f aed8 	ble.w	800ef10 <_dtoa_r+0x920>
 800f160:	4656      	mov	r6, sl
 800f162:	4621      	mov	r1, r4
 800f164:	9802      	ldr	r0, [sp, #8]
 800f166:	f7ff f9b5 	bl	800e4d4 <quorem>
 800f16a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f16e:	f806 3b01 	strb.w	r3, [r6], #1
 800f172:	eba6 020a 	sub.w	r2, r6, sl
 800f176:	4593      	cmp	fp, r2
 800f178:	ddb3      	ble.n	800f0e2 <_dtoa_r+0xaf2>
 800f17a:	2300      	movs	r3, #0
 800f17c:	220a      	movs	r2, #10
 800f17e:	9902      	ldr	r1, [sp, #8]
 800f180:	4648      	mov	r0, r9
 800f182:	f000 fe69 	bl	800fe58 <__multadd>
 800f186:	9002      	str	r0, [sp, #8]
 800f188:	e7eb      	b.n	800f162 <_dtoa_r+0xb72>
 800f18a:	bf00      	nop
 800f18c:	0801160b 	.word	0x0801160b
 800f190:	0801158f 	.word	0x0801158f

0800f194 <rshift>:
 800f194:	6903      	ldr	r3, [r0, #16]
 800f196:	114a      	asrs	r2, r1, #5
 800f198:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1a0:	f100 0414 	add.w	r4, r0, #20
 800f1a4:	dd45      	ble.n	800f232 <rshift+0x9e>
 800f1a6:	f011 011f 	ands.w	r1, r1, #31
 800f1aa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f1ae:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f1b2:	d10c      	bne.n	800f1ce <rshift+0x3a>
 800f1b4:	f100 0710 	add.w	r7, r0, #16
 800f1b8:	4629      	mov	r1, r5
 800f1ba:	42b1      	cmp	r1, r6
 800f1bc:	d334      	bcc.n	800f228 <rshift+0x94>
 800f1be:	1a9b      	subs	r3, r3, r2
 800f1c0:	1eea      	subs	r2, r5, #3
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	4296      	cmp	r6, r2
 800f1c6:	bf38      	it	cc
 800f1c8:	2300      	movcc	r3, #0
 800f1ca:	4423      	add	r3, r4
 800f1cc:	e015      	b.n	800f1fa <rshift+0x66>
 800f1ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f1d2:	f1c1 0820 	rsb	r8, r1, #32
 800f1d6:	f105 0e04 	add.w	lr, r5, #4
 800f1da:	46a1      	mov	r9, r4
 800f1dc:	40cf      	lsrs	r7, r1
 800f1de:	4576      	cmp	r6, lr
 800f1e0:	46f4      	mov	ip, lr
 800f1e2:	d815      	bhi.n	800f210 <rshift+0x7c>
 800f1e4:	1a9a      	subs	r2, r3, r2
 800f1e6:	3501      	adds	r5, #1
 800f1e8:	0092      	lsls	r2, r2, #2
 800f1ea:	3a04      	subs	r2, #4
 800f1ec:	42ae      	cmp	r6, r5
 800f1ee:	bf38      	it	cc
 800f1f0:	2200      	movcc	r2, #0
 800f1f2:	18a3      	adds	r3, r4, r2
 800f1f4:	50a7      	str	r7, [r4, r2]
 800f1f6:	b107      	cbz	r7, 800f1fa <rshift+0x66>
 800f1f8:	3304      	adds	r3, #4
 800f1fa:	1b1a      	subs	r2, r3, r4
 800f1fc:	42a3      	cmp	r3, r4
 800f1fe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f202:	bf08      	it	eq
 800f204:	2300      	moveq	r3, #0
 800f206:	6102      	str	r2, [r0, #16]
 800f208:	bf08      	it	eq
 800f20a:	6143      	streq	r3, [r0, #20]
 800f20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f210:	f8dc c000 	ldr.w	ip, [ip]
 800f214:	fa0c fc08 	lsl.w	ip, ip, r8
 800f218:	ea4c 0707 	orr.w	r7, ip, r7
 800f21c:	f849 7b04 	str.w	r7, [r9], #4
 800f220:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f224:	40cf      	lsrs	r7, r1
 800f226:	e7da      	b.n	800f1de <rshift+0x4a>
 800f228:	f851 cb04 	ldr.w	ip, [r1], #4
 800f22c:	f847 cf04 	str.w	ip, [r7, #4]!
 800f230:	e7c3      	b.n	800f1ba <rshift+0x26>
 800f232:	4623      	mov	r3, r4
 800f234:	e7e1      	b.n	800f1fa <rshift+0x66>

0800f236 <__hexdig_fun>:
 800f236:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f23a:	2b09      	cmp	r3, #9
 800f23c:	d802      	bhi.n	800f244 <__hexdig_fun+0xe>
 800f23e:	3820      	subs	r0, #32
 800f240:	b2c0      	uxtb	r0, r0
 800f242:	4770      	bx	lr
 800f244:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f248:	2b05      	cmp	r3, #5
 800f24a:	d801      	bhi.n	800f250 <__hexdig_fun+0x1a>
 800f24c:	3847      	subs	r0, #71	@ 0x47
 800f24e:	e7f7      	b.n	800f240 <__hexdig_fun+0xa>
 800f250:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f254:	2b05      	cmp	r3, #5
 800f256:	d801      	bhi.n	800f25c <__hexdig_fun+0x26>
 800f258:	3827      	subs	r0, #39	@ 0x27
 800f25a:	e7f1      	b.n	800f240 <__hexdig_fun+0xa>
 800f25c:	2000      	movs	r0, #0
 800f25e:	4770      	bx	lr

0800f260 <__gethex>:
 800f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f264:	b085      	sub	sp, #20
 800f266:	468a      	mov	sl, r1
 800f268:	4690      	mov	r8, r2
 800f26a:	9302      	str	r3, [sp, #8]
 800f26c:	680b      	ldr	r3, [r1, #0]
 800f26e:	9001      	str	r0, [sp, #4]
 800f270:	1c9c      	adds	r4, r3, #2
 800f272:	46a1      	mov	r9, r4
 800f274:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f278:	2830      	cmp	r0, #48	@ 0x30
 800f27a:	d0fa      	beq.n	800f272 <__gethex+0x12>
 800f27c:	eba9 0303 	sub.w	r3, r9, r3
 800f280:	f1a3 0b02 	sub.w	fp, r3, #2
 800f284:	f7ff ffd7 	bl	800f236 <__hexdig_fun>
 800f288:	4605      	mov	r5, r0
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d166      	bne.n	800f35c <__gethex+0xfc>
 800f28e:	2201      	movs	r2, #1
 800f290:	499e      	ldr	r1, [pc, #632]	@ (800f50c <__gethex+0x2ac>)
 800f292:	4648      	mov	r0, r9
 800f294:	f7ff f8b0 	bl	800e3f8 <strncmp>
 800f298:	4607      	mov	r7, r0
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d165      	bne.n	800f36a <__gethex+0x10a>
 800f29e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f2a2:	4626      	mov	r6, r4
 800f2a4:	f7ff ffc7 	bl	800f236 <__hexdig_fun>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d060      	beq.n	800f36e <__gethex+0x10e>
 800f2ac:	4623      	mov	r3, r4
 800f2ae:	7818      	ldrb	r0, [r3, #0]
 800f2b0:	4699      	mov	r9, r3
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	2830      	cmp	r0, #48	@ 0x30
 800f2b6:	d0fa      	beq.n	800f2ae <__gethex+0x4e>
 800f2b8:	f7ff ffbd 	bl	800f236 <__hexdig_fun>
 800f2bc:	fab0 f580 	clz	r5, r0
 800f2c0:	f04f 0b01 	mov.w	fp, #1
 800f2c4:	096d      	lsrs	r5, r5, #5
 800f2c6:	464a      	mov	r2, r9
 800f2c8:	4616      	mov	r6, r2
 800f2ca:	3201      	adds	r2, #1
 800f2cc:	7830      	ldrb	r0, [r6, #0]
 800f2ce:	f7ff ffb2 	bl	800f236 <__hexdig_fun>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d1f8      	bne.n	800f2c8 <__gethex+0x68>
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	498c      	ldr	r1, [pc, #560]	@ (800f50c <__gethex+0x2ac>)
 800f2da:	4630      	mov	r0, r6
 800f2dc:	f7ff f88c 	bl	800e3f8 <strncmp>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d13e      	bne.n	800f362 <__gethex+0x102>
 800f2e4:	b944      	cbnz	r4, 800f2f8 <__gethex+0x98>
 800f2e6:	1c74      	adds	r4, r6, #1
 800f2e8:	4622      	mov	r2, r4
 800f2ea:	4616      	mov	r6, r2
 800f2ec:	3201      	adds	r2, #1
 800f2ee:	7830      	ldrb	r0, [r6, #0]
 800f2f0:	f7ff ffa1 	bl	800f236 <__hexdig_fun>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d1f8      	bne.n	800f2ea <__gethex+0x8a>
 800f2f8:	1ba4      	subs	r4, r4, r6
 800f2fa:	00a7      	lsls	r7, r4, #2
 800f2fc:	7833      	ldrb	r3, [r6, #0]
 800f2fe:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f302:	2b50      	cmp	r3, #80	@ 0x50
 800f304:	d13d      	bne.n	800f382 <__gethex+0x122>
 800f306:	7873      	ldrb	r3, [r6, #1]
 800f308:	2b2b      	cmp	r3, #43	@ 0x2b
 800f30a:	d032      	beq.n	800f372 <__gethex+0x112>
 800f30c:	2b2d      	cmp	r3, #45	@ 0x2d
 800f30e:	d033      	beq.n	800f378 <__gethex+0x118>
 800f310:	1c71      	adds	r1, r6, #1
 800f312:	2400      	movs	r4, #0
 800f314:	7808      	ldrb	r0, [r1, #0]
 800f316:	f7ff ff8e 	bl	800f236 <__hexdig_fun>
 800f31a:	1e43      	subs	r3, r0, #1
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	2b18      	cmp	r3, #24
 800f320:	d82f      	bhi.n	800f382 <__gethex+0x122>
 800f322:	f1a0 0210 	sub.w	r2, r0, #16
 800f326:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f32a:	f7ff ff84 	bl	800f236 <__hexdig_fun>
 800f32e:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800f332:	230a      	movs	r3, #10
 800f334:	fa5f fc8c 	uxtb.w	ip, ip
 800f338:	f1bc 0f18 	cmp.w	ip, #24
 800f33c:	d91e      	bls.n	800f37c <__gethex+0x11c>
 800f33e:	b104      	cbz	r4, 800f342 <__gethex+0xe2>
 800f340:	4252      	negs	r2, r2
 800f342:	4417      	add	r7, r2
 800f344:	f8ca 1000 	str.w	r1, [sl]
 800f348:	b1ed      	cbz	r5, 800f386 <__gethex+0x126>
 800f34a:	f1bb 0f00 	cmp.w	fp, #0
 800f34e:	bf0c      	ite	eq
 800f350:	2506      	moveq	r5, #6
 800f352:	2500      	movne	r5, #0
 800f354:	4628      	mov	r0, r5
 800f356:	b005      	add	sp, #20
 800f358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35c:	2500      	movs	r5, #0
 800f35e:	462c      	mov	r4, r5
 800f360:	e7b1      	b.n	800f2c6 <__gethex+0x66>
 800f362:	2c00      	cmp	r4, #0
 800f364:	d1c8      	bne.n	800f2f8 <__gethex+0x98>
 800f366:	4627      	mov	r7, r4
 800f368:	e7c8      	b.n	800f2fc <__gethex+0x9c>
 800f36a:	464e      	mov	r6, r9
 800f36c:	462f      	mov	r7, r5
 800f36e:	2501      	movs	r5, #1
 800f370:	e7c4      	b.n	800f2fc <__gethex+0x9c>
 800f372:	2400      	movs	r4, #0
 800f374:	1cb1      	adds	r1, r6, #2
 800f376:	e7cd      	b.n	800f314 <__gethex+0xb4>
 800f378:	2401      	movs	r4, #1
 800f37a:	e7fb      	b.n	800f374 <__gethex+0x114>
 800f37c:	fb03 0002 	mla	r0, r3, r2, r0
 800f380:	e7cf      	b.n	800f322 <__gethex+0xc2>
 800f382:	4631      	mov	r1, r6
 800f384:	e7de      	b.n	800f344 <__gethex+0xe4>
 800f386:	eba6 0309 	sub.w	r3, r6, r9
 800f38a:	4629      	mov	r1, r5
 800f38c:	3b01      	subs	r3, #1
 800f38e:	2b07      	cmp	r3, #7
 800f390:	dc0a      	bgt.n	800f3a8 <__gethex+0x148>
 800f392:	9801      	ldr	r0, [sp, #4]
 800f394:	f000 fcfe 	bl	800fd94 <_Balloc>
 800f398:	4604      	mov	r4, r0
 800f39a:	b940      	cbnz	r0, 800f3ae <__gethex+0x14e>
 800f39c:	4b5c      	ldr	r3, [pc, #368]	@ (800f510 <__gethex+0x2b0>)
 800f39e:	4602      	mov	r2, r0
 800f3a0:	21e4      	movs	r1, #228	@ 0xe4
 800f3a2:	485c      	ldr	r0, [pc, #368]	@ (800f514 <__gethex+0x2b4>)
 800f3a4:	f001 fa9a 	bl	80108dc <__assert_func>
 800f3a8:	3101      	adds	r1, #1
 800f3aa:	105b      	asrs	r3, r3, #1
 800f3ac:	e7ef      	b.n	800f38e <__gethex+0x12e>
 800f3ae:	f100 0a14 	add.w	sl, r0, #20
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	4655      	mov	r5, sl
 800f3b6:	469b      	mov	fp, r3
 800f3b8:	45b1      	cmp	r9, r6
 800f3ba:	d337      	bcc.n	800f42c <__gethex+0x1cc>
 800f3bc:	f845 bb04 	str.w	fp, [r5], #4
 800f3c0:	eba5 050a 	sub.w	r5, r5, sl
 800f3c4:	4658      	mov	r0, fp
 800f3c6:	10ad      	asrs	r5, r5, #2
 800f3c8:	6125      	str	r5, [r4, #16]
 800f3ca:	016d      	lsls	r5, r5, #5
 800f3cc:	f000 fdd6 	bl	800ff7c <__hi0bits>
 800f3d0:	f8d8 6000 	ldr.w	r6, [r8]
 800f3d4:	1a2d      	subs	r5, r5, r0
 800f3d6:	42b5      	cmp	r5, r6
 800f3d8:	dd54      	ble.n	800f484 <__gethex+0x224>
 800f3da:	1bad      	subs	r5, r5, r6
 800f3dc:	4620      	mov	r0, r4
 800f3de:	4629      	mov	r1, r5
 800f3e0:	f001 f96d 	bl	80106be <__any_on>
 800f3e4:	4681      	mov	r9, r0
 800f3e6:	b178      	cbz	r0, 800f408 <__gethex+0x1a8>
 800f3e8:	1e6b      	subs	r3, r5, #1
 800f3ea:	f04f 0901 	mov.w	r9, #1
 800f3ee:	1159      	asrs	r1, r3, #5
 800f3f0:	f003 021f 	and.w	r2, r3, #31
 800f3f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f3f8:	fa09 f202 	lsl.w	r2, r9, r2
 800f3fc:	420a      	tst	r2, r1
 800f3fe:	d003      	beq.n	800f408 <__gethex+0x1a8>
 800f400:	454b      	cmp	r3, r9
 800f402:	dc36      	bgt.n	800f472 <__gethex+0x212>
 800f404:	f04f 0902 	mov.w	r9, #2
 800f408:	442f      	add	r7, r5
 800f40a:	4629      	mov	r1, r5
 800f40c:	4620      	mov	r0, r4
 800f40e:	f7ff fec1 	bl	800f194 <rshift>
 800f412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f416:	42bb      	cmp	r3, r7
 800f418:	da42      	bge.n	800f4a0 <__gethex+0x240>
 800f41a:	4621      	mov	r1, r4
 800f41c:	9801      	ldr	r0, [sp, #4]
 800f41e:	f000 fcf9 	bl	800fe14 <_Bfree>
 800f422:	2300      	movs	r3, #0
 800f424:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f426:	25a3      	movs	r5, #163	@ 0xa3
 800f428:	6013      	str	r3, [r2, #0]
 800f42a:	e793      	b.n	800f354 <__gethex+0xf4>
 800f42c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f430:	2a2e      	cmp	r2, #46	@ 0x2e
 800f432:	d012      	beq.n	800f45a <__gethex+0x1fa>
 800f434:	2b20      	cmp	r3, #32
 800f436:	d104      	bne.n	800f442 <__gethex+0x1e2>
 800f438:	f845 bb04 	str.w	fp, [r5], #4
 800f43c:	f04f 0b00 	mov.w	fp, #0
 800f440:	465b      	mov	r3, fp
 800f442:	7830      	ldrb	r0, [r6, #0]
 800f444:	9303      	str	r3, [sp, #12]
 800f446:	f7ff fef6 	bl	800f236 <__hexdig_fun>
 800f44a:	9b03      	ldr	r3, [sp, #12]
 800f44c:	f000 000f 	and.w	r0, r0, #15
 800f450:	4098      	lsls	r0, r3
 800f452:	3304      	adds	r3, #4
 800f454:	ea4b 0b00 	orr.w	fp, fp, r0
 800f458:	e7ae      	b.n	800f3b8 <__gethex+0x158>
 800f45a:	45b1      	cmp	r9, r6
 800f45c:	d8ea      	bhi.n	800f434 <__gethex+0x1d4>
 800f45e:	2201      	movs	r2, #1
 800f460:	492a      	ldr	r1, [pc, #168]	@ (800f50c <__gethex+0x2ac>)
 800f462:	4630      	mov	r0, r6
 800f464:	9303      	str	r3, [sp, #12]
 800f466:	f7fe ffc7 	bl	800e3f8 <strncmp>
 800f46a:	9b03      	ldr	r3, [sp, #12]
 800f46c:	2800      	cmp	r0, #0
 800f46e:	d1e1      	bne.n	800f434 <__gethex+0x1d4>
 800f470:	e7a2      	b.n	800f3b8 <__gethex+0x158>
 800f472:	1ea9      	subs	r1, r5, #2
 800f474:	4620      	mov	r0, r4
 800f476:	f001 f922 	bl	80106be <__any_on>
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d0c2      	beq.n	800f404 <__gethex+0x1a4>
 800f47e:	f04f 0903 	mov.w	r9, #3
 800f482:	e7c1      	b.n	800f408 <__gethex+0x1a8>
 800f484:	da09      	bge.n	800f49a <__gethex+0x23a>
 800f486:	1b75      	subs	r5, r6, r5
 800f488:	4621      	mov	r1, r4
 800f48a:	9801      	ldr	r0, [sp, #4]
 800f48c:	462a      	mov	r2, r5
 800f48e:	1b7f      	subs	r7, r7, r5
 800f490:	f000 fed4 	bl	801023c <__lshift>
 800f494:	4604      	mov	r4, r0
 800f496:	f100 0a14 	add.w	sl, r0, #20
 800f49a:	f04f 0900 	mov.w	r9, #0
 800f49e:	e7b8      	b.n	800f412 <__gethex+0x1b2>
 800f4a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f4a4:	42bd      	cmp	r5, r7
 800f4a6:	dd6f      	ble.n	800f588 <__gethex+0x328>
 800f4a8:	1bed      	subs	r5, r5, r7
 800f4aa:	42ae      	cmp	r6, r5
 800f4ac:	dc34      	bgt.n	800f518 <__gethex+0x2b8>
 800f4ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4b2:	2b02      	cmp	r3, #2
 800f4b4:	d022      	beq.n	800f4fc <__gethex+0x29c>
 800f4b6:	2b03      	cmp	r3, #3
 800f4b8:	d024      	beq.n	800f504 <__gethex+0x2a4>
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d115      	bne.n	800f4ea <__gethex+0x28a>
 800f4be:	42ae      	cmp	r6, r5
 800f4c0:	d113      	bne.n	800f4ea <__gethex+0x28a>
 800f4c2:	2e01      	cmp	r6, #1
 800f4c4:	d10b      	bne.n	800f4de <__gethex+0x27e>
 800f4c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f4ca:	2562      	movs	r5, #98	@ 0x62
 800f4cc:	9a02      	ldr	r2, [sp, #8]
 800f4ce:	6013      	str	r3, [r2, #0]
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	6123      	str	r3, [r4, #16]
 800f4d4:	f8ca 3000 	str.w	r3, [sl]
 800f4d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4da:	601c      	str	r4, [r3, #0]
 800f4dc:	e73a      	b.n	800f354 <__gethex+0xf4>
 800f4de:	1e71      	subs	r1, r6, #1
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f001 f8ec 	bl	80106be <__any_on>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	d1ed      	bne.n	800f4c6 <__gethex+0x266>
 800f4ea:	4621      	mov	r1, r4
 800f4ec:	9801      	ldr	r0, [sp, #4]
 800f4ee:	f000 fc91 	bl	800fe14 <_Bfree>
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4f6:	2550      	movs	r5, #80	@ 0x50
 800f4f8:	6013      	str	r3, [r2, #0]
 800f4fa:	e72b      	b.n	800f354 <__gethex+0xf4>
 800f4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1f3      	bne.n	800f4ea <__gethex+0x28a>
 800f502:	e7e0      	b.n	800f4c6 <__gethex+0x266>
 800f504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f506:	2b00      	cmp	r3, #0
 800f508:	d1dd      	bne.n	800f4c6 <__gethex+0x266>
 800f50a:	e7ee      	b.n	800f4ea <__gethex+0x28a>
 800f50c:	08011585 	.word	0x08011585
 800f510:	0801160b 	.word	0x0801160b
 800f514:	0801161c 	.word	0x0801161c
 800f518:	1e6f      	subs	r7, r5, #1
 800f51a:	f1b9 0f00 	cmp.w	r9, #0
 800f51e:	d130      	bne.n	800f582 <__gethex+0x322>
 800f520:	b127      	cbz	r7, 800f52c <__gethex+0x2cc>
 800f522:	4639      	mov	r1, r7
 800f524:	4620      	mov	r0, r4
 800f526:	f001 f8ca 	bl	80106be <__any_on>
 800f52a:	4681      	mov	r9, r0
 800f52c:	117a      	asrs	r2, r7, #5
 800f52e:	2301      	movs	r3, #1
 800f530:	f007 071f 	and.w	r7, r7, #31
 800f534:	4629      	mov	r1, r5
 800f536:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f53a:	4620      	mov	r0, r4
 800f53c:	40bb      	lsls	r3, r7
 800f53e:	1b76      	subs	r6, r6, r5
 800f540:	2502      	movs	r5, #2
 800f542:	4213      	tst	r3, r2
 800f544:	bf18      	it	ne
 800f546:	f049 0902 	orrne.w	r9, r9, #2
 800f54a:	f7ff fe23 	bl	800f194 <rshift>
 800f54e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f552:	f1b9 0f00 	cmp.w	r9, #0
 800f556:	d047      	beq.n	800f5e8 <__gethex+0x388>
 800f558:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f55c:	2b02      	cmp	r3, #2
 800f55e:	d015      	beq.n	800f58c <__gethex+0x32c>
 800f560:	2b03      	cmp	r3, #3
 800f562:	d017      	beq.n	800f594 <__gethex+0x334>
 800f564:	2b01      	cmp	r3, #1
 800f566:	d109      	bne.n	800f57c <__gethex+0x31c>
 800f568:	f019 0f02 	tst.w	r9, #2
 800f56c:	d006      	beq.n	800f57c <__gethex+0x31c>
 800f56e:	f8da 3000 	ldr.w	r3, [sl]
 800f572:	ea49 0903 	orr.w	r9, r9, r3
 800f576:	f019 0f01 	tst.w	r9, #1
 800f57a:	d10e      	bne.n	800f59a <__gethex+0x33a>
 800f57c:	f045 0510 	orr.w	r5, r5, #16
 800f580:	e032      	b.n	800f5e8 <__gethex+0x388>
 800f582:	f04f 0901 	mov.w	r9, #1
 800f586:	e7d1      	b.n	800f52c <__gethex+0x2cc>
 800f588:	2501      	movs	r5, #1
 800f58a:	e7e2      	b.n	800f552 <__gethex+0x2f2>
 800f58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f58e:	f1c3 0301 	rsb	r3, r3, #1
 800f592:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f596:	2b00      	cmp	r3, #0
 800f598:	d0f0      	beq.n	800f57c <__gethex+0x31c>
 800f59a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f59e:	f104 0314 	add.w	r3, r4, #20
 800f5a2:	f04f 0c00 	mov.w	ip, #0
 800f5a6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f5aa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5b4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800f5b8:	d01b      	beq.n	800f5f2 <__gethex+0x392>
 800f5ba:	3201      	adds	r2, #1
 800f5bc:	6002      	str	r2, [r0, #0]
 800f5be:	2d02      	cmp	r5, #2
 800f5c0:	f104 0314 	add.w	r3, r4, #20
 800f5c4:	d13c      	bne.n	800f640 <__gethex+0x3e0>
 800f5c6:	f8d8 2000 	ldr.w	r2, [r8]
 800f5ca:	3a01      	subs	r2, #1
 800f5cc:	42b2      	cmp	r2, r6
 800f5ce:	d109      	bne.n	800f5e4 <__gethex+0x384>
 800f5d0:	1171      	asrs	r1, r6, #5
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	f006 061f 	and.w	r6, r6, #31
 800f5d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5dc:	fa02 f606 	lsl.w	r6, r2, r6
 800f5e0:	421e      	tst	r6, r3
 800f5e2:	d13a      	bne.n	800f65a <__gethex+0x3fa>
 800f5e4:	f045 0520 	orr.w	r5, r5, #32
 800f5e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5ea:	601c      	str	r4, [r3, #0]
 800f5ec:	9b02      	ldr	r3, [sp, #8]
 800f5ee:	601f      	str	r7, [r3, #0]
 800f5f0:	e6b0      	b.n	800f354 <__gethex+0xf4>
 800f5f2:	4299      	cmp	r1, r3
 800f5f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f5f8:	d8d9      	bhi.n	800f5ae <__gethex+0x34e>
 800f5fa:	68a3      	ldr	r3, [r4, #8]
 800f5fc:	459b      	cmp	fp, r3
 800f5fe:	db17      	blt.n	800f630 <__gethex+0x3d0>
 800f600:	6861      	ldr	r1, [r4, #4]
 800f602:	9801      	ldr	r0, [sp, #4]
 800f604:	3101      	adds	r1, #1
 800f606:	f000 fbc5 	bl	800fd94 <_Balloc>
 800f60a:	4681      	mov	r9, r0
 800f60c:	b918      	cbnz	r0, 800f616 <__gethex+0x3b6>
 800f60e:	4b1a      	ldr	r3, [pc, #104]	@ (800f678 <__gethex+0x418>)
 800f610:	4602      	mov	r2, r0
 800f612:	2184      	movs	r1, #132	@ 0x84
 800f614:	e6c5      	b.n	800f3a2 <__gethex+0x142>
 800f616:	6922      	ldr	r2, [r4, #16]
 800f618:	f104 010c 	add.w	r1, r4, #12
 800f61c:	300c      	adds	r0, #12
 800f61e:	3202      	adds	r2, #2
 800f620:	0092      	lsls	r2, r2, #2
 800f622:	f7fe ff3b 	bl	800e49c <memcpy>
 800f626:	4621      	mov	r1, r4
 800f628:	464c      	mov	r4, r9
 800f62a:	9801      	ldr	r0, [sp, #4]
 800f62c:	f000 fbf2 	bl	800fe14 <_Bfree>
 800f630:	6923      	ldr	r3, [r4, #16]
 800f632:	1c5a      	adds	r2, r3, #1
 800f634:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f638:	6122      	str	r2, [r4, #16]
 800f63a:	2201      	movs	r2, #1
 800f63c:	615a      	str	r2, [r3, #20]
 800f63e:	e7be      	b.n	800f5be <__gethex+0x35e>
 800f640:	6922      	ldr	r2, [r4, #16]
 800f642:	455a      	cmp	r2, fp
 800f644:	dd0b      	ble.n	800f65e <__gethex+0x3fe>
 800f646:	2101      	movs	r1, #1
 800f648:	4620      	mov	r0, r4
 800f64a:	f7ff fda3 	bl	800f194 <rshift>
 800f64e:	3701      	adds	r7, #1
 800f650:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f654:	42bb      	cmp	r3, r7
 800f656:	f6ff aee0 	blt.w	800f41a <__gethex+0x1ba>
 800f65a:	2501      	movs	r5, #1
 800f65c:	e7c2      	b.n	800f5e4 <__gethex+0x384>
 800f65e:	f016 061f 	ands.w	r6, r6, #31
 800f662:	d0fa      	beq.n	800f65a <__gethex+0x3fa>
 800f664:	4453      	add	r3, sl
 800f666:	f1c6 0620 	rsb	r6, r6, #32
 800f66a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f66e:	f000 fc85 	bl	800ff7c <__hi0bits>
 800f672:	42b0      	cmp	r0, r6
 800f674:	dbe7      	blt.n	800f646 <__gethex+0x3e6>
 800f676:	e7f0      	b.n	800f65a <__gethex+0x3fa>
 800f678:	0801160b 	.word	0x0801160b

0800f67c <L_shift>:
 800f67c:	f1c2 0208 	rsb	r2, r2, #8
 800f680:	0092      	lsls	r2, r2, #2
 800f682:	b570      	push	{r4, r5, r6, lr}
 800f684:	f1c2 0620 	rsb	r6, r2, #32
 800f688:	6843      	ldr	r3, [r0, #4]
 800f68a:	6804      	ldr	r4, [r0, #0]
 800f68c:	fa03 f506 	lsl.w	r5, r3, r6
 800f690:	40d3      	lsrs	r3, r2
 800f692:	432c      	orrs	r4, r5
 800f694:	6004      	str	r4, [r0, #0]
 800f696:	f840 3f04 	str.w	r3, [r0, #4]!
 800f69a:	4288      	cmp	r0, r1
 800f69c:	d3f4      	bcc.n	800f688 <L_shift+0xc>
 800f69e:	bd70      	pop	{r4, r5, r6, pc}

0800f6a0 <__match>:
 800f6a0:	6803      	ldr	r3, [r0, #0]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	b530      	push	{r4, r5, lr}
 800f6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6aa:	b914      	cbnz	r4, 800f6b2 <__match+0x12>
 800f6ac:	6003      	str	r3, [r0, #0]
 800f6ae:	2001      	movs	r0, #1
 800f6b0:	bd30      	pop	{r4, r5, pc}
 800f6b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f6ba:	2d19      	cmp	r5, #25
 800f6bc:	bf98      	it	ls
 800f6be:	3220      	addls	r2, #32
 800f6c0:	42a2      	cmp	r2, r4
 800f6c2:	d0f0      	beq.n	800f6a6 <__match+0x6>
 800f6c4:	2000      	movs	r0, #0
 800f6c6:	e7f3      	b.n	800f6b0 <__match+0x10>

0800f6c8 <__hexnan>:
 800f6c8:	680b      	ldr	r3, [r1, #0]
 800f6ca:	6801      	ldr	r1, [r0, #0]
 800f6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d0:	115e      	asrs	r6, r3, #5
 800f6d2:	f013 031f 	ands.w	r3, r3, #31
 800f6d6:	f04f 0500 	mov.w	r5, #0
 800f6da:	b087      	sub	sp, #28
 800f6dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f6e0:	4682      	mov	sl, r0
 800f6e2:	4690      	mov	r8, r2
 800f6e4:	46ab      	mov	fp, r5
 800f6e6:	bf18      	it	ne
 800f6e8:	3604      	addne	r6, #4
 800f6ea:	9301      	str	r3, [sp, #4]
 800f6ec:	9502      	str	r5, [sp, #8]
 800f6ee:	1f37      	subs	r7, r6, #4
 800f6f0:	f846 5c04 	str.w	r5, [r6, #-4]
 800f6f4:	46b9      	mov	r9, r7
 800f6f6:	463c      	mov	r4, r7
 800f6f8:	1c4b      	adds	r3, r1, #1
 800f6fa:	784a      	ldrb	r2, [r1, #1]
 800f6fc:	9303      	str	r3, [sp, #12]
 800f6fe:	b342      	cbz	r2, 800f752 <__hexnan+0x8a>
 800f700:	4610      	mov	r0, r2
 800f702:	9105      	str	r1, [sp, #20]
 800f704:	9204      	str	r2, [sp, #16]
 800f706:	f7ff fd96 	bl	800f236 <__hexdig_fun>
 800f70a:	2800      	cmp	r0, #0
 800f70c:	d151      	bne.n	800f7b2 <__hexnan+0xea>
 800f70e:	9a04      	ldr	r2, [sp, #16]
 800f710:	9905      	ldr	r1, [sp, #20]
 800f712:	2a20      	cmp	r2, #32
 800f714:	d818      	bhi.n	800f748 <__hexnan+0x80>
 800f716:	9b02      	ldr	r3, [sp, #8]
 800f718:	459b      	cmp	fp, r3
 800f71a:	dd13      	ble.n	800f744 <__hexnan+0x7c>
 800f71c:	454c      	cmp	r4, r9
 800f71e:	d206      	bcs.n	800f72e <__hexnan+0x66>
 800f720:	2d07      	cmp	r5, #7
 800f722:	dc04      	bgt.n	800f72e <__hexnan+0x66>
 800f724:	462a      	mov	r2, r5
 800f726:	4649      	mov	r1, r9
 800f728:	4620      	mov	r0, r4
 800f72a:	f7ff ffa7 	bl	800f67c <L_shift>
 800f72e:	4544      	cmp	r4, r8
 800f730:	d951      	bls.n	800f7d6 <__hexnan+0x10e>
 800f732:	2300      	movs	r3, #0
 800f734:	f1a4 0904 	sub.w	r9, r4, #4
 800f738:	f8cd b008 	str.w	fp, [sp, #8]
 800f73c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f740:	461d      	mov	r5, r3
 800f742:	464c      	mov	r4, r9
 800f744:	9903      	ldr	r1, [sp, #12]
 800f746:	e7d7      	b.n	800f6f8 <__hexnan+0x30>
 800f748:	2a29      	cmp	r2, #41	@ 0x29
 800f74a:	d156      	bne.n	800f7fa <__hexnan+0x132>
 800f74c:	3102      	adds	r1, #2
 800f74e:	f8ca 1000 	str.w	r1, [sl]
 800f752:	f1bb 0f00 	cmp.w	fp, #0
 800f756:	d050      	beq.n	800f7fa <__hexnan+0x132>
 800f758:	454c      	cmp	r4, r9
 800f75a:	d206      	bcs.n	800f76a <__hexnan+0xa2>
 800f75c:	2d07      	cmp	r5, #7
 800f75e:	dc04      	bgt.n	800f76a <__hexnan+0xa2>
 800f760:	462a      	mov	r2, r5
 800f762:	4649      	mov	r1, r9
 800f764:	4620      	mov	r0, r4
 800f766:	f7ff ff89 	bl	800f67c <L_shift>
 800f76a:	4544      	cmp	r4, r8
 800f76c:	d935      	bls.n	800f7da <__hexnan+0x112>
 800f76e:	f1a8 0204 	sub.w	r2, r8, #4
 800f772:	4623      	mov	r3, r4
 800f774:	f853 1b04 	ldr.w	r1, [r3], #4
 800f778:	429f      	cmp	r7, r3
 800f77a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f77e:	d2f9      	bcs.n	800f774 <__hexnan+0xac>
 800f780:	1b3b      	subs	r3, r7, r4
 800f782:	3e03      	subs	r6, #3
 800f784:	3401      	adds	r4, #1
 800f786:	2200      	movs	r2, #0
 800f788:	f023 0303 	bic.w	r3, r3, #3
 800f78c:	3304      	adds	r3, #4
 800f78e:	42b4      	cmp	r4, r6
 800f790:	bf88      	it	hi
 800f792:	2304      	movhi	r3, #4
 800f794:	4443      	add	r3, r8
 800f796:	f843 2b04 	str.w	r2, [r3], #4
 800f79a:	429f      	cmp	r7, r3
 800f79c:	d2fb      	bcs.n	800f796 <__hexnan+0xce>
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	b91b      	cbnz	r3, 800f7aa <__hexnan+0xe2>
 800f7a2:	4547      	cmp	r7, r8
 800f7a4:	d127      	bne.n	800f7f6 <__hexnan+0x12e>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	603b      	str	r3, [r7, #0]
 800f7aa:	2005      	movs	r0, #5
 800f7ac:	b007      	add	sp, #28
 800f7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b2:	3501      	adds	r5, #1
 800f7b4:	f10b 0b01 	add.w	fp, fp, #1
 800f7b8:	2d08      	cmp	r5, #8
 800f7ba:	dd05      	ble.n	800f7c8 <__hexnan+0x100>
 800f7bc:	4544      	cmp	r4, r8
 800f7be:	d9c1      	bls.n	800f744 <__hexnan+0x7c>
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	3c04      	subs	r4, #4
 800f7c4:	2501      	movs	r5, #1
 800f7c6:	6023      	str	r3, [r4, #0]
 800f7c8:	6822      	ldr	r2, [r4, #0]
 800f7ca:	f000 000f 	and.w	r0, r0, #15
 800f7ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f7d2:	6020      	str	r0, [r4, #0]
 800f7d4:	e7b6      	b.n	800f744 <__hexnan+0x7c>
 800f7d6:	2508      	movs	r5, #8
 800f7d8:	e7b4      	b.n	800f744 <__hexnan+0x7c>
 800f7da:	9b01      	ldr	r3, [sp, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d0de      	beq.n	800f79e <__hexnan+0xd6>
 800f7e0:	f1c3 0320 	rsb	r3, r3, #32
 800f7e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f7e8:	40da      	lsrs	r2, r3
 800f7ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f7ee:	4013      	ands	r3, r2
 800f7f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f7f4:	e7d3      	b.n	800f79e <__hexnan+0xd6>
 800f7f6:	3f04      	subs	r7, #4
 800f7f8:	e7d1      	b.n	800f79e <__hexnan+0xd6>
 800f7fa:	2004      	movs	r0, #4
 800f7fc:	e7d6      	b.n	800f7ac <__hexnan+0xe4>

0800f7fe <__ssputs_r>:
 800f7fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f802:	461f      	mov	r7, r3
 800f804:	688e      	ldr	r6, [r1, #8]
 800f806:	4682      	mov	sl, r0
 800f808:	460c      	mov	r4, r1
 800f80a:	42be      	cmp	r6, r7
 800f80c:	4690      	mov	r8, r2
 800f80e:	680b      	ldr	r3, [r1, #0]
 800f810:	d82d      	bhi.n	800f86e <__ssputs_r+0x70>
 800f812:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f816:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f81a:	d026      	beq.n	800f86a <__ssputs_r+0x6c>
 800f81c:	6965      	ldr	r5, [r4, #20]
 800f81e:	6909      	ldr	r1, [r1, #16]
 800f820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f824:	eba3 0901 	sub.w	r9, r3, r1
 800f828:	1c7b      	adds	r3, r7, #1
 800f82a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f82e:	444b      	add	r3, r9
 800f830:	106d      	asrs	r5, r5, #1
 800f832:	429d      	cmp	r5, r3
 800f834:	bf38      	it	cc
 800f836:	461d      	movcc	r5, r3
 800f838:	0553      	lsls	r3, r2, #21
 800f83a:	d527      	bpl.n	800f88c <__ssputs_r+0x8e>
 800f83c:	4629      	mov	r1, r5
 800f83e:	f000 f95f 	bl	800fb00 <_malloc_r>
 800f842:	4606      	mov	r6, r0
 800f844:	b360      	cbz	r0, 800f8a0 <__ssputs_r+0xa2>
 800f846:	464a      	mov	r2, r9
 800f848:	6921      	ldr	r1, [r4, #16]
 800f84a:	f7fe fe27 	bl	800e49c <memcpy>
 800f84e:	89a3      	ldrh	r3, [r4, #12]
 800f850:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f858:	81a3      	strh	r3, [r4, #12]
 800f85a:	6126      	str	r6, [r4, #16]
 800f85c:	444e      	add	r6, r9
 800f85e:	6165      	str	r5, [r4, #20]
 800f860:	eba5 0509 	sub.w	r5, r5, r9
 800f864:	6026      	str	r6, [r4, #0]
 800f866:	463e      	mov	r6, r7
 800f868:	60a5      	str	r5, [r4, #8]
 800f86a:	42be      	cmp	r6, r7
 800f86c:	d900      	bls.n	800f870 <__ssputs_r+0x72>
 800f86e:	463e      	mov	r6, r7
 800f870:	4632      	mov	r2, r6
 800f872:	4641      	mov	r1, r8
 800f874:	6820      	ldr	r0, [r4, #0]
 800f876:	f000 ffc1 	bl	80107fc <memmove>
 800f87a:	68a3      	ldr	r3, [r4, #8]
 800f87c:	2000      	movs	r0, #0
 800f87e:	1b9b      	subs	r3, r3, r6
 800f880:	60a3      	str	r3, [r4, #8]
 800f882:	6823      	ldr	r3, [r4, #0]
 800f884:	4433      	add	r3, r6
 800f886:	6023      	str	r3, [r4, #0]
 800f888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f88c:	462a      	mov	r2, r5
 800f88e:	f000 ff7a 	bl	8010786 <_realloc_r>
 800f892:	4606      	mov	r6, r0
 800f894:	2800      	cmp	r0, #0
 800f896:	d1e0      	bne.n	800f85a <__ssputs_r+0x5c>
 800f898:	6921      	ldr	r1, [r4, #16]
 800f89a:	4650      	mov	r0, sl
 800f89c:	f001 f850 	bl	8010940 <_free_r>
 800f8a0:	230c      	movs	r3, #12
 800f8a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8a6:	f8ca 3000 	str.w	r3, [sl]
 800f8aa:	89a3      	ldrh	r3, [r4, #12]
 800f8ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8b0:	81a3      	strh	r3, [r4, #12]
 800f8b2:	e7e9      	b.n	800f888 <__ssputs_r+0x8a>

0800f8b4 <_svfiprintf_r>:
 800f8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b8:	4698      	mov	r8, r3
 800f8ba:	898b      	ldrh	r3, [r1, #12]
 800f8bc:	b09d      	sub	sp, #116	@ 0x74
 800f8be:	4607      	mov	r7, r0
 800f8c0:	061b      	lsls	r3, r3, #24
 800f8c2:	460d      	mov	r5, r1
 800f8c4:	4614      	mov	r4, r2
 800f8c6:	d510      	bpl.n	800f8ea <_svfiprintf_r+0x36>
 800f8c8:	690b      	ldr	r3, [r1, #16]
 800f8ca:	b973      	cbnz	r3, 800f8ea <_svfiprintf_r+0x36>
 800f8cc:	2140      	movs	r1, #64	@ 0x40
 800f8ce:	f000 f917 	bl	800fb00 <_malloc_r>
 800f8d2:	6028      	str	r0, [r5, #0]
 800f8d4:	6128      	str	r0, [r5, #16]
 800f8d6:	b930      	cbnz	r0, 800f8e6 <_svfiprintf_r+0x32>
 800f8d8:	230c      	movs	r3, #12
 800f8da:	603b      	str	r3, [r7, #0]
 800f8dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8e0:	b01d      	add	sp, #116	@ 0x74
 800f8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e6:	2340      	movs	r3, #64	@ 0x40
 800f8e8:	616b      	str	r3, [r5, #20]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8f0:	f04f 0901 	mov.w	r9, #1
 800f8f4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800fa98 <_svfiprintf_r+0x1e4>
 800f8f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8fa:	2320      	movs	r3, #32
 800f8fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f900:	2330      	movs	r3, #48	@ 0x30
 800f902:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f906:	4623      	mov	r3, r4
 800f908:	469a      	mov	sl, r3
 800f90a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f90e:	b10a      	cbz	r2, 800f914 <_svfiprintf_r+0x60>
 800f910:	2a25      	cmp	r2, #37	@ 0x25
 800f912:	d1f9      	bne.n	800f908 <_svfiprintf_r+0x54>
 800f914:	ebba 0b04 	subs.w	fp, sl, r4
 800f918:	d00b      	beq.n	800f932 <_svfiprintf_r+0x7e>
 800f91a:	465b      	mov	r3, fp
 800f91c:	4622      	mov	r2, r4
 800f91e:	4629      	mov	r1, r5
 800f920:	4638      	mov	r0, r7
 800f922:	f7ff ff6c 	bl	800f7fe <__ssputs_r>
 800f926:	3001      	adds	r0, #1
 800f928:	f000 80a7 	beq.w	800fa7a <_svfiprintf_r+0x1c6>
 800f92c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f92e:	445a      	add	r2, fp
 800f930:	9209      	str	r2, [sp, #36]	@ 0x24
 800f932:	f89a 3000 	ldrb.w	r3, [sl]
 800f936:	2b00      	cmp	r3, #0
 800f938:	f000 809f 	beq.w	800fa7a <_svfiprintf_r+0x1c6>
 800f93c:	2300      	movs	r3, #0
 800f93e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f942:	f10a 0a01 	add.w	sl, sl, #1
 800f946:	9304      	str	r3, [sp, #16]
 800f948:	9307      	str	r3, [sp, #28]
 800f94a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f94e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f954:	4654      	mov	r4, sl
 800f956:	2205      	movs	r2, #5
 800f958:	484f      	ldr	r0, [pc, #316]	@ (800fa98 <_svfiprintf_r+0x1e4>)
 800f95a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f95e:	f7fe fd8f 	bl	800e480 <memchr>
 800f962:	9a04      	ldr	r2, [sp, #16]
 800f964:	b9d8      	cbnz	r0, 800f99e <_svfiprintf_r+0xea>
 800f966:	06d0      	lsls	r0, r2, #27
 800f968:	bf44      	itt	mi
 800f96a:	2320      	movmi	r3, #32
 800f96c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f970:	0711      	lsls	r1, r2, #28
 800f972:	bf44      	itt	mi
 800f974:	232b      	movmi	r3, #43	@ 0x2b
 800f976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f97a:	f89a 3000 	ldrb.w	r3, [sl]
 800f97e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f980:	d015      	beq.n	800f9ae <_svfiprintf_r+0xfa>
 800f982:	9a07      	ldr	r2, [sp, #28]
 800f984:	4654      	mov	r4, sl
 800f986:	2000      	movs	r0, #0
 800f988:	f04f 0c0a 	mov.w	ip, #10
 800f98c:	4621      	mov	r1, r4
 800f98e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f992:	3b30      	subs	r3, #48	@ 0x30
 800f994:	2b09      	cmp	r3, #9
 800f996:	d94b      	bls.n	800fa30 <_svfiprintf_r+0x17c>
 800f998:	b1b0      	cbz	r0, 800f9c8 <_svfiprintf_r+0x114>
 800f99a:	9207      	str	r2, [sp, #28]
 800f99c:	e014      	b.n	800f9c8 <_svfiprintf_r+0x114>
 800f99e:	eba0 0308 	sub.w	r3, r0, r8
 800f9a2:	46a2      	mov	sl, r4
 800f9a4:	fa09 f303 	lsl.w	r3, r9, r3
 800f9a8:	4313      	orrs	r3, r2
 800f9aa:	9304      	str	r3, [sp, #16]
 800f9ac:	e7d2      	b.n	800f954 <_svfiprintf_r+0xa0>
 800f9ae:	9b03      	ldr	r3, [sp, #12]
 800f9b0:	1d19      	adds	r1, r3, #4
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	9103      	str	r1, [sp, #12]
 800f9b8:	bfbb      	ittet	lt
 800f9ba:	425b      	neglt	r3, r3
 800f9bc:	f042 0202 	orrlt.w	r2, r2, #2
 800f9c0:	9307      	strge	r3, [sp, #28]
 800f9c2:	9307      	strlt	r3, [sp, #28]
 800f9c4:	bfb8      	it	lt
 800f9c6:	9204      	strlt	r2, [sp, #16]
 800f9c8:	7823      	ldrb	r3, [r4, #0]
 800f9ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9cc:	d10a      	bne.n	800f9e4 <_svfiprintf_r+0x130>
 800f9ce:	7863      	ldrb	r3, [r4, #1]
 800f9d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9d2:	d132      	bne.n	800fa3a <_svfiprintf_r+0x186>
 800f9d4:	9b03      	ldr	r3, [sp, #12]
 800f9d6:	3402      	adds	r4, #2
 800f9d8:	1d1a      	adds	r2, r3, #4
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9e0:	9203      	str	r2, [sp, #12]
 800f9e2:	9305      	str	r3, [sp, #20]
 800f9e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800faa8 <_svfiprintf_r+0x1f4>
 800f9e8:	2203      	movs	r2, #3
 800f9ea:	7821      	ldrb	r1, [r4, #0]
 800f9ec:	4650      	mov	r0, sl
 800f9ee:	f7fe fd47 	bl	800e480 <memchr>
 800f9f2:	b138      	cbz	r0, 800fa04 <_svfiprintf_r+0x150>
 800f9f4:	eba0 000a 	sub.w	r0, r0, sl
 800f9f8:	2240      	movs	r2, #64	@ 0x40
 800f9fa:	9b04      	ldr	r3, [sp, #16]
 800f9fc:	3401      	adds	r4, #1
 800f9fe:	4082      	lsls	r2, r0
 800fa00:	4313      	orrs	r3, r2
 800fa02:	9304      	str	r3, [sp, #16]
 800fa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa08:	2206      	movs	r2, #6
 800fa0a:	4824      	ldr	r0, [pc, #144]	@ (800fa9c <_svfiprintf_r+0x1e8>)
 800fa0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa10:	f7fe fd36 	bl	800e480 <memchr>
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d036      	beq.n	800fa86 <_svfiprintf_r+0x1d2>
 800fa18:	4b21      	ldr	r3, [pc, #132]	@ (800faa0 <_svfiprintf_r+0x1ec>)
 800fa1a:	bb1b      	cbnz	r3, 800fa64 <_svfiprintf_r+0x1b0>
 800fa1c:	9b03      	ldr	r3, [sp, #12]
 800fa1e:	3307      	adds	r3, #7
 800fa20:	f023 0307 	bic.w	r3, r3, #7
 800fa24:	3308      	adds	r3, #8
 800fa26:	9303      	str	r3, [sp, #12]
 800fa28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa2a:	4433      	add	r3, r6
 800fa2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa2e:	e76a      	b.n	800f906 <_svfiprintf_r+0x52>
 800fa30:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa34:	460c      	mov	r4, r1
 800fa36:	2001      	movs	r0, #1
 800fa38:	e7a8      	b.n	800f98c <_svfiprintf_r+0xd8>
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	3401      	adds	r4, #1
 800fa3e:	f04f 0c0a 	mov.w	ip, #10
 800fa42:	4619      	mov	r1, r3
 800fa44:	9305      	str	r3, [sp, #20]
 800fa46:	4620      	mov	r0, r4
 800fa48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa4c:	3a30      	subs	r2, #48	@ 0x30
 800fa4e:	2a09      	cmp	r2, #9
 800fa50:	d903      	bls.n	800fa5a <_svfiprintf_r+0x1a6>
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d0c6      	beq.n	800f9e4 <_svfiprintf_r+0x130>
 800fa56:	9105      	str	r1, [sp, #20]
 800fa58:	e7c4      	b.n	800f9e4 <_svfiprintf_r+0x130>
 800fa5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa5e:	4604      	mov	r4, r0
 800fa60:	2301      	movs	r3, #1
 800fa62:	e7f0      	b.n	800fa46 <_svfiprintf_r+0x192>
 800fa64:	ab03      	add	r3, sp, #12
 800fa66:	462a      	mov	r2, r5
 800fa68:	a904      	add	r1, sp, #16
 800fa6a:	4638      	mov	r0, r7
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	4b0d      	ldr	r3, [pc, #52]	@ (800faa4 <_svfiprintf_r+0x1f0>)
 800fa70:	f7fc ff52 	bl	800c918 <_printf_float>
 800fa74:	1c42      	adds	r2, r0, #1
 800fa76:	4606      	mov	r6, r0
 800fa78:	d1d6      	bne.n	800fa28 <_svfiprintf_r+0x174>
 800fa7a:	89ab      	ldrh	r3, [r5, #12]
 800fa7c:	065b      	lsls	r3, r3, #25
 800fa7e:	f53f af2d 	bmi.w	800f8dc <_svfiprintf_r+0x28>
 800fa82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa84:	e72c      	b.n	800f8e0 <_svfiprintf_r+0x2c>
 800fa86:	ab03      	add	r3, sp, #12
 800fa88:	462a      	mov	r2, r5
 800fa8a:	a904      	add	r1, sp, #16
 800fa8c:	4638      	mov	r0, r7
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	4b04      	ldr	r3, [pc, #16]	@ (800faa4 <_svfiprintf_r+0x1f0>)
 800fa92:	f7fd f9dd 	bl	800ce50 <_printf_i>
 800fa96:	e7ed      	b.n	800fa74 <_svfiprintf_r+0x1c0>
 800fa98:	0801167c 	.word	0x0801167c
 800fa9c:	08011686 	.word	0x08011686
 800faa0:	0800c919 	.word	0x0800c919
 800faa4:	0800f7ff 	.word	0x0800f7ff
 800faa8:	08011682 	.word	0x08011682

0800faac <malloc>:
 800faac:	4b02      	ldr	r3, [pc, #8]	@ (800fab8 <malloc+0xc>)
 800faae:	4601      	mov	r1, r0
 800fab0:	6818      	ldr	r0, [r3, #0]
 800fab2:	f000 b825 	b.w	800fb00 <_malloc_r>
 800fab6:	bf00      	nop
 800fab8:	2000019c 	.word	0x2000019c

0800fabc <sbrk_aligned>:
 800fabc:	b570      	push	{r4, r5, r6, lr}
 800fabe:	4e0f      	ldr	r6, [pc, #60]	@ (800fafc <sbrk_aligned+0x40>)
 800fac0:	460c      	mov	r4, r1
 800fac2:	4605      	mov	r5, r0
 800fac4:	6831      	ldr	r1, [r6, #0]
 800fac6:	b911      	cbnz	r1, 800face <sbrk_aligned+0x12>
 800fac8:	f000 fed6 	bl	8010878 <_sbrk_r>
 800facc:	6030      	str	r0, [r6, #0]
 800face:	4621      	mov	r1, r4
 800fad0:	4628      	mov	r0, r5
 800fad2:	f000 fed1 	bl	8010878 <_sbrk_r>
 800fad6:	1c43      	adds	r3, r0, #1
 800fad8:	d103      	bne.n	800fae2 <sbrk_aligned+0x26>
 800fada:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fade:	4620      	mov	r0, r4
 800fae0:	bd70      	pop	{r4, r5, r6, pc}
 800fae2:	1cc4      	adds	r4, r0, #3
 800fae4:	f024 0403 	bic.w	r4, r4, #3
 800fae8:	42a0      	cmp	r0, r4
 800faea:	d0f8      	beq.n	800fade <sbrk_aligned+0x22>
 800faec:	1a21      	subs	r1, r4, r0
 800faee:	4628      	mov	r0, r5
 800faf0:	f000 fec2 	bl	8010878 <_sbrk_r>
 800faf4:	3001      	adds	r0, #1
 800faf6:	d1f2      	bne.n	800fade <sbrk_aligned+0x22>
 800faf8:	e7ef      	b.n	800fada <sbrk_aligned+0x1e>
 800fafa:	bf00      	nop
 800fafc:	20000588 	.word	0x20000588

0800fb00 <_malloc_r>:
 800fb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb04:	1ccd      	adds	r5, r1, #3
 800fb06:	4606      	mov	r6, r0
 800fb08:	f025 0503 	bic.w	r5, r5, #3
 800fb0c:	3508      	adds	r5, #8
 800fb0e:	2d0c      	cmp	r5, #12
 800fb10:	bf38      	it	cc
 800fb12:	250c      	movcc	r5, #12
 800fb14:	2d00      	cmp	r5, #0
 800fb16:	db01      	blt.n	800fb1c <_malloc_r+0x1c>
 800fb18:	42a9      	cmp	r1, r5
 800fb1a:	d904      	bls.n	800fb26 <_malloc_r+0x26>
 800fb1c:	230c      	movs	r3, #12
 800fb1e:	6033      	str	r3, [r6, #0]
 800fb20:	2000      	movs	r0, #0
 800fb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fbfc <_malloc_r+0xfc>
 800fb2a:	f000 f927 	bl	800fd7c <__malloc_lock>
 800fb2e:	f8d8 3000 	ldr.w	r3, [r8]
 800fb32:	461c      	mov	r4, r3
 800fb34:	bb44      	cbnz	r4, 800fb88 <_malloc_r+0x88>
 800fb36:	4629      	mov	r1, r5
 800fb38:	4630      	mov	r0, r6
 800fb3a:	f7ff ffbf 	bl	800fabc <sbrk_aligned>
 800fb3e:	1c43      	adds	r3, r0, #1
 800fb40:	4604      	mov	r4, r0
 800fb42:	d158      	bne.n	800fbf6 <_malloc_r+0xf6>
 800fb44:	f8d8 4000 	ldr.w	r4, [r8]
 800fb48:	4627      	mov	r7, r4
 800fb4a:	2f00      	cmp	r7, #0
 800fb4c:	d143      	bne.n	800fbd6 <_malloc_r+0xd6>
 800fb4e:	2c00      	cmp	r4, #0
 800fb50:	d04b      	beq.n	800fbea <_malloc_r+0xea>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	4639      	mov	r1, r7
 800fb56:	4630      	mov	r0, r6
 800fb58:	eb04 0903 	add.w	r9, r4, r3
 800fb5c:	f000 fe8c 	bl	8010878 <_sbrk_r>
 800fb60:	4581      	cmp	r9, r0
 800fb62:	d142      	bne.n	800fbea <_malloc_r+0xea>
 800fb64:	6821      	ldr	r1, [r4, #0]
 800fb66:	4630      	mov	r0, r6
 800fb68:	1a6d      	subs	r5, r5, r1
 800fb6a:	4629      	mov	r1, r5
 800fb6c:	f7ff ffa6 	bl	800fabc <sbrk_aligned>
 800fb70:	3001      	adds	r0, #1
 800fb72:	d03a      	beq.n	800fbea <_malloc_r+0xea>
 800fb74:	6823      	ldr	r3, [r4, #0]
 800fb76:	442b      	add	r3, r5
 800fb78:	6023      	str	r3, [r4, #0]
 800fb7a:	f8d8 3000 	ldr.w	r3, [r8]
 800fb7e:	685a      	ldr	r2, [r3, #4]
 800fb80:	bb62      	cbnz	r2, 800fbdc <_malloc_r+0xdc>
 800fb82:	f8c8 7000 	str.w	r7, [r8]
 800fb86:	e00f      	b.n	800fba8 <_malloc_r+0xa8>
 800fb88:	6822      	ldr	r2, [r4, #0]
 800fb8a:	1b52      	subs	r2, r2, r5
 800fb8c:	d420      	bmi.n	800fbd0 <_malloc_r+0xd0>
 800fb8e:	2a0b      	cmp	r2, #11
 800fb90:	d917      	bls.n	800fbc2 <_malloc_r+0xc2>
 800fb92:	1961      	adds	r1, r4, r5
 800fb94:	42a3      	cmp	r3, r4
 800fb96:	6025      	str	r5, [r4, #0]
 800fb98:	bf18      	it	ne
 800fb9a:	6059      	strne	r1, [r3, #4]
 800fb9c:	6863      	ldr	r3, [r4, #4]
 800fb9e:	bf08      	it	eq
 800fba0:	f8c8 1000 	streq.w	r1, [r8]
 800fba4:	5162      	str	r2, [r4, r5]
 800fba6:	604b      	str	r3, [r1, #4]
 800fba8:	4630      	mov	r0, r6
 800fbaa:	f000 f8ed 	bl	800fd88 <__malloc_unlock>
 800fbae:	f104 000b 	add.w	r0, r4, #11
 800fbb2:	1d23      	adds	r3, r4, #4
 800fbb4:	f020 0007 	bic.w	r0, r0, #7
 800fbb8:	1ac2      	subs	r2, r0, r3
 800fbba:	bf1c      	itt	ne
 800fbbc:	1a1b      	subne	r3, r3, r0
 800fbbe:	50a3      	strne	r3, [r4, r2]
 800fbc0:	e7af      	b.n	800fb22 <_malloc_r+0x22>
 800fbc2:	6862      	ldr	r2, [r4, #4]
 800fbc4:	42a3      	cmp	r3, r4
 800fbc6:	bf0c      	ite	eq
 800fbc8:	f8c8 2000 	streq.w	r2, [r8]
 800fbcc:	605a      	strne	r2, [r3, #4]
 800fbce:	e7eb      	b.n	800fba8 <_malloc_r+0xa8>
 800fbd0:	4623      	mov	r3, r4
 800fbd2:	6864      	ldr	r4, [r4, #4]
 800fbd4:	e7ae      	b.n	800fb34 <_malloc_r+0x34>
 800fbd6:	463c      	mov	r4, r7
 800fbd8:	687f      	ldr	r7, [r7, #4]
 800fbda:	e7b6      	b.n	800fb4a <_malloc_r+0x4a>
 800fbdc:	461a      	mov	r2, r3
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	42a3      	cmp	r3, r4
 800fbe2:	d1fb      	bne.n	800fbdc <_malloc_r+0xdc>
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	6053      	str	r3, [r2, #4]
 800fbe8:	e7de      	b.n	800fba8 <_malloc_r+0xa8>
 800fbea:	230c      	movs	r3, #12
 800fbec:	4630      	mov	r0, r6
 800fbee:	6033      	str	r3, [r6, #0]
 800fbf0:	f000 f8ca 	bl	800fd88 <__malloc_unlock>
 800fbf4:	e794      	b.n	800fb20 <_malloc_r+0x20>
 800fbf6:	6005      	str	r5, [r0, #0]
 800fbf8:	e7d6      	b.n	800fba8 <_malloc_r+0xa8>
 800fbfa:	bf00      	nop
 800fbfc:	2000058c 	.word	0x2000058c

0800fc00 <__ascii_mbtowc>:
 800fc00:	b082      	sub	sp, #8
 800fc02:	b901      	cbnz	r1, 800fc06 <__ascii_mbtowc+0x6>
 800fc04:	a901      	add	r1, sp, #4
 800fc06:	b142      	cbz	r2, 800fc1a <__ascii_mbtowc+0x1a>
 800fc08:	b14b      	cbz	r3, 800fc1e <__ascii_mbtowc+0x1e>
 800fc0a:	7813      	ldrb	r3, [r2, #0]
 800fc0c:	600b      	str	r3, [r1, #0]
 800fc0e:	7812      	ldrb	r2, [r2, #0]
 800fc10:	1e10      	subs	r0, r2, #0
 800fc12:	bf18      	it	ne
 800fc14:	2001      	movne	r0, #1
 800fc16:	b002      	add	sp, #8
 800fc18:	4770      	bx	lr
 800fc1a:	4610      	mov	r0, r2
 800fc1c:	e7fb      	b.n	800fc16 <__ascii_mbtowc+0x16>
 800fc1e:	f06f 0001 	mvn.w	r0, #1
 800fc22:	e7f8      	b.n	800fc16 <__ascii_mbtowc+0x16>

0800fc24 <__sflush_r>:
 800fc24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc2c:	0716      	lsls	r6, r2, #28
 800fc2e:	4605      	mov	r5, r0
 800fc30:	460c      	mov	r4, r1
 800fc32:	d454      	bmi.n	800fcde <__sflush_r+0xba>
 800fc34:	684b      	ldr	r3, [r1, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	dc02      	bgt.n	800fc40 <__sflush_r+0x1c>
 800fc3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	dd48      	ble.n	800fcd2 <__sflush_r+0xae>
 800fc40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc42:	2e00      	cmp	r6, #0
 800fc44:	d045      	beq.n	800fcd2 <__sflush_r+0xae>
 800fc46:	2300      	movs	r3, #0
 800fc48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fc4c:	682f      	ldr	r7, [r5, #0]
 800fc4e:	6a21      	ldr	r1, [r4, #32]
 800fc50:	602b      	str	r3, [r5, #0]
 800fc52:	d030      	beq.n	800fcb6 <__sflush_r+0x92>
 800fc54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fc56:	89a3      	ldrh	r3, [r4, #12]
 800fc58:	0759      	lsls	r1, r3, #29
 800fc5a:	d505      	bpl.n	800fc68 <__sflush_r+0x44>
 800fc5c:	6863      	ldr	r3, [r4, #4]
 800fc5e:	1ad2      	subs	r2, r2, r3
 800fc60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc62:	b10b      	cbz	r3, 800fc68 <__sflush_r+0x44>
 800fc64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc66:	1ad2      	subs	r2, r2, r3
 800fc68:	2300      	movs	r3, #0
 800fc6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc6c:	6a21      	ldr	r1, [r4, #32]
 800fc6e:	4628      	mov	r0, r5
 800fc70:	47b0      	blx	r6
 800fc72:	1c43      	adds	r3, r0, #1
 800fc74:	89a3      	ldrh	r3, [r4, #12]
 800fc76:	d106      	bne.n	800fc86 <__sflush_r+0x62>
 800fc78:	6829      	ldr	r1, [r5, #0]
 800fc7a:	291d      	cmp	r1, #29
 800fc7c:	d82b      	bhi.n	800fcd6 <__sflush_r+0xb2>
 800fc7e:	4a2a      	ldr	r2, [pc, #168]	@ (800fd28 <__sflush_r+0x104>)
 800fc80:	40ca      	lsrs	r2, r1
 800fc82:	07d6      	lsls	r6, r2, #31
 800fc84:	d527      	bpl.n	800fcd6 <__sflush_r+0xb2>
 800fc86:	2200      	movs	r2, #0
 800fc88:	04d9      	lsls	r1, r3, #19
 800fc8a:	6062      	str	r2, [r4, #4]
 800fc8c:	6922      	ldr	r2, [r4, #16]
 800fc8e:	6022      	str	r2, [r4, #0]
 800fc90:	d504      	bpl.n	800fc9c <__sflush_r+0x78>
 800fc92:	1c42      	adds	r2, r0, #1
 800fc94:	d101      	bne.n	800fc9a <__sflush_r+0x76>
 800fc96:	682b      	ldr	r3, [r5, #0]
 800fc98:	b903      	cbnz	r3, 800fc9c <__sflush_r+0x78>
 800fc9a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fc9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc9e:	602f      	str	r7, [r5, #0]
 800fca0:	b1b9      	cbz	r1, 800fcd2 <__sflush_r+0xae>
 800fca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fca6:	4299      	cmp	r1, r3
 800fca8:	d002      	beq.n	800fcb0 <__sflush_r+0x8c>
 800fcaa:	4628      	mov	r0, r5
 800fcac:	f000 fe48 	bl	8010940 <_free_r>
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	6363      	str	r3, [r4, #52]	@ 0x34
 800fcb4:	e00d      	b.n	800fcd2 <__sflush_r+0xae>
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	4628      	mov	r0, r5
 800fcba:	47b0      	blx	r6
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	1c50      	adds	r0, r2, #1
 800fcc0:	d1c9      	bne.n	800fc56 <__sflush_r+0x32>
 800fcc2:	682b      	ldr	r3, [r5, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d0c6      	beq.n	800fc56 <__sflush_r+0x32>
 800fcc8:	2b1d      	cmp	r3, #29
 800fcca:	d001      	beq.n	800fcd0 <__sflush_r+0xac>
 800fccc:	2b16      	cmp	r3, #22
 800fcce:	d11d      	bne.n	800fd0c <__sflush_r+0xe8>
 800fcd0:	602f      	str	r7, [r5, #0]
 800fcd2:	2000      	movs	r0, #0
 800fcd4:	e021      	b.n	800fd1a <__sflush_r+0xf6>
 800fcd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcda:	b21b      	sxth	r3, r3
 800fcdc:	e01a      	b.n	800fd14 <__sflush_r+0xf0>
 800fcde:	690f      	ldr	r7, [r1, #16]
 800fce0:	2f00      	cmp	r7, #0
 800fce2:	d0f6      	beq.n	800fcd2 <__sflush_r+0xae>
 800fce4:	0793      	lsls	r3, r2, #30
 800fce6:	680e      	ldr	r6, [r1, #0]
 800fce8:	600f      	str	r7, [r1, #0]
 800fcea:	bf0c      	ite	eq
 800fcec:	694b      	ldreq	r3, [r1, #20]
 800fcee:	2300      	movne	r3, #0
 800fcf0:	eba6 0807 	sub.w	r8, r6, r7
 800fcf4:	608b      	str	r3, [r1, #8]
 800fcf6:	f1b8 0f00 	cmp.w	r8, #0
 800fcfa:	ddea      	ble.n	800fcd2 <__sflush_r+0xae>
 800fcfc:	4643      	mov	r3, r8
 800fcfe:	463a      	mov	r2, r7
 800fd00:	6a21      	ldr	r1, [r4, #32]
 800fd02:	4628      	mov	r0, r5
 800fd04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fd06:	47b0      	blx	r6
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	dc08      	bgt.n	800fd1e <__sflush_r+0xfa>
 800fd0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd18:	81a3      	strh	r3, [r4, #12]
 800fd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd1e:	4407      	add	r7, r0
 800fd20:	eba8 0800 	sub.w	r8, r8, r0
 800fd24:	e7e7      	b.n	800fcf6 <__sflush_r+0xd2>
 800fd26:	bf00      	nop
 800fd28:	20400001 	.word	0x20400001

0800fd2c <_fflush_r>:
 800fd2c:	b538      	push	{r3, r4, r5, lr}
 800fd2e:	690b      	ldr	r3, [r1, #16]
 800fd30:	4605      	mov	r5, r0
 800fd32:	460c      	mov	r4, r1
 800fd34:	b913      	cbnz	r3, 800fd3c <_fflush_r+0x10>
 800fd36:	2500      	movs	r5, #0
 800fd38:	4628      	mov	r0, r5
 800fd3a:	bd38      	pop	{r3, r4, r5, pc}
 800fd3c:	b118      	cbz	r0, 800fd46 <_fflush_r+0x1a>
 800fd3e:	6a03      	ldr	r3, [r0, #32]
 800fd40:	b90b      	cbnz	r3, 800fd46 <_fflush_r+0x1a>
 800fd42:	f7fd fc95 	bl	800d670 <__sinit>
 800fd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d0f3      	beq.n	800fd36 <_fflush_r+0xa>
 800fd4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fd50:	07d0      	lsls	r0, r2, #31
 800fd52:	d404      	bmi.n	800fd5e <_fflush_r+0x32>
 800fd54:	0599      	lsls	r1, r3, #22
 800fd56:	d402      	bmi.n	800fd5e <_fflush_r+0x32>
 800fd58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd5a:	f7fe fb8a 	bl	800e472 <__retarget_lock_acquire_recursive>
 800fd5e:	4628      	mov	r0, r5
 800fd60:	4621      	mov	r1, r4
 800fd62:	f7ff ff5f 	bl	800fc24 <__sflush_r>
 800fd66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd68:	4605      	mov	r5, r0
 800fd6a:	07da      	lsls	r2, r3, #31
 800fd6c:	d4e4      	bmi.n	800fd38 <_fflush_r+0xc>
 800fd6e:	89a3      	ldrh	r3, [r4, #12]
 800fd70:	059b      	lsls	r3, r3, #22
 800fd72:	d4e1      	bmi.n	800fd38 <_fflush_r+0xc>
 800fd74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd76:	f7fe fb7d 	bl	800e474 <__retarget_lock_release_recursive>
 800fd7a:	e7dd      	b.n	800fd38 <_fflush_r+0xc>

0800fd7c <__malloc_lock>:
 800fd7c:	4801      	ldr	r0, [pc, #4]	@ (800fd84 <__malloc_lock+0x8>)
 800fd7e:	f7fe bb78 	b.w	800e472 <__retarget_lock_acquire_recursive>
 800fd82:	bf00      	nop
 800fd84:	20000584 	.word	0x20000584

0800fd88 <__malloc_unlock>:
 800fd88:	4801      	ldr	r0, [pc, #4]	@ (800fd90 <__malloc_unlock+0x8>)
 800fd8a:	f7fe bb73 	b.w	800e474 <__retarget_lock_release_recursive>
 800fd8e:	bf00      	nop
 800fd90:	20000584 	.word	0x20000584

0800fd94 <_Balloc>:
 800fd94:	b570      	push	{r4, r5, r6, lr}
 800fd96:	69c6      	ldr	r6, [r0, #28]
 800fd98:	4604      	mov	r4, r0
 800fd9a:	460d      	mov	r5, r1
 800fd9c:	b976      	cbnz	r6, 800fdbc <_Balloc+0x28>
 800fd9e:	2010      	movs	r0, #16
 800fda0:	f7ff fe84 	bl	800faac <malloc>
 800fda4:	4602      	mov	r2, r0
 800fda6:	61e0      	str	r0, [r4, #28]
 800fda8:	b920      	cbnz	r0, 800fdb4 <_Balloc+0x20>
 800fdaa:	4b18      	ldr	r3, [pc, #96]	@ (800fe0c <_Balloc+0x78>)
 800fdac:	216b      	movs	r1, #107	@ 0x6b
 800fdae:	4818      	ldr	r0, [pc, #96]	@ (800fe10 <_Balloc+0x7c>)
 800fdb0:	f000 fd94 	bl	80108dc <__assert_func>
 800fdb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdb8:	6006      	str	r6, [r0, #0]
 800fdba:	60c6      	str	r6, [r0, #12]
 800fdbc:	69e6      	ldr	r6, [r4, #28]
 800fdbe:	68f3      	ldr	r3, [r6, #12]
 800fdc0:	b183      	cbz	r3, 800fde4 <_Balloc+0x50>
 800fdc2:	69e3      	ldr	r3, [r4, #28]
 800fdc4:	68db      	ldr	r3, [r3, #12]
 800fdc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fdca:	b9b8      	cbnz	r0, 800fdfc <_Balloc+0x68>
 800fdcc:	2101      	movs	r1, #1
 800fdce:	4620      	mov	r0, r4
 800fdd0:	fa01 f605 	lsl.w	r6, r1, r5
 800fdd4:	1d72      	adds	r2, r6, #5
 800fdd6:	0092      	lsls	r2, r2, #2
 800fdd8:	f000 fd9e 	bl	8010918 <_calloc_r>
 800fddc:	b160      	cbz	r0, 800fdf8 <_Balloc+0x64>
 800fdde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fde2:	e00e      	b.n	800fe02 <_Balloc+0x6e>
 800fde4:	2221      	movs	r2, #33	@ 0x21
 800fde6:	2104      	movs	r1, #4
 800fde8:	4620      	mov	r0, r4
 800fdea:	f000 fd95 	bl	8010918 <_calloc_r>
 800fdee:	69e3      	ldr	r3, [r4, #28]
 800fdf0:	60f0      	str	r0, [r6, #12]
 800fdf2:	68db      	ldr	r3, [r3, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d1e4      	bne.n	800fdc2 <_Balloc+0x2e>
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	bd70      	pop	{r4, r5, r6, pc}
 800fdfc:	6802      	ldr	r2, [r0, #0]
 800fdfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe02:	2300      	movs	r3, #0
 800fe04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe08:	e7f7      	b.n	800fdfa <_Balloc+0x66>
 800fe0a:	bf00      	nop
 800fe0c:	0801159c 	.word	0x0801159c
 800fe10:	0801168d 	.word	0x0801168d

0800fe14 <_Bfree>:
 800fe14:	b570      	push	{r4, r5, r6, lr}
 800fe16:	69c6      	ldr	r6, [r0, #28]
 800fe18:	4605      	mov	r5, r0
 800fe1a:	460c      	mov	r4, r1
 800fe1c:	b976      	cbnz	r6, 800fe3c <_Bfree+0x28>
 800fe1e:	2010      	movs	r0, #16
 800fe20:	f7ff fe44 	bl	800faac <malloc>
 800fe24:	4602      	mov	r2, r0
 800fe26:	61e8      	str	r0, [r5, #28]
 800fe28:	b920      	cbnz	r0, 800fe34 <_Bfree+0x20>
 800fe2a:	4b09      	ldr	r3, [pc, #36]	@ (800fe50 <_Bfree+0x3c>)
 800fe2c:	218f      	movs	r1, #143	@ 0x8f
 800fe2e:	4809      	ldr	r0, [pc, #36]	@ (800fe54 <_Bfree+0x40>)
 800fe30:	f000 fd54 	bl	80108dc <__assert_func>
 800fe34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe38:	6006      	str	r6, [r0, #0]
 800fe3a:	60c6      	str	r6, [r0, #12]
 800fe3c:	b13c      	cbz	r4, 800fe4e <_Bfree+0x3a>
 800fe3e:	69eb      	ldr	r3, [r5, #28]
 800fe40:	6862      	ldr	r2, [r4, #4]
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe48:	6021      	str	r1, [r4, #0]
 800fe4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe4e:	bd70      	pop	{r4, r5, r6, pc}
 800fe50:	0801159c 	.word	0x0801159c
 800fe54:	0801168d 	.word	0x0801168d

0800fe58 <__multadd>:
 800fe58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe5c:	f101 0c14 	add.w	ip, r1, #20
 800fe60:	4607      	mov	r7, r0
 800fe62:	460c      	mov	r4, r1
 800fe64:	461e      	mov	r6, r3
 800fe66:	690d      	ldr	r5, [r1, #16]
 800fe68:	2000      	movs	r0, #0
 800fe6a:	f8dc 3000 	ldr.w	r3, [ip]
 800fe6e:	3001      	adds	r0, #1
 800fe70:	b299      	uxth	r1, r3
 800fe72:	4285      	cmp	r5, r0
 800fe74:	fb02 6101 	mla	r1, r2, r1, r6
 800fe78:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe7c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800fe80:	b289      	uxth	r1, r1
 800fe82:	fb02 3306 	mla	r3, r2, r6, r3
 800fe86:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe8e:	f84c 1b04 	str.w	r1, [ip], #4
 800fe92:	dcea      	bgt.n	800fe6a <__multadd+0x12>
 800fe94:	b30e      	cbz	r6, 800feda <__multadd+0x82>
 800fe96:	68a3      	ldr	r3, [r4, #8]
 800fe98:	42ab      	cmp	r3, r5
 800fe9a:	dc19      	bgt.n	800fed0 <__multadd+0x78>
 800fe9c:	6861      	ldr	r1, [r4, #4]
 800fe9e:	4638      	mov	r0, r7
 800fea0:	3101      	adds	r1, #1
 800fea2:	f7ff ff77 	bl	800fd94 <_Balloc>
 800fea6:	4680      	mov	r8, r0
 800fea8:	b928      	cbnz	r0, 800feb6 <__multadd+0x5e>
 800feaa:	4602      	mov	r2, r0
 800feac:	4b0c      	ldr	r3, [pc, #48]	@ (800fee0 <__multadd+0x88>)
 800feae:	21ba      	movs	r1, #186	@ 0xba
 800feb0:	480c      	ldr	r0, [pc, #48]	@ (800fee4 <__multadd+0x8c>)
 800feb2:	f000 fd13 	bl	80108dc <__assert_func>
 800feb6:	6922      	ldr	r2, [r4, #16]
 800feb8:	f104 010c 	add.w	r1, r4, #12
 800febc:	300c      	adds	r0, #12
 800febe:	3202      	adds	r2, #2
 800fec0:	0092      	lsls	r2, r2, #2
 800fec2:	f7fe faeb 	bl	800e49c <memcpy>
 800fec6:	4621      	mov	r1, r4
 800fec8:	4644      	mov	r4, r8
 800feca:	4638      	mov	r0, r7
 800fecc:	f7ff ffa2 	bl	800fe14 <_Bfree>
 800fed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fed4:	3501      	adds	r5, #1
 800fed6:	615e      	str	r6, [r3, #20]
 800fed8:	6125      	str	r5, [r4, #16]
 800feda:	4620      	mov	r0, r4
 800fedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee0:	0801160b 	.word	0x0801160b
 800fee4:	0801168d 	.word	0x0801168d

0800fee8 <__s2b>:
 800fee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feec:	4615      	mov	r5, r2
 800feee:	461f      	mov	r7, r3
 800fef0:	2209      	movs	r2, #9
 800fef2:	3308      	adds	r3, #8
 800fef4:	460c      	mov	r4, r1
 800fef6:	4606      	mov	r6, r0
 800fef8:	2100      	movs	r1, #0
 800fefa:	fb93 f3f2 	sdiv	r3, r3, r2
 800fefe:	2201      	movs	r2, #1
 800ff00:	429a      	cmp	r2, r3
 800ff02:	db09      	blt.n	800ff18 <__s2b+0x30>
 800ff04:	4630      	mov	r0, r6
 800ff06:	f7ff ff45 	bl	800fd94 <_Balloc>
 800ff0a:	b940      	cbnz	r0, 800ff1e <__s2b+0x36>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	4b19      	ldr	r3, [pc, #100]	@ (800ff74 <__s2b+0x8c>)
 800ff10:	21d3      	movs	r1, #211	@ 0xd3
 800ff12:	4819      	ldr	r0, [pc, #100]	@ (800ff78 <__s2b+0x90>)
 800ff14:	f000 fce2 	bl	80108dc <__assert_func>
 800ff18:	0052      	lsls	r2, r2, #1
 800ff1a:	3101      	adds	r1, #1
 800ff1c:	e7f0      	b.n	800ff00 <__s2b+0x18>
 800ff1e:	9b08      	ldr	r3, [sp, #32]
 800ff20:	2d09      	cmp	r5, #9
 800ff22:	6143      	str	r3, [r0, #20]
 800ff24:	f04f 0301 	mov.w	r3, #1
 800ff28:	6103      	str	r3, [r0, #16]
 800ff2a:	dd16      	ble.n	800ff5a <__s2b+0x72>
 800ff2c:	f104 0909 	add.w	r9, r4, #9
 800ff30:	442c      	add	r4, r5
 800ff32:	46c8      	mov	r8, r9
 800ff34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ff38:	4601      	mov	r1, r0
 800ff3a:	220a      	movs	r2, #10
 800ff3c:	4630      	mov	r0, r6
 800ff3e:	3b30      	subs	r3, #48	@ 0x30
 800ff40:	f7ff ff8a 	bl	800fe58 <__multadd>
 800ff44:	45a0      	cmp	r8, r4
 800ff46:	d1f5      	bne.n	800ff34 <__s2b+0x4c>
 800ff48:	f1a5 0408 	sub.w	r4, r5, #8
 800ff4c:	444c      	add	r4, r9
 800ff4e:	1b2d      	subs	r5, r5, r4
 800ff50:	1963      	adds	r3, r4, r5
 800ff52:	42bb      	cmp	r3, r7
 800ff54:	db04      	blt.n	800ff60 <__s2b+0x78>
 800ff56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff5a:	340a      	adds	r4, #10
 800ff5c:	2509      	movs	r5, #9
 800ff5e:	e7f6      	b.n	800ff4e <__s2b+0x66>
 800ff60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ff64:	4601      	mov	r1, r0
 800ff66:	220a      	movs	r2, #10
 800ff68:	4630      	mov	r0, r6
 800ff6a:	3b30      	subs	r3, #48	@ 0x30
 800ff6c:	f7ff ff74 	bl	800fe58 <__multadd>
 800ff70:	e7ee      	b.n	800ff50 <__s2b+0x68>
 800ff72:	bf00      	nop
 800ff74:	0801160b 	.word	0x0801160b
 800ff78:	0801168d 	.word	0x0801168d

0800ff7c <__hi0bits>:
 800ff7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ff80:	4603      	mov	r3, r0
 800ff82:	bf36      	itet	cc
 800ff84:	0403      	lslcc	r3, r0, #16
 800ff86:	2000      	movcs	r0, #0
 800ff88:	2010      	movcc	r0, #16
 800ff8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ff8e:	bf3c      	itt	cc
 800ff90:	021b      	lslcc	r3, r3, #8
 800ff92:	3008      	addcc	r0, #8
 800ff94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff98:	bf3c      	itt	cc
 800ff9a:	011b      	lslcc	r3, r3, #4
 800ff9c:	3004      	addcc	r0, #4
 800ff9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffa2:	bf3c      	itt	cc
 800ffa4:	009b      	lslcc	r3, r3, #2
 800ffa6:	3002      	addcc	r0, #2
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	db05      	blt.n	800ffb8 <__hi0bits+0x3c>
 800ffac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ffb0:	f100 0001 	add.w	r0, r0, #1
 800ffb4:	bf08      	it	eq
 800ffb6:	2020      	moveq	r0, #32
 800ffb8:	4770      	bx	lr

0800ffba <__lo0bits>:
 800ffba:	6803      	ldr	r3, [r0, #0]
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	f013 0007 	ands.w	r0, r3, #7
 800ffc2:	d00b      	beq.n	800ffdc <__lo0bits+0x22>
 800ffc4:	07d9      	lsls	r1, r3, #31
 800ffc6:	d421      	bmi.n	801000c <__lo0bits+0x52>
 800ffc8:	0798      	lsls	r0, r3, #30
 800ffca:	bf47      	ittee	mi
 800ffcc:	085b      	lsrmi	r3, r3, #1
 800ffce:	2001      	movmi	r0, #1
 800ffd0:	089b      	lsrpl	r3, r3, #2
 800ffd2:	2002      	movpl	r0, #2
 800ffd4:	bf4c      	ite	mi
 800ffd6:	6013      	strmi	r3, [r2, #0]
 800ffd8:	6013      	strpl	r3, [r2, #0]
 800ffda:	4770      	bx	lr
 800ffdc:	b299      	uxth	r1, r3
 800ffde:	b909      	cbnz	r1, 800ffe4 <__lo0bits+0x2a>
 800ffe0:	0c1b      	lsrs	r3, r3, #16
 800ffe2:	2010      	movs	r0, #16
 800ffe4:	b2d9      	uxtb	r1, r3
 800ffe6:	b909      	cbnz	r1, 800ffec <__lo0bits+0x32>
 800ffe8:	3008      	adds	r0, #8
 800ffea:	0a1b      	lsrs	r3, r3, #8
 800ffec:	0719      	lsls	r1, r3, #28
 800ffee:	bf04      	itt	eq
 800fff0:	091b      	lsreq	r3, r3, #4
 800fff2:	3004      	addeq	r0, #4
 800fff4:	0799      	lsls	r1, r3, #30
 800fff6:	bf04      	itt	eq
 800fff8:	089b      	lsreq	r3, r3, #2
 800fffa:	3002      	addeq	r0, #2
 800fffc:	07d9      	lsls	r1, r3, #31
 800fffe:	d403      	bmi.n	8010008 <__lo0bits+0x4e>
 8010000:	085b      	lsrs	r3, r3, #1
 8010002:	f100 0001 	add.w	r0, r0, #1
 8010006:	d003      	beq.n	8010010 <__lo0bits+0x56>
 8010008:	6013      	str	r3, [r2, #0]
 801000a:	4770      	bx	lr
 801000c:	2000      	movs	r0, #0
 801000e:	4770      	bx	lr
 8010010:	2020      	movs	r0, #32
 8010012:	4770      	bx	lr

08010014 <__i2b>:
 8010014:	b510      	push	{r4, lr}
 8010016:	460c      	mov	r4, r1
 8010018:	2101      	movs	r1, #1
 801001a:	f7ff febb 	bl	800fd94 <_Balloc>
 801001e:	4602      	mov	r2, r0
 8010020:	b928      	cbnz	r0, 801002e <__i2b+0x1a>
 8010022:	4b05      	ldr	r3, [pc, #20]	@ (8010038 <__i2b+0x24>)
 8010024:	f240 1145 	movw	r1, #325	@ 0x145
 8010028:	4804      	ldr	r0, [pc, #16]	@ (801003c <__i2b+0x28>)
 801002a:	f000 fc57 	bl	80108dc <__assert_func>
 801002e:	2301      	movs	r3, #1
 8010030:	6144      	str	r4, [r0, #20]
 8010032:	6103      	str	r3, [r0, #16]
 8010034:	bd10      	pop	{r4, pc}
 8010036:	bf00      	nop
 8010038:	0801160b 	.word	0x0801160b
 801003c:	0801168d 	.word	0x0801168d

08010040 <__multiply>:
 8010040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010044:	4617      	mov	r7, r2
 8010046:	690a      	ldr	r2, [r1, #16]
 8010048:	4689      	mov	r9, r1
 801004a:	b085      	sub	sp, #20
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	429a      	cmp	r2, r3
 8010050:	bfa2      	ittt	ge
 8010052:	463b      	movge	r3, r7
 8010054:	460f      	movge	r7, r1
 8010056:	4699      	movge	r9, r3
 8010058:	693d      	ldr	r5, [r7, #16]
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010060:	6879      	ldr	r1, [r7, #4]
 8010062:	eb05 060a 	add.w	r6, r5, sl
 8010066:	42b3      	cmp	r3, r6
 8010068:	bfb8      	it	lt
 801006a:	3101      	addlt	r1, #1
 801006c:	f7ff fe92 	bl	800fd94 <_Balloc>
 8010070:	b930      	cbnz	r0, 8010080 <__multiply+0x40>
 8010072:	4602      	mov	r2, r0
 8010074:	4b42      	ldr	r3, [pc, #264]	@ (8010180 <__multiply+0x140>)
 8010076:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801007a:	4842      	ldr	r0, [pc, #264]	@ (8010184 <__multiply+0x144>)
 801007c:	f000 fc2e 	bl	80108dc <__assert_func>
 8010080:	f100 0414 	add.w	r4, r0, #20
 8010084:	2200      	movs	r2, #0
 8010086:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801008a:	4623      	mov	r3, r4
 801008c:	4573      	cmp	r3, lr
 801008e:	d320      	bcc.n	80100d2 <__multiply+0x92>
 8010090:	f107 0814 	add.w	r8, r7, #20
 8010094:	f109 0114 	add.w	r1, r9, #20
 8010098:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801009c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80100a0:	9302      	str	r3, [sp, #8]
 80100a2:	1beb      	subs	r3, r5, r7
 80100a4:	3715      	adds	r7, #21
 80100a6:	3b15      	subs	r3, #21
 80100a8:	f023 0303 	bic.w	r3, r3, #3
 80100ac:	3304      	adds	r3, #4
 80100ae:	42bd      	cmp	r5, r7
 80100b0:	bf38      	it	cc
 80100b2:	2304      	movcc	r3, #4
 80100b4:	9301      	str	r3, [sp, #4]
 80100b6:	9b02      	ldr	r3, [sp, #8]
 80100b8:	9103      	str	r1, [sp, #12]
 80100ba:	428b      	cmp	r3, r1
 80100bc:	d80c      	bhi.n	80100d8 <__multiply+0x98>
 80100be:	2e00      	cmp	r6, #0
 80100c0:	dd03      	ble.n	80100ca <__multiply+0x8a>
 80100c2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d057      	beq.n	801017a <__multiply+0x13a>
 80100ca:	6106      	str	r6, [r0, #16]
 80100cc:	b005      	add	sp, #20
 80100ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d2:	f843 2b04 	str.w	r2, [r3], #4
 80100d6:	e7d9      	b.n	801008c <__multiply+0x4c>
 80100d8:	f8b1 a000 	ldrh.w	sl, [r1]
 80100dc:	f1ba 0f00 	cmp.w	sl, #0
 80100e0:	d021      	beq.n	8010126 <__multiply+0xe6>
 80100e2:	46c4      	mov	ip, r8
 80100e4:	46a1      	mov	r9, r4
 80100e6:	2700      	movs	r7, #0
 80100e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80100ec:	f8d9 3000 	ldr.w	r3, [r9]
 80100f0:	fa1f fb82 	uxth.w	fp, r2
 80100f4:	4565      	cmp	r5, ip
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80100fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8010100:	443b      	add	r3, r7
 8010102:	f8d9 7000 	ldr.w	r7, [r9]
 8010106:	ea4f 4717 	mov.w	r7, r7, lsr #16
 801010a:	fb0a 7202 	mla	r2, sl, r2, r7
 801010e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010112:	b29b      	uxth	r3, r3
 8010114:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801011c:	f849 3b04 	str.w	r3, [r9], #4
 8010120:	d8e2      	bhi.n	80100e8 <__multiply+0xa8>
 8010122:	9b01      	ldr	r3, [sp, #4]
 8010124:	50e7      	str	r7, [r4, r3]
 8010126:	9b03      	ldr	r3, [sp, #12]
 8010128:	3104      	adds	r1, #4
 801012a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801012e:	f1b9 0f00 	cmp.w	r9, #0
 8010132:	d020      	beq.n	8010176 <__multiply+0x136>
 8010134:	6823      	ldr	r3, [r4, #0]
 8010136:	4647      	mov	r7, r8
 8010138:	46a4      	mov	ip, r4
 801013a:	f04f 0a00 	mov.w	sl, #0
 801013e:	f8b7 b000 	ldrh.w	fp, [r7]
 8010142:	b29b      	uxth	r3, r3
 8010144:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010148:	fb09 220b 	mla	r2, r9, fp, r2
 801014c:	4452      	add	r2, sl
 801014e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010152:	f84c 3b04 	str.w	r3, [ip], #4
 8010156:	f857 3b04 	ldr.w	r3, [r7], #4
 801015a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801015e:	f8bc 3000 	ldrh.w	r3, [ip]
 8010162:	42bd      	cmp	r5, r7
 8010164:	fb09 330a 	mla	r3, r9, sl, r3
 8010168:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801016c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010170:	d8e5      	bhi.n	801013e <__multiply+0xfe>
 8010172:	9a01      	ldr	r2, [sp, #4]
 8010174:	50a3      	str	r3, [r4, r2]
 8010176:	3404      	adds	r4, #4
 8010178:	e79d      	b.n	80100b6 <__multiply+0x76>
 801017a:	3e01      	subs	r6, #1
 801017c:	e79f      	b.n	80100be <__multiply+0x7e>
 801017e:	bf00      	nop
 8010180:	0801160b 	.word	0x0801160b
 8010184:	0801168d 	.word	0x0801168d

08010188 <__pow5mult>:
 8010188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801018c:	4615      	mov	r5, r2
 801018e:	f012 0203 	ands.w	r2, r2, #3
 8010192:	4607      	mov	r7, r0
 8010194:	460e      	mov	r6, r1
 8010196:	d007      	beq.n	80101a8 <__pow5mult+0x20>
 8010198:	3a01      	subs	r2, #1
 801019a:	4c25      	ldr	r4, [pc, #148]	@ (8010230 <__pow5mult+0xa8>)
 801019c:	2300      	movs	r3, #0
 801019e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101a2:	f7ff fe59 	bl	800fe58 <__multadd>
 80101a6:	4606      	mov	r6, r0
 80101a8:	10ad      	asrs	r5, r5, #2
 80101aa:	d03d      	beq.n	8010228 <__pow5mult+0xa0>
 80101ac:	69fc      	ldr	r4, [r7, #28]
 80101ae:	b97c      	cbnz	r4, 80101d0 <__pow5mult+0x48>
 80101b0:	2010      	movs	r0, #16
 80101b2:	f7ff fc7b 	bl	800faac <malloc>
 80101b6:	4602      	mov	r2, r0
 80101b8:	61f8      	str	r0, [r7, #28]
 80101ba:	b928      	cbnz	r0, 80101c8 <__pow5mult+0x40>
 80101bc:	4b1d      	ldr	r3, [pc, #116]	@ (8010234 <__pow5mult+0xac>)
 80101be:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80101c2:	481d      	ldr	r0, [pc, #116]	@ (8010238 <__pow5mult+0xb0>)
 80101c4:	f000 fb8a 	bl	80108dc <__assert_func>
 80101c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80101cc:	6004      	str	r4, [r0, #0]
 80101ce:	60c4      	str	r4, [r0, #12]
 80101d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80101d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80101d8:	b94c      	cbnz	r4, 80101ee <__pow5mult+0x66>
 80101da:	f240 2171 	movw	r1, #625	@ 0x271
 80101de:	4638      	mov	r0, r7
 80101e0:	f7ff ff18 	bl	8010014 <__i2b>
 80101e4:	2300      	movs	r3, #0
 80101e6:	4604      	mov	r4, r0
 80101e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80101ec:	6003      	str	r3, [r0, #0]
 80101ee:	f04f 0900 	mov.w	r9, #0
 80101f2:	07eb      	lsls	r3, r5, #31
 80101f4:	d50a      	bpl.n	801020c <__pow5mult+0x84>
 80101f6:	4631      	mov	r1, r6
 80101f8:	4622      	mov	r2, r4
 80101fa:	4638      	mov	r0, r7
 80101fc:	f7ff ff20 	bl	8010040 <__multiply>
 8010200:	4680      	mov	r8, r0
 8010202:	4631      	mov	r1, r6
 8010204:	4638      	mov	r0, r7
 8010206:	4646      	mov	r6, r8
 8010208:	f7ff fe04 	bl	800fe14 <_Bfree>
 801020c:	106d      	asrs	r5, r5, #1
 801020e:	d00b      	beq.n	8010228 <__pow5mult+0xa0>
 8010210:	6820      	ldr	r0, [r4, #0]
 8010212:	b938      	cbnz	r0, 8010224 <__pow5mult+0x9c>
 8010214:	4622      	mov	r2, r4
 8010216:	4621      	mov	r1, r4
 8010218:	4638      	mov	r0, r7
 801021a:	f7ff ff11 	bl	8010040 <__multiply>
 801021e:	6020      	str	r0, [r4, #0]
 8010220:	f8c0 9000 	str.w	r9, [r0]
 8010224:	4604      	mov	r4, r0
 8010226:	e7e4      	b.n	80101f2 <__pow5mult+0x6a>
 8010228:	4630      	mov	r0, r6
 801022a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801022e:	bf00      	nop
 8010230:	0801187c 	.word	0x0801187c
 8010234:	0801159c 	.word	0x0801159c
 8010238:	0801168d 	.word	0x0801168d

0801023c <__lshift>:
 801023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010240:	460c      	mov	r4, r1
 8010242:	4607      	mov	r7, r0
 8010244:	4691      	mov	r9, r2
 8010246:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801024a:	6923      	ldr	r3, [r4, #16]
 801024c:	6849      	ldr	r1, [r1, #4]
 801024e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010252:	68a3      	ldr	r3, [r4, #8]
 8010254:	f108 0601 	add.w	r6, r8, #1
 8010258:	42b3      	cmp	r3, r6
 801025a:	db0b      	blt.n	8010274 <__lshift+0x38>
 801025c:	4638      	mov	r0, r7
 801025e:	f7ff fd99 	bl	800fd94 <_Balloc>
 8010262:	4605      	mov	r5, r0
 8010264:	b948      	cbnz	r0, 801027a <__lshift+0x3e>
 8010266:	4602      	mov	r2, r0
 8010268:	4b28      	ldr	r3, [pc, #160]	@ (801030c <__lshift+0xd0>)
 801026a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801026e:	4828      	ldr	r0, [pc, #160]	@ (8010310 <__lshift+0xd4>)
 8010270:	f000 fb34 	bl	80108dc <__assert_func>
 8010274:	3101      	adds	r1, #1
 8010276:	005b      	lsls	r3, r3, #1
 8010278:	e7ee      	b.n	8010258 <__lshift+0x1c>
 801027a:	2300      	movs	r3, #0
 801027c:	f100 0114 	add.w	r1, r0, #20
 8010280:	f100 0210 	add.w	r2, r0, #16
 8010284:	4618      	mov	r0, r3
 8010286:	4553      	cmp	r3, sl
 8010288:	db33      	blt.n	80102f2 <__lshift+0xb6>
 801028a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801028e:	f104 0314 	add.w	r3, r4, #20
 8010292:	6920      	ldr	r0, [r4, #16]
 8010294:	f019 091f 	ands.w	r9, r9, #31
 8010298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801029c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80102a0:	d02b      	beq.n	80102fa <__lshift+0xbe>
 80102a2:	f1c9 0e20 	rsb	lr, r9, #32
 80102a6:	468a      	mov	sl, r1
 80102a8:	2200      	movs	r2, #0
 80102aa:	6818      	ldr	r0, [r3, #0]
 80102ac:	fa00 f009 	lsl.w	r0, r0, r9
 80102b0:	4310      	orrs	r0, r2
 80102b2:	f84a 0b04 	str.w	r0, [sl], #4
 80102b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80102ba:	459c      	cmp	ip, r3
 80102bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80102c0:	d8f3      	bhi.n	80102aa <__lshift+0x6e>
 80102c2:	ebac 0304 	sub.w	r3, ip, r4
 80102c6:	f104 0015 	add.w	r0, r4, #21
 80102ca:	3b15      	subs	r3, #21
 80102cc:	f023 0303 	bic.w	r3, r3, #3
 80102d0:	3304      	adds	r3, #4
 80102d2:	4560      	cmp	r0, ip
 80102d4:	bf88      	it	hi
 80102d6:	2304      	movhi	r3, #4
 80102d8:	50ca      	str	r2, [r1, r3]
 80102da:	b10a      	cbz	r2, 80102e0 <__lshift+0xa4>
 80102dc:	f108 0602 	add.w	r6, r8, #2
 80102e0:	3e01      	subs	r6, #1
 80102e2:	4638      	mov	r0, r7
 80102e4:	4621      	mov	r1, r4
 80102e6:	612e      	str	r6, [r5, #16]
 80102e8:	f7ff fd94 	bl	800fe14 <_Bfree>
 80102ec:	4628      	mov	r0, r5
 80102ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f2:	3301      	adds	r3, #1
 80102f4:	f842 0f04 	str.w	r0, [r2, #4]!
 80102f8:	e7c5      	b.n	8010286 <__lshift+0x4a>
 80102fa:	3904      	subs	r1, #4
 80102fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010300:	459c      	cmp	ip, r3
 8010302:	f841 2f04 	str.w	r2, [r1, #4]!
 8010306:	d8f9      	bhi.n	80102fc <__lshift+0xc0>
 8010308:	e7ea      	b.n	80102e0 <__lshift+0xa4>
 801030a:	bf00      	nop
 801030c:	0801160b 	.word	0x0801160b
 8010310:	0801168d 	.word	0x0801168d

08010314 <__mcmp>:
 8010314:	4603      	mov	r3, r0
 8010316:	690a      	ldr	r2, [r1, #16]
 8010318:	6900      	ldr	r0, [r0, #16]
 801031a:	1a80      	subs	r0, r0, r2
 801031c:	b530      	push	{r4, r5, lr}
 801031e:	d10e      	bne.n	801033e <__mcmp+0x2a>
 8010320:	3314      	adds	r3, #20
 8010322:	3114      	adds	r1, #20
 8010324:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010328:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801032c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010330:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010334:	4295      	cmp	r5, r2
 8010336:	d003      	beq.n	8010340 <__mcmp+0x2c>
 8010338:	d205      	bcs.n	8010346 <__mcmp+0x32>
 801033a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801033e:	bd30      	pop	{r4, r5, pc}
 8010340:	42a3      	cmp	r3, r4
 8010342:	d3f3      	bcc.n	801032c <__mcmp+0x18>
 8010344:	e7fb      	b.n	801033e <__mcmp+0x2a>
 8010346:	2001      	movs	r0, #1
 8010348:	e7f9      	b.n	801033e <__mcmp+0x2a>
	...

0801034c <__mdiff>:
 801034c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010350:	4689      	mov	r9, r1
 8010352:	4606      	mov	r6, r0
 8010354:	4611      	mov	r1, r2
 8010356:	4614      	mov	r4, r2
 8010358:	4648      	mov	r0, r9
 801035a:	f7ff ffdb 	bl	8010314 <__mcmp>
 801035e:	1e05      	subs	r5, r0, #0
 8010360:	d112      	bne.n	8010388 <__mdiff+0x3c>
 8010362:	4629      	mov	r1, r5
 8010364:	4630      	mov	r0, r6
 8010366:	f7ff fd15 	bl	800fd94 <_Balloc>
 801036a:	4602      	mov	r2, r0
 801036c:	b928      	cbnz	r0, 801037a <__mdiff+0x2e>
 801036e:	4b41      	ldr	r3, [pc, #260]	@ (8010474 <__mdiff+0x128>)
 8010370:	f240 2137 	movw	r1, #567	@ 0x237
 8010374:	4840      	ldr	r0, [pc, #256]	@ (8010478 <__mdiff+0x12c>)
 8010376:	f000 fab1 	bl	80108dc <__assert_func>
 801037a:	2301      	movs	r3, #1
 801037c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010380:	4610      	mov	r0, r2
 8010382:	b003      	add	sp, #12
 8010384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010388:	bfbc      	itt	lt
 801038a:	464b      	movlt	r3, r9
 801038c:	46a1      	movlt	r9, r4
 801038e:	4630      	mov	r0, r6
 8010390:	bfb8      	it	lt
 8010392:	2501      	movlt	r5, #1
 8010394:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010398:	bfb4      	ite	lt
 801039a:	461c      	movlt	r4, r3
 801039c:	2500      	movge	r5, #0
 801039e:	f7ff fcf9 	bl	800fd94 <_Balloc>
 80103a2:	4602      	mov	r2, r0
 80103a4:	b918      	cbnz	r0, 80103ae <__mdiff+0x62>
 80103a6:	4b33      	ldr	r3, [pc, #204]	@ (8010474 <__mdiff+0x128>)
 80103a8:	f240 2145 	movw	r1, #581	@ 0x245
 80103ac:	e7e2      	b.n	8010374 <__mdiff+0x28>
 80103ae:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80103b2:	f104 0e14 	add.w	lr, r4, #20
 80103b6:	6926      	ldr	r6, [r4, #16]
 80103b8:	f100 0b14 	add.w	fp, r0, #20
 80103bc:	60c5      	str	r5, [r0, #12]
 80103be:	f109 0514 	add.w	r5, r9, #20
 80103c2:	f109 0310 	add.w	r3, r9, #16
 80103c6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80103ca:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80103ce:	46d9      	mov	r9, fp
 80103d0:	f04f 0c00 	mov.w	ip, #0
 80103d4:	9301      	str	r3, [sp, #4]
 80103d6:	9b01      	ldr	r3, [sp, #4]
 80103d8:	f85e 0b04 	ldr.w	r0, [lr], #4
 80103dc:	f853 af04 	ldr.w	sl, [r3, #4]!
 80103e0:	4576      	cmp	r6, lr
 80103e2:	9301      	str	r3, [sp, #4]
 80103e4:	fa1f f38a 	uxth.w	r3, sl
 80103e8:	4619      	mov	r1, r3
 80103ea:	b283      	uxth	r3, r0
 80103ec:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80103f0:	eba1 0303 	sub.w	r3, r1, r3
 80103f4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80103f8:	4463      	add	r3, ip
 80103fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80103fe:	b29b      	uxth	r3, r3
 8010400:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010404:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010408:	f849 3b04 	str.w	r3, [r9], #4
 801040c:	d8e3      	bhi.n	80103d6 <__mdiff+0x8a>
 801040e:	1b33      	subs	r3, r6, r4
 8010410:	3415      	adds	r4, #21
 8010412:	3b15      	subs	r3, #21
 8010414:	f023 0303 	bic.w	r3, r3, #3
 8010418:	3304      	adds	r3, #4
 801041a:	42a6      	cmp	r6, r4
 801041c:	bf38      	it	cc
 801041e:	2304      	movcc	r3, #4
 8010420:	441d      	add	r5, r3
 8010422:	445b      	add	r3, fp
 8010424:	462c      	mov	r4, r5
 8010426:	461e      	mov	r6, r3
 8010428:	4544      	cmp	r4, r8
 801042a:	d30e      	bcc.n	801044a <__mdiff+0xfe>
 801042c:	f108 0103 	add.w	r1, r8, #3
 8010430:	1b49      	subs	r1, r1, r5
 8010432:	3d03      	subs	r5, #3
 8010434:	f021 0103 	bic.w	r1, r1, #3
 8010438:	45a8      	cmp	r8, r5
 801043a:	bf38      	it	cc
 801043c:	2100      	movcc	r1, #0
 801043e:	440b      	add	r3, r1
 8010440:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010444:	b199      	cbz	r1, 801046e <__mdiff+0x122>
 8010446:	6117      	str	r7, [r2, #16]
 8010448:	e79a      	b.n	8010380 <__mdiff+0x34>
 801044a:	f854 1b04 	ldr.w	r1, [r4], #4
 801044e:	46e6      	mov	lr, ip
 8010450:	fa1f fc81 	uxth.w	ip, r1
 8010454:	0c08      	lsrs	r0, r1, #16
 8010456:	4471      	add	r1, lr
 8010458:	44f4      	add	ip, lr
 801045a:	b289      	uxth	r1, r1
 801045c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010460:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010464:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010468:	f846 1b04 	str.w	r1, [r6], #4
 801046c:	e7dc      	b.n	8010428 <__mdiff+0xdc>
 801046e:	3f01      	subs	r7, #1
 8010470:	e7e6      	b.n	8010440 <__mdiff+0xf4>
 8010472:	bf00      	nop
 8010474:	0801160b 	.word	0x0801160b
 8010478:	0801168d 	.word	0x0801168d

0801047c <__ulp>:
 801047c:	b082      	sub	sp, #8
 801047e:	4b11      	ldr	r3, [pc, #68]	@ (80104c4 <__ulp+0x48>)
 8010480:	ed8d 0b00 	vstr	d0, [sp]
 8010484:	9a01      	ldr	r2, [sp, #4]
 8010486:	4013      	ands	r3, r2
 8010488:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801048c:	2b00      	cmp	r3, #0
 801048e:	dc08      	bgt.n	80104a2 <__ulp+0x26>
 8010490:	425b      	negs	r3, r3
 8010492:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010496:	ea4f 5223 	mov.w	r2, r3, asr #20
 801049a:	da04      	bge.n	80104a6 <__ulp+0x2a>
 801049c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80104a0:	4113      	asrs	r3, r2
 80104a2:	2200      	movs	r2, #0
 80104a4:	e008      	b.n	80104b8 <__ulp+0x3c>
 80104a6:	f1a2 0314 	sub.w	r3, r2, #20
 80104aa:	2b1e      	cmp	r3, #30
 80104ac:	bfd6      	itet	le
 80104ae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80104b2:	2201      	movgt	r2, #1
 80104b4:	40da      	lsrle	r2, r3
 80104b6:	2300      	movs	r3, #0
 80104b8:	4619      	mov	r1, r3
 80104ba:	4610      	mov	r0, r2
 80104bc:	ec41 0b10 	vmov	d0, r0, r1
 80104c0:	b002      	add	sp, #8
 80104c2:	4770      	bx	lr
 80104c4:	7ff00000 	.word	0x7ff00000

080104c8 <__b2d>:
 80104c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104cc:	6906      	ldr	r6, [r0, #16]
 80104ce:	f100 0814 	add.w	r8, r0, #20
 80104d2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80104d6:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80104da:	1f37      	subs	r7, r6, #4
 80104dc:	4610      	mov	r0, r2
 80104de:	f7ff fd4d 	bl	800ff7c <__hi0bits>
 80104e2:	f1c0 0320 	rsb	r3, r0, #32
 80104e6:	280a      	cmp	r0, #10
 80104e8:	600b      	str	r3, [r1, #0]
 80104ea:	491d      	ldr	r1, [pc, #116]	@ (8010560 <__b2d+0x98>)
 80104ec:	dc16      	bgt.n	801051c <__b2d+0x54>
 80104ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80104f2:	45b8      	cmp	r8, r7
 80104f4:	f100 0015 	add.w	r0, r0, #21
 80104f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80104fc:	fa02 f000 	lsl.w	r0, r2, r0
 8010500:	ea43 0501 	orr.w	r5, r3, r1
 8010504:	bf34      	ite	cc
 8010506:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801050a:	2300      	movcs	r3, #0
 801050c:	fa23 f30c 	lsr.w	r3, r3, ip
 8010510:	4303      	orrs	r3, r0
 8010512:	461c      	mov	r4, r3
 8010514:	ec45 4b10 	vmov	d0, r4, r5
 8010518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801051c:	45b8      	cmp	r8, r7
 801051e:	bf3a      	itte	cc
 8010520:	f1a6 0708 	subcc.w	r7, r6, #8
 8010524:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010528:	2300      	movcs	r3, #0
 801052a:	380b      	subs	r0, #11
 801052c:	d014      	beq.n	8010558 <__b2d+0x90>
 801052e:	f1c0 0120 	rsb	r1, r0, #32
 8010532:	4082      	lsls	r2, r0
 8010534:	4547      	cmp	r7, r8
 8010536:	fa23 f401 	lsr.w	r4, r3, r1
 801053a:	fa03 f300 	lsl.w	r3, r3, r0
 801053e:	ea42 0204 	orr.w	r2, r2, r4
 8010542:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010546:	bf8c      	ite	hi
 8010548:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801054c:	2200      	movls	r2, #0
 801054e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010552:	40ca      	lsrs	r2, r1
 8010554:	4313      	orrs	r3, r2
 8010556:	e7dc      	b.n	8010512 <__b2d+0x4a>
 8010558:	ea42 0501 	orr.w	r5, r2, r1
 801055c:	e7d9      	b.n	8010512 <__b2d+0x4a>
 801055e:	bf00      	nop
 8010560:	3ff00000 	.word	0x3ff00000

08010564 <__d2b>:
 8010564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010568:	460f      	mov	r7, r1
 801056a:	2101      	movs	r1, #1
 801056c:	4616      	mov	r6, r2
 801056e:	ec59 8b10 	vmov	r8, r9, d0
 8010572:	f7ff fc0f 	bl	800fd94 <_Balloc>
 8010576:	4604      	mov	r4, r0
 8010578:	b930      	cbnz	r0, 8010588 <__d2b+0x24>
 801057a:	4602      	mov	r2, r0
 801057c:	4b23      	ldr	r3, [pc, #140]	@ (801060c <__d2b+0xa8>)
 801057e:	f240 310f 	movw	r1, #783	@ 0x30f
 8010582:	4823      	ldr	r0, [pc, #140]	@ (8010610 <__d2b+0xac>)
 8010584:	f000 f9aa 	bl	80108dc <__assert_func>
 8010588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801058c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010590:	b10d      	cbz	r5, 8010596 <__d2b+0x32>
 8010592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010596:	9301      	str	r3, [sp, #4]
 8010598:	f1b8 0300 	subs.w	r3, r8, #0
 801059c:	d023      	beq.n	80105e6 <__d2b+0x82>
 801059e:	4668      	mov	r0, sp
 80105a0:	9300      	str	r3, [sp, #0]
 80105a2:	f7ff fd0a 	bl	800ffba <__lo0bits>
 80105a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80105aa:	b1d0      	cbz	r0, 80105e2 <__d2b+0x7e>
 80105ac:	f1c0 0320 	rsb	r3, r0, #32
 80105b0:	fa02 f303 	lsl.w	r3, r2, r3
 80105b4:	40c2      	lsrs	r2, r0
 80105b6:	430b      	orrs	r3, r1
 80105b8:	9201      	str	r2, [sp, #4]
 80105ba:	6163      	str	r3, [r4, #20]
 80105bc:	9b01      	ldr	r3, [sp, #4]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	61a3      	str	r3, [r4, #24]
 80105c2:	bf0c      	ite	eq
 80105c4:	2201      	moveq	r2, #1
 80105c6:	2202      	movne	r2, #2
 80105c8:	6122      	str	r2, [r4, #16]
 80105ca:	b1a5      	cbz	r5, 80105f6 <__d2b+0x92>
 80105cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80105d0:	4405      	add	r5, r0
 80105d2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80105d6:	603d      	str	r5, [r7, #0]
 80105d8:	6030      	str	r0, [r6, #0]
 80105da:	4620      	mov	r0, r4
 80105dc:	b003      	add	sp, #12
 80105de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105e2:	6161      	str	r1, [r4, #20]
 80105e4:	e7ea      	b.n	80105bc <__d2b+0x58>
 80105e6:	a801      	add	r0, sp, #4
 80105e8:	f7ff fce7 	bl	800ffba <__lo0bits>
 80105ec:	9b01      	ldr	r3, [sp, #4]
 80105ee:	3020      	adds	r0, #32
 80105f0:	2201      	movs	r2, #1
 80105f2:	6163      	str	r3, [r4, #20]
 80105f4:	e7e8      	b.n	80105c8 <__d2b+0x64>
 80105f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80105fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105fe:	6038      	str	r0, [r7, #0]
 8010600:	6918      	ldr	r0, [r3, #16]
 8010602:	f7ff fcbb 	bl	800ff7c <__hi0bits>
 8010606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801060a:	e7e5      	b.n	80105d8 <__d2b+0x74>
 801060c:	0801160b 	.word	0x0801160b
 8010610:	0801168d 	.word	0x0801168d

08010614 <__ratio>:
 8010614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010618:	b085      	sub	sp, #20
 801061a:	e9cd 1000 	strd	r1, r0, [sp]
 801061e:	a902      	add	r1, sp, #8
 8010620:	f7ff ff52 	bl	80104c8 <__b2d>
 8010624:	a903      	add	r1, sp, #12
 8010626:	9800      	ldr	r0, [sp, #0]
 8010628:	ec55 4b10 	vmov	r4, r5, d0
 801062c:	f7ff ff4c 	bl	80104c8 <__b2d>
 8010630:	9b01      	ldr	r3, [sp, #4]
 8010632:	462f      	mov	r7, r5
 8010634:	4620      	mov	r0, r4
 8010636:	6919      	ldr	r1, [r3, #16]
 8010638:	9b00      	ldr	r3, [sp, #0]
 801063a:	691b      	ldr	r3, [r3, #16]
 801063c:	1ac9      	subs	r1, r1, r3
 801063e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010642:	ec5b ab10 	vmov	sl, fp, d0
 8010646:	1a9b      	subs	r3, r3, r2
 8010648:	46d9      	mov	r9, fp
 801064a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801064e:	2b00      	cmp	r3, #0
 8010650:	bfcd      	iteet	gt
 8010652:	462a      	movgt	r2, r5
 8010654:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010658:	465a      	movle	r2, fp
 801065a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801065e:	bfd8      	it	le
 8010660:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010664:	4652      	mov	r2, sl
 8010666:	4639      	mov	r1, r7
 8010668:	464b      	mov	r3, r9
 801066a:	f7f0 f8ff 	bl	800086c <__aeabi_ddiv>
 801066e:	ec41 0b10 	vmov	d0, r0, r1
 8010672:	b005      	add	sp, #20
 8010674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010678 <__copybits>:
 8010678:	3901      	subs	r1, #1
 801067a:	f102 0314 	add.w	r3, r2, #20
 801067e:	1149      	asrs	r1, r1, #5
 8010680:	b570      	push	{r4, r5, r6, lr}
 8010682:	3101      	adds	r1, #1
 8010684:	6914      	ldr	r4, [r2, #16]
 8010686:	1f05      	subs	r5, r0, #4
 8010688:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801068c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010690:	42a3      	cmp	r3, r4
 8010692:	d30c      	bcc.n	80106ae <__copybits+0x36>
 8010694:	1aa3      	subs	r3, r4, r2
 8010696:	3211      	adds	r2, #17
 8010698:	3b11      	subs	r3, #17
 801069a:	f023 0303 	bic.w	r3, r3, #3
 801069e:	42a2      	cmp	r2, r4
 80106a0:	bf88      	it	hi
 80106a2:	2300      	movhi	r3, #0
 80106a4:	4418      	add	r0, r3
 80106a6:	2300      	movs	r3, #0
 80106a8:	4288      	cmp	r0, r1
 80106aa:	d305      	bcc.n	80106b8 <__copybits+0x40>
 80106ac:	bd70      	pop	{r4, r5, r6, pc}
 80106ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80106b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80106b6:	e7eb      	b.n	8010690 <__copybits+0x18>
 80106b8:	f840 3b04 	str.w	r3, [r0], #4
 80106bc:	e7f4      	b.n	80106a8 <__copybits+0x30>

080106be <__any_on>:
 80106be:	f100 0214 	add.w	r2, r0, #20
 80106c2:	114b      	asrs	r3, r1, #5
 80106c4:	6900      	ldr	r0, [r0, #16]
 80106c6:	4298      	cmp	r0, r3
 80106c8:	b510      	push	{r4, lr}
 80106ca:	db11      	blt.n	80106f0 <__any_on+0x32>
 80106cc:	dd0a      	ble.n	80106e4 <__any_on+0x26>
 80106ce:	f011 011f 	ands.w	r1, r1, #31
 80106d2:	d007      	beq.n	80106e4 <__any_on+0x26>
 80106d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80106d8:	fa24 f001 	lsr.w	r0, r4, r1
 80106dc:	fa00 f101 	lsl.w	r1, r0, r1
 80106e0:	428c      	cmp	r4, r1
 80106e2:	d10b      	bne.n	80106fc <__any_on+0x3e>
 80106e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d803      	bhi.n	80106f4 <__any_on+0x36>
 80106ec:	2000      	movs	r0, #0
 80106ee:	bd10      	pop	{r4, pc}
 80106f0:	4603      	mov	r3, r0
 80106f2:	e7f7      	b.n	80106e4 <__any_on+0x26>
 80106f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80106f8:	2900      	cmp	r1, #0
 80106fa:	d0f5      	beq.n	80106e8 <__any_on+0x2a>
 80106fc:	2001      	movs	r0, #1
 80106fe:	e7f6      	b.n	80106ee <__any_on+0x30>

08010700 <__sread>:
 8010700:	b510      	push	{r4, lr}
 8010702:	460c      	mov	r4, r1
 8010704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010708:	f000 f8a4 	bl	8010854 <_read_r>
 801070c:	2800      	cmp	r0, #0
 801070e:	bfab      	itete	ge
 8010710:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010712:	89a3      	ldrhlt	r3, [r4, #12]
 8010714:	181b      	addge	r3, r3, r0
 8010716:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801071a:	bfac      	ite	ge
 801071c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801071e:	81a3      	strhlt	r3, [r4, #12]
 8010720:	bd10      	pop	{r4, pc}

08010722 <__swrite>:
 8010722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010726:	461f      	mov	r7, r3
 8010728:	898b      	ldrh	r3, [r1, #12]
 801072a:	4605      	mov	r5, r0
 801072c:	460c      	mov	r4, r1
 801072e:	05db      	lsls	r3, r3, #23
 8010730:	4616      	mov	r6, r2
 8010732:	d505      	bpl.n	8010740 <__swrite+0x1e>
 8010734:	2302      	movs	r3, #2
 8010736:	2200      	movs	r2, #0
 8010738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801073c:	f000 f878 	bl	8010830 <_lseek_r>
 8010740:	89a3      	ldrh	r3, [r4, #12]
 8010742:	4632      	mov	r2, r6
 8010744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010748:	4628      	mov	r0, r5
 801074a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801074e:	81a3      	strh	r3, [r4, #12]
 8010750:	463b      	mov	r3, r7
 8010752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010756:	f000 b89f 	b.w	8010898 <_write_r>

0801075a <__sseek>:
 801075a:	b510      	push	{r4, lr}
 801075c:	460c      	mov	r4, r1
 801075e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010762:	f000 f865 	bl	8010830 <_lseek_r>
 8010766:	1c43      	adds	r3, r0, #1
 8010768:	89a3      	ldrh	r3, [r4, #12]
 801076a:	bf15      	itete	ne
 801076c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801076e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010772:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010776:	81a3      	strheq	r3, [r4, #12]
 8010778:	bf18      	it	ne
 801077a:	81a3      	strhne	r3, [r4, #12]
 801077c:	bd10      	pop	{r4, pc}

0801077e <__sclose>:
 801077e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010782:	f000 b89b 	b.w	80108bc <_close_r>

08010786 <_realloc_r>:
 8010786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801078a:	4607      	mov	r7, r0
 801078c:	4614      	mov	r4, r2
 801078e:	460d      	mov	r5, r1
 8010790:	b921      	cbnz	r1, 801079c <_realloc_r+0x16>
 8010792:	4611      	mov	r1, r2
 8010794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010798:	f7ff b9b2 	b.w	800fb00 <_malloc_r>
 801079c:	b92a      	cbnz	r2, 80107aa <_realloc_r+0x24>
 801079e:	4625      	mov	r5, r4
 80107a0:	f000 f8ce 	bl	8010940 <_free_r>
 80107a4:	4628      	mov	r0, r5
 80107a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107aa:	f000 f913 	bl	80109d4 <_malloc_usable_size_r>
 80107ae:	4284      	cmp	r4, r0
 80107b0:	4606      	mov	r6, r0
 80107b2:	d802      	bhi.n	80107ba <_realloc_r+0x34>
 80107b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80107b8:	d8f4      	bhi.n	80107a4 <_realloc_r+0x1e>
 80107ba:	4621      	mov	r1, r4
 80107bc:	4638      	mov	r0, r7
 80107be:	f7ff f99f 	bl	800fb00 <_malloc_r>
 80107c2:	4680      	mov	r8, r0
 80107c4:	b908      	cbnz	r0, 80107ca <_realloc_r+0x44>
 80107c6:	4645      	mov	r5, r8
 80107c8:	e7ec      	b.n	80107a4 <_realloc_r+0x1e>
 80107ca:	42b4      	cmp	r4, r6
 80107cc:	4622      	mov	r2, r4
 80107ce:	4629      	mov	r1, r5
 80107d0:	bf28      	it	cs
 80107d2:	4632      	movcs	r2, r6
 80107d4:	f7fd fe62 	bl	800e49c <memcpy>
 80107d8:	4629      	mov	r1, r5
 80107da:	4638      	mov	r0, r7
 80107dc:	f000 f8b0 	bl	8010940 <_free_r>
 80107e0:	e7f1      	b.n	80107c6 <_realloc_r+0x40>

080107e2 <__ascii_wctomb>:
 80107e2:	4603      	mov	r3, r0
 80107e4:	4608      	mov	r0, r1
 80107e6:	b141      	cbz	r1, 80107fa <__ascii_wctomb+0x18>
 80107e8:	2aff      	cmp	r2, #255	@ 0xff
 80107ea:	d904      	bls.n	80107f6 <__ascii_wctomb+0x14>
 80107ec:	228a      	movs	r2, #138	@ 0x8a
 80107ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	4770      	bx	lr
 80107f6:	2001      	movs	r0, #1
 80107f8:	700a      	strb	r2, [r1, #0]
 80107fa:	4770      	bx	lr

080107fc <memmove>:
 80107fc:	4288      	cmp	r0, r1
 80107fe:	b510      	push	{r4, lr}
 8010800:	eb01 0402 	add.w	r4, r1, r2
 8010804:	d902      	bls.n	801080c <memmove+0x10>
 8010806:	4284      	cmp	r4, r0
 8010808:	4623      	mov	r3, r4
 801080a:	d807      	bhi.n	801081c <memmove+0x20>
 801080c:	1e43      	subs	r3, r0, #1
 801080e:	42a1      	cmp	r1, r4
 8010810:	d008      	beq.n	8010824 <memmove+0x28>
 8010812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010816:	f803 2f01 	strb.w	r2, [r3, #1]!
 801081a:	e7f8      	b.n	801080e <memmove+0x12>
 801081c:	4402      	add	r2, r0
 801081e:	4601      	mov	r1, r0
 8010820:	428a      	cmp	r2, r1
 8010822:	d100      	bne.n	8010826 <memmove+0x2a>
 8010824:	bd10      	pop	{r4, pc}
 8010826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801082a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801082e:	e7f7      	b.n	8010820 <memmove+0x24>

08010830 <_lseek_r>:
 8010830:	b538      	push	{r3, r4, r5, lr}
 8010832:	4604      	mov	r4, r0
 8010834:	4d06      	ldr	r5, [pc, #24]	@ (8010850 <_lseek_r+0x20>)
 8010836:	4608      	mov	r0, r1
 8010838:	4611      	mov	r1, r2
 801083a:	2200      	movs	r2, #0
 801083c:	602a      	str	r2, [r5, #0]
 801083e:	461a      	mov	r2, r3
 8010840:	f7f3 fc7d 	bl	800413e <_lseek>
 8010844:	1c43      	adds	r3, r0, #1
 8010846:	d102      	bne.n	801084e <_lseek_r+0x1e>
 8010848:	682b      	ldr	r3, [r5, #0]
 801084a:	b103      	cbz	r3, 801084e <_lseek_r+0x1e>
 801084c:	6023      	str	r3, [r4, #0]
 801084e:	bd38      	pop	{r3, r4, r5, pc}
 8010850:	20000590 	.word	0x20000590

08010854 <_read_r>:
 8010854:	b538      	push	{r3, r4, r5, lr}
 8010856:	4604      	mov	r4, r0
 8010858:	4d06      	ldr	r5, [pc, #24]	@ (8010874 <_read_r+0x20>)
 801085a:	4608      	mov	r0, r1
 801085c:	4611      	mov	r1, r2
 801085e:	2200      	movs	r2, #0
 8010860:	602a      	str	r2, [r5, #0]
 8010862:	461a      	mov	r2, r3
 8010864:	f7f3 fc0b 	bl	800407e <_read>
 8010868:	1c43      	adds	r3, r0, #1
 801086a:	d102      	bne.n	8010872 <_read_r+0x1e>
 801086c:	682b      	ldr	r3, [r5, #0]
 801086e:	b103      	cbz	r3, 8010872 <_read_r+0x1e>
 8010870:	6023      	str	r3, [r4, #0]
 8010872:	bd38      	pop	{r3, r4, r5, pc}
 8010874:	20000590 	.word	0x20000590

08010878 <_sbrk_r>:
 8010878:	b538      	push	{r3, r4, r5, lr}
 801087a:	2300      	movs	r3, #0
 801087c:	4d05      	ldr	r5, [pc, #20]	@ (8010894 <_sbrk_r+0x1c>)
 801087e:	4604      	mov	r4, r0
 8010880:	4608      	mov	r0, r1
 8010882:	602b      	str	r3, [r5, #0]
 8010884:	f7f3 fc68 	bl	8004158 <_sbrk>
 8010888:	1c43      	adds	r3, r0, #1
 801088a:	d102      	bne.n	8010892 <_sbrk_r+0x1a>
 801088c:	682b      	ldr	r3, [r5, #0]
 801088e:	b103      	cbz	r3, 8010892 <_sbrk_r+0x1a>
 8010890:	6023      	str	r3, [r4, #0]
 8010892:	bd38      	pop	{r3, r4, r5, pc}
 8010894:	20000590 	.word	0x20000590

08010898 <_write_r>:
 8010898:	b538      	push	{r3, r4, r5, lr}
 801089a:	4604      	mov	r4, r0
 801089c:	4d06      	ldr	r5, [pc, #24]	@ (80108b8 <_write_r+0x20>)
 801089e:	4608      	mov	r0, r1
 80108a0:	4611      	mov	r1, r2
 80108a2:	2200      	movs	r2, #0
 80108a4:	602a      	str	r2, [r5, #0]
 80108a6:	461a      	mov	r2, r3
 80108a8:	f7f3 fc06 	bl	80040b8 <_write>
 80108ac:	1c43      	adds	r3, r0, #1
 80108ae:	d102      	bne.n	80108b6 <_write_r+0x1e>
 80108b0:	682b      	ldr	r3, [r5, #0]
 80108b2:	b103      	cbz	r3, 80108b6 <_write_r+0x1e>
 80108b4:	6023      	str	r3, [r4, #0]
 80108b6:	bd38      	pop	{r3, r4, r5, pc}
 80108b8:	20000590 	.word	0x20000590

080108bc <_close_r>:
 80108bc:	b538      	push	{r3, r4, r5, lr}
 80108be:	2300      	movs	r3, #0
 80108c0:	4d05      	ldr	r5, [pc, #20]	@ (80108d8 <_close_r+0x1c>)
 80108c2:	4604      	mov	r4, r0
 80108c4:	4608      	mov	r0, r1
 80108c6:	602b      	str	r3, [r5, #0]
 80108c8:	f7f3 fc12 	bl	80040f0 <_close>
 80108cc:	1c43      	adds	r3, r0, #1
 80108ce:	d102      	bne.n	80108d6 <_close_r+0x1a>
 80108d0:	682b      	ldr	r3, [r5, #0]
 80108d2:	b103      	cbz	r3, 80108d6 <_close_r+0x1a>
 80108d4:	6023      	str	r3, [r4, #0]
 80108d6:	bd38      	pop	{r3, r4, r5, pc}
 80108d8:	20000590 	.word	0x20000590

080108dc <__assert_func>:
 80108dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108de:	4614      	mov	r4, r2
 80108e0:	461a      	mov	r2, r3
 80108e2:	4b09      	ldr	r3, [pc, #36]	@ (8010908 <__assert_func+0x2c>)
 80108e4:	4605      	mov	r5, r0
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	68d8      	ldr	r0, [r3, #12]
 80108ea:	b14c      	cbz	r4, 8010900 <__assert_func+0x24>
 80108ec:	4b07      	ldr	r3, [pc, #28]	@ (801090c <__assert_func+0x30>)
 80108ee:	9100      	str	r1, [sp, #0]
 80108f0:	4907      	ldr	r1, [pc, #28]	@ (8010910 <__assert_func+0x34>)
 80108f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108f6:	462b      	mov	r3, r5
 80108f8:	f000 f874 	bl	80109e4 <fiprintf>
 80108fc:	f000 f884 	bl	8010a08 <abort>
 8010900:	4b04      	ldr	r3, [pc, #16]	@ (8010914 <__assert_func+0x38>)
 8010902:	461c      	mov	r4, r3
 8010904:	e7f3      	b.n	80108ee <__assert_func+0x12>
 8010906:	bf00      	nop
 8010908:	2000019c 	.word	0x2000019c
 801090c:	080116e6 	.word	0x080116e6
 8010910:	080116f3 	.word	0x080116f3
 8010914:	08011721 	.word	0x08011721

08010918 <_calloc_r>:
 8010918:	b570      	push	{r4, r5, r6, lr}
 801091a:	fba1 5402 	umull	r5, r4, r1, r2
 801091e:	b934      	cbnz	r4, 801092e <_calloc_r+0x16>
 8010920:	4629      	mov	r1, r5
 8010922:	f7ff f8ed 	bl	800fb00 <_malloc_r>
 8010926:	4606      	mov	r6, r0
 8010928:	b928      	cbnz	r0, 8010936 <_calloc_r+0x1e>
 801092a:	4630      	mov	r0, r6
 801092c:	bd70      	pop	{r4, r5, r6, pc}
 801092e:	220c      	movs	r2, #12
 8010930:	2600      	movs	r6, #0
 8010932:	6002      	str	r2, [r0, #0]
 8010934:	e7f9      	b.n	801092a <_calloc_r+0x12>
 8010936:	462a      	mov	r2, r5
 8010938:	4621      	mov	r1, r4
 801093a:	f7fd fd55 	bl	800e3e8 <memset>
 801093e:	e7f4      	b.n	801092a <_calloc_r+0x12>

08010940 <_free_r>:
 8010940:	b538      	push	{r3, r4, r5, lr}
 8010942:	4605      	mov	r5, r0
 8010944:	2900      	cmp	r1, #0
 8010946:	d041      	beq.n	80109cc <_free_r+0x8c>
 8010948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801094c:	1f0c      	subs	r4, r1, #4
 801094e:	2b00      	cmp	r3, #0
 8010950:	bfb8      	it	lt
 8010952:	18e4      	addlt	r4, r4, r3
 8010954:	f7ff fa12 	bl	800fd7c <__malloc_lock>
 8010958:	4a1d      	ldr	r2, [pc, #116]	@ (80109d0 <_free_r+0x90>)
 801095a:	6813      	ldr	r3, [r2, #0]
 801095c:	b933      	cbnz	r3, 801096c <_free_r+0x2c>
 801095e:	6063      	str	r3, [r4, #4]
 8010960:	6014      	str	r4, [r2, #0]
 8010962:	4628      	mov	r0, r5
 8010964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010968:	f7ff ba0e 	b.w	800fd88 <__malloc_unlock>
 801096c:	42a3      	cmp	r3, r4
 801096e:	d908      	bls.n	8010982 <_free_r+0x42>
 8010970:	6820      	ldr	r0, [r4, #0]
 8010972:	1821      	adds	r1, r4, r0
 8010974:	428b      	cmp	r3, r1
 8010976:	bf01      	itttt	eq
 8010978:	6819      	ldreq	r1, [r3, #0]
 801097a:	685b      	ldreq	r3, [r3, #4]
 801097c:	1809      	addeq	r1, r1, r0
 801097e:	6021      	streq	r1, [r4, #0]
 8010980:	e7ed      	b.n	801095e <_free_r+0x1e>
 8010982:	461a      	mov	r2, r3
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	b10b      	cbz	r3, 801098c <_free_r+0x4c>
 8010988:	42a3      	cmp	r3, r4
 801098a:	d9fa      	bls.n	8010982 <_free_r+0x42>
 801098c:	6811      	ldr	r1, [r2, #0]
 801098e:	1850      	adds	r0, r2, r1
 8010990:	42a0      	cmp	r0, r4
 8010992:	d10b      	bne.n	80109ac <_free_r+0x6c>
 8010994:	6820      	ldr	r0, [r4, #0]
 8010996:	4401      	add	r1, r0
 8010998:	1850      	adds	r0, r2, r1
 801099a:	6011      	str	r1, [r2, #0]
 801099c:	4283      	cmp	r3, r0
 801099e:	d1e0      	bne.n	8010962 <_free_r+0x22>
 80109a0:	6818      	ldr	r0, [r3, #0]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	4408      	add	r0, r1
 80109a6:	6053      	str	r3, [r2, #4]
 80109a8:	6010      	str	r0, [r2, #0]
 80109aa:	e7da      	b.n	8010962 <_free_r+0x22>
 80109ac:	d902      	bls.n	80109b4 <_free_r+0x74>
 80109ae:	230c      	movs	r3, #12
 80109b0:	602b      	str	r3, [r5, #0]
 80109b2:	e7d6      	b.n	8010962 <_free_r+0x22>
 80109b4:	6820      	ldr	r0, [r4, #0]
 80109b6:	1821      	adds	r1, r4, r0
 80109b8:	428b      	cmp	r3, r1
 80109ba:	bf02      	ittt	eq
 80109bc:	6819      	ldreq	r1, [r3, #0]
 80109be:	685b      	ldreq	r3, [r3, #4]
 80109c0:	1809      	addeq	r1, r1, r0
 80109c2:	6063      	str	r3, [r4, #4]
 80109c4:	bf08      	it	eq
 80109c6:	6021      	streq	r1, [r4, #0]
 80109c8:	6054      	str	r4, [r2, #4]
 80109ca:	e7ca      	b.n	8010962 <_free_r+0x22>
 80109cc:	bd38      	pop	{r3, r4, r5, pc}
 80109ce:	bf00      	nop
 80109d0:	2000058c 	.word	0x2000058c

080109d4 <_malloc_usable_size_r>:
 80109d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109d8:	1f18      	subs	r0, r3, #4
 80109da:	2b00      	cmp	r3, #0
 80109dc:	bfbc      	itt	lt
 80109de:	580b      	ldrlt	r3, [r1, r0]
 80109e0:	18c0      	addlt	r0, r0, r3
 80109e2:	4770      	bx	lr

080109e4 <fiprintf>:
 80109e4:	b40e      	push	{r1, r2, r3}
 80109e6:	b503      	push	{r0, r1, lr}
 80109e8:	ab03      	add	r3, sp, #12
 80109ea:	4601      	mov	r1, r0
 80109ec:	4805      	ldr	r0, [pc, #20]	@ (8010a04 <fiprintf+0x20>)
 80109ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80109f2:	6800      	ldr	r0, [r0, #0]
 80109f4:	9301      	str	r3, [sp, #4]
 80109f6:	f000 f837 	bl	8010a68 <_vfiprintf_r>
 80109fa:	b002      	add	sp, #8
 80109fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a00:	b003      	add	sp, #12
 8010a02:	4770      	bx	lr
 8010a04:	2000019c 	.word	0x2000019c

08010a08 <abort>:
 8010a08:	2006      	movs	r0, #6
 8010a0a:	b508      	push	{r3, lr}
 8010a0c:	f000 fa62 	bl	8010ed4 <raise>
 8010a10:	2001      	movs	r0, #1
 8010a12:	f7f3 fb29 	bl	8004068 <_exit>

08010a16 <__sfputc_r>:
 8010a16:	6893      	ldr	r3, [r2, #8]
 8010a18:	3b01      	subs	r3, #1
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	b410      	push	{r4}
 8010a1e:	6093      	str	r3, [r2, #8]
 8010a20:	da08      	bge.n	8010a34 <__sfputc_r+0x1e>
 8010a22:	6994      	ldr	r4, [r2, #24]
 8010a24:	42a3      	cmp	r3, r4
 8010a26:	db01      	blt.n	8010a2c <__sfputc_r+0x16>
 8010a28:	290a      	cmp	r1, #10
 8010a2a:	d103      	bne.n	8010a34 <__sfputc_r+0x1e>
 8010a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a30:	f000 b932 	b.w	8010c98 <__swbuf_r>
 8010a34:	6813      	ldr	r3, [r2, #0]
 8010a36:	1c58      	adds	r0, r3, #1
 8010a38:	6010      	str	r0, [r2, #0]
 8010a3a:	4608      	mov	r0, r1
 8010a3c:	7019      	strb	r1, [r3, #0]
 8010a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <__sfputs_r>:
 8010a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a46:	4606      	mov	r6, r0
 8010a48:	460f      	mov	r7, r1
 8010a4a:	4614      	mov	r4, r2
 8010a4c:	18d5      	adds	r5, r2, r3
 8010a4e:	42ac      	cmp	r4, r5
 8010a50:	d101      	bne.n	8010a56 <__sfputs_r+0x12>
 8010a52:	2000      	movs	r0, #0
 8010a54:	e007      	b.n	8010a66 <__sfputs_r+0x22>
 8010a56:	463a      	mov	r2, r7
 8010a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	f7ff ffda 	bl	8010a16 <__sfputc_r>
 8010a62:	1c43      	adds	r3, r0, #1
 8010a64:	d1f3      	bne.n	8010a4e <__sfputs_r+0xa>
 8010a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010a68 <_vfiprintf_r>:
 8010a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a6c:	460d      	mov	r5, r1
 8010a6e:	b09d      	sub	sp, #116	@ 0x74
 8010a70:	4614      	mov	r4, r2
 8010a72:	4698      	mov	r8, r3
 8010a74:	4606      	mov	r6, r0
 8010a76:	b118      	cbz	r0, 8010a80 <_vfiprintf_r+0x18>
 8010a78:	6a03      	ldr	r3, [r0, #32]
 8010a7a:	b90b      	cbnz	r3, 8010a80 <_vfiprintf_r+0x18>
 8010a7c:	f7fc fdf8 	bl	800d670 <__sinit>
 8010a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a82:	07d9      	lsls	r1, r3, #31
 8010a84:	d405      	bmi.n	8010a92 <_vfiprintf_r+0x2a>
 8010a86:	89ab      	ldrh	r3, [r5, #12]
 8010a88:	059a      	lsls	r2, r3, #22
 8010a8a:	d402      	bmi.n	8010a92 <_vfiprintf_r+0x2a>
 8010a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a8e:	f7fd fcf0 	bl	800e472 <__retarget_lock_acquire_recursive>
 8010a92:	89ab      	ldrh	r3, [r5, #12]
 8010a94:	071b      	lsls	r3, r3, #28
 8010a96:	d501      	bpl.n	8010a9c <_vfiprintf_r+0x34>
 8010a98:	692b      	ldr	r3, [r5, #16]
 8010a9a:	b99b      	cbnz	r3, 8010ac4 <_vfiprintf_r+0x5c>
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	f000 f938 	bl	8010d14 <__swsetup_r>
 8010aa4:	b170      	cbz	r0, 8010ac4 <_vfiprintf_r+0x5c>
 8010aa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010aa8:	07dc      	lsls	r4, r3, #31
 8010aaa:	d504      	bpl.n	8010ab6 <_vfiprintf_r+0x4e>
 8010aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ab0:	b01d      	add	sp, #116	@ 0x74
 8010ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab6:	89ab      	ldrh	r3, [r5, #12]
 8010ab8:	0598      	lsls	r0, r3, #22
 8010aba:	d4f7      	bmi.n	8010aac <_vfiprintf_r+0x44>
 8010abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010abe:	f7fd fcd9 	bl	800e474 <__retarget_lock_release_recursive>
 8010ac2:	e7f3      	b.n	8010aac <_vfiprintf_r+0x44>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aca:	f04f 0901 	mov.w	r9, #1
 8010ace:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8010c84 <_vfiprintf_r+0x21c>
 8010ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ad4:	2320      	movs	r3, #32
 8010ad6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ada:	2330      	movs	r3, #48	@ 0x30
 8010adc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ae0:	4623      	mov	r3, r4
 8010ae2:	469a      	mov	sl, r3
 8010ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ae8:	b10a      	cbz	r2, 8010aee <_vfiprintf_r+0x86>
 8010aea:	2a25      	cmp	r2, #37	@ 0x25
 8010aec:	d1f9      	bne.n	8010ae2 <_vfiprintf_r+0x7a>
 8010aee:	ebba 0b04 	subs.w	fp, sl, r4
 8010af2:	d00b      	beq.n	8010b0c <_vfiprintf_r+0xa4>
 8010af4:	465b      	mov	r3, fp
 8010af6:	4622      	mov	r2, r4
 8010af8:	4629      	mov	r1, r5
 8010afa:	4630      	mov	r0, r6
 8010afc:	f7ff ffa2 	bl	8010a44 <__sfputs_r>
 8010b00:	3001      	adds	r0, #1
 8010b02:	f000 80a7 	beq.w	8010c54 <_vfiprintf_r+0x1ec>
 8010b06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b08:	445a      	add	r2, fp
 8010b0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f000 809f 	beq.w	8010c54 <_vfiprintf_r+0x1ec>
 8010b16:	2300      	movs	r3, #0
 8010b18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b1c:	f10a 0a01 	add.w	sl, sl, #1
 8010b20:	9304      	str	r3, [sp, #16]
 8010b22:	9307      	str	r3, [sp, #28]
 8010b24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b28:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b2e:	4654      	mov	r4, sl
 8010b30:	2205      	movs	r2, #5
 8010b32:	4854      	ldr	r0, [pc, #336]	@ (8010c84 <_vfiprintf_r+0x21c>)
 8010b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b38:	f7fd fca2 	bl	800e480 <memchr>
 8010b3c:	9a04      	ldr	r2, [sp, #16]
 8010b3e:	b9d8      	cbnz	r0, 8010b78 <_vfiprintf_r+0x110>
 8010b40:	06d1      	lsls	r1, r2, #27
 8010b42:	bf44      	itt	mi
 8010b44:	2320      	movmi	r3, #32
 8010b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b4a:	0713      	lsls	r3, r2, #28
 8010b4c:	bf44      	itt	mi
 8010b4e:	232b      	movmi	r3, #43	@ 0x2b
 8010b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b54:	f89a 3000 	ldrb.w	r3, [sl]
 8010b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b5a:	d015      	beq.n	8010b88 <_vfiprintf_r+0x120>
 8010b5c:	9a07      	ldr	r2, [sp, #28]
 8010b5e:	4654      	mov	r4, sl
 8010b60:	2000      	movs	r0, #0
 8010b62:	f04f 0c0a 	mov.w	ip, #10
 8010b66:	4621      	mov	r1, r4
 8010b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b6c:	3b30      	subs	r3, #48	@ 0x30
 8010b6e:	2b09      	cmp	r3, #9
 8010b70:	d94b      	bls.n	8010c0a <_vfiprintf_r+0x1a2>
 8010b72:	b1b0      	cbz	r0, 8010ba2 <_vfiprintf_r+0x13a>
 8010b74:	9207      	str	r2, [sp, #28]
 8010b76:	e014      	b.n	8010ba2 <_vfiprintf_r+0x13a>
 8010b78:	eba0 0308 	sub.w	r3, r0, r8
 8010b7c:	46a2      	mov	sl, r4
 8010b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8010b82:	4313      	orrs	r3, r2
 8010b84:	9304      	str	r3, [sp, #16]
 8010b86:	e7d2      	b.n	8010b2e <_vfiprintf_r+0xc6>
 8010b88:	9b03      	ldr	r3, [sp, #12]
 8010b8a:	1d19      	adds	r1, r3, #4
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	9103      	str	r1, [sp, #12]
 8010b92:	bfbb      	ittet	lt
 8010b94:	425b      	neglt	r3, r3
 8010b96:	f042 0202 	orrlt.w	r2, r2, #2
 8010b9a:	9307      	strge	r3, [sp, #28]
 8010b9c:	9307      	strlt	r3, [sp, #28]
 8010b9e:	bfb8      	it	lt
 8010ba0:	9204      	strlt	r2, [sp, #16]
 8010ba2:	7823      	ldrb	r3, [r4, #0]
 8010ba4:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ba6:	d10a      	bne.n	8010bbe <_vfiprintf_r+0x156>
 8010ba8:	7863      	ldrb	r3, [r4, #1]
 8010baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bac:	d132      	bne.n	8010c14 <_vfiprintf_r+0x1ac>
 8010bae:	9b03      	ldr	r3, [sp, #12]
 8010bb0:	3402      	adds	r4, #2
 8010bb2:	1d1a      	adds	r2, r3, #4
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010bba:	9203      	str	r2, [sp, #12]
 8010bbc:	9305      	str	r3, [sp, #20]
 8010bbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c94 <_vfiprintf_r+0x22c>
 8010bc2:	2203      	movs	r2, #3
 8010bc4:	7821      	ldrb	r1, [r4, #0]
 8010bc6:	4650      	mov	r0, sl
 8010bc8:	f7fd fc5a 	bl	800e480 <memchr>
 8010bcc:	b138      	cbz	r0, 8010bde <_vfiprintf_r+0x176>
 8010bce:	eba0 000a 	sub.w	r0, r0, sl
 8010bd2:	2240      	movs	r2, #64	@ 0x40
 8010bd4:	9b04      	ldr	r3, [sp, #16]
 8010bd6:	3401      	adds	r4, #1
 8010bd8:	4082      	lsls	r2, r0
 8010bda:	4313      	orrs	r3, r2
 8010bdc:	9304      	str	r3, [sp, #16]
 8010bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010be2:	2206      	movs	r2, #6
 8010be4:	4828      	ldr	r0, [pc, #160]	@ (8010c88 <_vfiprintf_r+0x220>)
 8010be6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010bea:	f7fd fc49 	bl	800e480 <memchr>
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	d03f      	beq.n	8010c72 <_vfiprintf_r+0x20a>
 8010bf2:	4b26      	ldr	r3, [pc, #152]	@ (8010c8c <_vfiprintf_r+0x224>)
 8010bf4:	bb1b      	cbnz	r3, 8010c3e <_vfiprintf_r+0x1d6>
 8010bf6:	9b03      	ldr	r3, [sp, #12]
 8010bf8:	3307      	adds	r3, #7
 8010bfa:	f023 0307 	bic.w	r3, r3, #7
 8010bfe:	3308      	adds	r3, #8
 8010c00:	9303      	str	r3, [sp, #12]
 8010c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c04:	443b      	add	r3, r7
 8010c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c08:	e76a      	b.n	8010ae0 <_vfiprintf_r+0x78>
 8010c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c0e:	460c      	mov	r4, r1
 8010c10:	2001      	movs	r0, #1
 8010c12:	e7a8      	b.n	8010b66 <_vfiprintf_r+0xfe>
 8010c14:	2300      	movs	r3, #0
 8010c16:	3401      	adds	r4, #1
 8010c18:	f04f 0c0a 	mov.w	ip, #10
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	9305      	str	r3, [sp, #20]
 8010c20:	4620      	mov	r0, r4
 8010c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c26:	3a30      	subs	r2, #48	@ 0x30
 8010c28:	2a09      	cmp	r2, #9
 8010c2a:	d903      	bls.n	8010c34 <_vfiprintf_r+0x1cc>
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d0c6      	beq.n	8010bbe <_vfiprintf_r+0x156>
 8010c30:	9105      	str	r1, [sp, #20]
 8010c32:	e7c4      	b.n	8010bbe <_vfiprintf_r+0x156>
 8010c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c38:	4604      	mov	r4, r0
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e7f0      	b.n	8010c20 <_vfiprintf_r+0x1b8>
 8010c3e:	ab03      	add	r3, sp, #12
 8010c40:	462a      	mov	r2, r5
 8010c42:	a904      	add	r1, sp, #16
 8010c44:	4630      	mov	r0, r6
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	4b11      	ldr	r3, [pc, #68]	@ (8010c90 <_vfiprintf_r+0x228>)
 8010c4a:	f7fb fe65 	bl	800c918 <_printf_float>
 8010c4e:	4607      	mov	r7, r0
 8010c50:	1c78      	adds	r0, r7, #1
 8010c52:	d1d6      	bne.n	8010c02 <_vfiprintf_r+0x19a>
 8010c54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c56:	07d9      	lsls	r1, r3, #31
 8010c58:	d405      	bmi.n	8010c66 <_vfiprintf_r+0x1fe>
 8010c5a:	89ab      	ldrh	r3, [r5, #12]
 8010c5c:	059a      	lsls	r2, r3, #22
 8010c5e:	d402      	bmi.n	8010c66 <_vfiprintf_r+0x1fe>
 8010c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c62:	f7fd fc07 	bl	800e474 <__retarget_lock_release_recursive>
 8010c66:	89ab      	ldrh	r3, [r5, #12]
 8010c68:	065b      	lsls	r3, r3, #25
 8010c6a:	f53f af1f 	bmi.w	8010aac <_vfiprintf_r+0x44>
 8010c6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c70:	e71e      	b.n	8010ab0 <_vfiprintf_r+0x48>
 8010c72:	ab03      	add	r3, sp, #12
 8010c74:	462a      	mov	r2, r5
 8010c76:	a904      	add	r1, sp, #16
 8010c78:	4630      	mov	r0, r6
 8010c7a:	9300      	str	r3, [sp, #0]
 8010c7c:	4b04      	ldr	r3, [pc, #16]	@ (8010c90 <_vfiprintf_r+0x228>)
 8010c7e:	f7fc f8e7 	bl	800ce50 <_printf_i>
 8010c82:	e7e4      	b.n	8010c4e <_vfiprintf_r+0x1e6>
 8010c84:	0801167c 	.word	0x0801167c
 8010c88:	08011686 	.word	0x08011686
 8010c8c:	0800c919 	.word	0x0800c919
 8010c90:	08010a45 	.word	0x08010a45
 8010c94:	08011682 	.word	0x08011682

08010c98 <__swbuf_r>:
 8010c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c9a:	460e      	mov	r6, r1
 8010c9c:	4614      	mov	r4, r2
 8010c9e:	4605      	mov	r5, r0
 8010ca0:	b118      	cbz	r0, 8010caa <__swbuf_r+0x12>
 8010ca2:	6a03      	ldr	r3, [r0, #32]
 8010ca4:	b90b      	cbnz	r3, 8010caa <__swbuf_r+0x12>
 8010ca6:	f7fc fce3 	bl	800d670 <__sinit>
 8010caa:	69a3      	ldr	r3, [r4, #24]
 8010cac:	60a3      	str	r3, [r4, #8]
 8010cae:	89a3      	ldrh	r3, [r4, #12]
 8010cb0:	071a      	lsls	r2, r3, #28
 8010cb2:	d501      	bpl.n	8010cb8 <__swbuf_r+0x20>
 8010cb4:	6923      	ldr	r3, [r4, #16]
 8010cb6:	b943      	cbnz	r3, 8010cca <__swbuf_r+0x32>
 8010cb8:	4621      	mov	r1, r4
 8010cba:	4628      	mov	r0, r5
 8010cbc:	f000 f82a 	bl	8010d14 <__swsetup_r>
 8010cc0:	b118      	cbz	r0, 8010cca <__swbuf_r+0x32>
 8010cc2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010cc6:	4638      	mov	r0, r7
 8010cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cca:	6823      	ldr	r3, [r4, #0]
 8010ccc:	b2f6      	uxtb	r6, r6
 8010cce:	6922      	ldr	r2, [r4, #16]
 8010cd0:	4637      	mov	r7, r6
 8010cd2:	1a98      	subs	r0, r3, r2
 8010cd4:	6963      	ldr	r3, [r4, #20]
 8010cd6:	4283      	cmp	r3, r0
 8010cd8:	dc05      	bgt.n	8010ce6 <__swbuf_r+0x4e>
 8010cda:	4621      	mov	r1, r4
 8010cdc:	4628      	mov	r0, r5
 8010cde:	f7ff f825 	bl	800fd2c <_fflush_r>
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	d1ed      	bne.n	8010cc2 <__swbuf_r+0x2a>
 8010ce6:	68a3      	ldr	r3, [r4, #8]
 8010ce8:	3b01      	subs	r3, #1
 8010cea:	60a3      	str	r3, [r4, #8]
 8010cec:	6823      	ldr	r3, [r4, #0]
 8010cee:	1c5a      	adds	r2, r3, #1
 8010cf0:	6022      	str	r2, [r4, #0]
 8010cf2:	701e      	strb	r6, [r3, #0]
 8010cf4:	1c43      	adds	r3, r0, #1
 8010cf6:	6962      	ldr	r2, [r4, #20]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d004      	beq.n	8010d06 <__swbuf_r+0x6e>
 8010cfc:	89a3      	ldrh	r3, [r4, #12]
 8010cfe:	07db      	lsls	r3, r3, #31
 8010d00:	d5e1      	bpl.n	8010cc6 <__swbuf_r+0x2e>
 8010d02:	2e0a      	cmp	r6, #10
 8010d04:	d1df      	bne.n	8010cc6 <__swbuf_r+0x2e>
 8010d06:	4621      	mov	r1, r4
 8010d08:	4628      	mov	r0, r5
 8010d0a:	f7ff f80f 	bl	800fd2c <_fflush_r>
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	d0d9      	beq.n	8010cc6 <__swbuf_r+0x2e>
 8010d12:	e7d6      	b.n	8010cc2 <__swbuf_r+0x2a>

08010d14 <__swsetup_r>:
 8010d14:	b538      	push	{r3, r4, r5, lr}
 8010d16:	4b29      	ldr	r3, [pc, #164]	@ (8010dbc <__swsetup_r+0xa8>)
 8010d18:	4605      	mov	r5, r0
 8010d1a:	460c      	mov	r4, r1
 8010d1c:	6818      	ldr	r0, [r3, #0]
 8010d1e:	b118      	cbz	r0, 8010d28 <__swsetup_r+0x14>
 8010d20:	6a03      	ldr	r3, [r0, #32]
 8010d22:	b90b      	cbnz	r3, 8010d28 <__swsetup_r+0x14>
 8010d24:	f7fc fca4 	bl	800d670 <__sinit>
 8010d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d2c:	0719      	lsls	r1, r3, #28
 8010d2e:	d422      	bmi.n	8010d76 <__swsetup_r+0x62>
 8010d30:	06da      	lsls	r2, r3, #27
 8010d32:	d407      	bmi.n	8010d44 <__swsetup_r+0x30>
 8010d34:	2209      	movs	r2, #9
 8010d36:	602a      	str	r2, [r5, #0]
 8010d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d40:	81a3      	strh	r3, [r4, #12]
 8010d42:	e033      	b.n	8010dac <__swsetup_r+0x98>
 8010d44:	0758      	lsls	r0, r3, #29
 8010d46:	d512      	bpl.n	8010d6e <__swsetup_r+0x5a>
 8010d48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d4a:	b141      	cbz	r1, 8010d5e <__swsetup_r+0x4a>
 8010d4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d50:	4299      	cmp	r1, r3
 8010d52:	d002      	beq.n	8010d5a <__swsetup_r+0x46>
 8010d54:	4628      	mov	r0, r5
 8010d56:	f7ff fdf3 	bl	8010940 <_free_r>
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d5e:	89a3      	ldrh	r3, [r4, #12]
 8010d60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010d64:	81a3      	strh	r3, [r4, #12]
 8010d66:	2300      	movs	r3, #0
 8010d68:	6063      	str	r3, [r4, #4]
 8010d6a:	6923      	ldr	r3, [r4, #16]
 8010d6c:	6023      	str	r3, [r4, #0]
 8010d6e:	89a3      	ldrh	r3, [r4, #12]
 8010d70:	f043 0308 	orr.w	r3, r3, #8
 8010d74:	81a3      	strh	r3, [r4, #12]
 8010d76:	6923      	ldr	r3, [r4, #16]
 8010d78:	b94b      	cbnz	r3, 8010d8e <__swsetup_r+0x7a>
 8010d7a:	89a3      	ldrh	r3, [r4, #12]
 8010d7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d84:	d003      	beq.n	8010d8e <__swsetup_r+0x7a>
 8010d86:	4621      	mov	r1, r4
 8010d88:	4628      	mov	r0, r5
 8010d8a:	f000 f83e 	bl	8010e0a <__smakebuf_r>
 8010d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d92:	f013 0201 	ands.w	r2, r3, #1
 8010d96:	d00a      	beq.n	8010dae <__swsetup_r+0x9a>
 8010d98:	2200      	movs	r2, #0
 8010d9a:	60a2      	str	r2, [r4, #8]
 8010d9c:	6962      	ldr	r2, [r4, #20]
 8010d9e:	4252      	negs	r2, r2
 8010da0:	61a2      	str	r2, [r4, #24]
 8010da2:	6922      	ldr	r2, [r4, #16]
 8010da4:	b942      	cbnz	r2, 8010db8 <__swsetup_r+0xa4>
 8010da6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010daa:	d1c5      	bne.n	8010d38 <__swsetup_r+0x24>
 8010dac:	bd38      	pop	{r3, r4, r5, pc}
 8010dae:	0799      	lsls	r1, r3, #30
 8010db0:	bf58      	it	pl
 8010db2:	6962      	ldrpl	r2, [r4, #20]
 8010db4:	60a2      	str	r2, [r4, #8]
 8010db6:	e7f4      	b.n	8010da2 <__swsetup_r+0x8e>
 8010db8:	2000      	movs	r0, #0
 8010dba:	e7f7      	b.n	8010dac <__swsetup_r+0x98>
 8010dbc:	2000019c 	.word	0x2000019c

08010dc0 <__swhatbuf_r>:
 8010dc0:	b570      	push	{r4, r5, r6, lr}
 8010dc2:	460c      	mov	r4, r1
 8010dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dc8:	b096      	sub	sp, #88	@ 0x58
 8010dca:	4615      	mov	r5, r2
 8010dcc:	2900      	cmp	r1, #0
 8010dce:	461e      	mov	r6, r3
 8010dd0:	da0c      	bge.n	8010dec <__swhatbuf_r+0x2c>
 8010dd2:	89a3      	ldrh	r3, [r4, #12]
 8010dd4:	2100      	movs	r1, #0
 8010dd6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010dda:	bf14      	ite	ne
 8010ddc:	2340      	movne	r3, #64	@ 0x40
 8010dde:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010de2:	2000      	movs	r0, #0
 8010de4:	6031      	str	r1, [r6, #0]
 8010de6:	602b      	str	r3, [r5, #0]
 8010de8:	b016      	add	sp, #88	@ 0x58
 8010dea:	bd70      	pop	{r4, r5, r6, pc}
 8010dec:	466a      	mov	r2, sp
 8010dee:	f000 f89d 	bl	8010f2c <_fstat_r>
 8010df2:	2800      	cmp	r0, #0
 8010df4:	dbed      	blt.n	8010dd2 <__swhatbuf_r+0x12>
 8010df6:	9901      	ldr	r1, [sp, #4]
 8010df8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010dfc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010e00:	4259      	negs	r1, r3
 8010e02:	4159      	adcs	r1, r3
 8010e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e08:	e7eb      	b.n	8010de2 <__swhatbuf_r+0x22>

08010e0a <__smakebuf_r>:
 8010e0a:	898b      	ldrh	r3, [r1, #12]
 8010e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e0e:	079d      	lsls	r5, r3, #30
 8010e10:	4606      	mov	r6, r0
 8010e12:	460c      	mov	r4, r1
 8010e14:	d507      	bpl.n	8010e26 <__smakebuf_r+0x1c>
 8010e16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e1a:	6023      	str	r3, [r4, #0]
 8010e1c:	6123      	str	r3, [r4, #16]
 8010e1e:	2301      	movs	r3, #1
 8010e20:	6163      	str	r3, [r4, #20]
 8010e22:	b003      	add	sp, #12
 8010e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e26:	ab01      	add	r3, sp, #4
 8010e28:	466a      	mov	r2, sp
 8010e2a:	f7ff ffc9 	bl	8010dc0 <__swhatbuf_r>
 8010e2e:	9f00      	ldr	r7, [sp, #0]
 8010e30:	4605      	mov	r5, r0
 8010e32:	4630      	mov	r0, r6
 8010e34:	4639      	mov	r1, r7
 8010e36:	f7fe fe63 	bl	800fb00 <_malloc_r>
 8010e3a:	b948      	cbnz	r0, 8010e50 <__smakebuf_r+0x46>
 8010e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e40:	059a      	lsls	r2, r3, #22
 8010e42:	d4ee      	bmi.n	8010e22 <__smakebuf_r+0x18>
 8010e44:	f023 0303 	bic.w	r3, r3, #3
 8010e48:	f043 0302 	orr.w	r3, r3, #2
 8010e4c:	81a3      	strh	r3, [r4, #12]
 8010e4e:	e7e2      	b.n	8010e16 <__smakebuf_r+0xc>
 8010e50:	89a3      	ldrh	r3, [r4, #12]
 8010e52:	6020      	str	r0, [r4, #0]
 8010e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e58:	81a3      	strh	r3, [r4, #12]
 8010e5a:	9b01      	ldr	r3, [sp, #4]
 8010e5c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e60:	b15b      	cbz	r3, 8010e7a <__smakebuf_r+0x70>
 8010e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e66:	4630      	mov	r0, r6
 8010e68:	f000 f83c 	bl	8010ee4 <_isatty_r>
 8010e6c:	b128      	cbz	r0, 8010e7a <__smakebuf_r+0x70>
 8010e6e:	89a3      	ldrh	r3, [r4, #12]
 8010e70:	f023 0303 	bic.w	r3, r3, #3
 8010e74:	f043 0301 	orr.w	r3, r3, #1
 8010e78:	81a3      	strh	r3, [r4, #12]
 8010e7a:	89a3      	ldrh	r3, [r4, #12]
 8010e7c:	431d      	orrs	r5, r3
 8010e7e:	81a5      	strh	r5, [r4, #12]
 8010e80:	e7cf      	b.n	8010e22 <__smakebuf_r+0x18>

08010e82 <_raise_r>:
 8010e82:	291f      	cmp	r1, #31
 8010e84:	b538      	push	{r3, r4, r5, lr}
 8010e86:	4605      	mov	r5, r0
 8010e88:	460c      	mov	r4, r1
 8010e8a:	d904      	bls.n	8010e96 <_raise_r+0x14>
 8010e8c:	2316      	movs	r3, #22
 8010e8e:	6003      	str	r3, [r0, #0]
 8010e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e94:	bd38      	pop	{r3, r4, r5, pc}
 8010e96:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010e98:	b112      	cbz	r2, 8010ea0 <_raise_r+0x1e>
 8010e9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e9e:	b94b      	cbnz	r3, 8010eb4 <_raise_r+0x32>
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	f000 f841 	bl	8010f28 <_getpid_r>
 8010ea6:	4622      	mov	r2, r4
 8010ea8:	4601      	mov	r1, r0
 8010eaa:	4628      	mov	r0, r5
 8010eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010eb0:	f000 b828 	b.w	8010f04 <_kill_r>
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d00a      	beq.n	8010ece <_raise_r+0x4c>
 8010eb8:	1c59      	adds	r1, r3, #1
 8010eba:	d103      	bne.n	8010ec4 <_raise_r+0x42>
 8010ebc:	2316      	movs	r3, #22
 8010ebe:	6003      	str	r3, [r0, #0]
 8010ec0:	2001      	movs	r0, #1
 8010ec2:	e7e7      	b.n	8010e94 <_raise_r+0x12>
 8010ec4:	2100      	movs	r1, #0
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010ecc:	4798      	blx	r3
 8010ece:	2000      	movs	r0, #0
 8010ed0:	e7e0      	b.n	8010e94 <_raise_r+0x12>
	...

08010ed4 <raise>:
 8010ed4:	4b02      	ldr	r3, [pc, #8]	@ (8010ee0 <raise+0xc>)
 8010ed6:	4601      	mov	r1, r0
 8010ed8:	6818      	ldr	r0, [r3, #0]
 8010eda:	f7ff bfd2 	b.w	8010e82 <_raise_r>
 8010ede:	bf00      	nop
 8010ee0:	2000019c 	.word	0x2000019c

08010ee4 <_isatty_r>:
 8010ee4:	b538      	push	{r3, r4, r5, lr}
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	4d05      	ldr	r5, [pc, #20]	@ (8010f00 <_isatty_r+0x1c>)
 8010eea:	4604      	mov	r4, r0
 8010eec:	4608      	mov	r0, r1
 8010eee:	602b      	str	r3, [r5, #0]
 8010ef0:	f7f3 f91a 	bl	8004128 <_isatty>
 8010ef4:	1c43      	adds	r3, r0, #1
 8010ef6:	d102      	bne.n	8010efe <_isatty_r+0x1a>
 8010ef8:	682b      	ldr	r3, [r5, #0]
 8010efa:	b103      	cbz	r3, 8010efe <_isatty_r+0x1a>
 8010efc:	6023      	str	r3, [r4, #0]
 8010efe:	bd38      	pop	{r3, r4, r5, pc}
 8010f00:	20000590 	.word	0x20000590

08010f04 <_kill_r>:
 8010f04:	b538      	push	{r3, r4, r5, lr}
 8010f06:	2300      	movs	r3, #0
 8010f08:	4d06      	ldr	r5, [pc, #24]	@ (8010f24 <_kill_r+0x20>)
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	4608      	mov	r0, r1
 8010f0e:	4611      	mov	r1, r2
 8010f10:	602b      	str	r3, [r5, #0]
 8010f12:	f7f3 f899 	bl	8004048 <_kill>
 8010f16:	1c43      	adds	r3, r0, #1
 8010f18:	d102      	bne.n	8010f20 <_kill_r+0x1c>
 8010f1a:	682b      	ldr	r3, [r5, #0]
 8010f1c:	b103      	cbz	r3, 8010f20 <_kill_r+0x1c>
 8010f1e:	6023      	str	r3, [r4, #0]
 8010f20:	bd38      	pop	{r3, r4, r5, pc}
 8010f22:	bf00      	nop
 8010f24:	20000590 	.word	0x20000590

08010f28 <_getpid_r>:
 8010f28:	f7f3 b886 	b.w	8004038 <_getpid>

08010f2c <_fstat_r>:
 8010f2c:	b538      	push	{r3, r4, r5, lr}
 8010f2e:	2300      	movs	r3, #0
 8010f30:	4d06      	ldr	r5, [pc, #24]	@ (8010f4c <_fstat_r+0x20>)
 8010f32:	4604      	mov	r4, r0
 8010f34:	4608      	mov	r0, r1
 8010f36:	4611      	mov	r1, r2
 8010f38:	602b      	str	r3, [r5, #0]
 8010f3a:	f7f3 f8e5 	bl	8004108 <_fstat>
 8010f3e:	1c43      	adds	r3, r0, #1
 8010f40:	d102      	bne.n	8010f48 <_fstat_r+0x1c>
 8010f42:	682b      	ldr	r3, [r5, #0]
 8010f44:	b103      	cbz	r3, 8010f48 <_fstat_r+0x1c>
 8010f46:	6023      	str	r3, [r4, #0]
 8010f48:	bd38      	pop	{r3, r4, r5, pc}
 8010f4a:	bf00      	nop
 8010f4c:	20000590 	.word	0x20000590

08010f50 <sqrtf>:
 8010f50:	b508      	push	{r3, lr}
 8010f52:	ed2d 8b02 	vpush	{d8}
 8010f56:	eeb0 8a40 	vmov.f32	s16, s0
 8010f5a:	f000 f817 	bl	8010f8c <__ieee754_sqrtf>
 8010f5e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f66:	d60c      	bvs.n	8010f82 <sqrtf+0x32>
 8010f68:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010f88 <sqrtf+0x38>
 8010f6c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f74:	d505      	bpl.n	8010f82 <sqrtf+0x32>
 8010f76:	f7fd fa51 	bl	800e41c <__errno>
 8010f7a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010f7e:	2321      	movs	r3, #33	@ 0x21
 8010f80:	6003      	str	r3, [r0, #0]
 8010f82:	ecbd 8b02 	vpop	{d8}
 8010f86:	bd08      	pop	{r3, pc}
 8010f88:	00000000 	.word	0x00000000

08010f8c <__ieee754_sqrtf>:
 8010f8c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010f90:	4770      	bx	lr
	...

08010f94 <_init>:
 8010f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f96:	bf00      	nop
 8010f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f9a:	bc08      	pop	{r3}
 8010f9c:	469e      	mov	lr, r3
 8010f9e:	4770      	bx	lr

08010fa0 <_fini>:
 8010fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fa2:	bf00      	nop
 8010fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fa6:	bc08      	pop	{r3}
 8010fa8:	469e      	mov	lr, r3
 8010faa:	4770      	bx	lr
