
IMU_TESTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010610  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a0  08010860  08010860  00011860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011200  08011200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011208  08011208  00012208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801120c  0801120c  0001220c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000000  08011210  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000398  200001ec  080113fc  000131ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000584  080113fc  00013584  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000131ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bc75  00000000  00000000  00013222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d21  00000000  00000000  0003ee97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000027b0  00000000  00000000  00042bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001ee1  00000000  00000000  00045368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b3b9  00000000  00000000  00047249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027c6b  00000000  00000000  00082602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017478f  00000000  00000000  000aa26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021e9fc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c344  00000000  00000000  0021ea40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0022ad84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001ec 	.word	0x200001ec
 800026c:	00000000 	.word	0x00000000
 8000270:	08010848 	.word	0x08010848

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001f0 	.word	0x200001f0
 800028c:	08010848 	.word	0x08010848

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9e6 	b.w	800108c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	2200      	movs	r2, #0
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d4a:	4688      	mov	r8, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	468e      	mov	lr, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d95f      	bls.n	8000e1a <__udivmoddi4+0xd6>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b4      	lsls	r4, r6
 8000d6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d70:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	0c23      	lsrs	r3, r4, #16
 8000d7e:	fbbe f1f8 	udiv	r1, lr, r8
 8000d82:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d86:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x5e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x5c>
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	f200 8154 	bhi.w	8001048 <__udivmoddi4+0x304>
 8000da0:	4601      	mov	r1, r0
 8000da2:	1a9b      	subs	r3, r3, r2
 8000da4:	b2a2      	uxth	r2, r4
 8000da6:	fbb3 f0f8 	udiv	r0, r3, r8
 8000daa:	fb08 3310 	mls	r3, r8, r0, r3
 8000dae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000db2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000db6:	4594      	cmp	ip, r2
 8000db8:	d90b      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dba:	18ba      	adds	r2, r7, r2
 8000dbc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000dc0:	bf2c      	ite	cs
 8000dc2:	2401      	movcs	r4, #1
 8000dc4:	2400      	movcc	r4, #0
 8000dc6:	4594      	cmp	ip, r2
 8000dc8:	d902      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dca:	2c00      	cmp	r4, #0
 8000dcc:	f000 813f 	beq.w	800104e <__udivmoddi4+0x30a>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba2 020c 	sub.w	r2, r2, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c5 2300 	strd	r2, r3, [r5]
 8000de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d14e      	bne.n	8000ea0 <__udivmoddi4+0x15c>
 8000e02:	4543      	cmp	r3, r8
 8000e04:	f0c0 8112 	bcc.w	800102c <__udivmoddi4+0x2e8>
 8000e08:	4282      	cmp	r2, r0
 8000e0a:	f240 810f 	bls.w	800102c <__udivmoddi4+0x2e8>
 8000e0e:	4608      	mov	r0, r1
 8000e10:	2d00      	cmp	r5, #0
 8000e12:	d0e8      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e14:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e18:	e7e5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	f000 80ac 	beq.w	8000f78 <__udivmoddi4+0x234>
 8000e20:	fab2 f682 	clz	r6, r2
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	f040 80bb 	bne.w	8000fa0 <__udivmoddi4+0x25c>
 8000e2a:	1a8b      	subs	r3, r1, r2
 8000e2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e30:	b2bc      	uxth	r4, r7
 8000e32:	2101      	movs	r1, #1
 8000e34:	0c02      	lsrs	r2, r0, #16
 8000e36:	b280      	uxth	r0, r0
 8000e38:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e40:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e44:	fb04 f20c 	mul.w	r2, r4, ip
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d90e      	bls.n	8000e6a <__udivmoddi4+0x126>
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e52:	bf2c      	ite	cs
 8000e54:	f04f 0901 	movcs.w	r9, #1
 8000e58:	f04f 0900 	movcc.w	r9, #0
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d903      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e60:	f1b9 0f00 	cmp.w	r9, #0
 8000e64:	f000 80ec 	beq.w	8001040 <__udivmoddi4+0x2fc>
 8000e68:	46c4      	mov	ip, r8
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e70:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e74:	fb04 f408 	mul.w	r4, r4, r8
 8000e78:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e7c:	4294      	cmp	r4, r2
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x154>
 8000e80:	18ba      	adds	r2, r7, r2
 8000e82:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000e86:	bf2c      	ite	cs
 8000e88:	2001      	movcs	r0, #1
 8000e8a:	2000      	movcc	r0, #0
 8000e8c:	4294      	cmp	r4, r2
 8000e8e:	d902      	bls.n	8000e96 <__udivmoddi4+0x152>
 8000e90:	2800      	cmp	r0, #0
 8000e92:	f000 80d1 	beq.w	8001038 <__udivmoddi4+0x2f4>
 8000e96:	4698      	mov	r8, r3
 8000e98:	1b12      	subs	r2, r2, r4
 8000e9a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e9e:	e79d      	b.n	8000ddc <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa08 f401 	lsl.w	r4, r8, r1
 8000eaa:	fa00 f901 	lsl.w	r9, r0, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	fa28 f806 	lsr.w	r8, r8, r6
 8000eb6:	408a      	lsls	r2, r1
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	fa20 f306 	lsr.w	r3, r0, r6
 8000ebe:	0c38      	lsrs	r0, r7, #16
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	fbb8 fef0 	udiv	lr, r8, r0
 8000ecc:	fb00 881e 	mls	r8, r0, lr, r8
 8000ed0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ed4:	fb0e f80c 	mul.w	r8, lr, ip
 8000ed8:	45a0      	cmp	r8, r4
 8000eda:	d90e      	bls.n	8000efa <__udivmoddi4+0x1b6>
 8000edc:	193c      	adds	r4, r7, r4
 8000ede:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ee2:	bf2c      	ite	cs
 8000ee4:	f04f 0b01 	movcs.w	fp, #1
 8000ee8:	f04f 0b00 	movcc.w	fp, #0
 8000eec:	45a0      	cmp	r8, r4
 8000eee:	d903      	bls.n	8000ef8 <__udivmoddi4+0x1b4>
 8000ef0:	f1bb 0f00 	cmp.w	fp, #0
 8000ef4:	f000 80b8 	beq.w	8001068 <__udivmoddi4+0x324>
 8000ef8:	46d6      	mov	lr, sl
 8000efa:	eba4 0408 	sub.w	r4, r4, r8
 8000efe:	fa1f f883 	uxth.w	r8, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d90e      	bls.n	8000f34 <__udivmoddi4+0x1f0>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f1c:	bf2c      	ite	cs
 8000f1e:	f04f 0801 	movcs.w	r8, #1
 8000f22:	f04f 0800 	movcc.w	r8, #0
 8000f26:	45a4      	cmp	ip, r4
 8000f28:	d903      	bls.n	8000f32 <__udivmoddi4+0x1ee>
 8000f2a:	f1b8 0f00 	cmp.w	r8, #0
 8000f2e:	f000 809f 	beq.w	8001070 <__udivmoddi4+0x32c>
 8000f32:	4603      	mov	r3, r0
 8000f34:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f38:	eba4 040c 	sub.w	r4, r4, ip
 8000f3c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f40:	4564      	cmp	r4, ip
 8000f42:	4673      	mov	r3, lr
 8000f44:	46e0      	mov	r8, ip
 8000f46:	d302      	bcc.n	8000f4e <__udivmoddi4+0x20a>
 8000f48:	d107      	bne.n	8000f5a <__udivmoddi4+0x216>
 8000f4a:	45f1      	cmp	r9, lr
 8000f4c:	d205      	bcs.n	8000f5a <__udivmoddi4+0x216>
 8000f4e:	ebbe 0302 	subs.w	r3, lr, r2
 8000f52:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f56:	3801      	subs	r0, #1
 8000f58:	46e0      	mov	r8, ip
 8000f5a:	b15d      	cbz	r5, 8000f74 <__udivmoddi4+0x230>
 8000f5c:	ebb9 0203 	subs.w	r2, r9, r3
 8000f60:	eb64 0408 	sbc.w	r4, r4, r8
 8000f64:	fa04 f606 	lsl.w	r6, r4, r6
 8000f68:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	431e      	orrs	r6, r3
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e736      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f78:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7c:	0c01      	lsrs	r1, r0, #16
 8000f7e:	4614      	mov	r4, r2
 8000f80:	b280      	uxth	r0, r0
 8000f82:	4696      	mov	lr, r2
 8000f84:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f88:	2620      	movs	r6, #32
 8000f8a:	4690      	mov	r8, r2
 8000f8c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f90:	4610      	mov	r0, r2
 8000f92:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f96:	eba3 0308 	sub.w	r3, r3, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e74b      	b.n	8000e38 <__udivmoddi4+0xf4>
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	f1c6 0320 	rsb	r3, r6, #32
 8000fa6:	fa01 f206 	lsl.w	r2, r1, r6
 8000faa:	fa21 f803 	lsr.w	r8, r1, r3
 8000fae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fb2:	fa20 f303 	lsr.w	r3, r0, r3
 8000fb6:	b2bc      	uxth	r4, r7
 8000fb8:	40b0      	lsls	r0, r6
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	0c02      	lsrs	r2, r0, #16
 8000fbe:	0c19      	lsrs	r1, r3, #16
 8000fc0:	b280      	uxth	r0, r0
 8000fc2:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fc6:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fca:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fce:	fb09 f804 	mul.w	r8, r9, r4
 8000fd2:	4588      	cmp	r8, r1
 8000fd4:	d951      	bls.n	800107a <__udivmoddi4+0x336>
 8000fd6:	1879      	adds	r1, r7, r1
 8000fd8:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000fdc:	bf2c      	ite	cs
 8000fde:	f04f 0a01 	movcs.w	sl, #1
 8000fe2:	f04f 0a00 	movcc.w	sl, #0
 8000fe6:	4588      	cmp	r8, r1
 8000fe8:	d902      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000fea:	f1ba 0f00 	cmp.w	sl, #0
 8000fee:	d031      	beq.n	8001054 <__udivmoddi4+0x310>
 8000ff0:	eba1 0108 	sub.w	r1, r1, r8
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	fb0e 1119 	mls	r1, lr, r9, r1
 8001000:	b29b      	uxth	r3, r3
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	4543      	cmp	r3, r8
 8001008:	d235      	bcs.n	8001076 <__udivmoddi4+0x332>
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001010:	bf2c      	ite	cs
 8001012:	f04f 0a01 	movcs.w	sl, #1
 8001016:	f04f 0a00 	movcc.w	sl, #0
 800101a:	4543      	cmp	r3, r8
 800101c:	d2bb      	bcs.n	8000f96 <__udivmoddi4+0x252>
 800101e:	f1ba 0f00 	cmp.w	sl, #0
 8001022:	d1b8      	bne.n	8000f96 <__udivmoddi4+0x252>
 8001024:	f1a9 0102 	sub.w	r1, r9, #2
 8001028:	443b      	add	r3, r7
 800102a:	e7b4      	b.n	8000f96 <__udivmoddi4+0x252>
 800102c:	1a84      	subs	r4, r0, r2
 800102e:	eb68 0203 	sbc.w	r2, r8, r3
 8001032:	2001      	movs	r0, #1
 8001034:	4696      	mov	lr, r2
 8001036:	e6eb      	b.n	8000e10 <__udivmoddi4+0xcc>
 8001038:	443a      	add	r2, r7
 800103a:	f1a8 0802 	sub.w	r8, r8, #2
 800103e:	e72b      	b.n	8000e98 <__udivmoddi4+0x154>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e710      	b.n	8000e6a <__udivmoddi4+0x126>
 8001048:	3902      	subs	r1, #2
 800104a:	443b      	add	r3, r7
 800104c:	e6a9      	b.n	8000da2 <__udivmoddi4+0x5e>
 800104e:	443a      	add	r2, r7
 8001050:	3802      	subs	r0, #2
 8001052:	e6be      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8001054:	eba7 0808 	sub.w	r8, r7, r8
 8001058:	f1a9 0c02 	sub.w	ip, r9, #2
 800105c:	4441      	add	r1, r8
 800105e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001062:	fb09 f804 	mul.w	r8, r9, r4
 8001066:	e7c9      	b.n	8000ffc <__udivmoddi4+0x2b8>
 8001068:	f1ae 0e02 	sub.w	lr, lr, #2
 800106c:	443c      	add	r4, r7
 800106e:	e744      	b.n	8000efa <__udivmoddi4+0x1b6>
 8001070:	3b02      	subs	r3, #2
 8001072:	443c      	add	r4, r7
 8001074:	e75e      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8001076:	4649      	mov	r1, r9
 8001078:	e78d      	b.n	8000f96 <__udivmoddi4+0x252>
 800107a:	eba1 0108 	sub.w	r1, r1, r8
 800107e:	46cc      	mov	ip, r9
 8001080:	fbb1 f9fe 	udiv	r9, r1, lr
 8001084:	fb09 f804 	mul.w	r8, r9, r4
 8001088:	e7b8      	b.n	8000ffc <__udivmoddi4+0x2b8>
 800108a:	bf00      	nop

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <ADXL362_CS_Low>:

/**
 * @brief  Assert chip select (active low)
 */
static void ADXL362_CS_Low(adxl362_ctx_t *ctx)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6858      	ldr	r0, [r3, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	891b      	ldrh	r3, [r3, #8]
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	f003 fb82 	bl	80047ac <HAL_GPIO_WritePin>
  /* Delay for CS setup time (tCSS min 5ns, using ~2us for safety) */
  for (volatile int i = 0; i < 32; i++);  // ~2us delay
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	e002      	b.n	80010b4 <ADXL362_CS_Low+0x24>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b1f      	cmp	r3, #31
 80010b8:	ddf9      	ble.n	80010ae <ADXL362_CS_Low+0x1e>
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <ADXL362_CS_High>:

/**
 * @brief  Deassert chip select
 */
static void ADXL362_CS_High(adxl362_ctx_t *ctx)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Delay for CS hold time (tCSH min 10ns, using ~2us for safety) */
  for (volatile int i = 0; i < 32; i++);  // ~2us delay
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e002      	b.n	80010d8 <ADXL362_CS_High+0x14>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b1f      	cmp	r3, #31
 80010dc:	ddf9      	ble.n	80010d2 <ADXL362_CS_High+0xe>
  HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6858      	ldr	r0, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	891b      	ldrh	r3, [r3, #8]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	f003 fb5f 	bl	80047ac <HAL_GPIO_WritePin>
  /* Additional delay between transactions */
  for (volatile int i = 0; i < 32; i++);  // ~2us delay after CS goes high
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	e002      	b.n	80010fa <ADXL362_CS_High+0x36>
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	ddf9      	ble.n	80010f4 <ADXL362_CS_High+0x30>
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <ADXL362_ReadReg>:

/**
 * @brief  Read single register from ADXL362
 */
static uint8_t ADXL362_ReadReg(adxl362_ctx_t *ctx, uint8_t reg)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af02      	add	r7, sp, #8
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	70fb      	strb	r3, [r7, #3]
  /* ADXL362 requires continuous SPI transaction: send command+addr, then receive data */
  uint8_t tx_buf[3] = {ADXL362_READ_REG, reg, 0x00};  // 0x00 is dummy byte to clock out data
 8001116:	230b      	movs	r3, #11
 8001118:	733b      	strb	r3, [r7, #12]
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	737b      	strb	r3, [r7, #13]
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
  uint8_t rx_buf[3] = {0};
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2100      	movs	r1, #0
 8001128:	460a      	mov	r2, r1
 800112a:	801a      	strh	r2, [r3, #0]
 800112c:	460a      	mov	r2, r1
 800112e:	709a      	strb	r2, [r3, #2]

  ADXL362_CS_Low(ctx);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ffad 	bl	8001090 <ADXL362_CS_Low>
  HAL_SPI_TransmitReceive(ctx->hspi, tx_buf, rx_buf, 3, 100);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	f107 0208 	add.w	r2, r7, #8
 800113e:	f107 010c 	add.w	r1, r7, #12
 8001142:	2364      	movs	r3, #100	@ 0x64
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2303      	movs	r3, #3
 8001148:	f009 f8da 	bl	800a300 <HAL_SPI_TransmitReceive>
  ADXL362_CS_High(ctx);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ffb9 	bl	80010c4 <ADXL362_CS_High>

  return rx_buf[2];  // Data is received on the 3rd byte
 8001152:	7abb      	ldrb	r3, [r7, #10]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <ADXL362_ReadRegs>:

/**
 * @brief  Read multiple registers from ADXL362
 */
static void ADXL362_ReadRegs(adxl362_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t len)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b099      	sub	sp, #100	@ 0x64
 8001160:	af02      	add	r7, sp, #8
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	461a      	mov	r2, r3
 8001168:	460b      	mov	r3, r1
 800116a:	72fb      	strb	r3, [r7, #11]
 800116c:	4613      	mov	r3, r2
 800116e:	72bb      	strb	r3, [r7, #10]
  /* ADXL362 requires continuous SPI transaction */
  /* Allocate buffer for command (2 bytes) + data (len bytes) */
  uint8_t tx_buf[32] = {0};  // Max buffer size (sufficient for typical reads)
 8001170:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001174:	2220      	movs	r2, #32
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f00c fdb1 	bl	800dce0 <memset>
  uint8_t rx_buf[32] = {0};
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	2220      	movs	r2, #32
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f00c fdaa 	bl	800dce0 <memset>

  if (len > 30) return;  // Safety check: ensure we don't overflow buffer
 800118c:	7abb      	ldrb	r3, [r7, #10]
 800118e:	2b1e      	cmp	r3, #30
 8001190:	d834      	bhi.n	80011fc <ADXL362_ReadRegs+0xa0>

  tx_buf[0] = ADXL362_READ_REG;
 8001192:	230b      	movs	r3, #11
 8001194:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  tx_buf[1] = reg;
 8001198:	7afb      	ldrb	r3, [r7, #11]
 800119a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  /* Rest of tx_buf is already zeroed (dummy bytes to clock out data) */

  ADXL362_CS_Low(ctx);
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff ff76 	bl	8001090 <ADXL362_CS_Low>
  HAL_SPI_TransmitReceive(ctx->hspi, tx_buf, rx_buf, 2 + len, 100);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	7abb      	ldrb	r3, [r7, #10]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3302      	adds	r3, #2
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f107 0214 	add.w	r2, r7, #20
 80011b4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80011b8:	2464      	movs	r4, #100	@ 0x64
 80011ba:	9400      	str	r4, [sp, #0]
 80011bc:	f009 f8a0 	bl	800a300 <HAL_SPI_TransmitReceive>
  ADXL362_CS_High(ctx);
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff ff7f 	bl	80010c4 <ADXL362_CS_High>

  /* Copy received data (skip first 2 bytes which are command echo) */
  for (uint8_t i = 0; i < len; i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80011cc:	e010      	b.n	80011f0 <ADXL362_ReadRegs+0x94>
  {
    data[i] = rx_buf[2 + i];
 80011ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011d2:	1c9a      	adds	r2, r3, #2
 80011d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	440b      	add	r3, r1
 80011dc:	3258      	adds	r2, #88	@ 0x58
 80011de:	443a      	add	r2, r7
 80011e0:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80011e4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < len; i++)
 80011e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80011ea:	3301      	adds	r3, #1
 80011ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80011f0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80011f4:	7abb      	ldrb	r3, [r7, #10]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3e9      	bcc.n	80011ce <ADXL362_ReadRegs+0x72>
 80011fa:	e000      	b.n	80011fe <ADXL362_ReadRegs+0xa2>
  if (len > 30) return;  // Safety check: ensure we don't overflow buffer
 80011fc:	bf00      	nop
  }
}
 80011fe:	375c      	adds	r7, #92	@ 0x5c
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}

08001204 <ADXL362_WriteReg>:

/**
 * @brief  Write single register to ADXL362
 */
static uint8_t ADXL362_WriteReg(adxl362_ctx_t *ctx, uint8_t reg, uint8_t value)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
 8001210:	4613      	mov	r3, r2
 8001212:	70bb      	strb	r3, [r7, #2]
  uint8_t cmd[3] = {ADXL362_WRITE_REG, reg, value};
 8001214:	230a      	movs	r3, #10
 8001216:	733b      	strb	r3, [r7, #12]
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	737b      	strb	r3, [r7, #13]
 800121c:	78bb      	ldrb	r3, [r7, #2]
 800121e:	73bb      	strb	r3, [r7, #14]

  ADXL362_CS_Low(ctx);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff35 	bl	8001090 <ADXL362_CS_Low>
  HAL_StatusTypeDef status = HAL_SPI_Transmit(ctx->hspi, cmd, 3, 100);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	2364      	movs	r3, #100	@ 0x64
 8001230:	2203      	movs	r2, #3
 8001232:	f008 fe51 	bl	8009ed8 <HAL_SPI_Transmit>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]
  ADXL362_CS_High(ctx);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff42 	bl	80010c4 <ADXL362_CS_High>

  return (status == HAL_OK) ? 1 : 0;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf0c      	ite	eq
 8001246:	2301      	moveq	r3, #1
 8001248:	2300      	movne	r3, #0
 800124a:	b2db      	uxtb	r3, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <ADXL362_SoftReset>:

/**
 * @brief  Soft reset ADXL362
 */
uint8_t ADXL362_SoftReset(adxl362_ctx_t *ctx)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if (!ADXL362_WriteReg(ctx, ADXL362_REG_SOFT_RESET, ADXL362_RESET_KEY))
 800125c:	2252      	movs	r2, #82	@ 0x52
 800125e:	211f      	movs	r1, #31
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffcf 	bl	8001204 <ADXL362_WriteReg>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <ADXL362_SoftReset+0x1c>
  {
    return 0;
 800126c:	2300      	movs	r3, #0
 800126e:	e011      	b.n	8001294 <ADXL362_SoftReset+0x40>
  }

  /* Wait for reset to complete (datasheet: 0.5ms required) */
  HAL_Delay(10);
 8001270:	200a      	movs	r0, #10
 8001272:	f002 fe7b 	bl	8003f6c <HAL_Delay>

  /* Verify reset by checking register is readable (not stuck at 0x00 or 0xFF)
   * Note: Reset default value varies by chip revision (0x13 on some, different on others)
   * As long as we can read a valid value, reset was successful */
  uint8_t filter_ctl = ADXL362_ReadReg(ctx, ADXL362_REG_FILTER_CTL);
 8001276:	212c      	movs	r1, #44	@ 0x2c
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff46 	bl	800110a <ADXL362_ReadReg>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
  if (filter_ctl == 0x00 || filter_ctl == 0xFF)
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <ADXL362_SoftReset+0x3a>
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2bff      	cmp	r3, #255	@ 0xff
 800128c:	d101      	bne.n	8001292 <ADXL362_SoftReset+0x3e>
  {
    return 0;  // Communication error
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <ADXL362_SoftReset+0x40>
  }

  return 1;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <ADXL362_ReadDeviceIDs>:

/**
 * @brief  Read device ID registers for debugging
 */
void ADXL362_ReadDeviceIDs(adxl362_ctx_t *ctx, uint8_t *devid_ad, uint8_t *devid_mst, uint8_t *partid)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	603b      	str	r3, [r7, #0]
  *devid_ad = ADXL362_ReadReg(ctx, ADXL362_REG_DEVID_AD);
 80012aa:	2100      	movs	r1, #0
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f7ff ff2c 	bl	800110a <ADXL362_ReadReg>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	701a      	strb	r2, [r3, #0]
  *devid_mst = ADXL362_ReadReg(ctx, ADXL362_REG_DEVID_MST);
 80012ba:	2101      	movs	r1, #1
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7ff ff24 	bl	800110a <ADXL362_ReadReg>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	701a      	strb	r2, [r3, #0]
  *partid = ADXL362_ReadReg(ctx, ADXL362_REG_PARTID);
 80012ca:	2102      	movs	r1, #2
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f7ff ff1c 	bl	800110a <ADXL362_ReadReg>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	701a      	strb	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <ADXL362_CheckDevice>:

/**
 * @brief  Check if ADXL362 device is present
 */
uint8_t ADXL362_CheckDevice(adxl362_ctx_t *ctx)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  uint8_t devid_ad = ADXL362_ReadReg(ctx, ADXL362_REG_DEVID_AD);
 80012ea:	2100      	movs	r1, #0
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff0c 	bl	800110a <ADXL362_ReadReg>
 80012f2:	4603      	mov	r3, r0
 80012f4:	73fb      	strb	r3, [r7, #15]
  uint8_t devid_mst = ADXL362_ReadReg(ctx, ADXL362_REG_DEVID_MST);
 80012f6:	2101      	movs	r1, #1
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff06 	bl	800110a <ADXL362_ReadReg>
 80012fe:	4603      	mov	r3, r0
 8001300:	73bb      	strb	r3, [r7, #14]
  uint8_t partid = ADXL362_ReadReg(ctx, ADXL362_REG_PARTID);
 8001302:	2102      	movs	r1, #2
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff00 	bl	800110a <ADXL362_ReadReg>
 800130a:	4603      	mov	r3, r0
 800130c:	737b      	strb	r3, [r7, #13]

  /* Check analog device ID and manufacturer ID (these are fixed) */
  if (devid_ad != ADXL362_DEVICE_AD)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2bad      	cmp	r3, #173	@ 0xad
 8001312:	d001      	beq.n	8001318 <ADXL362_CheckDevice+0x36>
    return 0;
 8001314:	2300      	movs	r3, #0
 8001316:	e00d      	b.n	8001334 <ADXL362_CheckDevice+0x52>
  if (devid_mst != ADXL362_DEVICE_MST)
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	2b1d      	cmp	r3, #29
 800131c:	d001      	beq.n	8001322 <ADXL362_CheckDevice+0x40>
    return 0;
 800131e:	2300      	movs	r3, #0
 8001320:	e008      	b.n	8001334 <ADXL362_CheckDevice+0x52>

  /* PARTID can vary between chip revisions (0xF2, 0xF7, etc.)
   * Just verify it's not 0x00 or 0xFF (communication error) */
  if (partid == 0x00 || partid == 0xFF)
 8001322:	7b7b      	ldrb	r3, [r7, #13]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <ADXL362_CheckDevice+0x4c>
 8001328:	7b7b      	ldrb	r3, [r7, #13]
 800132a:	2bff      	cmp	r3, #255	@ 0xff
 800132c:	d101      	bne.n	8001332 <ADXL362_CheckDevice+0x50>
    return 0;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <ADXL362_CheckDevice+0x52>

  return 1;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <ADXL362_Init>:
 * @note   Mode 0: Ultra-low power wakeup mode (6 Hz, ultralow noise)
 *         Mode 1: Moderate performance measurement mode (50 Hz, normal noise)
 *         Mode 2: High performance measurement mode (100 Hz, normal noise)
 */
uint8_t ADXL362_Init(adxl362_ctx_t *ctx)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Perform soft reset */
  if (!ADXL362_SoftReset(ctx))
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff85 	bl	8001254 <ADXL362_SoftReset>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <ADXL362_Init+0x18>
  {
    return 0;
 8001350:	2300      	movs	r3, #0
 8001352:	e025      	b.n	80013a0 <ADXL362_Init+0x64>
  }

  /* Check device ID */
  if (!ADXL362_CheckDevice(ctx))
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ffc4 	bl	80012e2 <ADXL362_CheckDevice>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <ADXL362_Init+0x28>
  {
    return 0;
 8001360:	2300      	movs	r3, #0
 8001362:	e01d      	b.n	80013a0 <ADXL362_Init+0x64>
  }

#if (IMU_PERFORMANCE_MODE == 0)
  /* Mode 0: Absolute Lowest Power - Wakeup mode (6 Hz) with ultralow noise */
  uint8_t filter_ctl = ADXL362_FILTER_CTL_RANGE(ADXL362_RANGE_2G) |
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
                       ADXL362_FILTER_CTL_ODR(ADXL362_ODR_12_5_HZ);
  if (!ADXL362_WriteReg(ctx, ADXL362_REG_FILTER_CTL, filter_ctl))
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	461a      	mov	r2, r3
 800136c:	212c      	movs	r1, #44	@ 0x2c
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff48 	bl	8001204 <ADXL362_WriteReg>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <ADXL362_Init+0x42>
  {
    return 0;
 800137a:	2300      	movs	r3, #0
 800137c:	e010      	b.n	80013a0 <ADXL362_Init+0x64>
  }

  /* Wakeup mode: ultra-low power ~0.27µA, 6 Hz sampling, ultralow noise */
  uint8_t power_ctl = ADXL362_POWER_CTL_WAKEUP |
 800137e:	232a      	movs	r3, #42	@ 0x2a
 8001380:	73bb      	strb	r3, [r7, #14]
                      ADXL362_POWER_CTL_LOW_NOISE(ADXL362_NOISE_MODE_ULTRALOW) |
                      ADXL362_POWER_CTL_MEASURE(ADXL362_MEASURE_ON);
  if (!ADXL362_WriteReg(ctx, ADXL362_REG_POWER_CTL, power_ctl))
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	461a      	mov	r2, r3
 8001386:	212d      	movs	r1, #45	@ 0x2d
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff3b 	bl	8001204 <ADXL362_WriteReg>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <ADXL362_Init+0x5c>
  {
    return 0;
 8001394:	2300      	movs	r3, #0
 8001396:	e003      	b.n	80013a0 <ADXL362_Init+0x64>
    return 0;
  }
#endif

  /* Small delay for sensor to stabilize */
  HAL_Delay(10);
 8001398:	200a      	movs	r0, #10
 800139a:	f002 fde7 	bl	8003f6c <HAL_Delay>

  return 1;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <ADXL362_ReadData>:
 * @brief  Read acceleration data from ADXL362 (full 12-bit resolution)
 * @param  accel_raw: Array to store X, Y, Z values [3]
 * @note   ADXL362 12-bit data is positioned in upper bits [15:4] of 16-bit registers
 */
void ADXL362_ReadData(adxl362_ctx_t *ctx, int16_t *accel_raw)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint8_t data[6];

  /* Read 6 bytes starting from XDATA_L: X_L, X_H, Y_L, Y_H, Z_L, Z_H */
  ADXL362_ReadRegs(ctx, ADXL362_REG_XDATA_L, data, 6);
 80013b2:	f107 020c 	add.w	r2, r7, #12
 80013b6:	2306      	movs	r3, #6
 80013b8:	210e      	movs	r1, #14
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fece 	bl	800115c <ADXL362_ReadRegs>

  /* Combine bytes - note: byte order may be implementation-specific
   * for this particular SPI configuration */
  int16_t x_raw = (int16_t)((data[0] << 8) | data[1]);
 80013c0:	7b3b      	ldrb	r3, [r7, #12]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	7b7b      	ldrb	r3, [r7, #13]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	82fb      	strh	r3, [r7, #22]
  int16_t y_raw = (int16_t)((data[2] << 8) | data[3]);
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	82bb      	strh	r3, [r7, #20]
  int16_t z_raw = (int16_t)((data[4] << 8) | data[5]);
 80013e0:	7c3b      	ldrb	r3, [r7, #16]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7c7b      	ldrb	r3, [r7, #17]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	827b      	strh	r3, [r7, #18]

  /* ADXL362 places 12-bit data in bits [15:4] with LSBs in [3:0]
   * Shift right by 4 to extract the meaningful 12-bit value
   * This aligns the scale with 1 mg/LSB sensitivity */
  accel_raw[0] = x_raw >> 4;
 80013f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013f4:	111b      	asrs	r3, r3, #4
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	801a      	strh	r2, [r3, #0]
  accel_raw[1] = y_raw >> 4;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	3302      	adds	r3, #2
 8001400:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001404:	1112      	asrs	r2, r2, #4
 8001406:	b212      	sxth	r2, r2
 8001408:	801a      	strh	r2, [r3, #0]
  accel_raw[2] = z_raw >> 4;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3304      	adds	r3, #4
 800140e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001412:	1112      	asrs	r2, r2, #4
 8001414:	b212      	sxth	r2, r2
 8001416:	801a      	strh	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <ADXL362_RawToMg>:

/**
 * @brief  Convert raw value to millig (mg)
 */
float ADXL362_RawToMg(int16_t raw_value, uint8_t range)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]
  float sensitivity;

  switch (range)
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d00e      	beq.n	8001454 <ADXL362_RawToMg+0x34>
 8001436:	2b02      	cmp	r3, #2
 8001438:	dc10      	bgt.n	800145c <ADXL362_RawToMg+0x3c>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <ADXL362_RawToMg+0x24>
 800143e:	2b01      	cmp	r3, #1
 8001440:	d004      	beq.n	800144c <ADXL362_RawToMg+0x2c>
 8001442:	e00b      	b.n	800145c <ADXL362_RawToMg+0x3c>
  {
    case ADXL362_RANGE_2G:
      sensitivity = ADXL362_2G_SENSITIVITY;
 8001444:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001448:	60fb      	str	r3, [r7, #12]
      break;
 800144a:	e00b      	b.n	8001464 <ADXL362_RawToMg+0x44>
    case ADXL362_RANGE_4G:
      sensitivity = ADXL362_4G_SENSITIVITY;
 800144c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001450:	60fb      	str	r3, [r7, #12]
      break;
 8001452:	e007      	b.n	8001464 <ADXL362_RawToMg+0x44>
    case ADXL362_RANGE_8G:
      sensitivity = ADXL362_8G_SENSITIVITY;
 8001454:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001458:	60fb      	str	r3, [r7, #12]
      break;
 800145a:	e003      	b.n	8001464 <ADXL362_RawToMg+0x44>
    default:
      sensitivity = ADXL362_2G_SENSITIVITY;
 800145c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001460:	60fb      	str	r3, [r7, #12]
      break;
 8001462:	bf00      	nop
  }

  return (float)raw_value * sensitivity;
 8001464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001470:	edd7 7a03 	vldr	s15, [r7, #12]
 8001474:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8001486:	b590      	push	{r4, r7, lr}
 8001488:	b087      	sub	sp, #28
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	460b      	mov	r3, r1
 8001494:	72fb      	strb	r3, [r7, #11]
 8001496:	4613      	mov	r3, r2
 8001498:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <lis2dw12_read_reg+0x20>
  {
    return -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a4:	e009      	b.n	80014ba <lis2dw12_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	685c      	ldr	r4, [r3, #4]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	68d8      	ldr	r0, [r3, #12]
 80014ae:	893b      	ldrh	r3, [r7, #8]
 80014b0:	7af9      	ldrb	r1, [r7, #11]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	47a0      	blx	r4
 80014b6:	6178      	str	r0, [r7, #20]

  return ret;
 80014b8:	697b      	ldr	r3, [r7, #20]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}

080014c2 <lis2dw12_write_reg>:
  *
  */
int32_t __weak lis2dw12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 80014c2:	b590      	push	{r4, r7, lr}
 80014c4:	b087      	sub	sp, #28
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	461a      	mov	r2, r3
 80014ce:	460b      	mov	r3, r1
 80014d0:	72fb      	strb	r3, [r7, #11]
 80014d2:	4613      	mov	r3, r2
 80014d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <lis2dw12_write_reg+0x20>
  {
    return -1;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e0:	e009      	b.n	80014f6 <lis2dw12_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681c      	ldr	r4, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	68d8      	ldr	r0, [r3, #12]
 80014ea:	893b      	ldrh	r3, [r7, #8]
 80014ec:	7af9      	ldrb	r1, [r7, #11]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	47a0      	blx	r4
 80014f2:	6178      	str	r0, [r7, #20]

  return ret;
 80014f4:	697b      	ldr	r3, [r7, #20]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	371c      	adds	r7, #28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd90      	pop	{r4, r7, pc}
	...

08001500 <lis2dw12_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lis2dw12_from_fs4_to_mg(int16_t lsb)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 800150a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001516:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800152c <lis2dw12_from_fs4_to_mg+0x2c>
 800151a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	3df9db23 	.word	0x3df9db23

08001530 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(const stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800153c:	f107 0210 	add.w	r2, r7, #16
 8001540:	2301      	movs	r3, #1
 8001542:	2120      	movs	r1, #32
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff9e 	bl	8001486 <lis2dw12_read_reg>
 800154a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d118      	bne.n	8001584 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	b2da      	uxtb	r2, r3
 800155c:	7c3b      	ldrb	r3, [r7, #16]
 800155e:	f362 0383 	bfi	r3, r2, #2, #2
 8001562:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	b2da      	uxtb	r2, r3
 800156c:	7c3b      	ldrb	r3, [r7, #16]
 800156e:	f362 0301 	bfi	r3, r2, #0, #2
 8001572:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8001574:	f107 0210 	add.w	r2, r7, #16
 8001578:	2301      	movs	r3, #1
 800157a:	2120      	movs	r1, #32
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ffa0 	bl	80014c2 <lis2dw12_write_reg>
 8001582:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d107      	bne.n	800159a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	2301      	movs	r3, #1
 8001590:	2125      	movs	r1, #37	@ 0x25
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff77 	bl	8001486 <lis2dw12_read_reg>
 8001598:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d110      	bne.n	80015c2 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	f362 0382 	bfi	r3, r2, #2, #1
 80015b0:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80015b2:	f107 020c 	add.w	r2, r7, #12
 80015b6:	2301      	movs	r3, #1
 80015b8:	2125      	movs	r1, #37	@ 0x25
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ff81 	bl	80014c2 <lis2dw12_write_reg>
 80015c0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80015c2:	697b      	ldr	r3, [r7, #20]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(const stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80015d8:	f107 0210 	add.w	r2, r7, #16
 80015dc:	2301      	movs	r3, #1
 80015de:	2120      	movs	r1, #32
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff50 	bl	8001486 <lis2dw12_read_reg>
 80015e6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10f      	bne.n	800160e <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	7c3b      	ldrb	r3, [r7, #16]
 80015f8:	f362 1307 	bfi	r3, r2, #4, #4
 80015fc:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80015fe:	f107 0210 	add.w	r2, r7, #16
 8001602:	2301      	movs	r3, #1
 8001604:	2120      	movs	r1, #32
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff5b 	bl	80014c2 <lis2dw12_write_reg>
 800160c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d107      	bne.n	8001624 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8001614:	f107 020c 	add.w	r2, r7, #12
 8001618:	2301      	movs	r3, #1
 800161a:	2122      	movs	r1, #34	@ 0x22
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff32 	bl	8001486 <lis2dw12_read_reg>
 8001622:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d110      	bne.n	800164c <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	b2da      	uxtb	r2, r3
 8001634:	7b3b      	ldrb	r3, [r7, #12]
 8001636:	f362 0301 	bfi	r3, r2, #0, #2
 800163a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800163c:	f107 020c 	add.w	r2, r7, #12
 8001640:	2301      	movs	r3, #1
 8001642:	2122      	movs	r1, #34	@ 0x22
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff3c 	bl	80014c2 <lis2dw12_write_reg>
 800164a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800164c:	697b      	ldr	r3, [r7, #20]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8001662:	f107 0208 	add.w	r2, r7, #8
 8001666:	2301      	movs	r3, #1
 8001668:	2121      	movs	r1, #33	@ 0x21
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff0b 	bl	8001486 <lis2dw12_read_reg>
 8001670:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10f      	bne.n	8001698 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	7a3b      	ldrb	r3, [r7, #8]
 8001682:	f362 03c3 	bfi	r3, r2, #3, #1
 8001686:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	2301      	movs	r3, #1
 800168e:	2121      	movs	r1, #33	@ 0x21
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff16 	bl	80014c2 <lis2dw12_write_reg>
 8001696:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001698:	68fb      	ldr	r3, [r7, #12]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(const stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	2301      	movs	r3, #1
 80016b4:	2125      	movs	r1, #37	@ 0x25
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fee5 	bl	8001486 <lis2dw12_read_reg>
 80016bc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10f      	bne.n	80016e4 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	7a3b      	ldrb	r3, [r7, #8]
 80016ce:	f362 1305 	bfi	r3, r2, #4, #2
 80016d2:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 80016d4:	f107 0208 	add.w	r2, r7, #8
 80016d8:	2301      	movs	r3, #1
 80016da:	2125      	movs	r1, #37	@ 0x25
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fef0 	bl	80014c2 <lis2dw12_write_reg>
 80016e2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016e4:	68fb      	ldr	r3, [r7, #12]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <lis2dw12_status_reg_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_status_reg_get(const stmdev_ctx_t *ctx,
                                lis2dw12_status_t *val)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b084      	sub	sp, #16
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_STATUS, (uint8_t *) val, 1);
 80016f8:	2301      	movs	r3, #1
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	2127      	movs	r1, #39	@ 0x27
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fec1 	bl	8001486 <lis2dw12_read_reg>
 8001704:	60f8      	str	r0, [r7, #12]

  return ret;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 800171a:	f107 020c 	add.w	r2, r7, #12
 800171e:	2306      	movs	r3, #6
 8001720:	2128      	movs	r1, #40	@ 0x28
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff feaf 	bl	8001486 <lis2dw12_read_reg>
 8001728:	6178      	str	r0, [r7, #20]

  if (ret != 0) { return ret; }
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <lis2dw12_acceleration_raw_get+0x24>
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	e036      	b.n	80017a2 <lis2dw12_acceleration_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 8001734:	7b7b      	ldrb	r3, [r7, #13]
 8001736:	b21a      	sxth	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001742:	b29b      	uxth	r3, r3
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b29b      	uxth	r3, r3
 8001748:	7b3a      	ldrb	r2, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	b21a      	sxth	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001754:	7bfa      	ldrb	r2, [r7, #15]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	3302      	adds	r3, #2
 800175a:	b212      	sxth	r2, r2
 800175c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	3302      	adds	r3, #2
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	b29b      	uxth	r3, r3
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b29b      	uxth	r3, r3
 800176c:	7bba      	ldrb	r2, [r7, #14]
 800176e:	4413      	add	r3, r2
 8001770:	b29a      	uxth	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3302      	adds	r3, #2
 8001776:	b212      	sxth	r2, r2
 8001778:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800177a:	7c7a      	ldrb	r2, [r7, #17]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	3304      	adds	r3, #4
 8001780:	b212      	sxth	r2, r2
 8001782:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3304      	adds	r3, #4
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	b29b      	uxth	r3, r3
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b29b      	uxth	r3, r3
 8001792:	7c3a      	ldrb	r2, [r7, #16]
 8001794:	4413      	add	r3, r2
 8001796:	b29a      	uxth	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3304      	adds	r3, #4
 800179c:	b212      	sxth	r2, r2
 800179e:	801a      	strh	r2, [r3, #0]

  return ret;
 80017a0:	697b      	ldr	r3, [r7, #20]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 80017b4:	2301      	movs	r3, #1
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	210f      	movs	r1, #15
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fe63 	bl	8001486 <lis2dw12_read_reg>
 80017c0:	60f8      	str	r0, [r7, #12]

  return ret;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <lis2dw12_reset_set>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80017d8:	f107 0208 	add.w	r2, r7, #8
 80017dc:	2301      	movs	r3, #1
 80017de:	2121      	movs	r1, #33	@ 0x21
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fe50 	bl	8001486 <lis2dw12_read_reg>
 80017e6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10f      	bne.n	800180e <lis2dw12_reset_set+0x42>
  {
    reg.soft_reset = val;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	7a3b      	ldrb	r3, [r7, #8]
 80017f8:	f362 1386 	bfi	r3, r2, #6, #1
 80017fc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80017fe:	f107 0208 	add.w	r2, r7, #8
 8001802:	2301      	movs	r3, #1
 8001804:	2121      	movs	r1, #33	@ 0x21
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fe5b 	bl	80014c2 <lis2dw12_write_reg>
 800180c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <lis2dw12_reset_get>:
  * @param  val      change the values of soft_reset in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8001822:	f107 0208 	add.w	r2, r7, #8
 8001826:	2301      	movs	r3, #1
 8001828:	2121      	movs	r1, #33	@ 0x21
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fe2b 	bl	8001486 <lis2dw12_read_reg>
 8001830:	60f8      	str	r0, [r7, #12]

  if (ret != 0) { return ret; }
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <lis2dw12_reset_get+0x24>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	e007      	b.n	800184c <lis2dw12_reset_get+0x34>

  *val = reg.soft_reset;
 800183c:	7a3b      	ldrb	r3, [r7, #8]
 800183e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	701a      	strb	r2, [r3, #0]

  return ret;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <lsm6dsv_read_reg>:
  *
  */
int32_t __weak lsm6dsv_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	72fb      	strb	r3, [r7, #11]
 8001864:	4613      	mov	r3, r2
 8001866:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <lsm6dsv_read_reg+0x20>
  {
    return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001872:	e009      	b.n	8001888 <lsm6dsv_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685c      	ldr	r4, [r3, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	68d8      	ldr	r0, [r3, #12]
 800187c:	893b      	ldrh	r3, [r7, #8]
 800187e:	7af9      	ldrb	r1, [r7, #11]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	47a0      	blx	r4
 8001884:	6178      	str	r0, [r7, #20]

  return ret;
 8001886:	697b      	ldr	r3, [r7, #20]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}

08001890 <lsm6dsv_write_reg>:
  *
  */
int32_t __weak lsm6dsv_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	461a      	mov	r2, r3
 800189c:	460b      	mov	r3, r1
 800189e:	72fb      	strb	r3, [r7, #11]
 80018a0:	4613      	mov	r3, r2
 80018a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <lsm6dsv_write_reg+0x20>
  {
    return -1;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ae:	e009      	b.n	80018c4 <lsm6dsv_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681c      	ldr	r4, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	68d8      	ldr	r0, [r3, #12]
 80018b8:	893b      	ldrh	r3, [r7, #8]
 80018ba:	7af9      	ldrb	r1, [r7, #11]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	47a0      	blx	r4
 80018c0:	6178      	str	r0, [r7, #20]

  return ret;
 80018c2:	697b      	ldr	r3, [r7, #20]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}

080018cc <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <bytecpy+0x1e>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <bytecpy+0x1e>
  {
    *target = *source;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	701a      	strb	r2, [r3, #0]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <lsm6dsv_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lsm6dsv_from_fs4_to_mg(int16_t lsb)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 8001902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001924 <lsm6dsv_from_fs4_to_mg+0x2c>
 8001912:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001916:	eeb0 0a67 	vmov.f32	s0, s15
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	3df9db23 	.word	0x3df9db23

08001928 <lsm6dsv_from_fs2000_to_mdps>:
{
  return ((float_t)lsb) * 35.0f;
}

float_t lsm6dsv_from_fs2000_to_mdps(int16_t lsb)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 70.0f;
 8001932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001954 <lsm6dsv_from_fs2000_to_mdps+0x2c>
 8001942:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001946:	eeb0 0a67 	vmov.f32	s0, s15
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	428c0000 	.word	0x428c0000

08001958 <lsm6dsv_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_reset_set(const stmdev_ctx_t *ctx, lsm6dsv_reset_t val)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_func_cfg_access_t func_cfg_access;
  lsm6dsv_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8001964:	f107 020c 	add.w	r2, r7, #12
 8001968:	2301      	movs	r3, #1
 800196a:	2112      	movs	r1, #18
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff71 	bl	8001854 <lsm6dsv_read_reg>
 8001972:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001974:	f107 0210 	add.w	r2, r7, #16
 8001978:	2301      	movs	r3, #1
 800197a:	2101      	movs	r1, #1
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff69 	bl	8001854 <lsm6dsv_read_reg>
 8001982:	4602      	mov	r2, r0
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	4413      	add	r3, r2
 8001988:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <lsm6dsv_reset_set+0x3c>
  {
    return ret;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	e031      	b.n	80019f8 <lsm6dsv_reset_set+0xa0>
  }

  ctrl3.boot = (val == LSM6DSV_RESTORE_CAL_PARAM) ? 1 : 0;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	2b02      	cmp	r3, #2
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	7b3b      	ldrb	r3, [r7, #12]
 80019a2:	f362 13c7 	bfi	r3, r2, #7, #1
 80019a6:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = (val == LSM6DSV_RESTORE_CTRL_REGS) ? 1 : 0;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	7b3b      	ldrb	r3, [r7, #12]
 80019b6:	f362 0300 	bfi	r3, r2, #0, #1
 80019ba:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (val == LSM6DSV_GLOBAL_RST) ? 1 : 0;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	bf0c      	ite	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	2300      	movne	r3, #0
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	7c3b      	ldrb	r3, [r7, #16]
 80019ca:	f362 0382 	bfi	r3, r2, #2, #1
 80019ce:	743b      	strb	r3, [r7, #16]

  ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 80019d0:	f107 020c 	add.w	r2, r7, #12
 80019d4:	2301      	movs	r3, #1
 80019d6:	2112      	movs	r1, #18
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff59 	bl	8001890 <lsm6dsv_write_reg>
 80019de:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80019e0:	f107 0210 	add.w	r2, r7, #16
 80019e4:	2301      	movs	r3, #1
 80019e6:	2101      	movs	r1, #1
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff51 	bl	8001890 <lsm6dsv_write_reg>
 80019ee:	4602      	mov	r2, r0
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

  return ret;
 80019f6:	697b      	ldr	r3, [r7, #20]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <lsm6dsv_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_reset_get(const stmdev_ctx_t *ctx, lsm6dsv_reset_t *val)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  lsm6dsv_func_cfg_access_t func_cfg_access;
  lsm6dsv_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8001a0a:	f107 020c 	add.w	r2, r7, #12
 8001a0e:	2301      	movs	r3, #1
 8001a10:	2112      	movs	r1, #18
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff1e 	bl	8001854 <lsm6dsv_read_reg>
 8001a18:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001a1a:	f107 0210 	add.w	r2, r7, #16
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2101      	movs	r1, #1
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff16 	bl	8001854 <lsm6dsv_read_reg>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <lsm6dsv_reset_get+0x3a>
  {
    return ret;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	e033      	b.n	8001aa2 <lsm6dsv_reset_get+0xa2>
  }

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8001a3a:	7b3b      	ldrb	r3, [r7, #12]
 8001a3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	009a      	lsls	r2, r3, #2
 8001a44:	7b3b      	ldrb	r3, [r7, #12]
 8001a46:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	7c3a      	ldrb	r2, [r7, #16]
 8001a52:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	4413      	add	r3, r2
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d81c      	bhi.n	8001a98 <lsm6dsv_reset_get+0x98>
 8001a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a64 <lsm6dsv_reset_get+0x64>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001a79 	.word	0x08001a79
 8001a68:	08001a81 	.word	0x08001a81
 8001a6c:	08001a89 	.word	0x08001a89
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	08001a91 	.word	0x08001a91
  {
    case LSM6DSV_READY:
      *val = LSM6DSV_READY;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
      break;
 8001a7e:	e00f      	b.n	8001aa0 <lsm6dsv_reset_get+0xa0>

    case LSM6DSV_GLOBAL_RST:
      *val = LSM6DSV_GLOBAL_RST;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
      break;
 8001a86:	e00b      	b.n	8001aa0 <lsm6dsv_reset_get+0xa0>

    case LSM6DSV_RESTORE_CAL_PARAM:
      *val = LSM6DSV_RESTORE_CAL_PARAM;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	701a      	strb	r2, [r3, #0]
      break;
 8001a8e:	e007      	b.n	8001aa0 <lsm6dsv_reset_get+0xa0>

    case LSM6DSV_RESTORE_CTRL_REGS:
      *val = LSM6DSV_RESTORE_CTRL_REGS;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2204      	movs	r2, #4
 8001a94:	701a      	strb	r2, [r3, #0]
      break;
 8001a96:	e003      	b.n	8001aa0 <lsm6dsv_reset_get+0xa0>

    default:
      *val = LSM6DSV_GLOBAL_RST;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
      break;
 8001a9e:	bf00      	nop
  }

  return ret;
 8001aa0:	697b      	ldr	r3, [r7, #20]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop

08001aac <lsm6dsv_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv_mem_bank_t val)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001ab8:	f107 0208 	add.w	r2, r7, #8
 8001abc:	2301      	movs	r3, #1
 8001abe:	2101      	movs	r1, #1
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fec7 	bl	8001854 <lsm6dsv_read_reg>
 8001ac6:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <lsm6dsv_mem_bank_set+0x26>
  {
    return ret;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	e019      	b.n	8001b06 <lsm6dsv_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	7a3b      	ldrb	r3, [r7, #8]
 8001ade:	f362 1386 	bfi	r3, r2, #6, #1
 8001ae2:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	7a3b      	ldrb	r3, [r7, #8]
 8001aee:	f362 13c7 	bfi	r3, r2, #7, #1
 8001af2:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv_write_reg(ctx, LSM6DSV_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001af4:	f107 0208 	add.w	r2, r7, #8
 8001af8:	2301      	movs	r3, #1
 8001afa:	2101      	movs	r1, #1
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fec7 	bl	8001890 <lsm6dsv_write_reg>
 8001b02:	60f8      	str	r0, [r7, #12]

  return ret;
 8001b04:	68fb      	ldr	r3, [r7, #12]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <lsm6dsv_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_WHO_AM_I, val, 1);
 8001b18:	2301      	movs	r3, #1
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	210f      	movs	r1, #15
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fe98 	bl	8001854 <lsm6dsv_read_reg>
 8001b24:	60f8      	str	r0, [r7, #12]

  return ret;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <lsm6dsv_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsv_data_rate_t val)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl1_t ctrl1;
  lsm6dsv_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 8001b3c:	f107 0210 	add.w	r2, r7, #16
 8001b40:	2301      	movs	r3, #1
 8001b42:	2110      	movs	r1, #16
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fe85 	bl	8001854 <lsm6dsv_read_reg>
 8001b4a:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <lsm6dsv_xl_data_rate_set+0x26>
  {
    return ret;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	e03e      	b.n	8001bd4 <lsm6dsv_xl_data_rate_set+0xa4>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	7c3b      	ldrb	r3, [r7, #16]
 8001b60:	f362 0303 	bfi	r3, r2, #0, #4
 8001b64:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 8001b66:	f107 0210 	add.w	r2, r7, #16
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2110      	movs	r1, #16
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fe8e 	bl	8001890 <lsm6dsv_write_reg>
 8001b74:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <lsm6dsv_xl_data_rate_set+0x50>
  {
    return ret;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	e029      	b.n	8001bd4 <lsm6dsv_xl_data_rate_set+0xa4>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8001b86:	7cfb      	ldrb	r3, [r7, #19]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d022      	beq.n	8001bd2 <lsm6dsv_xl_data_rate_set+0xa2>
  {
    ret += lsm6dsv_read_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	2301      	movs	r3, #1
 8001b92:	2162      	movs	r1, #98	@ 0x62
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fe5d 	bl	8001854 <lsm6dsv_read_reg>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
    if (ret != 0)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <lsm6dsv_xl_data_rate_set+0x7c>
    {
      return ret;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	e013      	b.n	8001bd4 <lsm6dsv_xl_data_rate_set+0xa4>
    }

    haodr.haodr_sel = sel;
 8001bac:	7cfb      	ldrb	r3, [r7, #19]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	7b3b      	ldrb	r3, [r7, #12]
 8001bb6:	f362 0301 	bfi	r3, r2, #0, #2
 8001bba:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv_write_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001bbc:	f107 020c 	add.w	r2, r7, #12
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2162      	movs	r1, #98	@ 0x62
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fe63 	bl	8001890 <lsm6dsv_write_reg>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	4413      	add	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001bd2:	697b      	ldr	r3, [r7, #20]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <lsm6dsv_xl_mode_set>:
  * @param  val      XL_HIGH_PERFORMANCE_MD, XL_HIGH_ACCURACY_ODR_MD, XL_LOW_POWER_2_AVG_MD, XL_LOW_POWER_4_AVG_MD, XL_LOW_POWER_8_AVG_MD, XL_NORMAL_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_xl_mode_set(const stmdev_ctx_t *ctx, lsm6dsv_xl_mode_t val)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 8001be8:	f107 0208 	add.w	r2, r7, #8
 8001bec:	2301      	movs	r3, #1
 8001bee:	2110      	movs	r1, #16
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff fe2f 	bl	8001854 <lsm6dsv_read_reg>
 8001bf6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10f      	bne.n	8001c1e <lsm6dsv_xl_mode_set+0x42>
  {
    ctrl1.op_mode_xl = (uint8_t)val & 0x07U;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	7a3b      	ldrb	r3, [r7, #8]
 8001c08:	f362 1306 	bfi	r3, r2, #4, #3
 8001c0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL1, (uint8_t *)&ctrl1, 1);
 8001c0e:	f107 0208 	add.w	r2, r7, #8
 8001c12:	2301      	movs	r3, #1
 8001c14:	2110      	movs	r1, #16
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fe3a 	bl	8001890 <lsm6dsv_write_reg>
 8001c1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <lsm6dsv_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsv_data_rate_t val)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl2_t ctrl2;
  lsm6dsv_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8001c34:	f107 0210 	add.w	r2, r7, #16
 8001c38:	2301      	movs	r3, #1
 8001c3a:	2111      	movs	r1, #17
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff fe09 	bl	8001854 <lsm6dsv_read_reg>
 8001c42:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <lsm6dsv_gy_data_rate_set+0x26>
  {
    return ret;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	e041      	b.n	8001cd2 <lsm6dsv_gy_data_rate_set+0xaa>
  }

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	7c3b      	ldrb	r3, [r7, #16]
 8001c58:	f362 0303 	bfi	r3, r2, #0, #4
 8001c5c:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8001c5e:	f107 0210 	add.w	r2, r7, #16
 8001c62:	2301      	movs	r3, #1
 8001c64:	2111      	movs	r1, #17
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fe12 	bl	8001890 <lsm6dsv_write_reg>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4413      	add	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <lsm6dsv_gy_data_rate_set+0x56>
  {
    return ret;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	e029      	b.n	8001cd2 <lsm6dsv_gy_data_rate_set+0xaa>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8001c84:	7cfb      	ldrb	r3, [r7, #19]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d022      	beq.n	8001cd0 <lsm6dsv_gy_data_rate_set+0xa8>
  {
    ret += lsm6dsv_read_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001c8a:	f107 020c 	add.w	r2, r7, #12
 8001c8e:	2301      	movs	r3, #1
 8001c90:	2162      	movs	r1, #98	@ 0x62
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fdde 	bl	8001854 <lsm6dsv_read_reg>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
    if (ret != 0)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <lsm6dsv_gy_data_rate_set+0x82>
    {
      return ret;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	e013      	b.n	8001cd2 <lsm6dsv_gy_data_rate_set+0xaa>
    }

    haodr.haodr_sel = sel;
 8001caa:	7cfb      	ldrb	r3, [r7, #19]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	7b3b      	ldrb	r3, [r7, #12]
 8001cb4:	f362 0301 	bfi	r3, r2, #0, #2
 8001cb8:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv_write_reg(ctx, LSM6DSV_HAODR_CFG, (uint8_t *)&haodr, 1);
 8001cba:	f107 020c 	add.w	r2, r7, #12
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	2162      	movs	r1, #98	@ 0x62
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fde4 	bl	8001890 <lsm6dsv_write_reg>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	4413      	add	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001cd0:	697b      	ldr	r3, [r7, #20]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <lsm6dsv_gy_mode_set>:
  * @param  val      GY_HIGH_PERFORMANCE_MD, GY_HIGH_ACCURACY_ODR_MD, GY_SLEEP_MD, GY_LOW_POWER_MD,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_gy_mode_set(const stmdev_ctx_t *ctx, lsm6dsv_gy_mode_t val)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl2_t ctrl2;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8001ce6:	f107 0208 	add.w	r2, r7, #8
 8001cea:	2301      	movs	r3, #1
 8001cec:	2111      	movs	r1, #17
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fdb0 	bl	8001854 <lsm6dsv_read_reg>
 8001cf4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10f      	bne.n	8001d1c <lsm6dsv_gy_mode_set+0x42>
  {
    ctrl2.op_mode_g = (uint8_t)val & 0x07U;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	7a3b      	ldrb	r3, [r7, #8]
 8001d06:	f362 1306 	bfi	r3, r2, #4, #3
 8001d0a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL2, (uint8_t *)&ctrl2, 1);
 8001d0c:	f107 0208 	add.w	r2, r7, #8
 8001d10:	2301      	movs	r3, #1
 8001d12:	2111      	movs	r1, #17
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fdbb 	bl	8001890 <lsm6dsv_write_reg>
 8001d1a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <lsm6dsv_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8001d32:	f107 0208 	add.w	r2, r7, #8
 8001d36:	2301      	movs	r3, #1
 8001d38:	2112      	movs	r1, #18
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fd8a 	bl	8001854 <lsm6dsv_read_reg>
 8001d40:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10f      	bne.n	8001d68 <lsm6dsv_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	7a3b      	ldrb	r3, [r7, #8]
 8001d52:	f362 1386 	bfi	r3, r2, #6, #1
 8001d56:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL3, (uint8_t *)&ctrl3, 1);
 8001d58:	f107 0208 	add.w	r2, r7, #8
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	2112      	movs	r1, #18
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff fd95 	bl	8001890 <lsm6dsv_write_reg>
 8001d66:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d68:	68fb      	ldr	r3, [r7, #12]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <lsm6dsv_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsv_gy_full_scale_t val)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 8001d7e:	f107 0208 	add.w	r2, r7, #8
 8001d82:	2301      	movs	r3, #1
 8001d84:	2115      	movs	r1, #21
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fd64 	bl	8001854 <lsm6dsv_read_reg>
 8001d8c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10f      	bne.n	8001db4 <lsm6dsv_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	7a3b      	ldrb	r3, [r7, #8]
 8001d9e:	f362 0303 	bfi	r3, r2, #0, #4
 8001da2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL6, (uint8_t *)&ctrl6, 1);
 8001da4:	f107 0208 	add.w	r2, r7, #8
 8001da8:	2301      	movs	r3, #1
 8001daa:	2115      	movs	r1, #21
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fd6f 	bl	8001890 <lsm6dsv_write_reg>
 8001db2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001db4:	68fb      	ldr	r3, [r7, #12]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <lsm6dsv_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsv_xl_full_scale_t val)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 8001dca:	f107 0208 	add.w	r2, r7, #8
 8001dce:	2301      	movs	r3, #1
 8001dd0:	2117      	movs	r1, #23
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fd3e 	bl	8001854 <lsm6dsv_read_reg>
 8001dd8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10f      	bne.n	8001e00 <lsm6dsv_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	7a3b      	ldrb	r3, [r7, #8]
 8001dea:	f362 0301 	bfi	r3, r2, #0, #2
 8001dee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv_write_reg(ctx, LSM6DSV_CTRL8, (uint8_t *)&ctrl8, 1);
 8001df0:	f107 0208 	add.w	r2, r7, #8
 8001df4:	2301      	movs	r3, #1
 8001df6:	2117      	movs	r1, #23
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff fd49 	bl	8001890 <lsm6dsv_write_reg>
 8001dfe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e00:	68fb      	ldr	r3, [r7, #12]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <lsm6dsv_all_sources_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_all_sources_get(const stmdev_ctx_t *ctx,
                                lsm6dsv_all_sources_t *val)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b092      	sub	sp, #72	@ 0x48
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  lsm6dsv_ui_status_reg_ois_t status_reg_ois;
  lsm6dsv_status_master_t status_shub;
  uint8_t buff[8];
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8001e14:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2150      	movs	r1, #80	@ 0x50
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fd19 	bl	8001854 <lsm6dsv_read_reg>
 8001e22:	6478      	str	r0, [r7, #68]	@ 0x44
  if (ret != 0)
 8001e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <lsm6dsv_all_sources_get+0x24>
  {
    return ret;
 8001e2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e2c:	e2dc      	b.n	80023e8 <lsm6dsv_all_sources_get+0x5de>
  }
  functions_enable.dis_rst_lir_all_int = PROPERTY_ENABLE;
 8001e2e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  ret = lsm6dsv_write_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8001e3a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001e3e:	2301      	movs	r3, #1
 8001e40:	2150      	movs	r1, #80	@ 0x50
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fd24 	bl	8001890 <lsm6dsv_write_reg>
 8001e48:	6478      	str	r0, [r7, #68]	@ 0x44

  ret += lsm6dsv_read_reg(ctx, LSM6DSV_FIFO_STATUS1, (uint8_t *)&buff, 4);
 8001e4a:	f107 0208 	add.w	r2, r7, #8
 8001e4e:	2304      	movs	r3, #4
 8001e50:	211b      	movs	r1, #27
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fcfe 	bl	8001854 <lsm6dsv_read_reg>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5c:	4413      	add	r3, r2
 8001e5e:	647b      	str	r3, [r7, #68]	@ 0x44

  bytecpy((uint8_t *)&fifo_status2, &buff[1]);
 8001e60:	f107 0308 	add.w	r3, r7, #8
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fd2d 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&all_int_src, &buff[2]);
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	1c9a      	adds	r2, r3, #2
 8001e78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fd24 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&status_reg, &buff[3]);
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	1cda      	adds	r2, r3, #3
 8001e8a:	f107 0320 	add.w	r3, r7, #32
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fd1b 	bl	80018cc <bytecpy>

  val->fifo_ovr = fifo_status2.fifo_ovr_ia;
 8001e96:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e9a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001e9e:	b2d9      	uxtb	r1, r3
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	7993      	ldrb	r3, [r2, #6]
 8001ea4:	f361 1304 	bfi	r3, r1, #4, #1
 8001ea8:	7193      	strb	r3, [r2, #6]
  val->fifo_bdr = fifo_status2.counter_bdr_ia;
 8001eaa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001eae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001eb2:	b2d9      	uxtb	r1, r3
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	7993      	ldrb	r3, [r2, #6]
 8001eb8:	f361 0382 	bfi	r3, r1, #2, #1
 8001ebc:	7193      	strb	r3, [r2, #6]
  val->fifo_full = fifo_status2.fifo_full_ia;
 8001ebe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ec2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ec6:	b2d9      	uxtb	r1, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	7993      	ldrb	r3, [r2, #6]
 8001ecc:	f361 03c3 	bfi	r3, r1, #3, #1
 8001ed0:	7193      	strb	r3, [r2, #6]
  val->fifo_th = fifo_status2.fifo_wtm_ia;
 8001ed2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ed6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001eda:	b2d9      	uxtb	r1, r3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	7993      	ldrb	r3, [r2, #6]
 8001ee0:	f361 1345 	bfi	r3, r1, #5, #1
 8001ee4:	7193      	strb	r3, [r2, #6]

  val->free_fall = all_int_src.ff_ia;
 8001ee6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001eea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001eee:	b2d9      	uxtb	r1, r3
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	7813      	ldrb	r3, [r2, #0]
 8001ef4:	f361 13c7 	bfi	r3, r1, #7, #1
 8001ef8:	7013      	strb	r3, [r2, #0]
  val->wake_up = all_int_src.wu_ia;
 8001efa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001efe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f02:	b2d9      	uxtb	r1, r3
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	7853      	ldrb	r3, [r2, #1]
 8001f08:	f361 0300 	bfi	r3, r1, #0, #1
 8001f0c:	7053      	strb	r3, [r2, #1]
  val->six_d = all_int_src.d6d_ia;
 8001f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f12:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f16:	b2d9      	uxtb	r1, r3
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	7893      	ldrb	r3, [r2, #2]
 8001f1c:	f361 0382 	bfi	r3, r1, #2, #1
 8001f20:	7093      	strb	r3, [r2, #2]

  val->drdy_xl = status_reg.xlda;
 8001f22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f2a:	b2d9      	uxtb	r1, r3
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	7813      	ldrb	r3, [r2, #0]
 8001f30:	f361 0300 	bfi	r3, r1, #0, #1
 8001f34:	7013      	strb	r3, [r2, #0]
  val->drdy_gy = status_reg.gda;
 8001f36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f3e:	b2d9      	uxtb	r1, r3
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	7813      	ldrb	r3, [r2, #0]
 8001f44:	f361 0341 	bfi	r3, r1, #1, #1
 8001f48:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status_reg.tda;
 8001f4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f4e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001f52:	b2d9      	uxtb	r1, r3
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	7813      	ldrb	r3, [r2, #0]
 8001f58:	f361 0382 	bfi	r3, r1, #2, #1
 8001f5c:	7013      	strb	r3, [r2, #0]
  val->drdy_eis = status_reg.gda_eis;
 8001f5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f66:	b2d9      	uxtb	r1, r3
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	7813      	ldrb	r3, [r2, #0]
 8001f6c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001f70:	7013      	strb	r3, [r2, #0]
  val->drdy_ois = status_reg.ois_drdy;
 8001f72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f76:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001f7a:	b2d9      	uxtb	r1, r3
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	7813      	ldrb	r3, [r2, #0]
 8001f80:	f361 1304 	bfi	r3, r1, #4, #1
 8001f84:	7013      	strb	r3, [r2, #0]
  val->timestamp = status_reg.timestamp_endcount;
 8001f86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001f8e:	b2d9      	uxtb	r1, r3
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	7813      	ldrb	r3, [r2, #0]
 8001f94:	f361 1386 	bfi	r3, r1, #6, #1
 8001f98:	7013      	strb	r3, [r2, #0]

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8001f9a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	2150      	movs	r1, #80	@ 0x50
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fc56 	bl	8001854 <lsm6dsv_read_reg>
 8001fa8:	6478      	str	r0, [r7, #68]	@ 0x44
  functions_enable.dis_rst_lir_all_int = PROPERTY_DISABLE;
 8001faa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fae:	f023 0308 	bic.w	r3, r3, #8
 8001fb2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  ret += lsm6dsv_write_reg(ctx, LSM6DSV_FUNCTIONS_ENABLE, (uint8_t *)&functions_enable, 1);
 8001fb6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2150      	movs	r1, #80	@ 0x50
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fc66 	bl	8001890 <lsm6dsv_write_reg>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fc8:	4413      	add	r3, r2
 8001fca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (ret != 0)
 8001fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <lsm6dsv_all_sources_get+0x1cc>
  {
    return ret;
 8001fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd4:	e208      	b.n	80023e8 <lsm6dsv_all_sources_get+0x5de>
  }

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_UI_STATUS_REG_OIS, (uint8_t *)&buff, 8);
 8001fd6:	f107 0208 	add.w	r2, r7, #8
 8001fda:	2308      	movs	r3, #8
 8001fdc:	2144      	movs	r1, #68	@ 0x44
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fc38 	bl	8001854 <lsm6dsv_read_reg>
 8001fe4:	6478      	str	r0, [r7, #68]	@ 0x44
  if (ret != 0)
 8001fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <lsm6dsv_all_sources_get+0x1e6>
  {
    return ret;
 8001fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fee:	e1fb      	b.n	80023e8 <lsm6dsv_all_sources_get+0x5de>
  }

  bytecpy((uint8_t *)&status_reg_ois, &buff[0]);
 8001ff0:	f107 0208 	add.w	r2, r7, #8
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fc66 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&wake_up_src, &buff[1]);
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fc5d 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&tap_src, &buff[2]);
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	1c9a      	adds	r2, r3, #2
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fc54 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&d6d_src, &buff[3]);
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	1cda      	adds	r2, r3, #3
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fc4b 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&emb_func_status_mainpage, &buff[5]);
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	1d5a      	adds	r2, r3, #5
 800203c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fc42 	bl	80018cc <bytecpy>
  bytecpy((uint8_t *)&fsm_status_mainpage, &buff[6]);
 8002048:	f107 0308 	add.w	r3, r7, #8
 800204c:	1d9a      	adds	r2, r3, #6
 800204e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fc39 	bl	80018cc <bytecpy>

  val->gy_settling = status_reg_ois.gyro_settling;
 800205a:	7d3b      	ldrb	r3, [r7, #20]
 800205c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002060:	b2d9      	uxtb	r1, r3
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	7813      	ldrb	r3, [r2, #0]
 8002066:	f361 1345 	bfi	r3, r1, #5, #1
 800206a:	7013      	strb	r3, [r2, #0]
  val->sleep_change = wake_up_src.sleep_change_ia;
 800206c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002070:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002074:	b2d9      	uxtb	r1, r3
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	78d3      	ldrb	r3, [r2, #3]
 800207a:	f361 0341 	bfi	r3, r1, #1, #1
 800207e:	70d3      	strb	r3, [r2, #3]
  val->wake_up_x = wake_up_src.x_wu;
 8002080:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002084:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002088:	b2d9      	uxtb	r1, r3
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	7853      	ldrb	r3, [r2, #1]
 800208e:	f361 03c3 	bfi	r3, r1, #3, #1
 8002092:	7053      	strb	r3, [r2, #1]
  val->wake_up_y = wake_up_src.y_wu;
 8002094:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002098:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800209c:	b2d9      	uxtb	r1, r3
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	7853      	ldrb	r3, [r2, #1]
 80020a2:	f361 0382 	bfi	r3, r1, #2, #1
 80020a6:	7053      	strb	r3, [r2, #1]
  val->wake_up_z = wake_up_src.z_wu;
 80020a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020b0:	b2d9      	uxtb	r1, r3
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	7853      	ldrb	r3, [r2, #1]
 80020b6:	f361 0341 	bfi	r3, r1, #1, #1
 80020ba:	7053      	strb	r3, [r2, #1]
  val->sleep_state = wake_up_src.sleep_state;
 80020bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020c4:	b2d9      	uxtb	r1, r3
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	78d3      	ldrb	r3, [r2, #3]
 80020ca:	f361 0382 	bfi	r3, r1, #2, #1
 80020ce:	70d3      	strb	r3, [r2, #3]

  val->tap_x = tap_src.x_tap;
 80020d0:	7e3b      	ldrb	r3, [r7, #24]
 80020d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020d6:	b2d9      	uxtb	r1, r3
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	7893      	ldrb	r3, [r2, #2]
 80020dc:	f361 0300 	bfi	r3, r1, #0, #1
 80020e0:	7093      	strb	r3, [r2, #2]
  val->tap_y = tap_src.y_tap;
 80020e2:	7e3b      	ldrb	r3, [r7, #24]
 80020e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020e8:	b2d9      	uxtb	r1, r3
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	7853      	ldrb	r3, [r2, #1]
 80020ee:	f361 13c7 	bfi	r3, r1, #7, #1
 80020f2:	7053      	strb	r3, [r2, #1]
  val->tap_z = tap_src.z_tap;
 80020f4:	7e3b      	ldrb	r3, [r7, #24]
 80020f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020fa:	b2d9      	uxtb	r1, r3
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	7853      	ldrb	r3, [r2, #1]
 8002100:	f361 1386 	bfi	r3, r1, #6, #1
 8002104:	7053      	strb	r3, [r2, #1]
  val->tap_sign = tap_src.tap_sign;
 8002106:	7e3b      	ldrb	r3, [r7, #24]
 8002108:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800210c:	b2d9      	uxtb	r1, r3
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	7893      	ldrb	r3, [r2, #2]
 8002112:	f361 0341 	bfi	r3, r1, #1, #1
 8002116:	7093      	strb	r3, [r2, #2]
  val->double_tap = tap_src.double_tap;
 8002118:	7e3b      	ldrb	r3, [r7, #24]
 800211a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800211e:	b2d9      	uxtb	r1, r3
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	7853      	ldrb	r3, [r2, #1]
 8002124:	f361 1345 	bfi	r3, r1, #5, #1
 8002128:	7053      	strb	r3, [r2, #1]
  val->single_tap = tap_src.single_tap;
 800212a:	7e3b      	ldrb	r3, [r7, #24]
 800212c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002130:	b2d9      	uxtb	r1, r3
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	7853      	ldrb	r3, [r2, #1]
 8002136:	f361 1304 	bfi	r3, r1, #4, #1
 800213a:	7053      	strb	r3, [r2, #1]

  val->six_d_zl = d6d_src.zl;
 800213c:	7f3b      	ldrb	r3, [r7, #28]
 800213e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002142:	b2d9      	uxtb	r1, r3
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	7893      	ldrb	r3, [r2, #2]
 8002148:	f361 13c7 	bfi	r3, r1, #7, #1
 800214c:	7093      	strb	r3, [r2, #2]
  val->six_d_zh = d6d_src.zh;
 800214e:	7f3b      	ldrb	r3, [r7, #28]
 8002150:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002154:	b2d9      	uxtb	r1, r3
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	78d3      	ldrb	r3, [r2, #3]
 800215a:	f361 0300 	bfi	r3, r1, #0, #1
 800215e:	70d3      	strb	r3, [r2, #3]
  val->six_d_yl = d6d_src.yl;
 8002160:	7f3b      	ldrb	r3, [r7, #28]
 8002162:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002166:	b2d9      	uxtb	r1, r3
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	7893      	ldrb	r3, [r2, #2]
 800216c:	f361 1345 	bfi	r3, r1, #5, #1
 8002170:	7093      	strb	r3, [r2, #2]
  val->six_d_yh = d6d_src.yh;
 8002172:	7f3b      	ldrb	r3, [r7, #28]
 8002174:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002178:	b2d9      	uxtb	r1, r3
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	7893      	ldrb	r3, [r2, #2]
 800217e:	f361 1386 	bfi	r3, r1, #6, #1
 8002182:	7093      	strb	r3, [r2, #2]
  val->six_d_xl = d6d_src.xl;
 8002184:	7f3b      	ldrb	r3, [r7, #28]
 8002186:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800218a:	b2d9      	uxtb	r1, r3
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	7893      	ldrb	r3, [r2, #2]
 8002190:	f361 03c3 	bfi	r3, r1, #3, #1
 8002194:	7093      	strb	r3, [r2, #2]
  val->six_d_xh = d6d_src.xh;
 8002196:	7f3b      	ldrb	r3, [r7, #28]
 8002198:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800219c:	b2d9      	uxtb	r1, r3
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	7893      	ldrb	r3, [r2, #2]
 80021a2:	f361 1304 	bfi	r3, r1, #4, #1
 80021a6:	7093      	strb	r3, [r2, #2]

  val->step_detector = emb_func_status_mainpage.is_step_det;
 80021a8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80021ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021b0:	b2d9      	uxtb	r1, r3
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	78d3      	ldrb	r3, [r2, #3]
 80021b6:	f361 03c3 	bfi	r3, r1, #3, #1
 80021ba:	70d3      	strb	r3, [r2, #3]
  val->tilt = emb_func_status_mainpage.is_tilt;
 80021bc:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80021c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80021c4:	b2d9      	uxtb	r1, r3
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	7913      	ldrb	r3, [r2, #4]
 80021ca:	f361 0341 	bfi	r3, r1, #1, #1
 80021ce:	7113      	strb	r3, [r2, #4]
  val->sig_mot = emb_func_status_mainpage.is_sigmot;
 80021d0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80021d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021d8:	b2d9      	uxtb	r1, r3
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	7913      	ldrb	r3, [r2, #4]
 80021de:	f361 0382 	bfi	r3, r1, #2, #1
 80021e2:	7113      	strb	r3, [r2, #4]
  val->fsm_lc = emb_func_status_mainpage.is_fsm_lc;
 80021e4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80021e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80021ec:	b2d9      	uxtb	r1, r3
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	7913      	ldrb	r3, [r2, #4]
 80021f2:	f361 03c3 	bfi	r3, r1, #3, #1
 80021f6:	7113      	strb	r3, [r2, #4]

  val->fsm1 = fsm_status_mainpage.is_fsm1;
 80021f8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80021fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002200:	b2d9      	uxtb	r1, r3
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	7913      	ldrb	r3, [r2, #4]
 8002206:	f361 1304 	bfi	r3, r1, #4, #1
 800220a:	7113      	strb	r3, [r2, #4]
  val->fsm2 = fsm_status_mainpage.is_fsm2;
 800220c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002210:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002214:	b2d9      	uxtb	r1, r3
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	7913      	ldrb	r3, [r2, #4]
 800221a:	f361 1345 	bfi	r3, r1, #5, #1
 800221e:	7113      	strb	r3, [r2, #4]
  val->fsm3 = fsm_status_mainpage.is_fsm3;
 8002220:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002224:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002228:	b2d9      	uxtb	r1, r3
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	7913      	ldrb	r3, [r2, #4]
 800222e:	f361 1386 	bfi	r3, r1, #6, #1
 8002232:	7113      	strb	r3, [r2, #4]
  val->fsm4 = fsm_status_mainpage.is_fsm4;
 8002234:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002238:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800223c:	b2d9      	uxtb	r1, r3
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	7913      	ldrb	r3, [r2, #4]
 8002242:	f361 13c7 	bfi	r3, r1, #7, #1
 8002246:	7113      	strb	r3, [r2, #4]
  val->fsm5 = fsm_status_mainpage.is_fsm5;
 8002248:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800224c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002250:	b2d9      	uxtb	r1, r3
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	7953      	ldrb	r3, [r2, #5]
 8002256:	f361 0300 	bfi	r3, r1, #0, #1
 800225a:	7153      	strb	r3, [r2, #5]
  val->fsm6 = fsm_status_mainpage.is_fsm6;
 800225c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002260:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002264:	b2d9      	uxtb	r1, r3
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	7953      	ldrb	r3, [r2, #5]
 800226a:	f361 0341 	bfi	r3, r1, #1, #1
 800226e:	7153      	strb	r3, [r2, #5]
  val->fsm7 = fsm_status_mainpage.is_fsm7;
 8002270:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002274:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002278:	b2d9      	uxtb	r1, r3
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	7953      	ldrb	r3, [r2, #5]
 800227e:	f361 0382 	bfi	r3, r1, #2, #1
 8002282:	7153      	strb	r3, [r2, #5]
  val->fsm8 = fsm_status_mainpage.is_fsm8;
 8002284:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002288:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800228c:	b2d9      	uxtb	r1, r3
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	7953      	ldrb	r3, [r2, #5]
 8002292:	f361 03c3 	bfi	r3, r1, #3, #1
 8002296:	7153      	strb	r3, [r2, #5]

  /* embedded func */
  ret = lsm6dsv_mem_bank_set(ctx, LSM6DSV_EMBED_FUNC_MEM_BANK);
 8002298:	2101      	movs	r1, #1
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fc06 	bl	8001aac <lsm6dsv_mem_bank_set>
 80022a0:	6478      	str	r0, [r7, #68]	@ 0x44
  if (ret == 0)
 80022a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d112      	bne.n	80022ce <lsm6dsv_all_sources_get+0x4c4>
  {
    ret = lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_EXEC_STATUS, (uint8_t *)&emb_func_exec_status, 1);
 80022a8:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80022ac:	2301      	movs	r3, #1
 80022ae:	2107      	movs	r1, #7
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff facf 	bl	8001854 <lsm6dsv_read_reg>
 80022b6:	6478      	str	r0, [r7, #68]	@ 0x44
    ret += lsm6dsv_read_reg(ctx, LSM6DSV_EMB_FUNC_SRC, (uint8_t *)&emb_func_src, 1);
 80022b8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80022bc:	2301      	movs	r3, #1
 80022be:	2164      	movs	r1, #100	@ 0x64
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff fac7 	bl	8001854 <lsm6dsv_read_reg>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ca:	4413      	add	r3, r2
 80022cc:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  ret += lsm6dsv_mem_bank_set(ctx, LSM6DSV_MAIN_MEM_BANK);
 80022ce:	2100      	movs	r1, #0
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fbeb 	bl	8001aac <lsm6dsv_mem_bank_set>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022da:	4413      	add	r3, r2
 80022dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (ret != 0)
 80022de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <lsm6dsv_all_sources_get+0x4de>
  {
    return ret;
 80022e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022e6:	e07f      	b.n	80023e8 <lsm6dsv_all_sources_get+0x5de>
  }

  val->emb_func_stand_by = emb_func_exec_status.emb_func_endop;
 80022e8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80022ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80022f0:	b2d9      	uxtb	r1, r3
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	78d3      	ldrb	r3, [r2, #3]
 80022f6:	f361 13c7 	bfi	r3, r1, #7, #1
 80022fa:	70d3      	strb	r3, [r2, #3]
  val->emb_func_time_exceed = emb_func_exec_status.emb_func_exec_ovr;
 80022fc:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002300:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002304:	b2d9      	uxtb	r1, r3
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	7913      	ldrb	r3, [r2, #4]
 800230a:	f361 0300 	bfi	r3, r1, #0, #1
 800230e:	7113      	strb	r3, [r2, #4]
  val->step_count_inc = emb_func_src.stepcounter_bit_set;
 8002310:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002314:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002318:	b2d9      	uxtb	r1, r3
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	78d3      	ldrb	r3, [r2, #3]
 800231e:	f361 1304 	bfi	r3, r1, #4, #1
 8002322:	70d3      	strb	r3, [r2, #3]
  val->step_count_overflow = emb_func_src.step_overflow;
 8002324:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002328:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800232c:	b2d9      	uxtb	r1, r3
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	78d3      	ldrb	r3, [r2, #3]
 8002332:	f361 1345 	bfi	r3, r1, #5, #1
 8002336:	70d3      	strb	r3, [r2, #3]
  val->step_on_delta_time = emb_func_src.step_count_delta_ia;
 8002338:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800233c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002340:	b2d9      	uxtb	r1, r3
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	78d3      	ldrb	r3, [r2, #3]
 8002346:	f361 1386 	bfi	r3, r1, #6, #1
 800234a:	70d3      	strb	r3, [r2, #3]

  val->step_detector = emb_func_src.step_detected;
 800234c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002350:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002354:	b2d9      	uxtb	r1, r3
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	78d3      	ldrb	r3, [r2, #3]
 800235a:	f361 03c3 	bfi	r3, r1, #3, #1
 800235e:	70d3      	strb	r3, [r2, #3]

  /* sensor hub */
  ret = lsm6dsv_read_reg(ctx, LSM6DSV_STATUS_MASTER_MAINPAGE, (uint8_t *)&status_shub, 1);
 8002360:	f107 0210 	add.w	r2, r7, #16
 8002364:	2301      	movs	r3, #1
 8002366:	2148      	movs	r1, #72	@ 0x48
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff fa73 	bl	8001854 <lsm6dsv_read_reg>
 800236e:	6478      	str	r0, [r7, #68]	@ 0x44
  if (ret != 0)
 8002370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <lsm6dsv_all_sources_get+0x570>
  {
    return ret;
 8002376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002378:	e036      	b.n	80023e8 <lsm6dsv_all_sources_get+0x5de>
  }

  val->sh_endop = status_shub.sens_hub_endop;
 800237a:	7c3b      	ldrb	r3, [r7, #16]
 800237c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002380:	b2d9      	uxtb	r1, r3
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	7953      	ldrb	r3, [r2, #5]
 8002386:	f361 1304 	bfi	r3, r1, #4, #1
 800238a:	7153      	strb	r3, [r2, #5]
  val->sh_wr_once = status_shub.wr_once_done;
 800238c:	7c3b      	ldrb	r3, [r7, #16]
 800238e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002392:	b2d9      	uxtb	r1, r3
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	7993      	ldrb	r3, [r2, #6]
 8002398:	f361 0341 	bfi	r3, r1, #1, #1
 800239c:	7193      	strb	r3, [r2, #6]
  val->sh_slave3_nack = status_shub.slave3_nack;
 800239e:	7c3b      	ldrb	r3, [r7, #16]
 80023a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80023a4:	b2d9      	uxtb	r1, r3
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	7993      	ldrb	r3, [r2, #6]
 80023aa:	f361 0300 	bfi	r3, r1, #0, #1
 80023ae:	7193      	strb	r3, [r2, #6]
  val->sh_slave2_nack = status_shub.slave2_nack;
 80023b0:	7c3b      	ldrb	r3, [r7, #16]
 80023b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80023b6:	b2d9      	uxtb	r1, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	7953      	ldrb	r3, [r2, #5]
 80023bc:	f361 13c7 	bfi	r3, r1, #7, #1
 80023c0:	7153      	strb	r3, [r2, #5]
  val->sh_slave1_nack = status_shub.slave1_nack;
 80023c2:	7c3b      	ldrb	r3, [r7, #16]
 80023c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80023c8:	b2d9      	uxtb	r1, r3
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	7953      	ldrb	r3, [r2, #5]
 80023ce:	f361 1386 	bfi	r3, r1, #6, #1
 80023d2:	7153      	strb	r3, [r2, #5]
  val->sh_slave0_nack = status_shub.slave0_nack;
 80023d4:	7c3b      	ldrb	r3, [r7, #16]
 80023d6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80023da:	b2d9      	uxtb	r1, r3
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	7953      	ldrb	r3, [r2, #5]
 80023e0:	f361 1345 	bfi	r3, r1, #5, #1
 80023e4:	7153      	strb	r3, [r2, #5]

  return ret;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3748      	adds	r7, #72	@ 0x48
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <lsm6dsv_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_OUTX_L_G, &buff[0], 6);
 80023fa:	f107 020c 	add.w	r2, r7, #12
 80023fe:	2306      	movs	r3, #6
 8002400:	2122      	movs	r1, #34	@ 0x22
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fa26 	bl	8001854 <lsm6dsv_read_reg>
 8002408:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <lsm6dsv_angular_rate_raw_get+0x24>
  {
    return ret;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	e036      	b.n	8002482 <lsm6dsv_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8002414:	7b7b      	ldrb	r3, [r7, #13]
 8002416:	b21a      	sxth	r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002422:	b29b      	uxth	r3, r3
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b29b      	uxth	r3, r3
 8002428:	7b3a      	ldrb	r2, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	b29b      	uxth	r3, r3
 800242e:	b21a      	sxth	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	3302      	adds	r3, #2
 800243a:	b212      	sxth	r2, r2
 800243c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	3302      	adds	r3, #2
 8002442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002446:	b29b      	uxth	r3, r3
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	b29b      	uxth	r3, r3
 800244c:	7bba      	ldrb	r2, [r7, #14]
 800244e:	4413      	add	r3, r2
 8002450:	b29a      	uxth	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	3302      	adds	r3, #2
 8002456:	b212      	sxth	r2, r2
 8002458:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800245a:	7c7a      	ldrb	r2, [r7, #17]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3304      	adds	r3, #4
 8002460:	b212      	sxth	r2, r2
 8002462:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	3304      	adds	r3, #4
 8002468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246c:	b29b      	uxth	r3, r3
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	b29b      	uxth	r3, r3
 8002472:	7c3a      	ldrb	r2, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	b29a      	uxth	r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	3304      	adds	r3, #4
 800247c:	b212      	sxth	r2, r2
 800247e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002480:	697b      	ldr	r3, [r7, #20]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <lsm6dsv_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv_read_reg(ctx, LSM6DSV_OUTX_L_A, &buff[0], 6);
 8002494:	f107 020c 	add.w	r2, r7, #12
 8002498:	2306      	movs	r3, #6
 800249a:	2128      	movs	r1, #40	@ 0x28
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff f9d9 	bl	8001854 <lsm6dsv_read_reg>
 80024a2:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <lsm6dsv_acceleration_raw_get+0x24>
  {
    return ret;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	e036      	b.n	800251c <lsm6dsv_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 80024ae:	7b7b      	ldrb	r3, [r7, #13]
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	7b3a      	ldrb	r2, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	3302      	adds	r3, #2
 80024d4:	b212      	sxth	r2, r2
 80024d6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	3302      	adds	r3, #2
 80024dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	7bba      	ldrb	r2, [r7, #14]
 80024e8:	4413      	add	r3, r2
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3302      	adds	r3, #2
 80024f0:	b212      	sxth	r2, r2
 80024f2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80024f4:	7c7a      	ldrb	r2, [r7, #17]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	3304      	adds	r3, #4
 80024fa:	b212      	sxth	r2, r2
 80024fc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	3304      	adds	r3, #4
 8002502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002506:	b29b      	uxth	r3, r3
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	b29b      	uxth	r3, r3
 800250c:	7c3a      	ldrb	r2, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	b29a      	uxth	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	3304      	adds	r3, #4
 8002516:	b212      	sxth	r2, r2
 8002518:	801a      	strh	r2, [r3, #0]

  return ret;
 800251a:	697b      	ldr	r3, [r7, #20]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <platform_write>:
 * @param  bufp: Pointer to data buffer
 * @param  len: Number of bytes to write
 * @retval 0 on success, -1 on error
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	@ 0x28
 8002528:	af04      	add	r7, sp, #16
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	461a      	mov	r2, r3
 8002530:	460b      	mov	r3, r1
 8002532:	72fb      	strb	r3, [r7, #11]
 8002534:	4613      	mov	r3, r2
 8002536:	813b      	strh	r3, [r7, #8]
  uint8_t device_addr = (uint8_t)(uintptr_t)handle;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	75fb      	strb	r3, [r7, #23]

  if (HAL_I2C_Mem_Write(&hi2c2, device_addr, reg, I2C_MEMADD_SIZE_8BIT,
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	b299      	uxth	r1, r3
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	b29a      	uxth	r2, r3
 8002544:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	893b      	ldrh	r3, [r7, #8]
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2301      	movs	r3, #1
 8002554:	4806      	ldr	r0, [pc, #24]	@ (8002570 <platform_write+0x4c>)
 8002556:	f002 f9dd 	bl	8004914 <HAL_I2C_Mem_Write>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <platform_write+0x42>
                        (uint8_t*)bufp, len, 1000) != HAL_OK)
  {
    return -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002564:	e000      	b.n	8002568 <platform_write+0x44>
  }
  return 0;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000208 	.word	0x20000208

08002574 <platform_read>:
 * @param  bufp: Pointer to data buffer
 * @param  len: Number of bytes to read
 * @retval 0 on success, -1 on error
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af04      	add	r7, sp, #16
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	461a      	mov	r2, r3
 8002580:	460b      	mov	r3, r1
 8002582:	72fb      	strb	r3, [r7, #11]
 8002584:	4613      	mov	r3, r2
 8002586:	813b      	strh	r3, [r7, #8]
  uint8_t device_addr = (uint8_t)(uintptr_t)handle;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	75fb      	strb	r3, [r7, #23]

  if (HAL_I2C_Mem_Read(&hi2c2, device_addr, reg, I2C_MEMADD_SIZE_8BIT,
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	b299      	uxth	r1, r3
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	b29a      	uxth	r2, r3
 8002594:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	893b      	ldrh	r3, [r7, #8]
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2301      	movs	r3, #1
 80025a4:	4806      	ldr	r0, [pc, #24]	@ (80025c0 <platform_read+0x4c>)
 80025a6:	f002 fac9 	bl	8004b3c <HAL_I2C_Mem_Read>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <platform_read+0x42>
                       bufp, len, 1000) != HAL_OK)
  {
    return -1;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025b4:	e000      	b.n	80025b8 <platform_read+0x44>
  }
  return 0;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000208 	.word	0x20000208

080025c4 <LSM6DSV_Init>:
/**
 * @brief  Initialize LSM6DSV 6-axis IMU (Accelerometer + Gyroscope)
 * @retval 1 if initialization successful, 0 if device not found or error
 */
static uint8_t LSM6DSV_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
  uint8_t whoamI = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	71fb      	strb	r3, [r7, #7]

  /* Initialize sensor context */
  lsm6dsv_ctx.write_reg = platform_write;
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <LSM6DSV_Init+0x9c>)
 80025d0:	4a24      	ldr	r2, [pc, #144]	@ (8002664 <LSM6DSV_Init+0xa0>)
 80025d2:	601a      	str	r2, [r3, #0]
  lsm6dsv_ctx.read_reg = platform_read;
 80025d4:	4b22      	ldr	r3, [pc, #136]	@ (8002660 <LSM6DSV_Init+0x9c>)
 80025d6:	4a24      	ldr	r2, [pc, #144]	@ (8002668 <LSM6DSV_Init+0xa4>)
 80025d8:	605a      	str	r2, [r3, #4]
  lsm6dsv_ctx.mdelay = HAL_Delay;
 80025da:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <LSM6DSV_Init+0x9c>)
 80025dc:	4a23      	ldr	r2, [pc, #140]	@ (800266c <LSM6DSV_Init+0xa8>)
 80025de:	609a      	str	r2, [r3, #8]
  lsm6dsv_ctx.handle = (void*)(uintptr_t)LSM6DSV_I2C_ADDR;
 80025e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002660 <LSM6DSV_Init+0x9c>)
 80025e2:	22d6      	movs	r2, #214	@ 0xd6
 80025e4:	60da      	str	r2, [r3, #12]

  /* Check device ID */
  if (lsm6dsv_device_id_get(&lsm6dsv_ctx, &whoamI) != 0)
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	4619      	mov	r1, r3
 80025ea:	481d      	ldr	r0, [pc, #116]	@ (8002660 <LSM6DSV_Init+0x9c>)
 80025ec:	f7ff fa8f 	bl	8001b0e <lsm6dsv_device_id_get>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <LSM6DSV_Init+0x36>
  {
    return 0;  // Communication error
 80025f6:	2300      	movs	r3, #0
 80025f8:	e02d      	b.n	8002656 <LSM6DSV_Init+0x92>
  }

  if (whoamI != LSM6DSV_ID)
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	2b70      	cmp	r3, #112	@ 0x70
 80025fe:	d001      	beq.n	8002604 <LSM6DSV_Init+0x40>
  {
    return 0;  // Device not found
 8002600:	2300      	movs	r3, #0
 8002602:	e028      	b.n	8002656 <LSM6DSV_Init+0x92>
  }

  /* Reset device */
  lsm6dsv_reset_t rst;
  lsm6dsv_reset_set(&lsm6dsv_ctx, LSM6DSV_RESTORE_CTRL_REGS);
 8002604:	2104      	movs	r1, #4
 8002606:	4816      	ldr	r0, [pc, #88]	@ (8002660 <LSM6DSV_Init+0x9c>)
 8002608:	f7ff f9a6 	bl	8001958 <lsm6dsv_reset_set>
  do {
    lsm6dsv_reset_get(&lsm6dsv_ctx, &rst);
 800260c:	1dbb      	adds	r3, r7, #6
 800260e:	4619      	mov	r1, r3
 8002610:	4813      	ldr	r0, [pc, #76]	@ (8002660 <LSM6DSV_Init+0x9c>)
 8002612:	f7ff f9f5 	bl	8001a00 <lsm6dsv_reset_get>
  } while (rst != LSM6DSV_READY);
 8002616:	79bb      	ldrb	r3, [r7, #6]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f7      	bne.n	800260c <LSM6DSV_Init+0x48>

  /* Enable Block Data Update */
  lsm6dsv_block_data_update_set(&lsm6dsv_ctx, PROPERTY_ENABLE);
 800261c:	2101      	movs	r1, #1
 800261e:	4810      	ldr	r0, [pc, #64]	@ (8002660 <LSM6DSV_Init+0x9c>)
 8002620:	f7ff fb81 	bl	8001d26 <lsm6dsv_block_data_update_set>
  lsm6dsv_gy_data_rate_set(&lsm6dsv_ctx, LSM6DSV_ODR_AT_1Hz875);
  lsm6dsv_xl_mode_set(&lsm6dsv_ctx, LSM6DSV_XL_LOW_POWER_2_AVG_MD);  // Lowest power with 2 averages
  lsm6dsv_gy_mode_set(&lsm6dsv_ctx, LSM6DSV_GY_LOW_POWER_MD);
#elif (IMU_PERFORMANCE_MODE == 1)
  /* Mode 1: Moderate Performance - 60 Hz ODR, low power mode for balanced operation */
  lsm6dsv_xl_data_rate_set(&lsm6dsv_ctx, LSM6DSV_ODR_AT_60Hz);
 8002624:	2105      	movs	r1, #5
 8002626:	480e      	ldr	r0, [pc, #56]	@ (8002660 <LSM6DSV_Init+0x9c>)
 8002628:	f7ff fa82 	bl	8001b30 <lsm6dsv_xl_data_rate_set>
  lsm6dsv_gy_data_rate_set(&lsm6dsv_ctx, LSM6DSV_ODR_AT_60Hz);
 800262c:	2105      	movs	r1, #5
 800262e:	480c      	ldr	r0, [pc, #48]	@ (8002660 <LSM6DSV_Init+0x9c>)
 8002630:	f7ff fafa 	bl	8001c28 <lsm6dsv_gy_data_rate_set>
  lsm6dsv_xl_mode_set(&lsm6dsv_ctx, LSM6DSV_XL_LOW_POWER_4_AVG_MD);  // Low power with 4 averages for better SNR
 8002634:	2105      	movs	r1, #5
 8002636:	480a      	ldr	r0, [pc, #40]	@ (8002660 <LSM6DSV_Init+0x9c>)
 8002638:	f7ff fad0 	bl	8001bdc <lsm6dsv_xl_mode_set>
  lsm6dsv_gy_mode_set(&lsm6dsv_ctx, LSM6DSV_GY_LOW_POWER_MD);
 800263c:	2105      	movs	r1, #5
 800263e:	4808      	ldr	r0, [pc, #32]	@ (8002660 <LSM6DSV_Init+0x9c>)
 8002640:	f7ff fb4b 	bl	8001cda <lsm6dsv_gy_mode_set>
  lsm6dsv_xl_mode_set(&lsm6dsv_ctx, LSM6DSV_XL_HIGH_PERFORMANCE_MD);
  lsm6dsv_gy_mode_set(&lsm6dsv_ctx, LSM6DSV_GY_HIGH_PERFORMANCE_MD);
#endif

  /* Set full-scale ranges */
  lsm6dsv_xl_full_scale_set(&lsm6dsv_ctx, LSM6DSV_4g);
 8002644:	2101      	movs	r1, #1
 8002646:	4806      	ldr	r0, [pc, #24]	@ (8002660 <LSM6DSV_Init+0x9c>)
 8002648:	f7ff fbb9 	bl	8001dbe <lsm6dsv_xl_full_scale_set>
  lsm6dsv_gy_full_scale_set(&lsm6dsv_ctx, LSM6DSV_2000dps);
 800264c:	2104      	movs	r1, #4
 800264e:	4804      	ldr	r0, [pc, #16]	@ (8002660 <LSM6DSV_Init+0x9c>)
 8002650:	f7ff fb8f 	bl	8001d72 <lsm6dsv_gy_full_scale_set>

  /* Configure FIFO mode to continuous */
  lsm6dsv_fifo_mode_set(&lsm6dsv_ctx, LSM6DSV_STREAM_MODE);
#endif

  return 1;  // Initialization successful
 8002654:	2301      	movs	r3, #1
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200003d0 	.word	0x200003d0
 8002664:	08002525 	.word	0x08002525
 8002668:	08002575 	.word	0x08002575
 800266c:	08003f6d 	.word	0x08003f6d

08002670 <LIS2DW12_Init>:
/**
 * @brief  Initialize LIS2DW12 3-axis Accelerometer
 * @retval 1 if initialization successful, 0 if device not found or error
 */
static uint8_t LIS2DW12_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  uint8_t whoamI = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	71fb      	strb	r3, [r7, #7]

  /* Initialize sensor context */
  lis2dw12_ctx.write_reg = platform_write;
 800267a:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <LIS2DW12_Init+0x84>)
 800267c:	4a1e      	ldr	r2, [pc, #120]	@ (80026f8 <LIS2DW12_Init+0x88>)
 800267e:	601a      	str	r2, [r3, #0]
  lis2dw12_ctx.read_reg = platform_read;
 8002680:	4b1c      	ldr	r3, [pc, #112]	@ (80026f4 <LIS2DW12_Init+0x84>)
 8002682:	4a1e      	ldr	r2, [pc, #120]	@ (80026fc <LIS2DW12_Init+0x8c>)
 8002684:	605a      	str	r2, [r3, #4]
  lis2dw12_ctx.mdelay = HAL_Delay;
 8002686:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <LIS2DW12_Init+0x84>)
 8002688:	4a1d      	ldr	r2, [pc, #116]	@ (8002700 <LIS2DW12_Init+0x90>)
 800268a:	609a      	str	r2, [r3, #8]
  lis2dw12_ctx.handle = (void*)(uintptr_t)LIS2DW12_I2C_ADDR;
 800268c:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <LIS2DW12_Init+0x84>)
 800268e:	2232      	movs	r2, #50	@ 0x32
 8002690:	60da      	str	r2, [r3, #12]

  /* Check device ID */
  if (lis2dw12_device_id_get(&lis2dw12_ctx, &whoamI) != 0)
 8002692:	1dfb      	adds	r3, r7, #7
 8002694:	4619      	mov	r1, r3
 8002696:	4817      	ldr	r0, [pc, #92]	@ (80026f4 <LIS2DW12_Init+0x84>)
 8002698:	f7ff f887 	bl	80017aa <lis2dw12_device_id_get>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <LIS2DW12_Init+0x36>
  {
    return 0;  // Communication error
 80026a2:	2300      	movs	r3, #0
 80026a4:	e021      	b.n	80026ea <LIS2DW12_Init+0x7a>
  }

  if (whoamI != LIS2DW12_ID)
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	2b44      	cmp	r3, #68	@ 0x44
 80026aa:	d001      	beq.n	80026b0 <LIS2DW12_Init+0x40>
  {
    return 0;  // Device not found
 80026ac:	2300      	movs	r3, #0
 80026ae:	e01c      	b.n	80026ea <LIS2DW12_Init+0x7a>
  }

  /* Reset device */
  lis2dw12_reset_set(&lis2dw12_ctx, PROPERTY_ENABLE);
 80026b0:	2101      	movs	r1, #1
 80026b2:	4810      	ldr	r0, [pc, #64]	@ (80026f4 <LIS2DW12_Init+0x84>)
 80026b4:	f7ff f88a 	bl	80017cc <lis2dw12_reset_set>
  uint8_t rst;
  do {
    lis2dw12_reset_get(&lis2dw12_ctx, &rst);
 80026b8:	1dbb      	adds	r3, r7, #6
 80026ba:	4619      	mov	r1, r3
 80026bc:	480d      	ldr	r0, [pc, #52]	@ (80026f4 <LIS2DW12_Init+0x84>)
 80026be:	f7ff f8ab 	bl	8001818 <lis2dw12_reset_get>
  } while (rst);
 80026c2:	79bb      	ldrb	r3, [r7, #6]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f7      	bne.n	80026b8 <LIS2DW12_Init+0x48>

  /* Enable Block Data Update */
  lis2dw12_block_data_update_set(&lis2dw12_ctx, PROPERTY_ENABLE);
 80026c8:	2101      	movs	r1, #1
 80026ca:	480a      	ldr	r0, [pc, #40]	@ (80026f4 <LIS2DW12_Init+0x84>)
 80026cc:	f7fe ffc3 	bl	8001656 <lis2dw12_block_data_update_set>
  /* Mode 0: Absolute Lowest Power - 1.6 Hz ODR, continuous low power mode 2 */
  lis2dw12_data_rate_set(&lis2dw12_ctx, LIS2DW12_XL_ODR_1Hz6_LP_ONLY);
  lis2dw12_power_mode_set(&lis2dw12_ctx, LIS2DW12_CONT_LOW_PWR_2);  // Lowest continuous power mode
#elif (IMU_PERFORMANCE_MODE == 1)
  /* Mode 1: Moderate Performance - 50 Hz ODR, low power 12-bit mode */
  lis2dw12_data_rate_set(&lis2dw12_ctx, LIS2DW12_XL_ODR_50Hz);
 80026d0:	2104      	movs	r1, #4
 80026d2:	4808      	ldr	r0, [pc, #32]	@ (80026f4 <LIS2DW12_Init+0x84>)
 80026d4:	f7fe ff7a 	bl	80015cc <lis2dw12_data_rate_set>
  lis2dw12_power_mode_set(&lis2dw12_ctx, LIS2DW12_CONT_LOW_PWR_12bit);  // Low power with 12-bit resolution
 80026d8:	2100      	movs	r1, #0
 80026da:	4806      	ldr	r0, [pc, #24]	@ (80026f4 <LIS2DW12_Init+0x84>)
 80026dc:	f7fe ff28 	bl	8001530 <lis2dw12_power_mode_set>
  lis2dw12_data_rate_set(&lis2dw12_ctx, LIS2DW12_XL_ODR_1k6Hz);
  lis2dw12_power_mode_set(&lis2dw12_ctx, LIS2DW12_HIGH_PERFORMANCE);
#endif

  /* Set full-scale range */
  lis2dw12_full_scale_set(&lis2dw12_ctx, LIS2DW12_4g);
 80026e0:	2101      	movs	r1, #1
 80026e2:	4804      	ldr	r0, [pc, #16]	@ (80026f4 <LIS2DW12_Init+0x84>)
 80026e4:	f7fe ffdd 	bl	80016a2 <lis2dw12_full_scale_set>

  return 1;  // Initialization successful
 80026e8:	2301      	movs	r3, #1
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200003e4 	.word	0x200003e4
 80026f8:	08002525 	.word	0x08002525
 80026fc:	08002575 	.word	0x08002575
 8002700:	08003f6d 	.word	0x08003f6d

08002704 <LSM6DSV_ReadData>:
#if ENABLE_LSM6DSV
/**
 * @brief  Read data from LSM6DSV (Accelerometer + Gyroscope)
 */
static void LSM6DSV_ReadData(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  lsm6dsv_all_sources_t status;

  /* Check if new data is available */
  lsm6dsv_all_sources_get(&lsm6dsv_ctx, &status);
 800270a:	463b      	mov	r3, r7
 800270c:	4619      	mov	r1, r3
 800270e:	480d      	ldr	r0, [pc, #52]	@ (8002744 <LSM6DSV_ReadData+0x40>)
 8002710:	f7ff fb7b 	bl	8001e0a <lsm6dsv_all_sources_get>

  if (status.drdy_xl || status.drdy_gy)
 8002714:	783b      	ldrb	r3, [r7, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d105      	bne.n	800272c <LSM6DSV_ReadData+0x28>
 8002720:	783b      	ldrb	r3, [r7, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <LSM6DSV_ReadData+0x38>
  {
    /* Read accelerometer and gyroscope data (6 bytes each) */
    lsm6dsv_acceleration_raw_get(&lsm6dsv_ctx, lsm6dsv_accel_raw);
 800272c:	4906      	ldr	r1, [pc, #24]	@ (8002748 <LSM6DSV_ReadData+0x44>)
 800272e:	4805      	ldr	r0, [pc, #20]	@ (8002744 <LSM6DSV_ReadData+0x40>)
 8002730:	f7ff feab 	bl	800248a <lsm6dsv_acceleration_raw_get>
    lsm6dsv_angular_rate_raw_get(&lsm6dsv_ctx, lsm6dsv_gyro_raw);
 8002734:	4905      	ldr	r1, [pc, #20]	@ (800274c <LSM6DSV_ReadData+0x48>)
 8002736:	4803      	ldr	r0, [pc, #12]	@ (8002744 <LSM6DSV_ReadData+0x40>)
 8002738:	f7ff fe5a 	bl	80023f0 <lsm6dsv_angular_rate_raw_get>
  }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200003d0 	.word	0x200003d0
 8002748:	20000404 	.word	0x20000404
 800274c:	2000040c 	.word	0x2000040c

08002750 <LIS2DW12_ReadData>:
#if ENABLE_LIS2DW12
/**
 * @brief  Read data from LIS2DW12 (Accelerometer)
 */
static void LIS2DW12_ReadData(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
  lis2dw12_status_t status;

  /* Check if new data is available */
  lis2dw12_status_reg_get(&lis2dw12_ctx, &status);
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4808      	ldr	r0, [pc, #32]	@ (800277c <LIS2DW12_ReadData+0x2c>)
 800275c:	f7fe ffc7 	bl	80016ee <lis2dw12_status_reg_get>

  if (status.drdy)
 8002760:	793b      	ldrb	r3, [r7, #4]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <LIS2DW12_ReadData+0x24>
  {
    /* Read accelerometer data */
    lis2dw12_acceleration_raw_get(&lis2dw12_ctx, lis2dw12_accel_raw);
 800276c:	4904      	ldr	r1, [pc, #16]	@ (8002780 <LIS2DW12_ReadData+0x30>)
 800276e:	4803      	ldr	r0, [pc, #12]	@ (800277c <LIS2DW12_ReadData+0x2c>)
 8002770:	f7fe ffce 	bl	8001710 <lis2dw12_acceleration_raw_get>
  }
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200003e4 	.word	0x200003e4
 8002780:	20000414 	.word	0x20000414

08002784 <ADXL362_ReadDataWrapper>:

/**
 * @brief  Read data from ADXL362 (Accelerometer via SPI)
 */
static void ADXL362_ReadDataWrapper(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* ADXL362 sampling rate depends on IMU_PERFORMANCE_MODE:
   * Mode 0: Wakeup mode (6 Hz, ultralow noise)
   * Mode 1: Measurement mode (100 Hz, normal noise) */
  /* Using full 12-bit resolution from 16-bit registers */
  ADXL362_ReadData(&adxl362_ctx, adxl362_accel_raw);
 8002788:	4902      	ldr	r1, [pc, #8]	@ (8002794 <ADXL362_ReadDataWrapper+0x10>)
 800278a:	4803      	ldr	r0, [pc, #12]	@ (8002798 <ADXL362_ReadDataWrapper+0x14>)
 800278c:	f7fe fe0c 	bl	80013a8 <ADXL362_ReadData>
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	2000041c 	.word	0x2000041c
 8002798:	200003f8 	.word	0x200003f8

0800279c <Get_Microseconds>:
/**
 * @brief  Get microsecond timestamp from TIM2
 * @retval Current timestamp in microseconds
 */
static uint32_t Get_Microseconds(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return __HAL_TIM_GET_COUNTER(&htim2);
 80027a0:	4b03      	ldr	r3, [pc, #12]	@ (80027b0 <Get_Microseconds+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	200002ec 	.word	0x200002ec

080027b4 <tx_com>:
 * @brief  Transmit data via UART (USART1 at 1Mbit)
 * @param  tx_buffer: Pointer to data buffer
 * @param  len: Number of bytes to transmit
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart1, tx_buffer, len, HAL_MAX_DELAY);
 80027c0:	887a      	ldrh	r2, [r7, #2]
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4803      	ldr	r0, [pc, #12]	@ (80027d8 <tx_com+0x24>)
 80027ca:	f008 ff25 	bl	800b618 <HAL_UART_Transmit>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000338 	.word	0x20000338

080027dc <I2C_Scan>:

/**
 * @brief  Scan I2C bus for devices and print results
 */
static void I2C_Scan(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b0a2      	sub	sp, #136	@ 0x88
 80027e0:	af00      	add	r7, sp, #0
  char buffer[128];
  uint8_t devices_found = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

  snprintf(buffer, sizeof(buffer), "\r\n=== I2C Bus Scan ===\r\n");
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	4a68      	ldr	r2, [pc, #416]	@ (800298c <I2C_Scan+0x1b0>)
 80027ec:	2180      	movs	r1, #128	@ 0x80
 80027ee:	4618      	mov	r0, r3
 80027f0:	f00a fad6 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fd4a 	bl	8000290 <strlen>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b29a      	uxth	r2, r3
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ffd5 	bl	80027b4 <tx_com>

  snprintf(buffer, sizeof(buffer), "Scanning I2C2 (0x08 to 0x77)...\r\n");
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	4a60      	ldr	r2, [pc, #384]	@ (8002990 <I2C_Scan+0x1b4>)
 800280e:	2180      	movs	r1, #128	@ 0x80
 8002810:	4618      	mov	r0, r3
 8002812:	f00a fac5 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fd39 	bl	8000290 <strlen>
 800281e:	4603      	mov	r3, r0
 8002820:	b29a      	uxth	r2, r3
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ffc4 	bl	80027b4 <tx_com>

  for (uint8_t addr = 0x08; addr <= 0x77; addr++)
 800282c:	2308      	movs	r3, #8
 800282e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002832:	e069      	b.n	8002908 <I2C_Scan+0x12c>
  {
    /* Try to communicate with device at this address */
    if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 1, 10) == HAL_OK)
 8002834:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002838:	b29b      	uxth	r3, r3
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	b299      	uxth	r1, r3
 800283e:	230a      	movs	r3, #10
 8002840:	2201      	movs	r2, #1
 8002842:	4854      	ldr	r0, [pc, #336]	@ (8002994 <I2C_Scan+0x1b8>)
 8002844:	f002 fa94 	bl	8004d70 <HAL_I2C_IsDeviceReady>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d157      	bne.n	80028fe <I2C_Scan+0x122>
    {
      snprintf(buffer, sizeof(buffer), "  Found device at 0x%02X", addr);
 800284e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002852:	1d38      	adds	r0, r7, #4
 8002854:	4a50      	ldr	r2, [pc, #320]	@ (8002998 <I2C_Scan+0x1bc>)
 8002856:	2180      	movs	r1, #128	@ 0x80
 8002858:	f00a faa2 	bl	800cda0 <sniprintf>
      tx_com((uint8_t*)buffer, strlen(buffer));
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd fd16 	bl	8000290 <strlen>
 8002864:	4603      	mov	r3, r0
 8002866:	b29a      	uxth	r2, r3
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ffa1 	bl	80027b4 <tx_com>

      /* Identify known devices */
      if (addr == 0x6B)
 8002872:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002876:	2b6b      	cmp	r3, #107	@ 0x6b
 8002878:	d106      	bne.n	8002888 <I2C_Scan+0xac>
      {
        snprintf(buffer, sizeof(buffer), " (LSM6DSV - 6-axis IMU)\r\n");
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	4a47      	ldr	r2, [pc, #284]	@ (800299c <I2C_Scan+0x1c0>)
 800287e:	2180      	movs	r1, #128	@ 0x80
 8002880:	4618      	mov	r0, r3
 8002882:	f00a fa8d 	bl	800cda0 <sniprintf>
 8002886:	e02a      	b.n	80028de <I2C_Scan+0x102>
      }
      else if (addr == 0x19)
 8002888:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800288c:	2b19      	cmp	r3, #25
 800288e:	d106      	bne.n	800289e <I2C_Scan+0xc2>
      {
        snprintf(buffer, sizeof(buffer), " (LIS2DW12 - 3-axis Accel)\r\n");
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	4a43      	ldr	r2, [pc, #268]	@ (80029a0 <I2C_Scan+0x1c4>)
 8002894:	2180      	movs	r1, #128	@ 0x80
 8002896:	4618      	mov	r0, r3
 8002898:	f00a fa82 	bl	800cda0 <sniprintf>
 800289c:	e01f      	b.n	80028de <I2C_Scan+0x102>
      }
      else if (addr == 0x6A || addr == 0x6C)
 800289e:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80028a2:	2b6a      	cmp	r3, #106	@ 0x6a
 80028a4:	d003      	beq.n	80028ae <I2C_Scan+0xd2>
 80028a6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80028aa:	2b6c      	cmp	r3, #108	@ 0x6c
 80028ac:	d106      	bne.n	80028bc <I2C_Scan+0xe0>
      {
        snprintf(buffer, sizeof(buffer), " (LSM6DSV/LSM6DSOX - 6-axis IMU)\r\n");
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	4a3c      	ldr	r2, [pc, #240]	@ (80029a4 <I2C_Scan+0x1c8>)
 80028b2:	2180      	movs	r1, #128	@ 0x80
 80028b4:	4618      	mov	r0, r3
 80028b6:	f00a fa73 	bl	800cda0 <sniprintf>
 80028ba:	e010      	b.n	80028de <I2C_Scan+0x102>
      }
      else if (addr == 0x18)
 80028bc:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80028c0:	2b18      	cmp	r3, #24
 80028c2:	d106      	bne.n	80028d2 <I2C_Scan+0xf6>
      {
        snprintf(buffer, sizeof(buffer), " (Possible LIS2DW12 alternate)\r\n");
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	4a38      	ldr	r2, [pc, #224]	@ (80029a8 <I2C_Scan+0x1cc>)
 80028c8:	2180      	movs	r1, #128	@ 0x80
 80028ca:	4618      	mov	r0, r3
 80028cc:	f00a fa68 	bl	800cda0 <sniprintf>
 80028d0:	e005      	b.n	80028de <I2C_Scan+0x102>
      }
      else
      {
        snprintf(buffer, sizeof(buffer), " (Unknown device)\r\n");
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	4a35      	ldr	r2, [pc, #212]	@ (80029ac <I2C_Scan+0x1d0>)
 80028d6:	2180      	movs	r1, #128	@ 0x80
 80028d8:	4618      	mov	r0, r3
 80028da:	f00a fa61 	bl	800cda0 <sniprintf>
      }
      tx_com((uint8_t*)buffer, strlen(buffer));
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fcd5 	bl	8000290 <strlen>
 80028e6:	4603      	mov	r3, r0
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff60 	bl	80027b4 <tx_com>
      devices_found++;
 80028f4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80028f8:	3301      	adds	r3, #1
 80028fa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  for (uint8_t addr = 0x08; addr <= 0x77; addr++)
 80028fe:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002902:	3301      	adds	r3, #1
 8002904:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002908:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800290c:	2b77      	cmp	r3, #119	@ 0x77
 800290e:	d991      	bls.n	8002834 <I2C_Scan+0x58>
    }
  }

  if (devices_found == 0)
 8002910:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002914:	2b00      	cmp	r3, #0
 8002916:	d111      	bne.n	800293c <I2C_Scan+0x160>
  {
    snprintf(buffer, sizeof(buffer), "  No I2C devices found!\r\n");
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	4a25      	ldr	r2, [pc, #148]	@ (80029b0 <I2C_Scan+0x1d4>)
 800291c:	2180      	movs	r1, #128	@ 0x80
 800291e:	4618      	mov	r0, r3
 8002920:	f00a fa3e 	bl	800cda0 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fcb2 	bl	8000290 <strlen>
 800292c:	4603      	mov	r3, r0
 800292e:	b29a      	uxth	r2, r3
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff3d 	bl	80027b4 <tx_com>
 800293a:	e011      	b.n	8002960 <I2C_Scan+0x184>
  }
  else
  {
    snprintf(buffer, sizeof(buffer), "\r\nTotal devices found: %d\r\n", devices_found);
 800293c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002940:	1d38      	adds	r0, r7, #4
 8002942:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <I2C_Scan+0x1d8>)
 8002944:	2180      	movs	r1, #128	@ 0x80
 8002946:	f00a fa2b 	bl	800cda0 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fc9f 	bl	8000290 <strlen>
 8002952:	4603      	mov	r3, r0
 8002954:	b29a      	uxth	r2, r3
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff2a 	bl	80027b4 <tx_com>
  }

  snprintf(buffer, sizeof(buffer), "===================\r\n\r\n");
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	4a15      	ldr	r2, [pc, #84]	@ (80029b8 <I2C_Scan+0x1dc>)
 8002964:	2180      	movs	r1, #128	@ 0x80
 8002966:	4618      	mov	r0, r3
 8002968:	f00a fa1a 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fc8e 	bl	8000290 <strlen>
 8002974:	4603      	mov	r3, r0
 8002976:	b29a      	uxth	r2, r3
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff19 	bl	80027b4 <tx_com>
}
 8002982:	bf00      	nop
 8002984:	3788      	adds	r7, #136	@ 0x88
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	08010860 	.word	0x08010860
 8002990:	0801087c 	.word	0x0801087c
 8002994:	20000208 	.word	0x20000208
 8002998:	080108a0 	.word	0x080108a0
 800299c:	080108bc 	.word	0x080108bc
 80029a0:	080108d8 	.word	0x080108d8
 80029a4:	080108f8 	.word	0x080108f8
 80029a8:	0801091c 	.word	0x0801091c
 80029ac:	08010940 	.word	0x08010940
 80029b0:	08010954 	.word	0x08010954
 80029b4:	08010970 	.word	0x08010970
 80029b8:	0801098c 	.word	0x0801098c

080029bc <Print_IMU_Data>:
/**
 * @brief  Print IMU data with timestamp in selected format
 * @note   Each IMU outputs its own line with format: IMU_ID,timestamp,data...
 */
static void Print_IMU_Data(void)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b0de      	sub	sp, #376	@ 0x178
 80029c2:	af0c      	add	r7, sp, #48	@ 0x30
  char buffer[256];
  uint32_t timestamp = Get_Microseconds();
 80029c4:	f7ff feea 	bl	800279c <Get_Microseconds>
 80029c8:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
#if (OUTPUT_FORMAT == 0)
  /* CSV Format - one line per IMU with identifier */

#if ENABLE_LSM6DSV
  /* LSM6DSV output: LSM6DSV,timestamp,ax,ay,az,gx,gy,gz */
  if (imu_status.lsm6dsv_present)
 80029cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002c04 <Print_IMU_Data+0x248>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d079      	beq.n	8002ac8 <Print_IMU_Data+0x10c>
  {
    float lsm_ax = lsm6dsv_from_fs4_to_mg(lsm6dsv_accel_raw[0]);
 80029d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002c08 <Print_IMU_Data+0x24c>)
 80029d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe ff8c 	bl	80018f8 <lsm6dsv_from_fs4_to_mg>
 80029e0:	ed87 0a50 	vstr	s0, [r7, #320]	@ 0x140
    float lsm_ay = lsm6dsv_from_fs4_to_mg(lsm6dsv_accel_raw[1]);
 80029e4:	4b88      	ldr	r3, [pc, #544]	@ (8002c08 <Print_IMU_Data+0x24c>)
 80029e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe ff84 	bl	80018f8 <lsm6dsv_from_fs4_to_mg>
 80029f0:	ed87 0a4f 	vstr	s0, [r7, #316]	@ 0x13c
    float lsm_az = lsm6dsv_from_fs4_to_mg(lsm6dsv_accel_raw[2]);
 80029f4:	4b84      	ldr	r3, [pc, #528]	@ (8002c08 <Print_IMU_Data+0x24c>)
 80029f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe ff7c 	bl	80018f8 <lsm6dsv_from_fs4_to_mg>
 8002a00:	ed87 0a4e 	vstr	s0, [r7, #312]	@ 0x138
    float lsm_gx = lsm6dsv_from_fs2000_to_mdps(lsm6dsv_gyro_raw[0]);
 8002a04:	4b81      	ldr	r3, [pc, #516]	@ (8002c0c <Print_IMU_Data+0x250>)
 8002a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe ff8c 	bl	8001928 <lsm6dsv_from_fs2000_to_mdps>
 8002a10:	ed87 0a4d 	vstr	s0, [r7, #308]	@ 0x134
    float lsm_gy = lsm6dsv_from_fs2000_to_mdps(lsm6dsv_gyro_raw[1]);
 8002a14:	4b7d      	ldr	r3, [pc, #500]	@ (8002c0c <Print_IMU_Data+0x250>)
 8002a16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe ff84 	bl	8001928 <lsm6dsv_from_fs2000_to_mdps>
 8002a20:	ed87 0a4c 	vstr	s0, [r7, #304]	@ 0x130
    float lsm_gz = lsm6dsv_from_fs2000_to_mdps(lsm6dsv_gyro_raw[2]);
 8002a24:	4b79      	ldr	r3, [pc, #484]	@ (8002c0c <Print_IMU_Data+0x250>)
 8002a26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe ff7c 	bl	8001928 <lsm6dsv_from_fs2000_to_mdps>
 8002a30:	ed87 0a4b 	vstr	s0, [r7, #300]	@ 0x12c

    snprintf(buffer, sizeof(buffer),
 8002a34:	f8d7 0140 	ldr.w	r0, [r7, #320]	@ 0x140
 8002a38:	f7fd fd96 	bl	8000568 <__aeabi_f2d>
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	460d      	mov	r5, r1
 8002a40:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002a44:	f7fd fd90 	bl	8000568 <__aeabi_f2d>
 8002a48:	4680      	mov	r8, r0
 8002a4a:	4689      	mov	r9, r1
 8002a4c:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 8002a50:	f7fd fd8a 	bl	8000568 <__aeabi_f2d>
 8002a54:	4682      	mov	sl, r0
 8002a56:	468b      	mov	fp, r1
 8002a58:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8002a5c:	f7fd fd84 	bl	8000568 <__aeabi_f2d>
 8002a60:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a64:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8002a68:	f7fd fd7e 	bl	8000568 <__aeabi_f2d>
 8002a6c:	e9c7 0100 	strd	r0, r1, [r7]
 8002a70:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002a74:	f7fd fd78 	bl	8000568 <__aeabi_f2d>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	f107 0014 	add.w	r0, r7, #20
 8002a80:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8002a84:	ed97 7b00 	vldr	d7, [r7]
 8002a88:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002a8c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a90:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a94:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002a98:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a9c:	e9cd 4500 	strd	r4, r5, [sp]
 8002aa0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002aa4:	4a5a      	ldr	r2, [pc, #360]	@ (8002c10 <Print_IMU_Data+0x254>)
 8002aa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002aaa:	f00a f979 	bl	800cda0 <sniprintf>
             "LSM6DSV,%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n",
             timestamp, lsm_ax, lsm_ay, lsm_az, lsm_gx, lsm_gy, lsm_gz);
    tx_com((uint8_t*)buffer, strlen(buffer));
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fbec 	bl	8000290 <strlen>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fe76 	bl	80027b4 <tx_com>
  }
#endif

#if ENABLE_LIS2DW12
  /* LIS2DW12 output: LIS2DW12,timestamp,ax,ay,az */
  if (imu_status.lis2dw12_present)
 8002ac8:	4b4e      	ldr	r3, [pc, #312]	@ (8002c04 <Print_IMU_Data+0x248>)
 8002aca:	789b      	ldrb	r3, [r3, #2]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d045      	beq.n	8002b5c <Print_IMU_Data+0x1a0>
  {
    float lis_ax = lis2dw12_from_fs4_to_mg(lis2dw12_accel_raw[0]);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	@ (8002c14 <Print_IMU_Data+0x258>)
 8002ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fd12 	bl	8001500 <lis2dw12_from_fs4_to_mg>
 8002adc:	ed87 0a4a 	vstr	s0, [r7, #296]	@ 0x128
    float lis_ay = lis2dw12_from_fs4_to_mg(lis2dw12_accel_raw[1]);
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8002c14 <Print_IMU_Data+0x258>)
 8002ae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fd0a 	bl	8001500 <lis2dw12_from_fs4_to_mg>
 8002aec:	ed87 0a49 	vstr	s0, [r7, #292]	@ 0x124
    float lis_az = lis2dw12_from_fs4_to_mg(lis2dw12_accel_raw[2]);
 8002af0:	4b48      	ldr	r3, [pc, #288]	@ (8002c14 <Print_IMU_Data+0x258>)
 8002af2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fd02 	bl	8001500 <lis2dw12_from_fs4_to_mg>
 8002afc:	ed87 0a48 	vstr	s0, [r7, #288]	@ 0x120

    snprintf(buffer, sizeof(buffer),
 8002b00:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8002b04:	f7fd fd30 	bl	8000568 <__aeabi_f2d>
 8002b08:	4604      	mov	r4, r0
 8002b0a:	460d      	mov	r5, r1
 8002b0c:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8002b10:	f7fd fd2a 	bl	8000568 <__aeabi_f2d>
 8002b14:	4680      	mov	r8, r0
 8002b16:	4689      	mov	r9, r1
 8002b18:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8002b1c:	f7fd fd24 	bl	8000568 <__aeabi_f2d>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	f107 0014 	add.w	r0, r7, #20
 8002b28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b2c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002b30:	e9cd 4500 	strd	r4, r5, [sp]
 8002b34:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002b38:	4a37      	ldr	r2, [pc, #220]	@ (8002c18 <Print_IMU_Data+0x25c>)
 8002b3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b3e:	f00a f92f 	bl	800cda0 <sniprintf>
             "LIS2DW12,%lu,%.2f,%.2f,%.2f\r\n",
             timestamp, lis_ax, lis_ay, lis_az);
    tx_com((uint8_t*)buffer, strlen(buffer));
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fba2 	bl	8000290 <strlen>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fe2c 	bl	80027b4 <tx_com>
  }
#endif

  /* ADXL362 output: ADXL362,timestamp,ax,ay,az */
  if (imu_status.adxl362_present)
 8002b5c:	4b29      	ldr	r3, [pc, #164]	@ (8002c04 <Print_IMU_Data+0x248>)
 8002b5e:	78db      	ldrb	r3, [r3, #3]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d048      	beq.n	8002bf6 <Print_IMU_Data+0x23a>
  {
    float adxl_ax = ADXL362_RawToMg(adxl362_accel_raw[0], ADXL362_RANGE_2G);
 8002b64:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <Print_IMU_Data+0x260>)
 8002b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fc57 	bl	8001420 <ADXL362_RawToMg>
 8002b72:	ed87 0a47 	vstr	s0, [r7, #284]	@ 0x11c
    float adxl_ay = ADXL362_RawToMg(adxl362_accel_raw[1], ADXL362_RANGE_2G);
 8002b76:	4b29      	ldr	r3, [pc, #164]	@ (8002c1c <Print_IMU_Data+0x260>)
 8002b78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fc4e 	bl	8001420 <ADXL362_RawToMg>
 8002b84:	ed87 0a46 	vstr	s0, [r7, #280]	@ 0x118
    float adxl_az = ADXL362_RawToMg(adxl362_accel_raw[2], ADXL362_RANGE_2G);
 8002b88:	4b24      	ldr	r3, [pc, #144]	@ (8002c1c <Print_IMU_Data+0x260>)
 8002b8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fc45 	bl	8001420 <ADXL362_RawToMg>
 8002b96:	ed87 0a45 	vstr	s0, [r7, #276]	@ 0x114

    snprintf(buffer, sizeof(buffer),
 8002b9a:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8002b9e:	f7fd fce3 	bl	8000568 <__aeabi_f2d>
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	460d      	mov	r5, r1
 8002ba6:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8002baa:	f7fd fcdd 	bl	8000568 <__aeabi_f2d>
 8002bae:	4680      	mov	r8, r0
 8002bb0:	4689      	mov	r9, r1
 8002bb2:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8002bb6:	f7fd fcd7 	bl	8000568 <__aeabi_f2d>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	f107 0014 	add.w	r0, r7, #20
 8002bc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002bc6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002bca:	e9cd 4500 	strd	r4, r5, [sp]
 8002bce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002bd2:	4a13      	ldr	r2, [pc, #76]	@ (8002c20 <Print_IMU_Data+0x264>)
 8002bd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002bd8:	f00a f8e2 	bl	800cda0 <sniprintf>
             "ADXL362,%lu,%.2f,%.2f,%.2f\r\n",
             timestamp, adxl_ax, adxl_ay, adxl_az);
    tx_com((uint8_t*)buffer, strlen(buffer));
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fb55 	bl	8000290 <strlen>
 8002be6:	4603      	mov	r3, r0
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fddf 	bl	80027b4 <tx_com>
             timestamp, adxl_ax, adxl_ay, adxl_az);
    tx_com((uint8_t*)buffer, strlen(buffer));
  }

#endif
}
 8002bf6:	bf00      	nop
 8002bf8:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c02:	bf00      	nop
 8002c04:	200003cc 	.word	0x200003cc
 8002c08:	20000404 	.word	0x20000404
 8002c0c:	2000040c 	.word	0x2000040c
 8002c10:	080109a4 	.word	0x080109a4
 8002c14:	20000414 	.word	0x20000414
 8002c18:	080109d0 	.word	0x080109d0
 8002c1c:	2000041c 	.word	0x2000041c
 8002c20:	080109f0 	.word	0x080109f0

08002c24 <__io_putchar>:
 * @note   This enables printf() to work via USART1 at 1Mbit
 */
#ifdef __GNUC__
/* For GCC/G++ compiler */
int __io_putchar(int ch)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002c2c:	1d39      	adds	r1, r7, #4
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c32:	2201      	movs	r2, #1
 8002c34:	4803      	ldr	r0, [pc, #12]	@ (8002c44 <__io_putchar+0x20>)
 8002c36:	f008 fcef 	bl	800b618 <HAL_UART_Transmit>
  return ch;
 8002c3a:	687b      	ldr	r3, [r7, #4]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000338 	.word	0x20000338

08002c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0c2      	sub	sp, #264	@ 0x108
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c4e:	f001 f8c7 	bl	8003de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8002c52:	f000 fa88 	bl	8003166 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8002c56:	f000 fa3f 	bl	80030d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c5a:	f000 fbf3 	bl	8003444 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8002c5e:	f000 fad1 	bl	8003204 <MX_ICACHE_Init>
  MX_I2C2_Init();
 8002c62:	f000 fa8f 	bl	8003184 <MX_I2C2_Init>
  MX_TIM2_Init();
 8002c66:	f000 fb51 	bl	800330c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002c6a:	f000 fadf 	bl	800322c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002c6e:	f000 fb9b 	bl	80033a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Set ADXL362 CS pin HIGH (idle state) - must be done after GPIO init */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002c72:	2201      	movs	r2, #1
 8002c74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c78:	48b1      	ldr	r0, [pc, #708]	@ (8002f40 <main+0x2f8>)
 8002c7a:	f001 fd97 	bl	80047ac <HAL_GPIO_WritePin>

  /* Wait for ADXL362 to power up (datasheet: max 6ms settling time) */
  HAL_Delay(50);
 8002c7e:	2032      	movs	r0, #50	@ 0x32
 8002c80:	f001 f974 	bl	8003f6c <HAL_Delay>

  /* Start the microsecond timer */
  HAL_TIM_Base_Start(&htim2);
 8002c84:	48af      	ldr	r0, [pc, #700]	@ (8002f44 <main+0x2fc>)
 8002c86:	f008 f81d 	bl	800acc4 <HAL_TIM_Base_Start>

  /* USART1 already initialized at 1Mbit via MX_USART1_UART_Init() */

  /* Wait for peripherals to stabilize */
  HAL_Delay(100);
 8002c8a:	2064      	movs	r0, #100	@ 0x64
 8002c8c:	f001 f96e 	bl	8003f6c <HAL_Delay>

  /* Scan I2C bus for connected devices */
  I2C_Scan();
 8002c90:	f7ff fda4 	bl	80027dc <I2C_Scan>

  /* Initialize IMU sensors - attempt each one and track which are present */
  char buffer[256];

#if ENABLE_LSM6DSV
  imu_status.lsm6dsv_present = LSM6DSV_Init();
 8002c94:	f7ff fc96 	bl	80025c4 <LSM6DSV_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4baa      	ldr	r3, [pc, #680]	@ (8002f48 <main+0x300>)
 8002c9e:	701a      	strb	r2, [r3, #0]
#endif

#if ENABLE_LSM6DSOX
  imu_status.lsm6dsox_present = LSM6DSOX_Init();
#else
  imu_status.lsm6dsox_present = 0;
 8002ca0:	4ba9      	ldr	r3, [pc, #676]	@ (8002f48 <main+0x300>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	705a      	strb	r2, [r3, #1]
#endif

#if ENABLE_LIS2DW12
  imu_status.lis2dw12_present = LIS2DW12_Init();
 8002ca6:	f7ff fce3 	bl	8002670 <LIS2DW12_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	4ba6      	ldr	r3, [pc, #664]	@ (8002f48 <main+0x300>)
 8002cb0:	709a      	strb	r2, [r3, #2]
  imu_status.lis2dw12_present = 0;
#endif

#if ENABLE_ADXL362
  /* Initialize ADXL362 context */
  adxl362_ctx.hspi = &hspi1;
 8002cb2:	4ba6      	ldr	r3, [pc, #664]	@ (8002f4c <main+0x304>)
 8002cb4:	4aa6      	ldr	r2, [pc, #664]	@ (8002f50 <main+0x308>)
 8002cb6:	601a      	str	r2, [r3, #0]
  adxl362_ctx.cs_port = ADXL362_CS_PORT;
 8002cb8:	4ba4      	ldr	r3, [pc, #656]	@ (8002f4c <main+0x304>)
 8002cba:	4aa1      	ldr	r2, [pc, #644]	@ (8002f40 <main+0x2f8>)
 8002cbc:	605a      	str	r2, [r3, #4]
  adxl362_ctx.cs_pin = ADXL362_CS_PIN;
 8002cbe:	4ba3      	ldr	r3, [pc, #652]	@ (8002f4c <main+0x304>)
 8002cc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cc4:	811a      	strh	r2, [r3, #8]

  /* Debug: Try to read device ID registers */
  snprintf(buffer, sizeof(buffer), "\r\nADXL362 Debug: Attempting SPI communication...\r\n");
 8002cc6:	f107 0308 	add.w	r3, r7, #8
 8002cca:	4aa2      	ldr	r2, [pc, #648]	@ (8002f54 <main+0x30c>)
 8002ccc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f00a f865 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fad8 	bl	8000290 <strlen>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	f107 0308 	add.w	r3, r7, #8
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fd62 	bl	80027b4 <tx_com>

  uint8_t devid_ad, devid_mst, partid;
  ADXL362_ReadDeviceIDs(&adxl362_ctx, &devid_ad, &devid_mst, &partid);
 8002cf0:	1d7b      	adds	r3, r7, #5
 8002cf2:	1dba      	adds	r2, r7, #6
 8002cf4:	1df9      	adds	r1, r7, #7
 8002cf6:	4895      	ldr	r0, [pc, #596]	@ (8002f4c <main+0x304>)
 8002cf8:	f7fe fad0 	bl	800129c <ADXL362_ReadDeviceIDs>

  snprintf(buffer, sizeof(buffer), "  Read DEVID_AD:  0x%02X (expected 0xAD)\r\n", devid_ad);
 8002cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d00:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	f107 0008 	add.w	r0, r7, #8
 8002d0a:	4a93      	ldr	r2, [pc, #588]	@ (8002f58 <main+0x310>)
 8002d0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d10:	f00a f846 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fab9 	bl	8000290 <strlen>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	f107 0308 	add.w	r3, r7, #8
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fd43 	bl	80027b4 <tx_com>
  snprintf(buffer, sizeof(buffer), "  Read DEVID_MST: 0x%02X (expected 0x1D)\r\n", devid_mst);
 8002d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d32:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	f107 0008 	add.w	r0, r7, #8
 8002d3c:	4a87      	ldr	r2, [pc, #540]	@ (8002f5c <main+0x314>)
 8002d3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d42:	f00a f82d 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd faa0 	bl	8000290 <strlen>
 8002d50:	4603      	mov	r3, r0
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	f107 0308 	add.w	r3, r7, #8
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fd2a 	bl	80027b4 <tx_com>
  snprintf(buffer, sizeof(buffer), "  Read PARTID:    0x%02X (expected 0xF2)\r\n", partid);
 8002d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d64:	f2a3 1303 	subw	r3, r3, #259	@ 0x103
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	f107 0008 	add.w	r0, r7, #8
 8002d6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f60 <main+0x318>)
 8002d70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d74:	f00a f814 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002d78:	f107 0308 	add.w	r3, r7, #8
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fa87 	bl	8000290 <strlen>
 8002d82:	4603      	mov	r3, r0
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fd11 	bl	80027b4 <tx_com>

  /* Try basic device detection */
  if (ADXL362_CheckDevice(&adxl362_ctx))
 8002d92:	486e      	ldr	r0, [pc, #440]	@ (8002f4c <main+0x304>)
 8002d94:	f7fe faa5 	bl	80012e2 <ADXL362_CheckDevice>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d04b      	beq.n	8002e36 <main+0x1ee>
  {
    snprintf(buffer, sizeof(buffer), "ADXL362 device ID verified! Initializing...\r\n");
 8002d9e:	f107 0308 	add.w	r3, r7, #8
 8002da2:	4a70      	ldr	r2, [pc, #448]	@ (8002f64 <main+0x31c>)
 8002da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002da8:	4618      	mov	r0, r3
 8002daa:	f009 fff9 	bl	800cda0 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8002dae:	f107 0308 	add.w	r3, r7, #8
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fa6c 	bl	8000290 <strlen>
 8002db8:	4603      	mov	r3, r0
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	f107 0308 	add.w	r3, r7, #8
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fcf6 	bl	80027b4 <tx_com>

    imu_status.adxl362_present = ADXL362_Init(&adxl362_ctx);
 8002dc8:	4860      	ldr	r0, [pc, #384]	@ (8002f4c <main+0x304>)
 8002dca:	f7fe fab7 	bl	800133c <ADXL362_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f48 <main+0x300>)
 8002dd4:	70da      	strb	r2, [r3, #3]

    if (imu_status.adxl362_present)
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f48 <main+0x300>)
 8002dd8:	78db      	ldrb	r3, [r3, #3]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d015      	beq.n	8002e0a <main+0x1c2>
    {
      snprintf(buffer, sizeof(buffer), "ADXL362 initialization SUCCESS!\r\n");
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	4a61      	ldr	r2, [pc, #388]	@ (8002f68 <main+0x320>)
 8002de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002de8:	4618      	mov	r0, r3
 8002dea:	f009 ffd9 	bl	800cda0 <sniprintf>
      tx_com((uint8_t*)buffer, strlen(buffer));
 8002dee:	f107 0308 	add.w	r3, r7, #8
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fa4c 	bl	8000290 <strlen>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	f107 0308 	add.w	r3, r7, #8
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fcd6 	bl	80027b4 <tx_com>
 8002e08:	e02d      	b.n	8002e66 <main+0x21e>
    }
    else
    {
      snprintf(buffer, sizeof(buffer), "ADXL362 initialization FAILED (reset or config error)\r\n");
 8002e0a:	f107 0308 	add.w	r3, r7, #8
 8002e0e:	4a57      	ldr	r2, [pc, #348]	@ (8002f6c <main+0x324>)
 8002e10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e14:	4618      	mov	r0, r3
 8002e16:	f009 ffc3 	bl	800cda0 <sniprintf>
      tx_com((uint8_t*)buffer, strlen(buffer));
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fa36 	bl	8000290 <strlen>
 8002e24:	4603      	mov	r3, r0
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	f107 0308 	add.w	r3, r7, #8
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fcc0 	bl	80027b4 <tx_com>
 8002e34:	e017      	b.n	8002e66 <main+0x21e>
    }
  }
  else
  {
    snprintf(buffer, sizeof(buffer), "ADXL362 device ID check FAILED - no communication\r\n");
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f70 <main+0x328>)
 8002e3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e40:	4618      	mov	r0, r3
 8002e42:	f009 ffad 	bl	800cda0 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fa20 	bl	8000290 <strlen>
 8002e50:	4603      	mov	r3, r0
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	f107 0308 	add.w	r3, r7, #8
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fcaa 	bl	80027b4 <tx_com>
    imu_status.adxl362_present = 0;
 8002e60:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <main+0x300>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	70da      	strb	r2, [r3, #3]
#else
  imu_status.adxl362_present = 0;
#endif

  /* Print detected IMU status */
  snprintf(buffer, sizeof(buffer), "\r\n=== IMU Detection Results ===\r\n");
 8002e66:	f107 0308 	add.w	r3, r7, #8
 8002e6a:	4a42      	ldr	r2, [pc, #264]	@ (8002f74 <main+0x32c>)
 8002e6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e70:	4618      	mov	r0, r3
 8002e72:	f009 ff95 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fa08 	bl	8000290 <strlen>
 8002e80:	4603      	mov	r3, r0
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	f107 0308 	add.w	r3, r7, #8
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fc92 	bl	80027b4 <tx_com>

  snprintf(buffer, sizeof(buffer), "LSM6DSV (6-axis I2C):    %s\r\n",
           imu_status.lsm6dsv_present ? "DETECTED" : "NOT FOUND");
 8002e90:	4b2d      	ldr	r3, [pc, #180]	@ (8002f48 <main+0x300>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
  snprintf(buffer, sizeof(buffer), "LSM6DSV (6-axis I2C):    %s\r\n",
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <main+0x254>
 8002e98:	4b37      	ldr	r3, [pc, #220]	@ (8002f78 <main+0x330>)
 8002e9a:	e000      	b.n	8002e9e <main+0x256>
 8002e9c:	4b37      	ldr	r3, [pc, #220]	@ (8002f7c <main+0x334>)
 8002e9e:	f107 0008 	add.w	r0, r7, #8
 8002ea2:	4a37      	ldr	r2, [pc, #220]	@ (8002f80 <main+0x338>)
 8002ea4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ea8:	f009 ff7a 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002eac:	f107 0308 	add.w	r3, r7, #8
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd f9ed 	bl	8000290 <strlen>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	f107 0308 	add.w	r3, r7, #8
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fc77 	bl	80027b4 <tx_com>

  snprintf(buffer, sizeof(buffer), "LSM6DSOX (6-axis I2C):   %s\r\n",
           imu_status.lsm6dsox_present ? "DETECTED" : "NOT FOUND");
 8002ec6:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <main+0x300>)
 8002ec8:	785b      	ldrb	r3, [r3, #1]
  snprintf(buffer, sizeof(buffer), "LSM6DSOX (6-axis I2C):   %s\r\n",
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <main+0x28a>
 8002ece:	4b2a      	ldr	r3, [pc, #168]	@ (8002f78 <main+0x330>)
 8002ed0:	e000      	b.n	8002ed4 <main+0x28c>
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f7c <main+0x334>)
 8002ed4:	f107 0008 	add.w	r0, r7, #8
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f84 <main+0x33c>)
 8002eda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ede:	f009 ff5f 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd f9d2 	bl	8000290 <strlen>
 8002eec:	4603      	mov	r3, r0
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	f107 0308 	add.w	r3, r7, #8
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fc5c 	bl	80027b4 <tx_com>

  snprintf(buffer, sizeof(buffer), "LIS2DW12 (3-axis I2C):   %s\r\n",
           imu_status.lis2dw12_present ? "DETECTED" : "NOT FOUND");
 8002efc:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <main+0x300>)
 8002efe:	789b      	ldrb	r3, [r3, #2]
  snprintf(buffer, sizeof(buffer), "LIS2DW12 (3-axis I2C):   %s\r\n",
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <main+0x2c0>
 8002f04:	4b1c      	ldr	r3, [pc, #112]	@ (8002f78 <main+0x330>)
 8002f06:	e000      	b.n	8002f0a <main+0x2c2>
 8002f08:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <main+0x334>)
 8002f0a:	f107 0008 	add.w	r0, r7, #8
 8002f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f88 <main+0x340>)
 8002f10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f14:	f009 ff44 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002f18:	f107 0308 	add.w	r3, r7, #8
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd f9b7 	bl	8000290 <strlen>
 8002f22:	4603      	mov	r3, r0
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	f107 0308 	add.w	r3, r7, #8
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fc41 	bl	80027b4 <tx_com>

  snprintf(buffer, sizeof(buffer), "ADXL362 (3-axis SPI):    %s\r\n",
           imu_status.adxl362_present ? "DETECTED" : "NOT FOUND");
 8002f32:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <main+0x300>)
 8002f34:	78db      	ldrb	r3, [r3, #3]
  snprintf(buffer, sizeof(buffer), "ADXL362 (3-axis SPI):    %s\r\n",
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d028      	beq.n	8002f8c <main+0x344>
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f78 <main+0x330>)
 8002f3c:	e027      	b.n	8002f8e <main+0x346>
 8002f3e:	bf00      	nop
 8002f40:	42021000 	.word	0x42021000
 8002f44:	200002ec 	.word	0x200002ec
 8002f48:	200003cc 	.word	0x200003cc
 8002f4c:	200003f8 	.word	0x200003f8
 8002f50:	2000025c 	.word	0x2000025c
 8002f54:	08010a10 	.word	0x08010a10
 8002f58:	08010a44 	.word	0x08010a44
 8002f5c:	08010a70 	.word	0x08010a70
 8002f60:	08010a9c 	.word	0x08010a9c
 8002f64:	08010ac8 	.word	0x08010ac8
 8002f68:	08010af8 	.word	0x08010af8
 8002f6c:	08010b1c 	.word	0x08010b1c
 8002f70:	08010b54 	.word	0x08010b54
 8002f74:	08010b88 	.word	0x08010b88
 8002f78:	08010bac 	.word	0x08010bac
 8002f7c:	08010bb8 	.word	0x08010bb8
 8002f80:	08010bc4 	.word	0x08010bc4
 8002f84:	08010be4 	.word	0x08010be4
 8002f88:	08010c04 	.word	0x08010c04
 8002f8c:	4b4c      	ldr	r3, [pc, #304]	@ (80030c0 <main+0x478>)
 8002f8e:	f107 0008 	add.w	r0, r7, #8
 8002f92:	4a4c      	ldr	r2, [pc, #304]	@ (80030c4 <main+0x47c>)
 8002f94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f98:	f009 ff02 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002f9c:	f107 0308 	add.w	r3, r7, #8
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd f975 	bl	8000290 <strlen>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	f107 0308 	add.w	r3, r7, #8
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fbff 	bl	80027b4 <tx_com>

  snprintf(buffer, sizeof(buffer), "==============================\r\n\r\n");
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	4a43      	ldr	r2, [pc, #268]	@ (80030c8 <main+0x480>)
 8002fbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f009 feed 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8002fc6:	f107 0308 	add.w	r3, r7, #8
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd f960 	bl	8000290 <strlen>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	f107 0308 	add.w	r3, r7, #8
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fbea 	bl	80027b4 <tx_com>

  /* Check if at least one IMU is present */
  if (!imu_status.lsm6dsv_present && !imu_status.lsm6dsox_present && !imu_status.lis2dw12_present && !imu_status.adxl362_present)
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80030cc <main+0x484>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d120      	bne.n	800302a <main+0x3e2>
 8002fe8:	4b38      	ldr	r3, [pc, #224]	@ (80030cc <main+0x484>)
 8002fea:	785b      	ldrb	r3, [r3, #1]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d11c      	bne.n	800302a <main+0x3e2>
 8002ff0:	4b36      	ldr	r3, [pc, #216]	@ (80030cc <main+0x484>)
 8002ff2:	789b      	ldrb	r3, [r3, #2]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d118      	bne.n	800302a <main+0x3e2>
 8002ff8:	4b34      	ldr	r3, [pc, #208]	@ (80030cc <main+0x484>)
 8002ffa:	78db      	ldrb	r3, [r3, #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d114      	bne.n	800302a <main+0x3e2>
  {
    snprintf(buffer, sizeof(buffer), "ERROR: No IMUs detected! Check connections.\r\n");
 8003000:	f107 0308 	add.w	r3, r7, #8
 8003004:	4a32      	ldr	r2, [pc, #200]	@ (80030d0 <main+0x488>)
 8003006:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800300a:	4618      	mov	r0, r3
 800300c:	f009 fec8 	bl	800cda0 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8003010:	f107 0308 	add.w	r3, r7, #8
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd f93b 	bl	8000290 <strlen>
 800301a:	4603      	mov	r3, r0
 800301c:	b29a      	uxth	r2, r3
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fbc5 	bl	80027b4 <tx_com>
  }

  /* Print CSV header or startup message */
#if (OUTPUT_FORMAT == 0)
  snprintf(buffer, sizeof(buffer), "Starting data acquisition (CSV format)...\r\n\r\n");
 800302a:	f107 0308 	add.w	r3, r7, #8
 800302e:	4a29      	ldr	r2, [pc, #164]	@ (80030d4 <main+0x48c>)
 8003030:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003034:	4618      	mov	r0, r3
 8003036:	f009 feb3 	bl	800cda0 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 800303a:	f107 0308 	add.w	r3, r7, #8
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd f926 	bl	8000290 <strlen>
 8003044:	4603      	mov	r3, r0
 8003046:	b29a      	uxth	r2, r3
 8003048:	f107 0308 	add.w	r3, r7, #8
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fbb0 	bl	80027b4 <tx_com>
#endif

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8003054:	2000      	movs	r0, #0
 8003056:	f000 fd93 	bl	8003b80 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800305a:	2001      	movs	r0, #1
 800305c:	f000 fd90 	bl	8003b80 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003060:	2002      	movs	r0, #2
 8003062:	f000 fd8d 	bl	8003b80 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003066:	2101      	movs	r1, #1
 8003068:	2000      	movs	r0, #0
 800306a:	f000 fe19 	bl	8003ca0 <BSP_PB_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Read data only from detected IMUs */
#if ENABLE_LSM6DSV
    if (imu_status.lsm6dsv_present)
 800306e:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <main+0x484>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <main+0x432>
    {
      LSM6DSV_ReadData();
 8003076:	f7ff fb45 	bl	8002704 <LSM6DSV_ReadData>
      LSM6DSOX_ReadData();
    }
#endif

#if ENABLE_LIS2DW12
    if (imu_status.lis2dw12_present)
 800307a:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <main+0x484>)
 800307c:	789b      	ldrb	r3, [r3, #2]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <main+0x43e>
    {
      LIS2DW12_ReadData();
 8003082:	f7ff fb65 	bl	8002750 <LIS2DW12_ReadData>
    }
#endif

    if (imu_status.adxl362_present)
 8003086:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <main+0x484>)
 8003088:	78db      	ldrb	r3, [r3, #3]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <main+0x44a>
    {
      ADXL362_ReadDataWrapper();
 800308e:	f7ff fb79 	bl	8002784 <ADXL362_ReadDataWrapper>
    }

    /* Print the timestamped data (only outputs data from detected IMUs) */
    if (imu_status.lsm6dsv_present || imu_status.lsm6dsox_present || imu_status.lis2dw12_present || imu_status.adxl362_present)
 8003092:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <main+0x484>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10b      	bne.n	80030b2 <main+0x46a>
 800309a:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <main+0x484>)
 800309c:	785b      	ldrb	r3, [r3, #1]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d107      	bne.n	80030b2 <main+0x46a>
 80030a2:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <main+0x484>)
 80030a4:	789b      	ldrb	r3, [r3, #2]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <main+0x46a>
 80030aa:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <main+0x484>)
 80030ac:	78db      	ldrb	r3, [r3, #3]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <main+0x46e>
    {
      Print_IMU_Data();
 80030b2:	f7ff fc83 	bl	80029bc <Print_IMU_Data>
    }

    /* Small delay to prevent overwhelming the system */
    /* Note: In low power mode, ADXL362 samples at 6 Hz (~167ms period) */
    HAL_Delay(10);  // 10ms delay -> ~100 Hz loop rate
 80030b6:	200a      	movs	r0, #10
 80030b8:	f000 ff58 	bl	8003f6c <HAL_Delay>
    if (imu_status.lsm6dsv_present)
 80030bc:	e7d7      	b.n	800306e <main+0x426>
 80030be:	bf00      	nop
 80030c0:	08010bb8 	.word	0x08010bb8
 80030c4:	08010c24 	.word	0x08010c24
 80030c8:	08010c44 	.word	0x08010c44
 80030cc:	200003cc 	.word	0x200003cc
 80030d0:	08010c68 	.word	0x08010c68
 80030d4:	08010c98 	.word	0x08010c98

080030d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b09e      	sub	sp, #120	@ 0x78
 80030dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030de:	f107 0318 	add.w	r3, r7, #24
 80030e2:	2260      	movs	r2, #96	@ 0x60
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f00a fdfa 	bl	800dce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030ec:	463b      	mov	r3, r7
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80030fc:	2000      	movs	r0, #0
 80030fe:	f002 fac7 	bl	8005690 <HAL_PWREx_ControlVoltageScaling>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003108:	f000 fa5c 	bl	80035c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800310c:	2302      	movs	r3, #2
 800310e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003110:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003116:	2310      	movs	r3, #16
 8003118:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800311a:	2300      	movs	r3, #0
 800311c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800311e:	f107 0318 	add.w	r3, r7, #24
 8003122:	4618      	mov	r0, r3
 8003124:	f002 fbb0 	bl	8005888 <HAL_RCC_OscConfig>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800312e:	f000 fa49 	bl	80035c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003132:	231f      	movs	r3, #31
 8003134:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003136:	2301      	movs	r3, #1
 8003138:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800314a:	463b      	mov	r3, r7
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f003 fa76 	bl	8006640 <HAL_RCC_ClockConfig>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800315a:	f000 fa33 	bl	80035c4 <Error_Handler>
  }
}
 800315e:	bf00      	nop
 8003160:	3778      	adds	r7, #120	@ 0x78
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800316a:	f002 fb7d 	bl	8005868 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800316e:	2002      	movs	r0, #2
 8003170:	f002 fb1a 	bl	80057a8 <HAL_PWREx_ConfigSupply>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800317a:	f000 fa23 	bl	80035c4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003188:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <MX_I2C2_Init+0x74>)
 800318a:	4a1c      	ldr	r2, [pc, #112]	@ (80031fc <MX_I2C2_Init+0x78>)
 800318c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 800318e:	4b1a      	ldr	r3, [pc, #104]	@ (80031f8 <MX_I2C2_Init+0x74>)
 8003190:	4a1b      	ldr	r2, [pc, #108]	@ (8003200 <MX_I2C2_Init+0x7c>)
 8003192:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003194:	4b18      	ldr	r3, [pc, #96]	@ (80031f8 <MX_I2C2_Init+0x74>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800319a:	4b17      	ldr	r3, [pc, #92]	@ (80031f8 <MX_I2C2_Init+0x74>)
 800319c:	2201      	movs	r2, #1
 800319e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031a0:	4b15      	ldr	r3, [pc, #84]	@ (80031f8 <MX_I2C2_Init+0x74>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80031a6:	4b14      	ldr	r3, [pc, #80]	@ (80031f8 <MX_I2C2_Init+0x74>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80031ac:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <MX_I2C2_Init+0x74>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031b2:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <MX_I2C2_Init+0x74>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031b8:	4b0f      	ldr	r3, [pc, #60]	@ (80031f8 <MX_I2C2_Init+0x74>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80031be:	480e      	ldr	r0, [pc, #56]	@ (80031f8 <MX_I2C2_Init+0x74>)
 80031c0:	f001 fb0c 	bl	80047dc <HAL_I2C_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80031ca:	f000 f9fb 	bl	80035c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031ce:	2100      	movs	r1, #0
 80031d0:	4809      	ldr	r0, [pc, #36]	@ (80031f8 <MX_I2C2_Init+0x74>)
 80031d2:	f002 f995 	bl	8005500 <HAL_I2CEx_ConfigAnalogFilter>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80031dc:	f000 f9f2 	bl	80035c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80031e0:	2100      	movs	r1, #0
 80031e2:	4805      	ldr	r0, [pc, #20]	@ (80031f8 <MX_I2C2_Init+0x74>)
 80031e4:	f002 f9d7 	bl	8005596 <HAL_I2CEx_ConfigDigitalFilter>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80031ee:	f000 f9e9 	bl	80035c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000208 	.word	0x20000208
 80031fc:	40005800 	.word	0x40005800
 8003200:	0010061a 	.word	0x0010061a

08003204 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8003208:	2000      	movs	r0, #0
 800320a:	f002 fa11 	bl	8005630 <HAL_ICACHE_ConfigAssociativityMode>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8003214:	f000 f9d6 	bl	80035c4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8003218:	f002 fa2a 	bl	8005670 <HAL_ICACHE_Enable>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8003222:	f000 f9cf 	bl	80035c4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800323c:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <MX_SPI1_Init+0xd8>)
 800323e:	4a32      	ldr	r2, [pc, #200]	@ (8003308 <MX_SPI1_Init+0xdc>)
 8003240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003242:	4b30      	ldr	r3, [pc, #192]	@ (8003304 <MX_SPI1_Init+0xd8>)
 8003244:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800324a:	4b2e      	ldr	r3, [pc, #184]	@ (8003304 <MX_SPI1_Init+0xd8>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003250:	4b2c      	ldr	r3, [pc, #176]	@ (8003304 <MX_SPI1_Init+0xd8>)
 8003252:	2207      	movs	r2, #7
 8003254:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003256:	4b2b      	ldr	r3, [pc, #172]	@ (8003304 <MX_SPI1_Init+0xd8>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800325c:	4b29      	ldr	r3, [pc, #164]	@ (8003304 <MX_SPI1_Init+0xd8>)
 800325e:	2200      	movs	r2, #0
 8003260:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003262:	4b28      	ldr	r3, [pc, #160]	@ (8003304 <MX_SPI1_Init+0xd8>)
 8003264:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003268:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800326a:	4b26      	ldr	r3, [pc, #152]	@ (8003304 <MX_SPI1_Init+0xd8>)
 800326c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003272:	4b24      	ldr	r3, [pc, #144]	@ (8003304 <MX_SPI1_Init+0xd8>)
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003278:	4b22      	ldr	r3, [pc, #136]	@ (8003304 <MX_SPI1_Init+0xd8>)
 800327a:	2200      	movs	r2, #0
 800327c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327e:	4b21      	ldr	r3, [pc, #132]	@ (8003304 <MX_SPI1_Init+0xd8>)
 8003280:	2200      	movs	r2, #0
 8003282:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003284:	4b1f      	ldr	r3, [pc, #124]	@ (8003304 <MX_SPI1_Init+0xd8>)
 8003286:	2207      	movs	r2, #7
 8003288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800328a:	4b1e      	ldr	r3, [pc, #120]	@ (8003304 <MX_SPI1_Init+0xd8>)
 800328c:	2200      	movs	r2, #0
 800328e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 8003290:	4b1c      	ldr	r3, [pc, #112]	@ (8003304 <MX_SPI1_Init+0xd8>)
 8003292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003296:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003298:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <MX_SPI1_Init+0xd8>)
 800329a:	2200      	movs	r2, #0
 800329c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800329e:	4b19      	ldr	r3, [pc, #100]	@ (8003304 <MX_SPI1_Init+0xd8>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80032a4:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <MX_SPI1_Init+0xd8>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80032aa:	4b16      	ldr	r3, [pc, #88]	@ (8003304 <MX_SPI1_Init+0xd8>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80032b0:	4b14      	ldr	r3, [pc, #80]	@ (8003304 <MX_SPI1_Init+0xd8>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80032b6:	4b13      	ldr	r3, [pc, #76]	@ (8003304 <MX_SPI1_Init+0xd8>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80032bc:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <MX_SPI1_Init+0xd8>)
 80032be:	2200      	movs	r2, #0
 80032c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80032c2:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <MX_SPI1_Init+0xd8>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032c8:	480e      	ldr	r0, [pc, #56]	@ (8003304 <MX_SPI1_Init+0xd8>)
 80032ca:	f006 fcef 	bl	8009cac <HAL_SPI_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 80032d4:	f000 f976 	bl	80035c4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80032d8:	2300      	movs	r3, #0
 80032da:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80032dc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80032e0:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	4619      	mov	r1, r3
 80032ea:	4806      	ldr	r0, [pc, #24]	@ (8003304 <MX_SPI1_Init+0xd8>)
 80032ec:	f007 fc51 	bl	800ab92 <HAL_SPIEx_SetConfigAutonomousMode>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 80032f6:	f000 f965 	bl	80035c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	2000025c 	.word	0x2000025c
 8003308:	40013000 	.word	0x40013000

0800330c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003312:	f107 0310 	add.w	r3, r7, #16
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	1d3b      	adds	r3, r7, #4
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800332a:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <MX_TIM2_Init+0x98>)
 800332c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003330:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8003332:	4b1c      	ldr	r3, [pc, #112]	@ (80033a4 <MX_TIM2_Init+0x98>)
 8003334:	220f      	movs	r2, #15
 8003336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003338:	4b1a      	ldr	r3, [pc, #104]	@ (80033a4 <MX_TIM2_Init+0x98>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800333e:	4b19      	ldr	r3, [pc, #100]	@ (80033a4 <MX_TIM2_Init+0x98>)
 8003340:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003346:	4b17      	ldr	r3, [pc, #92]	@ (80033a4 <MX_TIM2_Init+0x98>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800334c:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <MX_TIM2_Init+0x98>)
 800334e:	2280      	movs	r2, #128	@ 0x80
 8003350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003352:	4814      	ldr	r0, [pc, #80]	@ (80033a4 <MX_TIM2_Init+0x98>)
 8003354:	f007 fc5e 	bl	800ac14 <HAL_TIM_Base_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800335e:	f000 f931 	bl	80035c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003366:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003368:	f107 0310 	add.w	r3, r7, #16
 800336c:	4619      	mov	r1, r3
 800336e:	480d      	ldr	r0, [pc, #52]	@ (80033a4 <MX_TIM2_Init+0x98>)
 8003370:	f007 fd40 	bl	800adf4 <HAL_TIM_ConfigClockSource>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800337a:	f000 f923 	bl	80035c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4806      	ldr	r0, [pc, #24]	@ (80033a4 <MX_TIM2_Init+0x98>)
 800338c:	f008 f832 	bl	800b3f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003396:	f000 f915 	bl	80035c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800339a:	bf00      	nop
 800339c:	3720      	adds	r7, #32
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200002ec 	.word	0x200002ec

080033a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033ac:	4b22      	ldr	r3, [pc, #136]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033ae:	4a23      	ldr	r2, [pc, #140]	@ (800343c <MX_USART1_UART_Init+0x94>)
 80033b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80033b2:	4b21      	ldr	r3, [pc, #132]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033b4:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <MX_USART1_UART_Init+0x98>)
 80033b6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033be:	4b1e      	ldr	r3, [pc, #120]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033cc:	220c      	movs	r2, #12
 80033ce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033d0:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d6:	4b18      	ldr	r3, [pc, #96]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033d8:	2200      	movs	r2, #0
 80033da:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033dc:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033de:	2200      	movs	r2, #0
 80033e0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033e2:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033e8:	4b13      	ldr	r3, [pc, #76]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033ee:	4812      	ldr	r0, [pc, #72]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 80033f0:	f008 f8c2 	bl	800b578 <HAL_UART_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80033fa:	f000 f8e3 	bl	80035c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033fe:	2100      	movs	r1, #0
 8003400:	480d      	ldr	r0, [pc, #52]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 8003402:	f008 fd9d 	bl	800bf40 <HAL_UARTEx_SetTxFifoThreshold>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800340c:	f000 f8da 	bl	80035c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003410:	2100      	movs	r1, #0
 8003412:	4809      	ldr	r0, [pc, #36]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 8003414:	f008 fdd2 	bl	800bfbc <HAL_UARTEx_SetRxFifoThreshold>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800341e:	f000 f8d1 	bl	80035c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003422:	4805      	ldr	r0, [pc, #20]	@ (8003438 <MX_USART1_UART_Init+0x90>)
 8003424:	f008 fd53 	bl	800bece <HAL_UARTEx_DisableFifoMode>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800342e:	f000 f8c9 	bl	80035c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000338 	.word	0x20000338
 800343c:	40013800 	.word	0x40013800
 8003440:	000f4240 	.word	0x000f4240

08003444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	605a      	str	r2, [r3, #4]
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	60da      	str	r2, [r3, #12]
 8003458:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800345a:	4b55      	ldr	r3, [pc, #340]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 800345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003460:	4a53      	ldr	r2, [pc, #332]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800346a:	4b51      	ldr	r3, [pc, #324]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 800346c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003478:	4b4d      	ldr	r3, [pc, #308]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 800347a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800347e:	4a4c      	ldr	r2, [pc, #304]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 8003480:	f043 0310 	orr.w	r3, r3, #16
 8003484:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003488:	4b49      	ldr	r3, [pc, #292]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 800348a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003496:	4b46      	ldr	r3, [pc, #280]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 8003498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800349c:	4a44      	ldr	r2, [pc, #272]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 800349e:	f043 0302 	orr.w	r3, r3, #2
 80034a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80034a6:	4b42      	ldr	r3, [pc, #264]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 80034a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b4:	4b3e      	ldr	r3, [pc, #248]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 80034b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ba:	4a3d      	ldr	r2, [pc, #244]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80034c4:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <MX_GPIO_Init+0x16c>)
 80034c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80034d2:	2200      	movs	r2, #0
 80034d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034d8:	4836      	ldr	r0, [pc, #216]	@ (80035b4 <MX_GPIO_Init+0x170>)
 80034da:	f001 f967 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 80034de:	2200      	movs	r2, #0
 80034e0:	2120      	movs	r1, #32
 80034e2:	4835      	ldr	r0, [pc, #212]	@ (80035b8 <MX_GPIO_Init+0x174>)
 80034e4:	f001 f962 	bl	80047ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80034e8:	2304      	movs	r3, #4
 80034ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ec:	2303      	movs	r3, #3
 80034ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4619      	mov	r1, r3
 80034fa:	4830      	ldr	r0, [pc, #192]	@ (80035bc <MX_GPIO_Init+0x178>)
 80034fc:	f000 ff76 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8003500:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	2300      	movs	r3, #0
 8003510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4619      	mov	r1, r3
 8003518:	4826      	ldr	r0, [pc, #152]	@ (80035b4 <MX_GPIO_Init+0x170>)
 800351a:	f000 ff67 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800351e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	4821      	ldr	r0, [pc, #132]	@ (80035b8 <MX_GPIO_Init+0x174>)
 8003534:	f000 ff5a 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003538:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800353c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800353e:	2303      	movs	r3, #3
 8003540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	481a      	ldr	r0, [pc, #104]	@ (80035b8 <MX_GPIO_Init+0x174>)
 800354e:	f000 ff4d 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003552:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	2302      	movs	r3, #2
 800355a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003560:	2300      	movs	r3, #0
 8003562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	4619      	mov	r1, r3
 800356a:	4815      	ldr	r0, [pc, #84]	@ (80035c0 <MX_GPIO_Init+0x17c>)
 800356c:	f000 ff3e 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003576:	2303      	movs	r3, #3
 8003578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	4619      	mov	r1, r3
 8003584:	480e      	ldr	r0, [pc, #56]	@ (80035c0 <MX_GPIO_Init+0x17c>)
 8003586:	f000 ff31 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 800358a:	2320      	movs	r3, #32
 800358c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800358e:	2301      	movs	r3, #1
 8003590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003596:	2300      	movs	r3, #0
 8003598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 800359a:	f107 0314 	add.w	r3, r7, #20
 800359e:	4619      	mov	r1, r3
 80035a0:	4805      	ldr	r0, [pc, #20]	@ (80035b8 <MX_GPIO_Init+0x174>)
 80035a2:	f000 ff23 	bl	80043ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80035a6:	bf00      	nop
 80035a8:	3728      	adds	r7, #40	@ 0x28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	46020c00 	.word	0x46020c00
 80035b4:	42021000 	.word	0x42021000
 80035b8:	42020400 	.word	0x42020400
 80035bc:	42020800 	.word	0x42020800
 80035c0:	42020000 	.word	0x42020000

080035c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035c8:	b672      	cpsid	i
}
 80035ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035cc:	bf00      	nop
 80035ce:	e7fd      	b.n	80035cc <Error_Handler+0x8>

080035d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <HAL_MspInit+0x30>)
 80035d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035dc:	4a08      	ldr	r2, [pc, #32]	@ (8003600 <HAL_MspInit+0x30>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80035e6:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <HAL_MspInit+0x30>)
 80035e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	46020c00 	.word	0x46020c00

08003604 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b0c0      	sub	sp, #256	@ 0x100
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	22d8      	movs	r2, #216	@ 0xd8
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f00a fb5b 	bl	800dce0 <memset>
  if(hi2c->Instance==I2C2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a27      	ldr	r2, [pc, #156]	@ (80036cc <HAL_I2C_MspInit+0xc8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d146      	bne.n	80036c2 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003634:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003646:	f107 0310 	add.w	r3, r7, #16
 800364a:	4618      	mov	r0, r3
 800364c:	f003 fbcc 	bl	8006de8 <HAL_RCCEx_PeriphCLKConfig>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003656:	f7ff ffb5 	bl	80035c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	4b1d      	ldr	r3, [pc, #116]	@ (80036d0 <HAL_I2C_MspInit+0xcc>)
 800365c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003660:	4a1b      	ldr	r2, [pc, #108]	@ (80036d0 <HAL_I2C_MspInit+0xcc>)
 8003662:	f043 0302 	orr.w	r3, r3, #2
 8003666:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800366a:	4b19      	ldr	r3, [pc, #100]	@ (80036d0 <HAL_I2C_MspInit+0xcc>)
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003678:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800367c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003680:	2312      	movs	r3, #18
 8003682:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003692:	2304      	movs	r3, #4
 8003694:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003698:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800369c:	4619      	mov	r1, r3
 800369e:	480d      	ldr	r0, [pc, #52]	@ (80036d4 <HAL_I2C_MspInit+0xd0>)
 80036a0:	f000 fea4 	bl	80043ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036a4:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <HAL_I2C_MspInit+0xcc>)
 80036a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036aa:	4a09      	ldr	r2, [pc, #36]	@ (80036d0 <HAL_I2C_MspInit+0xcc>)
 80036ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036b0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80036b4:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <HAL_I2C_MspInit+0xcc>)
 80036b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80036c2:	bf00      	nop
 80036c4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40005800 	.word	0x40005800
 80036d0:	46020c00 	.word	0x46020c00
 80036d4:	42020400 	.word	0x42020400

080036d8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b0c0      	sub	sp, #256	@ 0x100
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036f0:	f107 0310 	add.w	r3, r7, #16
 80036f4:	22d8      	movs	r2, #216	@ 0xd8
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f00a faf1 	bl	800dce0 <memset>
  if(hspi->Instance==SPI1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a28      	ldr	r2, [pc, #160]	@ (80037a4 <HAL_SPI_MspInit+0xcc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d147      	bne.n	8003798 <HAL_SPI_MspInit+0xc0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003708:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003714:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003718:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800371c:	f107 0310 	add.w	r3, r7, #16
 8003720:	4618      	mov	r0, r3
 8003722:	f003 fb61 	bl	8006de8 <HAL_RCCEx_PeriphCLKConfig>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800372c:	f7ff ff4a 	bl	80035c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003730:	4b1d      	ldr	r3, [pc, #116]	@ (80037a8 <HAL_SPI_MspInit+0xd0>)
 8003732:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003736:	4a1c      	ldr	r2, [pc, #112]	@ (80037a8 <HAL_SPI_MspInit+0xd0>)
 8003738:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800373c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003740:	4b19      	ldr	r3, [pc, #100]	@ (80037a8 <HAL_SPI_MspInit+0xd0>)
 8003742:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003746:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800374e:	4b16      	ldr	r3, [pc, #88]	@ (80037a8 <HAL_SPI_MspInit+0xd0>)
 8003750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003754:	4a14      	ldr	r2, [pc, #80]	@ (80037a8 <HAL_SPI_MspInit+0xd0>)
 8003756:	f043 0310 	orr.w	r3, r3, #16
 800375a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800375e:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <HAL_SPI_MspInit+0xd0>)
 8003760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800376c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003770:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	2302      	movs	r3, #2
 8003776:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003786:	2305      	movs	r3, #5
 8003788:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800378c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003790:	4619      	mov	r1, r3
 8003792:	4806      	ldr	r0, [pc, #24]	@ (80037ac <HAL_SPI_MspInit+0xd4>)
 8003794:	f000 fe2a 	bl	80043ec <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003798:	bf00      	nop
 800379a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40013000 	.word	0x40013000
 80037a8:	46020c00 	.word	0x46020c00
 80037ac:	42021000 	.word	0x42021000

080037b0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <HAL_TIM_Base_MspInit+0x3c>)
 80037c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037c8:	4a08      	ldr	r2, [pc, #32]	@ (80037ec <HAL_TIM_Base_MspInit+0x3c>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80037d2:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_TIM_Base_MspInit+0x3c>)
 80037d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	46020c00 	.word	0x46020c00

080037f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b0c0      	sub	sp, #256	@ 0x100
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	22d8      	movs	r2, #216	@ 0xd8
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f00a fa65 	bl	800dce0 <memset>
  if(huart->Instance==USART1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a27      	ldr	r2, [pc, #156]	@ (80038b8 <HAL_UART_MspInit+0xc8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d145      	bne.n	80038ac <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003820:	f04f 0201 	mov.w	r2, #1
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800382c:	2300      	movs	r3, #0
 800382e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003830:	f107 0310 	add.w	r3, r7, #16
 8003834:	4618      	mov	r0, r3
 8003836:	f003 fad7 	bl	8006de8 <HAL_RCCEx_PeriphCLKConfig>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8003840:	f7ff fec0 	bl	80035c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003844:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <HAL_UART_MspInit+0xcc>)
 8003846:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800384a:	4a1c      	ldr	r2, [pc, #112]	@ (80038bc <HAL_UART_MspInit+0xcc>)
 800384c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003850:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003854:	4b19      	ldr	r3, [pc, #100]	@ (80038bc <HAL_UART_MspInit+0xcc>)
 8003856:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800385a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	4b16      	ldr	r3, [pc, #88]	@ (80038bc <HAL_UART_MspInit+0xcc>)
 8003864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003868:	4a14      	ldr	r2, [pc, #80]	@ (80038bc <HAL_UART_MspInit+0xcc>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003872:	4b12      	ldr	r3, [pc, #72]	@ (80038bc <HAL_UART_MspInit+0xcc>)
 8003874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003880:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003884:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003888:	2302      	movs	r3, #2
 800388a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003894:	2300      	movs	r3, #0
 8003896:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800389a:	2307      	movs	r3, #7
 800389c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80038a4:	4619      	mov	r1, r3
 80038a6:	4806      	ldr	r0, [pc, #24]	@ (80038c0 <HAL_UART_MspInit+0xd0>)
 80038a8:	f000 fda0 	bl	80043ec <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80038ac:	bf00      	nop
 80038ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40013800 	.word	0x40013800
 80038bc:	46020c00 	.word	0x46020c00
 80038c0:	42020000 	.word	0x42020000

080038c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038c8:	bf00      	nop
 80038ca:	e7fd      	b.n	80038c8 <NMI_Handler+0x4>

080038cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <HardFault_Handler+0x4>

080038d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038d8:	bf00      	nop
 80038da:	e7fd      	b.n	80038d8 <MemManage_Handler+0x4>

080038dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <BusFault_Handler+0x4>

080038e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <UsageFault_Handler+0x4>

080038ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800391a:	f000 fb07 	bl	8003f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}

08003922 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8003926:	2000      	movs	r0, #0
 8003928:	f000 fa32 	bl	8003d90 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800392c:	bf00      	nop
 800392e:	bd80      	pop	{r7, pc}

08003930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return 1;
 8003934:	2301      	movs	r3, #1
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <_kill>:

int _kill(int pid, int sig)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800394a:	f00a f9e3 	bl	800dd14 <__errno>
 800394e:	4603      	mov	r3, r0
 8003950:	2216      	movs	r2, #22
 8003952:	601a      	str	r2, [r3, #0]
  return -1;
 8003954:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <_exit>:

void _exit (int status)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003968:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ffe7 	bl	8003940 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003972:	bf00      	nop
 8003974:	e7fd      	b.n	8003972 <_exit+0x12>

08003976 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	e00a      	b.n	800399e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003988:	f3af 8000 	nop.w
 800398c:	4601      	mov	r1, r0
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	60ba      	str	r2, [r7, #8]
 8003994:	b2ca      	uxtb	r2, r1
 8003996:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3301      	adds	r3, #1
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	dbf0      	blt.n	8003988 <_read+0x12>
  }

  return len;
 80039a6:	687b      	ldr	r3, [r7, #4]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e009      	b.n	80039d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	60ba      	str	r2, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff f92a 	bl	8002c24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	3301      	adds	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	429a      	cmp	r2, r3
 80039dc:	dbf1      	blt.n	80039c2 <_write+0x12>
  }
  return len;
 80039de:	687b      	ldr	r3, [r7, #4]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <_close>:

int _close(int file)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a10:	605a      	str	r2, [r3, #4]
  return 0;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <_isatty>:

int _isatty(int file)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a28:	2301      	movs	r3, #1
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a58:	4a14      	ldr	r2, [pc, #80]	@ (8003aac <_sbrk+0x5c>)
 8003a5a:	4b15      	ldr	r3, [pc, #84]	@ (8003ab0 <_sbrk+0x60>)
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a64:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <_sbrk+0x64>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a6c:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <_sbrk+0x64>)
 8003a6e:	4a12      	ldr	r2, [pc, #72]	@ (8003ab8 <_sbrk+0x68>)
 8003a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a72:	4b10      	ldr	r3, [pc, #64]	@ (8003ab4 <_sbrk+0x64>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d207      	bcs.n	8003a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a80:	f00a f948 	bl	800dd14 <__errno>
 8003a84:	4603      	mov	r3, r0
 8003a86:	220c      	movs	r2, #12
 8003a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a8e:	e009      	b.n	8003aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a90:	4b08      	ldr	r3, [pc, #32]	@ (8003ab4 <_sbrk+0x64>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a96:	4b07      	ldr	r3, [pc, #28]	@ (8003ab4 <_sbrk+0x64>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	4a05      	ldr	r2, [pc, #20]	@ (8003ab4 <_sbrk+0x64>)
 8003aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20270000 	.word	0x20270000
 8003ab0:	00000400 	.word	0x00000400
 8003ab4:	20000424 	.word	0x20000424
 8003ab8:	20000588 	.word	0x20000588

08003abc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ac0:	4b18      	ldr	r3, [pc, #96]	@ (8003b24 <SystemInit+0x68>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac6:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <SystemInit+0x68>)
 8003ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003ad0:	4b15      	ldr	r3, [pc, #84]	@ (8003b28 <SystemInit+0x6c>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003ad6:	4b14      	ldr	r3, [pc, #80]	@ (8003b28 <SystemInit+0x6c>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003adc:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <SystemInit+0x6c>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003ae2:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <SystemInit+0x6c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b28 <SystemInit+0x6c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0e      	ldr	r2, [pc, #56]	@ (8003b28 <SystemInit+0x6c>)
 8003aee:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003af2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003af6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003af8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <SystemInit+0x6c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003afe:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <SystemInit+0x6c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a09      	ldr	r2, [pc, #36]	@ (8003b28 <SystemInit+0x6c>)
 8003b04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003b0a:	4b07      	ldr	r3, [pc, #28]	@ (8003b28 <SystemInit+0x6c>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b10:	4b04      	ldr	r3, [pc, #16]	@ (8003b24 <SystemInit+0x68>)
 8003b12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003b16:	609a      	str	r2, [r3, #8]
  #endif
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	e000ed00 	.word	0xe000ed00
 8003b28:	46020c00 	.word	0x46020c00

08003b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003b2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b64 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b30:	f7ff ffc4 	bl	8003abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b36:	e003      	b.n	8003b40 <LoopCopyDataInit>

08003b38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b38:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b3e:	3104      	adds	r1, #4

08003b40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b40:	480a      	ldr	r0, [pc, #40]	@ (8003b6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b42:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b48:	d3f6      	bcc.n	8003b38 <CopyDataInit>
	ldr	r2, =_sbss
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b4c:	e002      	b.n	8003b54 <LoopFillZerobss>

08003b4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b50:	f842 3b04 	str.w	r3, [r2], #4

08003b54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b54:	4b08      	ldr	r3, [pc, #32]	@ (8003b78 <LoopForever+0x16>)
	cmp	r2, r3
 8003b56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b58:	d3f9      	bcc.n	8003b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b5a:	f00a f8e1 	bl	800dd20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b5e:	f7ff f873 	bl	8002c48 <main>

08003b62 <LoopForever>:

LoopForever:
    b LoopForever
 8003b62:	e7fe      	b.n	8003b62 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003b64:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003b68:	08011210 	.word	0x08011210
	ldr	r0, =_sdata
 8003b6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b70:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8003b74:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8003b78:	20000584 	.word	0x20000584

08003b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b7c:	e7fe      	b.n	8003b7c <ADC1_2_IRQHandler>
	...

08003b80 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08e      	sub	sp, #56	@ 0x38
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d009      	beq.n	8003bac <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d006      	beq.n	8003bac <BSP_LED_Init+0x2c>
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d003      	beq.n	8003bac <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ba4:	f06f 0301 	mvn.w	r3, #1
 8003ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003baa:	e06e      	b.n	8003c8a <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d10f      	bne.n	8003bd2 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8003bb2:	4b38      	ldr	r3, [pc, #224]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bb8:	4a36      	ldr	r2, [pc, #216]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003bba:	f043 0302 	orr.w	r3, r3, #2
 8003bbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003bc2:	4b34      	ldr	r3, [pc, #208]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	e046      	b.n	8003c60 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8003bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bde:	4a2d      	ldr	r2, [pc, #180]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003be0:	f043 0304 	orr.w	r3, r3, #4
 8003be4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003be8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	e033      	b.n	8003c60 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf8:	4b26      	ldr	r3, [pc, #152]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d110      	bne.n	8003c28 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	4b23      	ldr	r3, [pc, #140]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c0c:	4a21      	ldr	r2, [pc, #132]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c16:	4b1f      	ldr	r3, [pc, #124]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8003c24:	2301      	movs	r3, #1
 8003c26:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8003c28:	f001 fe0e 	bl	8005848 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d107      	bne.n	8003c42 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c32:	4b18      	ldr	r3, [pc, #96]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c38:	4a16      	ldr	r2, [pc, #88]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003c3a:	f023 0304 	bic.w	r3, r3, #4
 8003c3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8003c42:	4b14      	ldr	r3, [pc, #80]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c48:	4a12      	ldr	r2, [pc, #72]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c52:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <BSP_LED_Init+0x114>)
 8003c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	4a0d      	ldr	r2, [pc, #52]	@ (8003c98 <BSP_LED_Init+0x118>)
 8003c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c68:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c72:	2303      	movs	r3, #3
 8003c74:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	4a08      	ldr	r2, [pc, #32]	@ (8003c9c <BSP_LED_Init+0x11c>)
 8003c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7e:	f107 021c 	add.w	r2, r7, #28
 8003c82:	4611      	mov	r1, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fbb1 	bl	80043ec <HAL_GPIO_Init>
  }

  return ret;
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3738      	adds	r7, #56	@ 0x38
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	46020c00 	.word	0x46020c00
 8003c98:	08010d20 	.word	0x08010d20
 8003c9c:	20000004 	.word	0x20000004

08003ca0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	460a      	mov	r2, r1
 8003caa:	71fb      	strb	r3, [r7, #7]
 8003cac:	4613      	mov	r3, r2
 8003cae:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8003cb0:	4b30      	ldr	r3, [pc, #192]	@ (8003d74 <BSP_PB_Init+0xd4>)
 8003cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8003d74 <BSP_PB_Init+0xd4>)
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8003d74 <BSP_PB_Init+0xd4>)
 8003cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8003cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cd2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8003cdc:	79bb      	ldrb	r3, [r7, #6]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	4a23      	ldr	r2, [pc, #140]	@ (8003d78 <BSP_PB_Init+0xd8>)
 8003cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cee:	f107 020c 	add.w	r2, r7, #12
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fb79 	bl	80043ec <HAL_GPIO_Init>
 8003cfa:	e036      	b.n	8003d6a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8003d7c <BSP_PB_Init+0xdc>)
 8003cfe:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	4a1d      	ldr	r2, [pc, #116]	@ (8003d78 <BSP_PB_Init+0xd8>)
 8003d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d08:	f107 020c 	add.w	r2, r7, #12
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fb6c 	bl	80043ec <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003d14:	79fa      	ldrb	r2, [r7, #7]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4a18      	ldr	r2, [pc, #96]	@ (8003d80 <BSP_PB_Init+0xe0>)
 8003d20:	441a      	add	r2, r3
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	4917      	ldr	r1, [pc, #92]	@ (8003d84 <BSP_PB_Init+0xe4>)
 8003d26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f000 fb01 	bl	8004334 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8003d32:	79fa      	ldrb	r2, [r7, #7]
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4a10      	ldr	r2, [pc, #64]	@ (8003d80 <BSP_PB_Init+0xe0>)
 8003d3e:	1898      	adds	r0, r3, r2
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	4a11      	ldr	r2, [pc, #68]	@ (8003d88 <BSP_PB_Init+0xe8>)
 8003d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	f000 fac6 	bl	80042dc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003d50:	2018      	movs	r0, #24
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	4a0d      	ldr	r2, [pc, #52]	@ (8003d8c <BSP_PB_Init+0xec>)
 8003d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f000 f9e1 	bl	8004124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003d62:	2318      	movs	r3, #24
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f9f7 	bl	8004158 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	46020c00 	.word	0x46020c00
 8003d78:	20000010 	.word	0x20000010
 8003d7c:	10110000 	.word	0x10110000
 8003d80:	20000428 	.word	0x20000428
 8003d84:	08010d28 	.word	0x08010d28
 8003d88:	20000014 	.word	0x20000014
 8003d8c:	20000018 	.word	0x20000018

08003d90 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8003d9a:	79fa      	ldrb	r2, [r7, #7]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <BSP_PB_IRQHandler+0x28>)
 8003da6:	4413      	add	r3, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fad7 	bl	800435c <HAL_EXTI_IRQHandler>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000428 	.word	0x20000428

08003dbc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f7ff fff0 	bl	8003dbc <BSP_PB_Callback>
}
 8003ddc:	bf00      	nop
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003de4:	4b12      	ldr	r3, [pc, #72]	@ (8003e30 <HAL_Init+0x50>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a11      	ldr	r2, [pc, #68]	@ (8003e30 <HAL_Init+0x50>)
 8003dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003df0:	2003      	movs	r0, #3
 8003df2:	f000 f98c 	bl	800410e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003df6:	f002 fe15 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e34 <HAL_Init+0x54>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	490c      	ldr	r1, [pc, #48]	@ (8003e38 <HAL_Init+0x58>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e3c <HAL_Init+0x5c>)
 8003e0e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003e10:	2004      	movs	r0, #4
 8003e12:	f000 f9d1 	bl	80041b8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e16:	200f      	movs	r0, #15
 8003e18:	f000 f812 	bl	8003e40 <HAL_InitTick>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e002      	b.n	8003e2c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e26:	f7ff fbd3 	bl	80035d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40022000 	.word	0x40022000
 8003e34:	46020c00 	.word	0x46020c00
 8003e38:	08010cc8 	.word	0x08010cc8
 8003e3c:	20000000 	.word	0x20000000

08003e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003e4c:	4b33      	ldr	r3, [pc, #204]	@ (8003f1c <HAL_InitTick+0xdc>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e05c      	b.n	8003f12 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003e58:	4b31      	ldr	r3, [pc, #196]	@ (8003f20 <HAL_InitTick+0xe0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d10c      	bne.n	8003e7e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8003e64:	4b2f      	ldr	r3, [pc, #188]	@ (8003f24 <HAL_InitTick+0xe4>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b2c      	ldr	r3, [pc, #176]	@ (8003f1c <HAL_InitTick+0xdc>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e037      	b.n	8003eee <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003e7e:	f000 f9f3 	bl	8004268 <HAL_SYSTICK_GetCLKSourceConfig>
 8003e82:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d023      	beq.n	8003ed2 <HAL_InitTick+0x92>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d82d      	bhi.n	8003eec <HAL_InitTick+0xac>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_InitTick+0x5e>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003e9c:	e026      	b.n	8003eec <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003e9e:	4b21      	ldr	r3, [pc, #132]	@ (8003f24 <HAL_InitTick+0xe4>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f1c <HAL_InitTick+0xdc>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003eac:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	60fb      	str	r3, [r7, #12]
        break;
 8003eb6:	e01a      	b.n	8003eee <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003eb8:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <HAL_InitTick+0xdc>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	60fb      	str	r3, [r7, #12]
        break;
 8003ed0:	e00d      	b.n	8003eee <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003ed2:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <HAL_InitTick+0xdc>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ee0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	60fb      	str	r3, [r7, #12]
        break;
 8003eea:	e000      	b.n	8003eee <HAL_InitTick+0xae>
        break;
 8003eec:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f940 	bl	8004174 <HAL_SYSTICK_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e009      	b.n	8003f12 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003efe:	2200      	movs	r2, #0
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f06:	f000 f90d 	bl	8004124 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8003f0a:	4a07      	ldr	r2, [pc, #28]	@ (8003f28 <HAL_InitTick+0xe8>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000020 	.word	0x20000020
 8003f20:	e000e010 	.word	0xe000e010
 8003f24:	20000000 	.word	0x20000000
 8003f28:	2000001c 	.word	0x2000001c

08003f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f30:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <HAL_IncTick+0x20>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <HAL_IncTick+0x24>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	4a04      	ldr	r2, [pc, #16]	@ (8003f50 <HAL_IncTick+0x24>)
 8003f3e:	6013      	str	r3, [r2, #0]
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000020 	.word	0x20000020
 8003f50:	20000434 	.word	0x20000434

08003f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return uwTick;
 8003f58:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <HAL_GetTick+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000434 	.word	0x20000434

08003f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f74:	f7ff ffee 	bl	8003f54 <HAL_GetTick>
 8003f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f84:	d005      	beq.n	8003f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f86:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <HAL_Delay+0x44>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f92:	bf00      	nop
 8003f94:	f7ff ffde 	bl	8003f54 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d8f7      	bhi.n	8003f94 <HAL_Delay+0x28>
  {
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000020 	.word	0x20000020

08003fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fe6:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	60d3      	str	r3, [r2, #12]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004000:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <__NVIC_GetPriorityGrouping+0x18>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	f003 0307 	and.w	r3, r3, #7
}
 800400a:	4618      	mov	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004026:	2b00      	cmp	r3, #0
 8004028:	db0b      	blt.n	8004042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	f003 021f 	and.w	r2, r3, #31
 8004030:	4907      	ldr	r1, [pc, #28]	@ (8004050 <__NVIC_EnableIRQ+0x38>)
 8004032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2001      	movs	r0, #1
 800403a:	fa00 f202 	lsl.w	r2, r0, r2
 800403e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	e000e100 	.word	0xe000e100

08004054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	6039      	str	r1, [r7, #0]
 800405e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	db0a      	blt.n	800407e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	b2da      	uxtb	r2, r3
 800406c:	490c      	ldr	r1, [pc, #48]	@ (80040a0 <__NVIC_SetPriority+0x4c>)
 800406e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004072:	0112      	lsls	r2, r2, #4
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	440b      	add	r3, r1
 8004078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800407c:	e00a      	b.n	8004094 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	b2da      	uxtb	r2, r3
 8004082:	4908      	ldr	r1, [pc, #32]	@ (80040a4 <__NVIC_SetPriority+0x50>)
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	3b04      	subs	r3, #4
 800408c:	0112      	lsls	r2, r2, #4
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	440b      	add	r3, r1
 8004092:	761a      	strb	r2, [r3, #24]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000e100 	.word	0xe000e100
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b089      	sub	sp, #36	@ 0x24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f1c3 0307 	rsb	r3, r3, #7
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	bf28      	it	cs
 80040c6:	2304      	movcs	r3, #4
 80040c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3304      	adds	r3, #4
 80040ce:	2b06      	cmp	r3, #6
 80040d0:	d902      	bls.n	80040d8 <NVIC_EncodePriority+0x30>
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3b03      	subs	r3, #3
 80040d6:	e000      	b.n	80040da <NVIC_EncodePriority+0x32>
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43da      	mvns	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	401a      	ands	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	43d9      	mvns	r1, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004100:	4313      	orrs	r3, r2
         );
}
 8004102:	4618      	mov	r0, r3
 8004104:	3724      	adds	r7, #36	@ 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff ff4c 	bl	8003fb4 <__NVIC_SetPriorityGrouping>
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004132:	f7ff ff63 	bl	8003ffc <__NVIC_GetPriorityGrouping>
 8004136:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	6978      	ldr	r0, [r7, #20]
 800413e:	f7ff ffb3 	bl	80040a8 <NVIC_EncodePriority>
 8004142:	4602      	mov	r2, r0
 8004144:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff82 	bl	8004054 <__NVIC_SetPriority>
}
 8004150:	bf00      	nop
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff ff56 	bl	8004018 <__NVIC_EnableIRQ>
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3b01      	subs	r3, #1
 8004180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004184:	d301      	bcc.n	800418a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004186:	2301      	movs	r3, #1
 8004188:	e00d      	b.n	80041a6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800418a:	4a0a      	ldr	r2, [pc, #40]	@ (80041b4 <HAL_SYSTICK_Config+0x40>)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3b01      	subs	r3, #1
 8004190:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004192:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <HAL_SYSTICK_Config+0x40>)
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004198:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_SYSTICK_Config+0x40>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a05      	ldr	r2, [pc, #20]	@ (80041b4 <HAL_SYSTICK_Config+0x40>)
 800419e:	f043 0303 	orr.w	r3, r3, #3
 80041a2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	e000e010 	.word	0xe000e010

080041b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d844      	bhi.n	8004250 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80041c6:	a201      	add	r2, pc, #4	@ (adr r2, 80041cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041ef 	.word	0x080041ef
 80041d0:	0800420d 	.word	0x0800420d
 80041d4:	0800422f 	.word	0x0800422f
 80041d8:	08004251 	.word	0x08004251
 80041dc:	080041e1 	.word	0x080041e1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80041e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004260 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004260 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80041e6:	f043 0304 	orr.w	r3, r3, #4
 80041ea:	6013      	str	r3, [r2, #0]
      break;
 80041ec:	e031      	b.n	8004252 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80041ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004260 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004260 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80041f4:	f023 0304 	bic.w	r3, r3, #4
 80041f8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80041fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80041fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004200:	4a18      	ldr	r2, [pc, #96]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004202:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004206:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800420a:	e022      	b.n	8004252 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800420c:	4b14      	ldr	r3, [pc, #80]	@ (8004260 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a13      	ldr	r2, [pc, #76]	@ (8004260 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004212:	f023 0304 	bic.w	r3, r3, #4
 8004216:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004218:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800421a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800421e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004222:	4a10      	ldr	r2, [pc, #64]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004224:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004228:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800422c:	e011      	b.n	8004252 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800422e:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a0b      	ldr	r2, [pc, #44]	@ (8004260 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004234:	f023 0304 	bic.w	r3, r3, #4
 8004238:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800423a:	4b0a      	ldr	r3, [pc, #40]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800423c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004240:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004244:	4a07      	ldr	r2, [pc, #28]	@ (8004264 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004246:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800424a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800424e:	e000      	b.n	8004252 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004250:	bf00      	nop
  }
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	e000e010 	.word	0xe000e010
 8004264:	46020c00 	.word	0x46020c00

08004268 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800426e:	4b19      	ldr	r3, [pc, #100]	@ (80042d4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800427a:	2304      	movs	r3, #4
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	e021      	b.n	80042c4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8004280:	4b15      	ldr	r3, [pc, #84]	@ (80042d8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8004282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004286:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800428a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004292:	d011      	beq.n	80042b8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800429a:	d810      	bhi.n	80042be <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042a8:	d003      	beq.n	80042b2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80042aa:	e008      	b.n	80042be <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80042ac:	2300      	movs	r3, #0
 80042ae:	607b      	str	r3, [r7, #4]
        break;
 80042b0:	e008      	b.n	80042c4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80042b2:	2301      	movs	r3, #1
 80042b4:	607b      	str	r3, [r7, #4]
        break;
 80042b6:	e005      	b.n	80042c4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80042b8:	2302      	movs	r3, #2
 80042ba:	607b      	str	r3, [r7, #4]
        break;
 80042bc:	e002      	b.n	80042c4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
        break;
 80042c2:	bf00      	nop
    }
  }
  return systick_source;
 80042c4:	687b      	ldr	r3, [r7, #4]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	e000e010 	.word	0xe000e010
 80042d8:	46020c00 	.word	0x46020c00

080042dc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	460b      	mov	r3, r1
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80042ee:	7afb      	ldrb	r3, [r7, #11]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d011      	beq.n	8004318 <HAL_EXTI_RegisterCallback+0x3c>
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	dc13      	bgt.n	8004320 <HAL_EXTI_RegisterCallback+0x44>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_EXTI_RegisterCallback+0x26>
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d007      	beq.n	8004310 <HAL_EXTI_RegisterCallback+0x34>
 8004300:	e00e      	b.n	8004320 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	609a      	str	r2, [r3, #8]
      break;
 800430e:	e00a      	b.n	8004326 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	605a      	str	r2, [r3, #4]
      break;
 8004316:	e006      	b.n	8004326 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	609a      	str	r2, [r3, #8]
      break;
 800431e:	e002      	b.n	8004326 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	bf00      	nop
  }

  return status;
 8004326:	7dfb      	ldrb	r3, [r7, #23]
}
 8004328:	4618      	mov	r0, r3
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e003      	b.n	8004350 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800434e:	2300      	movs	r3, #0
  }
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2201      	movs	r2, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <HAL_EXTI_IRQHandler+0x88>)
 8004386:	4413      	add	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	4b0d      	ldr	r3, [pc, #52]	@ (80043e8 <HAL_EXTI_IRQHandler+0x8c>)
 80043b4:	4413      	add	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4798      	blx	r3
    }
  }
}
 80043dc:	bf00      	nop
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	4602200c 	.word	0x4602200c
 80043e8:	46022010 	.word	0x46022010

080043ec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b089      	sub	sp, #36	@ 0x24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80043fe:	e1c2      	b.n	8004786 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	2101      	movs	r1, #1
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 81b2 	beq.w	8004780 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a55      	ldr	r2, [pc, #340]	@ (8004574 <HAL_GPIO_Init+0x188>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d15d      	bne.n	80044e0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800442a:	2201      	movs	r2, #1
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	4013      	ands	r3, r2
 8004438:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0201 	and.w	r2, r3, #1
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	4313      	orrs	r3, r2
 800444c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004454:	4a48      	ldr	r2, [pc, #288]	@ (8004578 <HAL_GPIO_Init+0x18c>)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800445c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800445e:	4a46      	ldr	r2, [pc, #280]	@ (8004578 <HAL_GPIO_Init+0x18c>)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	08da      	lsrs	r2, r3, #3
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	3208      	adds	r2, #8
 8004472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004476:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	220f      	movs	r2, #15
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	4013      	ands	r3, r2
 800448c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	220b      	movs	r2, #11
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	08da      	lsrs	r2, r3, #3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	3208      	adds	r2, #8
 80044aa:	69f9      	ldr	r1, [r7, #28]
 80044ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	2202      	movs	r2, #2
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e067      	b.n	80045b0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x104>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b12      	cmp	r3, #18
 80044ee:	d145      	bne.n	800457c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	08da      	lsrs	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3208      	adds	r2, #8
 80044f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	220f      	movs	r2, #15
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	4013      	ands	r3, r2
 8004512:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f003 020f 	and.w	r2, r3, #15
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	4313      	orrs	r3, r2
 800452c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	08da      	lsrs	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3208      	adds	r2, #8
 8004536:	69f9      	ldr	r1, [r7, #28]
 8004538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	2203      	movs	r2, #3
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	4013      	ands	r3, r2
 8004552:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0203 	and.w	r2, r3, #3
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	4313      	orrs	r3, r2
 8004568:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e01e      	b.n	80045b0 <HAL_GPIO_Init+0x1c4>
 8004572:	bf00      	nop
 8004574:	46020000 	.word	0x46020000
 8004578:	08010d2c 	.word	0x08010d2c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	2203      	movs	r2, #3
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	4013      	ands	r3, r2
 8004592:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0203 	and.w	r2, r3, #3
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d00b      	beq.n	80045d0 <HAL_GPIO_Init+0x1e4>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d007      	beq.n	80045d0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045c4:	2b11      	cmp	r3, #17
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b12      	cmp	r3, #18
 80045ce:	d130      	bne.n	8004632 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	2203      	movs	r2, #3
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004606:	2201      	movs	r2, #1
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	4013      	ands	r3, r2
 8004614:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	f003 0201 	and.w	r2, r3, #1
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	4313      	orrs	r3, r2
 800462a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d107      	bne.n	800464a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800463e:	2b03      	cmp	r3, #3
 8004640:	d11b      	bne.n	800467a <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d017      	beq.n	800467a <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	2203      	movs	r2, #3
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	4013      	ands	r3, r2
 8004660:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d07c      	beq.n	8004780 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004686:	4a47      	ldr	r2, [pc, #284]	@ (80047a4 <HAL_GPIO_Init+0x3b8>)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	3318      	adds	r3, #24
 800468e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004692:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	220f      	movs	r2, #15
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	0a9a      	lsrs	r2, r3, #10
 80046ae:	4b3e      	ldr	r3, [pc, #248]	@ (80047a8 <HAL_GPIO_Init+0x3bc>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	f002 0203 	and.w	r2, r2, #3
 80046b8:	00d2      	lsls	r2, r2, #3
 80046ba:	4093      	lsls	r3, r2
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80046c2:	4938      	ldr	r1, [pc, #224]	@ (80047a4 <HAL_GPIO_Init+0x3b8>)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	3318      	adds	r3, #24
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80046d0:	4b34      	ldr	r3, [pc, #208]	@ (80047a4 <HAL_GPIO_Init+0x3b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	43db      	mvns	r3, r3
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	4013      	ands	r3, r2
 80046de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80046f4:	4a2b      	ldr	r2, [pc, #172]	@ (80047a4 <HAL_GPIO_Init+0x3b8>)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80046fa:	4b2a      	ldr	r3, [pc, #168]	@ (80047a4 <HAL_GPIO_Init+0x3b8>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	43db      	mvns	r3, r3
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	4013      	ands	r3, r2
 8004708:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800471e:	4a21      	ldr	r2, [pc, #132]	@ (80047a4 <HAL_GPIO_Init+0x3b8>)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004724:	4b1f      	ldr	r3, [pc, #124]	@ (80047a4 <HAL_GPIO_Init+0x3b8>)
 8004726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800472a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	43db      	mvns	r3, r3
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	4013      	ands	r3, r2
 8004734:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800474a:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <HAL_GPIO_Init+0x3b8>)
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004752:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <HAL_GPIO_Init+0x3b8>)
 8004754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004758:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	43db      	mvns	r3, r3
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	4013      	ands	r3, r2
 8004762:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004778:	4a0a      	ldr	r2, [pc, #40]	@ (80047a4 <HAL_GPIO_Init+0x3b8>)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	3301      	adds	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	f47f ae35 	bne.w	8004400 <HAL_GPIO_Init+0x14>
  }
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	3724      	adds	r7, #36	@ 0x24
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	46022000 	.word	0x46022000
 80047a8:	002f7f7f 	.word	0x002f7f7f

080047ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	807b      	strh	r3, [r7, #2]
 80047b8:	4613      	mov	r3, r2
 80047ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047bc:	787b      	ldrb	r3, [r7, #1]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80047c8:	e002      	b.n	80047d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80047ca:	887a      	ldrh	r2, [r7, #2]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e08d      	b.n	800490a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fe fefe 	bl	8003604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800482c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800483c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d107      	bne.n	8004856 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	e006      	b.n	8004864 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004862:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d108      	bne.n	800487e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800487a:	605a      	str	r2, [r3, #4]
 800487c:	e007      	b.n	800488e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800488c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800489c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69d9      	ldr	r1, [r3, #28]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1a      	ldr	r2, [r3, #32]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	4608      	mov	r0, r1
 800491e:	4611      	mov	r1, r2
 8004920:	461a      	mov	r2, r3
 8004922:	4603      	mov	r3, r0
 8004924:	817b      	strh	r3, [r7, #10]
 8004926:	460b      	mov	r3, r1
 8004928:	813b      	strh	r3, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b20      	cmp	r3, #32
 8004938:	f040 80f9 	bne.w	8004b2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_I2C_Mem_Write+0x34>
 8004942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004944:	2b00      	cmp	r3, #0
 8004946:	d105      	bne.n	8004954 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800494e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0ed      	b.n	8004b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_I2C_Mem_Write+0x4e>
 800495e:	2302      	movs	r3, #2
 8004960:	e0e6      	b.n	8004b30 <HAL_I2C_Mem_Write+0x21c>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800496a:	f7ff faf3 	bl	8003f54 <HAL_GetTick>
 800496e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2319      	movs	r3, #25
 8004976:	2201      	movs	r2, #1
 8004978:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fbc9 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0d1      	b.n	8004b30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2221      	movs	r2, #33	@ 0x21
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2240      	movs	r2, #64	@ 0x40
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a3a      	ldr	r2, [r7, #32]
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80049ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049b4:	88f8      	ldrh	r0, [r7, #6]
 80049b6:	893a      	ldrh	r2, [r7, #8]
 80049b8:	8979      	ldrh	r1, [r7, #10]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	4603      	mov	r3, r0
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fad9 	bl	8004f7c <I2C_RequestMemoryWrite>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0a9      	b.n	8004b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2bff      	cmp	r3, #255	@ 0xff
 80049e4:	d90e      	bls.n	8004a04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	22ff      	movs	r2, #255	@ 0xff
 80049ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	8979      	ldrh	r1, [r7, #10]
 80049f4:	2300      	movs	r3, #0
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fd4d 	bl	800549c <I2C_TransferConfig>
 8004a02:	e00f      	b.n	8004a24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	8979      	ldrh	r1, [r7, #10]
 8004a16:	2300      	movs	r3, #0
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fd3c 	bl	800549c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fbcc 	bl	80051c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e07b      	b.n	8004b30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d034      	beq.n	8004adc <HAL_I2C_Mem_Write+0x1c8>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d130      	bne.n	8004adc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a80:	2200      	movs	r2, #0
 8004a82:	2180      	movs	r1, #128	@ 0x80
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fb45 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e04d      	b.n	8004b30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2bff      	cmp	r3, #255	@ 0xff
 8004a9c:	d90e      	bls.n	8004abc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	22ff      	movs	r2, #255	@ 0xff
 8004aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	8979      	ldrh	r1, [r7, #10]
 8004aac:	2300      	movs	r3, #0
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 fcf1 	bl	800549c <I2C_TransferConfig>
 8004aba:	e00f      	b.n	8004adc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	8979      	ldrh	r1, [r7, #10]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fce0 	bl	800549c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d19e      	bne.n	8004a24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fbb2 	bl	8005254 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e01a      	b.n	8004b30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2220      	movs	r2, #32
 8004b00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b38 <HAL_I2C_Mem_Write+0x224>)
 8004b0e:	400b      	ands	r3, r1
 8004b10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	fe00e800 	.word	0xfe00e800

08004b3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	817b      	strh	r3, [r7, #10]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	813b      	strh	r3, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	f040 80fd 	bne.w	8004d5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_I2C_Mem_Read+0x34>
 8004b6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0f1      	b.n	8004d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_I2C_Mem_Read+0x4e>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e0ea      	b.n	8004d60 <HAL_I2C_Mem_Read+0x224>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b92:	f7ff f9df 	bl	8003f54 <HAL_GetTick>
 8004b96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2319      	movs	r3, #25
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fab5 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0d5      	b.n	8004d60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2222      	movs	r2, #34	@ 0x22
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2240      	movs	r2, #64	@ 0x40
 8004bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a3a      	ldr	r2, [r7, #32]
 8004bce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bdc:	88f8      	ldrh	r0, [r7, #6]
 8004bde:	893a      	ldrh	r2, [r7, #8]
 8004be0:	8979      	ldrh	r1, [r7, #10]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	4603      	mov	r3, r0
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fa19 	bl	8005024 <I2C_RequestMemoryRead>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0ad      	b.n	8004d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2bff      	cmp	r3, #255	@ 0xff
 8004c0c:	d90e      	bls.n	8004c2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	22ff      	movs	r2, #255	@ 0xff
 8004c12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	8979      	ldrh	r1, [r7, #10]
 8004c1c:	4b52      	ldr	r3, [pc, #328]	@ (8004d68 <HAL_I2C_Mem_Read+0x22c>)
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fc39 	bl	800549c <I2C_TransferConfig>
 8004c2a:	e00f      	b.n	8004c4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	8979      	ldrh	r1, [r7, #10]
 8004c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d68 <HAL_I2C_Mem_Read+0x22c>)
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fc28 	bl	800549c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c52:	2200      	movs	r2, #0
 8004c54:	2104      	movs	r1, #4
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fa5c 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e07c      	b.n	8004d60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d034      	beq.n	8004d0c <HAL_I2C_Mem_Read+0x1d0>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d130      	bne.n	8004d0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2180      	movs	r1, #128	@ 0x80
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fa2d 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e04d      	b.n	8004d60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2bff      	cmp	r3, #255	@ 0xff
 8004ccc:	d90e      	bls.n	8004cec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	22ff      	movs	r2, #255	@ 0xff
 8004cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	8979      	ldrh	r1, [r7, #10]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fbd9 	bl	800549c <I2C_TransferConfig>
 8004cea:	e00f      	b.n	8004d0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	8979      	ldrh	r1, [r7, #10]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fbc8 	bl	800549c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d19a      	bne.n	8004c4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fa9a 	bl	8005254 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e01a      	b.n	8004d60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <HAL_I2C_Mem_Read+0x230>)
 8004d3e:	400b      	ands	r3, r1
 8004d40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e000      	b.n	8004d60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
  }
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	80002400 	.word	0x80002400
 8004d6c:	fe00e800 	.word	0xfe00e800

08004d70 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	@ 0x28
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	f040 80ed 	bne.w	8004f70 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004da4:	d101      	bne.n	8004daa <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8004da6:	2302      	movs	r3, #2
 8004da8:	e0e3      	b.n	8004f72 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_I2C_IsDeviceReady+0x48>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e0dc      	b.n	8004f72 <HAL_I2C_IsDeviceReady+0x202>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2224      	movs	r2, #36	@ 0x24
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d107      	bne.n	8004de6 <HAL_I2C_IsDeviceReady+0x76>
 8004dd6:	897b      	ldrh	r3, [r7, #10]
 8004dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ddc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004de0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004de4:	e006      	b.n	8004df4 <HAL_I2C_IsDeviceReady+0x84>
 8004de6:	897b      	ldrh	r3, [r7, #10]
 8004de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004df0:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004dfa:	f7ff f8ab 	bl	8003f54 <HAL_GetTick>
 8004dfe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	bf0c      	ite	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	2300      	movne	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004e2c:	e034      	b.n	8004e98 <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e34:	d01a      	beq.n	8004e6c <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7ff f88d 	bl	8003f54 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <HAL_I2C_IsDeviceReady+0xdc>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10f      	bne.n	8004e6c <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e58:	f043 0220 	orr.w	r2, r3, #32
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e082      	b.n	8004f72 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	bf0c      	ite	eq
 8004e7a:	2301      	moveq	r3, #1
 8004e7c:	2300      	movne	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	bf0c      	ite	eq
 8004e90:	2301      	moveq	r3, #1
 8004e92:	2300      	movne	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004e98:	7fbb      	ldrb	r3, [r7, #30]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <HAL_I2C_IsDeviceReady+0x134>
 8004e9e:	7f7b      	ldrb	r3, [r7, #29]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0c4      	beq.n	8004e2e <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b10      	cmp	r3, #16
 8004eb0:	d027      	beq.n	8004f02 <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2120      	movs	r1, #32
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f929 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d107      	bne.n	8004ee0 <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ede:	e026      	b.n	8004f2e <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e023      	b.n	8004f2e <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2220      	movs	r2, #32
 8004eec:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e037      	b.n	8004f72 <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2210      	movs	r2, #16
 8004f08:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2120      	movs	r1, #32
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f8fd 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e003      	b.n	8004f2e <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	3301      	adds	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d904      	bls.n	8004f46 <HAL_I2C_IsDeviceReady+0x1d6>
 8004f3c:	7ffb      	ldrb	r3, [r7, #31]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	f63f af3f 	bhi.w	8004dce <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5c:	f043 0220 	orr.w	r2, r3, #32
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8004f70:	2302      	movs	r3, #2
  }
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	817b      	strh	r3, [r7, #10]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	813b      	strh	r3, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	8979      	ldrh	r1, [r7, #10]
 8004f9c:	4b20      	ldr	r3, [pc, #128]	@ (8005020 <I2C_RequestMemoryWrite+0xa4>)
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fa79 	bl	800549c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	69b9      	ldr	r1, [r7, #24]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f909 	bl	80051c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e02c      	b.n	8005018 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d105      	bne.n	8004fd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc4:	893b      	ldrh	r3, [r7, #8]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fce:	e015      	b.n	8004ffc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fd0:	893b      	ldrh	r3, [r7, #8]
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	69b9      	ldr	r1, [r7, #24]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f8ef 	bl	80051c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e012      	b.n	8005018 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff2:	893b      	ldrh	r3, [r7, #8]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2200      	movs	r2, #0
 8005004:	2180      	movs	r1, #128	@ 0x80
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f884 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	80002000 	.word	0x80002000

08005024 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	4608      	mov	r0, r1
 800502e:	4611      	mov	r1, r2
 8005030:	461a      	mov	r2, r3
 8005032:	4603      	mov	r3, r0
 8005034:	817b      	strh	r3, [r7, #10]
 8005036:	460b      	mov	r3, r1
 8005038:	813b      	strh	r3, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	8979      	ldrh	r1, [r7, #10]
 8005044:	4b20      	ldr	r3, [pc, #128]	@ (80050c8 <I2C_RequestMemoryRead+0xa4>)
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	2300      	movs	r3, #0
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fa26 	bl	800549c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	69b9      	ldr	r1, [r7, #24]
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f8b6 	bl	80051c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e02c      	b.n	80050be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d105      	bne.n	8005076 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800506a:	893b      	ldrh	r3, [r7, #8]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	629a      	str	r2, [r3, #40]	@ 0x28
 8005074:	e015      	b.n	80050a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005076:	893b      	ldrh	r3, [r7, #8]
 8005078:	0a1b      	lsrs	r3, r3, #8
 800507a:	b29b      	uxth	r3, r3
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	69b9      	ldr	r1, [r7, #24]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f89c 	bl	80051c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e012      	b.n	80050be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005098:	893b      	ldrh	r3, [r7, #8]
 800509a:	b2da      	uxtb	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2140      	movs	r1, #64	@ 0x40
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f831 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	80002000 	.word	0x80002000

080050cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d103      	bne.n	80050ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2200      	movs	r2, #0
 80050e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d007      	beq.n	8005108 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	619a      	str	r2, [r3, #24]
  }
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005124:	e03b      	b.n	800519e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f8d6 	bl	80052dc <I2C_IsErrorOccurred>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e041      	b.n	80051be <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005140:	d02d      	beq.n	800519e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005142:	f7fe ff07 	bl	8003f54 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d302      	bcc.n	8005158 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d122      	bne.n	800519e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	4013      	ands	r3, r2
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	429a      	cmp	r2, r3
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	429a      	cmp	r2, r3
 8005174:	d113      	bne.n	800519e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e00f      	b.n	80051be <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	bf0c      	ite	eq
 80051ae:	2301      	moveq	r3, #1
 80051b0:	2300      	movne	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d0b4      	beq.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051d2:	e033      	b.n	800523c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	68b9      	ldr	r1, [r7, #8]
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f87f 	bl	80052dc <I2C_IsErrorOccurred>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e031      	b.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051ee:	d025      	beq.n	800523c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f0:	f7fe feb0 	bl	8003f54 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d302      	bcc.n	8005206 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d11a      	bne.n	800523c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b02      	cmp	r3, #2
 8005212:	d013      	beq.n	800523c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e007      	b.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d1c4      	bne.n	80051d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005260:	e02f      	b.n	80052c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f838 	bl	80052dc <I2C_IsErrorOccurred>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e02d      	b.n	80052d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fe fe6d 	bl	8003f54 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d11a      	bne.n	80052c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b20      	cmp	r3, #32
 8005298:	d013      	beq.n	80052c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	f043 0220 	orr.w	r2, r3, #32
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e007      	b.n	80052d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d1c8      	bne.n	8005262 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	@ 0x28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b00      	cmp	r3, #0
 8005306:	d068      	beq.n	80053da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2210      	movs	r2, #16
 800530e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005310:	e049      	b.n	80053a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005318:	d045      	beq.n	80053a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800531a:	f7fe fe1b 	bl	8003f54 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	d302      	bcc.n	8005330 <I2C_IsErrorOccurred+0x54>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d13a      	bne.n	80053a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800533a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005342:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800534e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005352:	d121      	bne.n	8005398 <I2C_IsErrorOccurred+0xbc>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800535a:	d01d      	beq.n	8005398 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800535c:	7cfb      	ldrb	r3, [r7, #19]
 800535e:	2b20      	cmp	r3, #32
 8005360:	d01a      	beq.n	8005398 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005370:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005372:	f7fe fdef 	bl	8003f54 <HAL_GetTick>
 8005376:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005378:	e00e      	b.n	8005398 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800537a:	f7fe fdeb 	bl	8003f54 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b19      	cmp	r3, #25
 8005386:	d907      	bls.n	8005398 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	f043 0320 	orr.w	r3, r3, #32
 800538e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005396:	e006      	b.n	80053a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d1e9      	bne.n	800537a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d003      	beq.n	80053bc <I2C_IsErrorOccurred+0xe0>
 80053b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0aa      	beq.n	8005312 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80053bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2220      	movs	r2, #32
 80053ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	f043 0304 	orr.w	r3, r3, #4
 80053d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	f043 0308 	orr.w	r3, r3, #8
 8005414:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800541e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00b      	beq.n	8005448 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	f043 0302 	orr.w	r3, r3, #2
 8005436:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005440:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01c      	beq.n	800548a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f7ff fe3b 	bl	80050cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6859      	ldr	r1, [r3, #4]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <I2C_IsErrorOccurred+0x1bc>)
 8005462:	400b      	ands	r3, r1
 8005464:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	431a      	orrs	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800548a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800548e:	4618      	mov	r0, r3
 8005490:	3728      	adds	r7, #40	@ 0x28
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	fe00e800 	.word	0xfe00e800

0800549c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	817b      	strh	r3, [r7, #10]
 80054aa:	4613      	mov	r3, r2
 80054ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054ae:	897b      	ldrh	r3, [r7, #10]
 80054b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054b4:	7a7b      	ldrb	r3, [r7, #9]
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054bc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054ca:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	0d5b      	lsrs	r3, r3, #21
 80054d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80054da:	4b08      	ldr	r3, [pc, #32]	@ (80054fc <I2C_TransferConfig+0x60>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	43db      	mvns	r3, r3
 80054e0:	ea02 0103 	and.w	r1, r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	03ff63ff 	.word	0x03ff63ff

08005500 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b20      	cmp	r3, #32
 8005514:	d138      	bne.n	8005588 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005520:	2302      	movs	r3, #2
 8005522:	e032      	b.n	800558a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	@ 0x24
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005552:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6819      	ldr	r1, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e000      	b.n	800558a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	d139      	bne.n	8005620 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e033      	b.n	8005622 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2224      	movs	r2, #36	@ 0x24
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	e000      	b.n	8005622 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005620:	2302      	movs	r3, #2
  }
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800563c:	4b0b      	ldr	r3, [pc, #44]	@ (800566c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
 800564c:	e007      	b.n	800565e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800564e:	4b07      	ldr	r3, [pc, #28]	@ (800566c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f023 0204 	bic.w	r2, r3, #4
 8005656:	4905      	ldr	r1, [pc, #20]	@ (800566c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4313      	orrs	r3, r2
 800565c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800565e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40030400 	.word	0x40030400

08005670 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005674:	4b05      	ldr	r3, [pc, #20]	@ (800568c <HAL_ICACHE_Enable+0x1c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a04      	ldr	r2, [pc, #16]	@ (800568c <HAL_ICACHE_Enable+0x1c>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	40030400 	.word	0x40030400

08005690 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005698:	4b39      	ldr	r3, [pc, #228]	@ (8005780 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800569a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056a0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d10b      	bne.n	80056c2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b0:	d905      	bls.n	80056be <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80056b2:	4b33      	ldr	r3, [pc, #204]	@ (8005780 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	4a32      	ldr	r2, [pc, #200]	@ (8005780 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80056b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056bc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	e057      	b.n	8005772 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c8:	d90a      	bls.n	80056e0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80056ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005780 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005780 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80056d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056dc:	60d3      	str	r3, [r2, #12]
 80056de:	e007      	b.n	80056f0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80056e0:	4b27      	ldr	r3, [pc, #156]	@ (8005780 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80056e8:	4925      	ldr	r1, [pc, #148]	@ (8005780 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80056f0:	4b24      	ldr	r3, [pc, #144]	@ (8005784 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a24      	ldr	r2, [pc, #144]	@ (8005788 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	099b      	lsrs	r3, r3, #6
 80056fc:	2232      	movs	r2, #50	@ 0x32
 80056fe:	fb02 f303 	mul.w	r3, r2, r3
 8005702:	4a21      	ldr	r2, [pc, #132]	@ (8005788 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	099b      	lsrs	r3, r3, #6
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800570e:	e002      	b.n	8005716 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3b01      	subs	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005716:	4b1a      	ldr	r3, [pc, #104]	@ (8005780 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f3      	bne.n	8005710 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01b      	beq.n	8005766 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800572e:	4b15      	ldr	r3, [pc, #84]	@ (8005784 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a15      	ldr	r2, [pc, #84]	@ (8005788 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005734:	fba2 2303 	umull	r2, r3, r2, r3
 8005738:	099b      	lsrs	r3, r3, #6
 800573a:	2232      	movs	r2, #50	@ 0x32
 800573c:	fb02 f303 	mul.w	r3, r2, r3
 8005740:	4a11      	ldr	r2, [pc, #68]	@ (8005788 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	099b      	lsrs	r3, r3, #6
 8005748:	3301      	adds	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800574c:	e002      	b.n	8005754 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3b01      	subs	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005754:	4b0a      	ldr	r3, [pc, #40]	@ (8005780 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f3      	bne.n	800574e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e000      	b.n	8005772 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	46020800 	.word	0x46020800
 8005784:	20000000 	.word	0x20000000
 8005788:	10624dd3 	.word	0x10624dd3

0800578c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005790:	4b04      	ldr	r3, [pc, #16]	@ (80057a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005794:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005798:	4618      	mov	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	46020800 	.word	0x46020800

080057a8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80057b0:	4b22      	ldr	r3, [pc, #136]	@ (800583c <HAL_PWREx_ConfigSupply+0x94>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a22      	ldr	r2, [pc, #136]	@ (8005840 <HAL_PWREx_ConfigSupply+0x98>)
 80057b6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ba:	099b      	lsrs	r3, r3, #6
 80057bc:	2232      	movs	r2, #50	@ 0x32
 80057be:	fb02 f303 	mul.w	r3, r2, r3
 80057c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005840 <HAL_PWREx_ConfigSupply+0x98>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	099b      	lsrs	r3, r3, #6
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d113      	bne.n	80057fc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80057d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005844 <HAL_PWREx_ConfigSupply+0x9c>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005844 <HAL_PWREx_ConfigSupply+0x9c>)
 80057da:	f023 0302 	bic.w	r3, r3, #2
 80057de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80057e0:	e002      	b.n	80057e8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80057e8:	4b16      	ldr	r3, [pc, #88]	@ (8005844 <HAL_PWREx_ConfigSupply+0x9c>)
 80057ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d116      	bne.n	8005822 <HAL_PWREx_ConfigSupply+0x7a>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1f3      	bne.n	80057e2 <HAL_PWREx_ConfigSupply+0x3a>
 80057fa:	e012      	b.n	8005822 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80057fc:	4b11      	ldr	r3, [pc, #68]	@ (8005844 <HAL_PWREx_ConfigSupply+0x9c>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4a10      	ldr	r2, [pc, #64]	@ (8005844 <HAL_PWREx_ConfigSupply+0x9c>)
 8005802:	f043 0302 	orr.w	r3, r3, #2
 8005806:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005808:	e002      	b.n	8005810 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3b01      	subs	r3, #1
 800580e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005810:	4b0c      	ldr	r3, [pc, #48]	@ (8005844 <HAL_PWREx_ConfigSupply+0x9c>)
 8005812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d102      	bne.n	8005822 <HAL_PWREx_ConfigSupply+0x7a>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f3      	bne.n	800580a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e000      	b.n	800582e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20000000 	.word	0x20000000
 8005840:	10624dd3 	.word	0x10624dd3
 8005844:	46020800 	.word	0x46020800

08005848 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800584c:	4b05      	ldr	r3, [pc, #20]	@ (8005864 <HAL_PWREx_EnableVddIO2+0x1c>)
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	4a04      	ldr	r2, [pc, #16]	@ (8005864 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005852:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005856:	6113      	str	r3, [r2, #16]
}
 8005858:	bf00      	nop
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	46020800 	.word	0x46020800

08005868 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800586c:	4b05      	ldr	r3, [pc, #20]	@ (8005884 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	4a04      	ldr	r2, [pc, #16]	@ (8005884 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8005878:	bf00      	nop
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	46020800 	.word	0x46020800

08005888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08e      	sub	sp, #56	@ 0x38
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005890:	2300      	movs	r3, #0
 8005892:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f000 bec8 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a2:	4b99      	ldr	r3, [pc, #612]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058ac:	4b96      	ldr	r3, [pc, #600]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80058ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 816c 	beq.w	8005b9c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <HAL_RCC_OscConfig+0x52>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058cc:	2b0c      	cmp	r3, #12
 80058ce:	f040 80de 	bne.w	8005a8e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	f040 80da 	bne.w	8005a8e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f000 bea5 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058ec:	4b86      	ldr	r3, [pc, #536]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d004      	beq.n	8005902 <HAL_RCC_OscConfig+0x7a>
 80058f8:	4b83      	ldr	r3, [pc, #524]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005900:	e005      	b.n	800590e <HAL_RCC_OscConfig+0x86>
 8005902:	4b81      	ldr	r3, [pc, #516]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800590e:	4293      	cmp	r3, r2
 8005910:	d255      	bcs.n	80059be <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f9dd 	bl	8006cdc <RCC_SetFlashLatencyFromMSIRange>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f000 be82 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800592e:	4b76      	ldr	r3, [pc, #472]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	4a75      	ldr	r2, [pc, #468]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005934:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005938:	6093      	str	r3, [r2, #8]
 800593a:	4b73      	ldr	r3, [pc, #460]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	4970      	ldr	r1, [pc, #448]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005948:	4313      	orrs	r3, r2
 800594a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005954:	d309      	bcc.n	800596a <HAL_RCC_OscConfig+0xe2>
 8005956:	4b6c      	ldr	r3, [pc, #432]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f023 021f 	bic.w	r2, r3, #31
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	4969      	ldr	r1, [pc, #420]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005964:	4313      	orrs	r3, r2
 8005966:	60cb      	str	r3, [r1, #12]
 8005968:	e07e      	b.n	8005a68 <HAL_RCC_OscConfig+0x1e0>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	2b00      	cmp	r3, #0
 8005970:	da0a      	bge.n	8005988 <HAL_RCC_OscConfig+0x100>
 8005972:	4b65      	ldr	r3, [pc, #404]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	015b      	lsls	r3, r3, #5
 8005980:	4961      	ldr	r1, [pc, #388]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005982:	4313      	orrs	r3, r2
 8005984:	60cb      	str	r3, [r1, #12]
 8005986:	e06f      	b.n	8005a68 <HAL_RCC_OscConfig+0x1e0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005990:	d30a      	bcc.n	80059a8 <HAL_RCC_OscConfig+0x120>
 8005992:	4b5d      	ldr	r3, [pc, #372]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	029b      	lsls	r3, r3, #10
 80059a0:	4959      	ldr	r1, [pc, #356]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60cb      	str	r3, [r1, #12]
 80059a6:	e05f      	b.n	8005a68 <HAL_RCC_OscConfig+0x1e0>
 80059a8:	4b57      	ldr	r3, [pc, #348]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	03db      	lsls	r3, r3, #15
 80059b6:	4954      	ldr	r1, [pc, #336]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60cb      	str	r3, [r1, #12]
 80059bc:	e054      	b.n	8005a68 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80059be:	4b52      	ldr	r3, [pc, #328]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	4a51      	ldr	r2, [pc, #324]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80059c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80059c8:	6093      	str	r3, [r2, #8]
 80059ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	494c      	ldr	r1, [pc, #304]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80059e4:	d309      	bcc.n	80059fa <HAL_RCC_OscConfig+0x172>
 80059e6:	4b48      	ldr	r3, [pc, #288]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f023 021f 	bic.w	r2, r3, #31
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	4945      	ldr	r1, [pc, #276]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60cb      	str	r3, [r1, #12]
 80059f8:	e028      	b.n	8005a4c <HAL_RCC_OscConfig+0x1c4>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	da0a      	bge.n	8005a18 <HAL_RCC_OscConfig+0x190>
 8005a02:	4b41      	ldr	r3, [pc, #260]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	015b      	lsls	r3, r3, #5
 8005a10:	493d      	ldr	r1, [pc, #244]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60cb      	str	r3, [r1, #12]
 8005a16:	e019      	b.n	8005a4c <HAL_RCC_OscConfig+0x1c4>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a20:	d30a      	bcc.n	8005a38 <HAL_RCC_OscConfig+0x1b0>
 8005a22:	4b39      	ldr	r3, [pc, #228]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	029b      	lsls	r3, r3, #10
 8005a30:	4935      	ldr	r1, [pc, #212]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60cb      	str	r3, [r1, #12]
 8005a36:	e009      	b.n	8005a4c <HAL_RCC_OscConfig+0x1c4>
 8005a38:	4b33      	ldr	r3, [pc, #204]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	03db      	lsls	r3, r3, #15
 8005a46:	4930      	ldr	r1, [pc, #192]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 f940 	bl	8006cdc <RCC_SetFlashLatencyFromMSIRange>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f000 bde5 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005a68:	f001 f8e2 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a6c:	4b27      	ldr	r3, [pc, #156]	@ (8005b0c <HAL_RCC_OscConfig+0x284>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fe f9e5 	bl	8003e40 <HAL_InitTick>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 808a 	beq.w	8005b9a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a8a:	f000 bdd2 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d066      	beq.n	8005b64 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005a96:	4b1c      	ldr	r3, [pc, #112]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005a9c:	f043 0301 	orr.w	r3, r3, #1
 8005aa0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005aa2:	f7fe fa57 	bl	8003f54 <HAL_GetTick>
 8005aa6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005aa8:	e009      	b.n	8005abe <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005aaa:	f7fe fa53 	bl	8003f54 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d902      	bls.n	8005abe <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	f000 bdba 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005abe:	4b12      	ldr	r3, [pc, #72]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0ef      	beq.n	8005aaa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005aca:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	4a0e      	ldr	r2, [pc, #56]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005ad0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ad4:	6093      	str	r3, [r2, #8]
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	4909      	ldr	r1, [pc, #36]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005af0:	d30e      	bcc.n	8005b10 <HAL_RCC_OscConfig+0x288>
 8005af2:	4b05      	ldr	r3, [pc, #20]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f023 021f 	bic.w	r2, r3, #31
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	4902      	ldr	r1, [pc, #8]	@ (8005b08 <HAL_RCC_OscConfig+0x280>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60cb      	str	r3, [r1, #12]
 8005b04:	e04a      	b.n	8005b9c <HAL_RCC_OscConfig+0x314>
 8005b06:	bf00      	nop
 8005b08:	46020c00 	.word	0x46020c00
 8005b0c:	2000001c 	.word	0x2000001c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	da0a      	bge.n	8005b2e <HAL_RCC_OscConfig+0x2a6>
 8005b18:	4b98      	ldr	r3, [pc, #608]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	015b      	lsls	r3, r3, #5
 8005b26:	4995      	ldr	r1, [pc, #596]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60cb      	str	r3, [r1, #12]
 8005b2c:	e036      	b.n	8005b9c <HAL_RCC_OscConfig+0x314>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b36:	d30a      	bcc.n	8005b4e <HAL_RCC_OscConfig+0x2c6>
 8005b38:	4b90      	ldr	r3, [pc, #576]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	029b      	lsls	r3, r3, #10
 8005b46:	498d      	ldr	r1, [pc, #564]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60cb      	str	r3, [r1, #12]
 8005b4c:	e026      	b.n	8005b9c <HAL_RCC_OscConfig+0x314>
 8005b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	03db      	lsls	r3, r3, #15
 8005b5c:	4987      	ldr	r1, [pc, #540]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60cb      	str	r3, [r1, #12]
 8005b62:	e01b      	b.n	8005b9c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005b64:	4b85      	ldr	r3, [pc, #532]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a84      	ldr	r2, [pc, #528]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005b6a:	f023 0301 	bic.w	r3, r3, #1
 8005b6e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b70:	f7fe f9f0 	bl	8003f54 <HAL_GetTick>
 8005b74:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005b76:	e009      	b.n	8005b8c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b78:	f7fe f9ec 	bl	8003f54 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d902      	bls.n	8005b8c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	f000 bd53 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005b8c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1ef      	bne.n	8005b78 <HAL_RCC_OscConfig+0x2f0>
 8005b98:	e000      	b.n	8005b9c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005b9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 808b 	beq.w	8005cc0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_OscConfig+0x334>
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb2:	2b0c      	cmp	r3, #12
 8005bb4:	d109      	bne.n	8005bca <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d106      	bne.n	8005bca <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d17d      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f000 bd34 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd2:	d106      	bne.n	8005be2 <HAL_RCC_OscConfig+0x35a>
 8005bd4:	4b69      	ldr	r3, [pc, #420]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a68      	ldr	r2, [pc, #416]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e041      	b.n	8005c66 <HAL_RCC_OscConfig+0x3de>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bea:	d112      	bne.n	8005c12 <HAL_RCC_OscConfig+0x38a>
 8005bec:	4b63      	ldr	r3, [pc, #396]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a62      	ldr	r2, [pc, #392]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005bf2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	4b60      	ldr	r3, [pc, #384]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5f      	ldr	r2, [pc, #380]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005bfe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	4b5d      	ldr	r3, [pc, #372]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a5c      	ldr	r2, [pc, #368]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	e029      	b.n	8005c66 <HAL_RCC_OscConfig+0x3de>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005c1a:	d112      	bne.n	8005c42 <HAL_RCC_OscConfig+0x3ba>
 8005c1c:	4b57      	ldr	r3, [pc, #348]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a56      	ldr	r2, [pc, #344]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	4b54      	ldr	r3, [pc, #336]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a53      	ldr	r2, [pc, #332]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	4b51      	ldr	r3, [pc, #324]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a50      	ldr	r2, [pc, #320]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	e011      	b.n	8005c66 <HAL_RCC_OscConfig+0x3de>
 8005c42:	4b4e      	ldr	r3, [pc, #312]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a4d      	ldr	r2, [pc, #308]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a4a      	ldr	r2, [pc, #296]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	4b48      	ldr	r3, [pc, #288]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a47      	ldr	r2, [pc, #284]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d014      	beq.n	8005c98 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005c6e:	f7fe f971 	bl	8003f54 <HAL_GetTick>
 8005c72:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c74:	e009      	b.n	8005c8a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c76:	f7fe f96d 	bl	8003f54 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b64      	cmp	r3, #100	@ 0x64
 8005c82:	d902      	bls.n	8005c8a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	f000 bcd4 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c8a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0ef      	beq.n	8005c76 <HAL_RCC_OscConfig+0x3ee>
 8005c96:	e013      	b.n	8005cc0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005c98:	f7fe f95c 	bl	8003f54 <HAL_GetTick>
 8005c9c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c9e:	e009      	b.n	8005cb4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca0:	f7fe f958 	bl	8003f54 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b64      	cmp	r3, #100	@ 0x64
 8005cac:	d902      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	f000 bcbf 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cb4:	4b31      	ldr	r3, [pc, #196]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1ef      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d05f      	beq.n	8005d8c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d005      	beq.n	8005cde <HAL_RCC_OscConfig+0x456>
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	2b0c      	cmp	r3, #12
 8005cd6:	d114      	bne.n	8005d02 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d111      	bne.n	8005d02 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d102      	bne.n	8005cec <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f000 bca3 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005cec:	4b23      	ldr	r3, [pc, #140]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	4920      	ldr	r1, [pc, #128]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005d00:	e044      	b.n	8005d8c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d024      	beq.n	8005d54 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d14:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005d16:	f7fe f91d 	bl	8003f54 <HAL_GetTick>
 8005d1a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d1c:	e009      	b.n	8005d32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d1e:	f7fe f919 	bl	8003f54 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d902      	bls.n	8005d32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	f000 bc80 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d32:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0ef      	beq.n	8005d1e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	490b      	ldr	r1, [pc, #44]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	610b      	str	r3, [r1, #16]
 8005d52:	e01b      	b.n	8005d8c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005d54:	4b09      	ldr	r3, [pc, #36]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a08      	ldr	r2, [pc, #32]	@ (8005d7c <HAL_RCC_OscConfig+0x4f4>)
 8005d5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d5e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005d60:	f7fe f8f8 	bl	8003f54 <HAL_GetTick>
 8005d64:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d66:	e00b      	b.n	8005d80 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d68:	f7fe f8f4 	bl	8003f54 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d904      	bls.n	8005d80 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	f000 bc5b 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
 8005d7c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d80:	4baf      	ldr	r3, [pc, #700]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ed      	bne.n	8005d68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80c8 	beq.w	8005f2a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005da0:	4ba7      	ldr	r3, [pc, #668]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d111      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dae:	4ba4      	ldr	r3, [pc, #656]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005db4:	4aa2      	ldr	r2, [pc, #648]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005db6:	f043 0304 	orr.w	r3, r3, #4
 8005dba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005dbe:	4ba0      	ldr	r3, [pc, #640]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005dd2:	4b9c      	ldr	r3, [pc, #624]	@ (8006044 <HAL_RCC_OscConfig+0x7bc>)
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d119      	bne.n	8005e12 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005dde:	4b99      	ldr	r3, [pc, #612]	@ (8006044 <HAL_RCC_OscConfig+0x7bc>)
 8005de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de2:	4a98      	ldr	r2, [pc, #608]	@ (8006044 <HAL_RCC_OscConfig+0x7bc>)
 8005de4:	f043 0301 	orr.w	r3, r3, #1
 8005de8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dea:	f7fe f8b3 	bl	8003f54 <HAL_GetTick>
 8005dee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005df0:	e009      	b.n	8005e06 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df2:	f7fe f8af 	bl	8003f54 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d902      	bls.n	8005e06 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	f000 bc16 	b.w	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005e06:	4b8f      	ldr	r3, [pc, #572]	@ (8006044 <HAL_RCC_OscConfig+0x7bc>)
 8005e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d0ef      	beq.n	8005df2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d05f      	beq.n	8005eda <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005e1a:	4b89      	ldr	r3, [pc, #548]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e20:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d037      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d006      	beq.n	8005e48 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e3f4      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01b      	beq.n	8005e8a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005e52:	4b7b      	ldr	r3, [pc, #492]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e58:	4a79      	ldr	r2, [pc, #484]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005e5a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005e62:	f7fe f877 	bl	8003f54 <HAL_GetTick>
 8005e66:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e6a:	f7fe f873 	bl	8003f54 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b05      	cmp	r3, #5
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e3da      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005e7c:	4b70      	ldr	r3, [pc, #448]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1ef      	bne.n	8005e6a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e90:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	4969      	ldr	r1, [pc, #420]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005ea0:	4b67      	ldr	r3, [pc, #412]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ea6:	4a66      	ldr	r2, [pc, #408]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005ea8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005eac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005eb0:	f7fe f850 	bl	8003f54 <HAL_GetTick>
 8005eb4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb8:	f7fe f84c 	bl	8003f54 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b05      	cmp	r3, #5
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e3b3      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005eca:	4b5d      	ldr	r3, [pc, #372]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0ef      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x630>
 8005ed8:	e01b      	b.n	8005f12 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005eda:	4b59      	ldr	r3, [pc, #356]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ee0:	4a57      	ldr	r2, [pc, #348]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005ee2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005ee6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005eea:	f7fe f833 	bl	8003f54 <HAL_GetTick>
 8005eee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005ef0:	e008      	b.n	8005f04 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef2:	f7fe f82f 	bl	8003f54 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b05      	cmp	r3, #5
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e396      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005f04:	4b4e      	ldr	r3, [pc, #312]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1ef      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f12:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d107      	bne.n	8005f2a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f1a:	4b49      	ldr	r3, [pc, #292]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f20:	4a47      	ldr	r2, [pc, #284]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005f22:	f023 0304 	bic.w	r3, r3, #4
 8005f26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8111 	beq.w	800615a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f3e:	4b40      	ldr	r3, [pc, #256]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d111      	bne.n	8005f70 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f52:	4a3b      	ldr	r2, [pc, #236]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005f54:	f043 0304 	orr.w	r3, r3, #4
 8005f58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005f5c:	4b38      	ldr	r3, [pc, #224]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005f70:	4b34      	ldr	r3, [pc, #208]	@ (8006044 <HAL_RCC_OscConfig+0x7bc>)
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d118      	bne.n	8005fae <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005f7c:	4b31      	ldr	r3, [pc, #196]	@ (8006044 <HAL_RCC_OscConfig+0x7bc>)
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f80:	4a30      	ldr	r2, [pc, #192]	@ (8006044 <HAL_RCC_OscConfig+0x7bc>)
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f88:	f7fd ffe4 	bl	8003f54 <HAL_GetTick>
 8005f8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f90:	f7fd ffe0 	bl	8003f54 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e347      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005fa2:	4b28      	ldr	r3, [pc, #160]	@ (8006044 <HAL_RCC_OscConfig+0x7bc>)
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d01f      	beq.n	8005ffa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0304 	and.w	r3, r3, #4
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d010      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005fce:	f043 0304 	orr.w	r3, r3, #4
 8005fd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fdc:	4a18      	ldr	r2, [pc, #96]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fe6:	e018      	b.n	800601a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005fe8:	4b15      	ldr	r3, [pc, #84]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fee:	4a14      	ldr	r2, [pc, #80]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005ff0:	f043 0301 	orr.w	r3, r3, #1
 8005ff4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005ff8:	e00f      	b.n	800601a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ffa:	4b11      	ldr	r3, [pc, #68]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8005ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006000:	4a0f      	ldr	r2, [pc, #60]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8006002:	f023 0301 	bic.w	r3, r3, #1
 8006006:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800600a:	4b0d      	ldr	r3, [pc, #52]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 800600c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006010:	4a0b      	ldr	r2, [pc, #44]	@ (8006040 <HAL_RCC_OscConfig+0x7b8>)
 8006012:	f023 0304 	bic.w	r3, r3, #4
 8006016:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d057      	beq.n	80060d2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006022:	f7fd ff97 	bl	8003f54 <HAL_GetTick>
 8006026:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006028:	e00e      	b.n	8006048 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602a:	f7fd ff93 	bl	8003f54 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006038:	4293      	cmp	r3, r2
 800603a:	d905      	bls.n	8006048 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e2f8      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
 8006040:	46020c00 	.word	0x46020c00
 8006044:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006048:	4b9c      	ldr	r3, [pc, #624]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 800604a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0e9      	beq.n	800602a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01b      	beq.n	800609a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006062:	4b96      	ldr	r3, [pc, #600]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006068:	4a94      	ldr	r2, [pc, #592]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 800606a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800606e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006072:	e00a      	b.n	800608a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006074:	f7fd ff6e 	bl	8003f54 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006082:	4293      	cmp	r3, r2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e2d3      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800608a:	4b8c      	ldr	r3, [pc, #560]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 800608c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0ed      	beq.n	8006074 <HAL_RCC_OscConfig+0x7ec>
 8006098:	e053      	b.n	8006142 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800609a:	4b88      	ldr	r3, [pc, #544]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 800609c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060a0:	4a86      	ldr	r2, [pc, #536]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 80060a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060aa:	e00a      	b.n	80060c2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ac:	f7fd ff52 	bl	8003f54 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e2b7      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060c2:	4b7e      	ldr	r3, [pc, #504]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 80060c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1ed      	bne.n	80060ac <HAL_RCC_OscConfig+0x824>
 80060d0:	e037      	b.n	8006142 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80060d2:	f7fd ff3f 	bl	8003f54 <HAL_GetTick>
 80060d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060d8:	e00a      	b.n	80060f0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060da:	f7fd ff3b 	bl	8003f54 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e2a0      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060f0:	4b72      	ldr	r3, [pc, #456]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 80060f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1ed      	bne.n	80060da <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80060fe:	4b6f      	ldr	r3, [pc, #444]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01a      	beq.n	8006142 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800610c:	4b6b      	ldr	r3, [pc, #428]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 800610e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006112:	4a6a      	ldr	r2, [pc, #424]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006114:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006118:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800611c:	e00a      	b.n	8006134 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611e:	f7fd ff19 	bl	8003f54 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612c:	4293      	cmp	r3, r2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e27e      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006134:	4b61      	ldr	r3, [pc, #388]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800613a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1ed      	bne.n	800611e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006142:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006146:	2b01      	cmp	r3, #1
 8006148:	d107      	bne.n	800615a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800614a:	4b5c      	ldr	r3, [pc, #368]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 800614c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006150:	4a5a      	ldr	r2, [pc, #360]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006152:	f023 0304 	bic.w	r3, r3, #4
 8006156:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d036      	beq.n	80061d4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d019      	beq.n	80061a2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800616e:	4b53      	ldr	r3, [pc, #332]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a52      	ldr	r2, [pc, #328]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006174:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006178:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800617a:	f7fd feeb 	bl	8003f54 <HAL_GetTick>
 800617e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006182:	f7fd fee7 	bl	8003f54 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e24e      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006194:	4b49      	ldr	r3, [pc, #292]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0f0      	beq.n	8006182 <HAL_RCC_OscConfig+0x8fa>
 80061a0:	e018      	b.n	80061d4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80061a2:	4b46      	ldr	r3, [pc, #280]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a45      	ldr	r2, [pc, #276]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 80061a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061ac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80061ae:	f7fd fed1 	bl	8003f54 <HAL_GetTick>
 80061b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061b6:	f7fd fecd 	bl	8003f54 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e234      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80061c8:	4b3c      	ldr	r3, [pc, #240]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f0      	bne.n	80061b6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d036      	beq.n	800624e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d019      	beq.n	800621c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80061e8:	4b34      	ldr	r3, [pc, #208]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a33      	ldr	r2, [pc, #204]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 80061ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80061f4:	f7fd feae 	bl	8003f54 <HAL_GetTick>
 80061f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80061fc:	f7fd feaa 	bl	8003f54 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e211      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800620e:	4b2b      	ldr	r3, [pc, #172]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0x974>
 800621a:	e018      	b.n	800624e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800621c:	4b27      	ldr	r3, [pc, #156]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a26      	ldr	r2, [pc, #152]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006226:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006228:	f7fd fe94 	bl	8003f54 <HAL_GetTick>
 800622c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006230:	f7fd fe90 	bl	8003f54 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e1f7      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006242:	4b1e      	ldr	r3, [pc, #120]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f0      	bne.n	8006230 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	d07f      	beq.n	800635a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800625e:	2b00      	cmp	r3, #0
 8006260:	d062      	beq.n	8006328 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006262:	4b16      	ldr	r3, [pc, #88]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	4a15      	ldr	r2, [pc, #84]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006268:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800626c:	6093      	str	r3, [r2, #8]
 800626e:	4b13      	ldr	r3, [pc, #76]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627a:	4910      	ldr	r1, [pc, #64]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 800627c:	4313      	orrs	r3, r2
 800627e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006288:	d309      	bcc.n	800629e <HAL_RCC_OscConfig+0xa16>
 800628a:	4b0c      	ldr	r3, [pc, #48]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f023 021f 	bic.w	r2, r3, #31
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	4909      	ldr	r1, [pc, #36]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 8006298:	4313      	orrs	r3, r2
 800629a:	60cb      	str	r3, [r1, #12]
 800629c:	e02a      	b.n	80062f4 <HAL_RCC_OscConfig+0xa6c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da0c      	bge.n	80062c0 <HAL_RCC_OscConfig+0xa38>
 80062a6:	4b05      	ldr	r3, [pc, #20]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	015b      	lsls	r3, r3, #5
 80062b4:	4901      	ldr	r1, [pc, #4]	@ (80062bc <HAL_RCC_OscConfig+0xa34>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60cb      	str	r3, [r1, #12]
 80062ba:	e01b      	b.n	80062f4 <HAL_RCC_OscConfig+0xa6c>
 80062bc:	46020c00 	.word	0x46020c00
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c8:	d30a      	bcc.n	80062e0 <HAL_RCC_OscConfig+0xa58>
 80062ca:	4ba1      	ldr	r3, [pc, #644]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	029b      	lsls	r3, r3, #10
 80062d8:	499d      	ldr	r1, [pc, #628]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	60cb      	str	r3, [r1, #12]
 80062de:	e009      	b.n	80062f4 <HAL_RCC_OscConfig+0xa6c>
 80062e0:	4b9b      	ldr	r3, [pc, #620]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	03db      	lsls	r3, r3, #15
 80062ee:	4998      	ldr	r1, [pc, #608]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80062f4:	4b96      	ldr	r3, [pc, #600]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a95      	ldr	r2, [pc, #596]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80062fa:	f043 0310 	orr.w	r3, r3, #16
 80062fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006300:	f7fd fe28 	bl	8003f54 <HAL_GetTick>
 8006304:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006308:	f7fd fe24 	bl	8003f54 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e18b      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800631a:	4b8d      	ldr	r3, [pc, #564]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f0      	beq.n	8006308 <HAL_RCC_OscConfig+0xa80>
 8006326:	e018      	b.n	800635a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006328:	4b89      	ldr	r3, [pc, #548]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a88      	ldr	r2, [pc, #544]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 800632e:	f023 0310 	bic.w	r3, r3, #16
 8006332:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006334:	f7fd fe0e 	bl	8003f54 <HAL_GetTick>
 8006338:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800633c:	f7fd fe0a 	bl	8003f54 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e171      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800634e:	4b80      	ldr	r3, [pc, #512]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8166 	beq.w	8006630 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006364:	2300      	movs	r3, #0
 8006366:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800636a:	4b79      	ldr	r3, [pc, #484]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	2b0c      	cmp	r3, #12
 8006374:	f000 80f2 	beq.w	800655c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637c:	2b02      	cmp	r3, #2
 800637e:	f040 80c5 	bne.w	800650c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006382:	4b73      	ldr	r3, [pc, #460]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a72      	ldr	r2, [pc, #456]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006388:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800638c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800638e:	f7fd fde1 	bl	8003f54 <HAL_GetTick>
 8006392:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006396:	f7fd fddd 	bl	8003f54 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e144      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80063a8:	4b69      	ldr	r3, [pc, #420]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f0      	bne.n	8006396 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063b4:	4b66      	ldr	r3, [pc, #408]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80063b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d111      	bne.n	80063e6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80063c2:	4b63      	ldr	r3, [pc, #396]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80063c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063c8:	4a61      	ldr	r2, [pc, #388]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80063ca:	f043 0304 	orr.w	r3, r3, #4
 80063ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80063d2:	4b5f      	ldr	r3, [pc, #380]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80063d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80063e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006554 <HAL_RCC_OscConfig+0xccc>)
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063f2:	d102      	bne.n	80063fa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80063fa:	4b56      	ldr	r3, [pc, #344]	@ (8006554 <HAL_RCC_OscConfig+0xccc>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	4a55      	ldr	r2, [pc, #340]	@ (8006554 <HAL_RCC_OscConfig+0xccc>)
 8006400:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006404:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006406:	4b52      	ldr	r3, [pc, #328]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800641a:	3a01      	subs	r2, #1
 800641c:	0212      	lsls	r2, r2, #8
 800641e:	4311      	orrs	r1, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006424:	430a      	orrs	r2, r1
 8006426:	494a      	ldr	r1, [pc, #296]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006428:	4313      	orrs	r3, r2
 800642a:	628b      	str	r3, [r1, #40]	@ 0x28
 800642c:	4b48      	ldr	r3, [pc, #288]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 800642e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006430:	4b49      	ldr	r3, [pc, #292]	@ (8006558 <HAL_RCC_OscConfig+0xcd0>)
 8006432:	4013      	ands	r3, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006438:	3a01      	subs	r2, #1
 800643a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006442:	3a01      	subs	r2, #1
 8006444:	0252      	lsls	r2, r2, #9
 8006446:	b292      	uxth	r2, r2
 8006448:	4311      	orrs	r1, r2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800644e:	3a01      	subs	r2, #1
 8006450:	0412      	lsls	r2, r2, #16
 8006452:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006456:	4311      	orrs	r1, r2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800645c:	3a01      	subs	r2, #1
 800645e:	0612      	lsls	r2, r2, #24
 8006460:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006464:	430a      	orrs	r2, r1
 8006466:	493a      	ldr	r1, [pc, #232]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006468:	4313      	orrs	r3, r2
 800646a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800646c:	4b38      	ldr	r3, [pc, #224]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 800646e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006470:	4a37      	ldr	r2, [pc, #220]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006472:	f023 0310 	bic.w	r3, r3, #16
 8006476:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800647c:	4a34      	ldr	r2, [pc, #208]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006482:	4b33      	ldr	r3, [pc, #204]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006486:	4a32      	ldr	r2, [pc, #200]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006488:	f043 0310 	orr.w	r3, r3, #16
 800648c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800648e:	4b30      	ldr	r3, [pc, #192]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006492:	f023 020c 	bic.w	r2, r3, #12
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649a:	492d      	ldr	r1, [pc, #180]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 800649c:	4313      	orrs	r3, r2
 800649e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80064a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d105      	bne.n	80064b4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80064a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006554 <HAL_RCC_OscConfig+0xccc>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4a29      	ldr	r2, [pc, #164]	@ (8006554 <HAL_RCC_OscConfig+0xccc>)
 80064ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064b2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80064b4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d107      	bne.n	80064cc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80064bc:	4b24      	ldr	r3, [pc, #144]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80064be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064c2:	4a23      	ldr	r2, [pc, #140]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80064c4:	f023 0304 	bic.w	r3, r3, #4
 80064c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80064cc:	4b20      	ldr	r3, [pc, #128]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80064d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064d6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80064d8:	f7fd fd3c 	bl	8003f54 <HAL_GetTick>
 80064dc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e0:	f7fd fd38 	bl	8003f54 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e09f      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80064f2:	4b17      	ldr	r3, [pc, #92]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80064fe:	4b14      	ldr	r3, [pc, #80]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	4a13      	ldr	r2, [pc, #76]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006508:	6293      	str	r3, [r2, #40]	@ 0x28
 800650a:	e091      	b.n	8006630 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800650c:	4b10      	ldr	r3, [pc, #64]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0f      	ldr	r2, [pc, #60]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006516:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006518:	f7fd fd1c 	bl	8003f54 <HAL_GetTick>
 800651c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006520:	f7fd fd18 	bl	8003f54 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e07f      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006532:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f0      	bne.n	8006520 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800653e:	4b04      	ldr	r3, [pc, #16]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006542:	4a03      	ldr	r2, [pc, #12]	@ (8006550 <HAL_RCC_OscConfig+0xcc8>)
 8006544:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006548:	f023 0303 	bic.w	r3, r3, #3
 800654c:	6293      	str	r3, [r2, #40]	@ 0x28
 800654e:	e06f      	b.n	8006630 <HAL_RCC_OscConfig+0xda8>
 8006550:	46020c00 	.word	0x46020c00
 8006554:	46020800 	.word	0x46020800
 8006558:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800655c:	4b37      	ldr	r3, [pc, #220]	@ (800663c <HAL_RCC_OscConfig+0xdb4>)
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006562:	4b36      	ldr	r3, [pc, #216]	@ (800663c <HAL_RCC_OscConfig+0xdb4>)
 8006564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006566:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	2b01      	cmp	r3, #1
 800656e:	d039      	beq.n	80065e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f003 0203 	and.w	r2, r3, #3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800657a:	429a      	cmp	r2, r3
 800657c:	d132      	bne.n	80065e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	0a1b      	lsrs	r3, r3, #8
 8006582:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800658c:	429a      	cmp	r2, r3
 800658e:	d129      	bne.n	80065e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800659a:	429a      	cmp	r2, r3
 800659c:	d122      	bne.n	80065e4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d11a      	bne.n	80065e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	0a5b      	lsrs	r3, r3, #9
 80065b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d111      	bne.n	80065e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	0c1b      	lsrs	r3, r3, #16
 80065c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065cc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d108      	bne.n	80065e4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065de:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d001      	beq.n	80065e8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e024      	b.n	8006632 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80065e8:	4b14      	ldr	r3, [pc, #80]	@ (800663c <HAL_RCC_OscConfig+0xdb4>)
 80065ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ec:	08db      	lsrs	r3, r3, #3
 80065ee:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d01a      	beq.n	8006630 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80065fa:	4b10      	ldr	r3, [pc, #64]	@ (800663c <HAL_RCC_OscConfig+0xdb4>)
 80065fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fe:	4a0f      	ldr	r2, [pc, #60]	@ (800663c <HAL_RCC_OscConfig+0xdb4>)
 8006600:	f023 0310 	bic.w	r3, r3, #16
 8006604:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006606:	f7fd fca5 	bl	8003f54 <HAL_GetTick>
 800660a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800660c:	bf00      	nop
 800660e:	f7fd fca1 	bl	8003f54 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	4293      	cmp	r3, r2
 8006618:	d0f9      	beq.n	800660e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800661e:	4a07      	ldr	r2, [pc, #28]	@ (800663c <HAL_RCC_OscConfig+0xdb4>)
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006624:	4b05      	ldr	r3, [pc, #20]	@ (800663c <HAL_RCC_OscConfig+0xdb4>)
 8006626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006628:	4a04      	ldr	r2, [pc, #16]	@ (800663c <HAL_RCC_OscConfig+0xdb4>)
 800662a:	f043 0310 	orr.w	r3, r3, #16
 800662e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3738      	adds	r7, #56	@ 0x38
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	46020c00 	.word	0x46020c00

08006640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e1d9      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006654:	4b9b      	ldr	r3, [pc, #620]	@ (80068c4 <HAL_RCC_ClockConfig+0x284>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d910      	bls.n	8006684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006662:	4b98      	ldr	r3, [pc, #608]	@ (80068c4 <HAL_RCC_ClockConfig+0x284>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f023 020f 	bic.w	r2, r3, #15
 800666a:	4996      	ldr	r1, [pc, #600]	@ (80068c4 <HAL_RCC_ClockConfig+0x284>)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	4313      	orrs	r3, r2
 8006670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006672:	4b94      	ldr	r3, [pc, #592]	@ (80068c4 <HAL_RCC_ClockConfig+0x284>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d001      	beq.n	8006684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e1c1      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b00      	cmp	r3, #0
 800668e:	d010      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	4b8c      	ldr	r3, [pc, #560]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 8006696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006698:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800669c:	429a      	cmp	r2, r3
 800669e:	d908      	bls.n	80066b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80066a0:	4b89      	ldr	r3, [pc, #548]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80066a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	4986      	ldr	r1, [pc, #536]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d012      	beq.n	80066e4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	4b81      	ldr	r3, [pc, #516]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	091b      	lsrs	r3, r3, #4
 80066c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d909      	bls.n	80066e4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80066d0:	4b7d      	ldr	r3, [pc, #500]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	497a      	ldr	r1, [pc, #488]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d010      	beq.n	8006712 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	4b74      	ldr	r3, [pc, #464]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d908      	bls.n	8006712 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006700:	4b71      	ldr	r3, [pc, #452]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	496e      	ldr	r1, [pc, #440]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 800670e:	4313      	orrs	r3, r2
 8006710:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d010      	beq.n	8006740 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	4b69      	ldr	r3, [pc, #420]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	429a      	cmp	r2, r3
 800672c:	d908      	bls.n	8006740 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800672e:	4b66      	ldr	r3, [pc, #408]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 020f 	bic.w	r2, r3, #15
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	4963      	ldr	r1, [pc, #396]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 800673c:	4313      	orrs	r3, r2
 800673e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80d2 	beq.w	80068f2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800674e:	2300      	movs	r3, #0
 8006750:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b03      	cmp	r3, #3
 8006758:	d143      	bne.n	80067e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800675a:	4b5b      	ldr	r3, [pc, #364]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 800675c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d110      	bne.n	800678a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006768:	4b57      	ldr	r3, [pc, #348]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 800676a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800676e:	4a56      	ldr	r2, [pc, #344]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 8006770:	f043 0304 	orr.w	r3, r3, #4
 8006774:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006778:	4b53      	ldr	r3, [pc, #332]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 800677a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	60bb      	str	r3, [r7, #8]
 8006784:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006786:	2301      	movs	r3, #1
 8006788:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800678a:	f7fd fbe3 	bl	8003f54 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006790:	4b4e      	ldr	r3, [pc, #312]	@ (80068cc <HAL_RCC_ClockConfig+0x28c>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00f      	beq.n	80067bc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800679e:	f7fd fbd9 	bl	8003f54 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e12b      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80067b0:	4b46      	ldr	r3, [pc, #280]	@ (80068cc <HAL_RCC_ClockConfig+0x28c>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d0f0      	beq.n	800679e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d107      	bne.n	80067d2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80067c2:	4b41      	ldr	r3, [pc, #260]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80067c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067c8:	4a3f      	ldr	r2, [pc, #252]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80067ca:	f023 0304 	bic.w	r3, r3, #4
 80067ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80067d2:	4b3d      	ldr	r3, [pc, #244]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d121      	bne.n	8006822 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e112      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d107      	bne.n	80067fa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ea:	4b37      	ldr	r3, [pc, #220]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d115      	bne.n	8006822 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e106      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d107      	bne.n	8006812 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006802:	4b31      	ldr	r3, [pc, #196]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0304 	and.w	r3, r3, #4
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e0fa      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006812:	4b2d      	ldr	r3, [pc, #180]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e0f2      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006822:	4b29      	ldr	r3, [pc, #164]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f023 0203 	bic.w	r2, r3, #3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	4926      	ldr	r1, [pc, #152]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 8006830:	4313      	orrs	r3, r2
 8006832:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006834:	f7fd fb8e 	bl	8003f54 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b03      	cmp	r3, #3
 8006840:	d112      	bne.n	8006868 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006842:	e00a      	b.n	800685a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006844:	f7fd fb86 	bl	8003f54 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e0d6      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800685a:	4b1b      	ldr	r3, [pc, #108]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f003 030c 	and.w	r3, r3, #12
 8006862:	2b0c      	cmp	r3, #12
 8006864:	d1ee      	bne.n	8006844 <HAL_RCC_ClockConfig+0x204>
 8006866:	e044      	b.n	80068f2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d112      	bne.n	8006896 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006870:	e00a      	b.n	8006888 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006872:	f7fd fb6f 	bl	8003f54 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006880:	4293      	cmp	r3, r2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e0bf      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006888:	4b0f      	ldr	r3, [pc, #60]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f003 030c 	and.w	r3, r3, #12
 8006890:	2b08      	cmp	r3, #8
 8006892:	d1ee      	bne.n	8006872 <HAL_RCC_ClockConfig+0x232>
 8006894:	e02d      	b.n	80068f2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d123      	bne.n	80068e6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068a0:	f7fd fb58 	bl	8003f54 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0a8      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80068b6:	4b04      	ldr	r3, [pc, #16]	@ (80068c8 <HAL_RCC_ClockConfig+0x288>)
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f003 030c 	and.w	r3, r3, #12
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1ee      	bne.n	80068a0 <HAL_RCC_ClockConfig+0x260>
 80068c2:	e016      	b.n	80068f2 <HAL_RCC_ClockConfig+0x2b2>
 80068c4:	40022000 	.word	0x40022000
 80068c8:	46020c00 	.word	0x46020c00
 80068cc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068d0:	f7fd fb40 	bl	8003f54 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068de:	4293      	cmp	r3, r2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e090      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80068e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f003 030c 	and.w	r3, r3, #12
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d1ee      	bne.n	80068d0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	4b43      	ldr	r3, [pc, #268]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	429a      	cmp	r2, r3
 800690c:	d208      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800690e:	4b40      	ldr	r3, [pc, #256]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 020f 	bic.w	r2, r3, #15
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	493d      	ldr	r1, [pc, #244]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 800691c:	4313      	orrs	r3, r2
 800691e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006920:	4b3c      	ldr	r3, [pc, #240]	@ (8006a14 <HAL_RCC_ClockConfig+0x3d4>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d210      	bcs.n	8006950 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692e:	4b39      	ldr	r3, [pc, #228]	@ (8006a14 <HAL_RCC_ClockConfig+0x3d4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f023 020f 	bic.w	r2, r3, #15
 8006936:	4937      	ldr	r1, [pc, #220]	@ (8006a14 <HAL_RCC_ClockConfig+0x3d4>)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800693e:	4b35      	ldr	r3, [pc, #212]	@ (8006a14 <HAL_RCC_ClockConfig+0x3d4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d001      	beq.n	8006950 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e05b      	b.n	8006a08 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d010      	beq.n	800697e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	4b2b      	ldr	r3, [pc, #172]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006968:	429a      	cmp	r2, r3
 800696a:	d208      	bcs.n	800697e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800696c:	4b28      	ldr	r3, [pc, #160]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4925      	ldr	r1, [pc, #148]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 800697a:	4313      	orrs	r3, r2
 800697c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d012      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	4b20      	ldr	r3, [pc, #128]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	091b      	lsrs	r3, r3, #4
 8006994:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006998:	429a      	cmp	r2, r3
 800699a:	d209      	bcs.n	80069b0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800699c:	4b1c      	ldr	r3, [pc, #112]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	4919      	ldr	r1, [pc, #100]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0310 	and.w	r3, r3, #16
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d010      	beq.n	80069de <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	695a      	ldr	r2, [r3, #20]
 80069c0:	4b13      	ldr	r3, [pc, #76]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 80069c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d208      	bcs.n	80069de <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80069cc:	4b10      	ldr	r3, [pc, #64]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	490d      	ldr	r1, [pc, #52]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80069de:	f000 f821 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 80069e2:	4602      	mov	r2, r0
 80069e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006a10 <HAL_RCC_ClockConfig+0x3d0>)
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	490a      	ldr	r1, [pc, #40]	@ (8006a18 <HAL_RCC_ClockConfig+0x3d8>)
 80069ee:	5ccb      	ldrb	r3, [r1, r3]
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	4a09      	ldr	r2, [pc, #36]	@ (8006a1c <HAL_RCC_ClockConfig+0x3dc>)
 80069f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80069f8:	4b09      	ldr	r3, [pc, #36]	@ (8006a20 <HAL_RCC_ClockConfig+0x3e0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fd fa1f 	bl	8003e40 <HAL_InitTick>
 8006a02:	4603      	mov	r3, r0
 8006a04:	73fb      	strb	r3, [r7, #15]

  return status;
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	46020c00 	.word	0x46020c00
 8006a14:	40022000 	.word	0x40022000
 8006a18:	08010cc8 	.word	0x08010cc8
 8006a1c:	20000000 	.word	0x20000000
 8006a20:	2000001c 	.word	0x2000001c

08006a24 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b08b      	sub	sp, #44	@ 0x2c
 8006a28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a32:	4b78      	ldr	r3, [pc, #480]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	f003 030c 	and.w	r3, r3, #12
 8006a3a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a3c:	4b75      	ldr	r3, [pc, #468]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0x34>
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b0c      	cmp	r3, #12
 8006a50:	d121      	bne.n	8006a96 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d11e      	bne.n	8006a96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006a58:	4b6e      	ldr	r3, [pc, #440]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d107      	bne.n	8006a74 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006a64:	4b6b      	ldr	r3, [pc, #428]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006a66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a6a:	0b1b      	lsrs	r3, r3, #12
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a72:	e005      	b.n	8006a80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006a74:	4b67      	ldr	r3, [pc, #412]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	0f1b      	lsrs	r3, r3, #28
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a80:	4a65      	ldr	r2, [pc, #404]	@ (8006c18 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a88:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d110      	bne.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a94:	e00d      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a96:	4b5f      	ldr	r3, [pc, #380]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f003 030c 	and.w	r3, r3, #12
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d102      	bne.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8006c1c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006aa4:	623b      	str	r3, [r7, #32]
 8006aa6:	e004      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d101      	bne.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006aae:	4b5c      	ldr	r3, [pc, #368]	@ (8006c20 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006ab0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b0c      	cmp	r3, #12
 8006ab6:	f040 80a5 	bne.w	8006c04 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006aba:	4b56      	ldr	r3, [pc, #344]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006ac4:	4b53      	ldr	r3, [pc, #332]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac8:	0a1b      	lsrs	r3, r3, #8
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	3301      	adds	r3, #1
 8006ad0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006ad2:	4b50      	ldr	r3, [pc, #320]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad6:	091b      	lsrs	r3, r3, #4
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ade:	4b4d      	ldr	r3, [pc, #308]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae2:	08db      	lsrs	r3, r3, #3
 8006ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d003      	beq.n	8006b08 <HAL_RCC_GetSysClockFreq+0xe4>
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d022      	beq.n	8006b4c <HAL_RCC_GetSysClockFreq+0x128>
 8006b06:	e043      	b.n	8006b90 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8006c24 <HAL_RCC_GetSysClockFreq+0x200>
 8006b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006b2a:	ed97 6a01 	vldr	s12, [r7, #4]
 8006b2e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006c28 <HAL_RCC_GetSysClockFreq+0x204>
 8006b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b4a:	e046      	b.n	8006bda <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b56:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8006c2c <HAL_RCC_GetSysClockFreq+0x208>
 8006b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006b6e:	ed97 6a01 	vldr	s12, [r7, #4]
 8006b72:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006c28 <HAL_RCC_GetSysClockFreq+0x204>
 8006b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b8e:	e024      	b.n	8006bda <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	ee07 3a90 	vmov	s15, r3
 8006ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb0:	ee07 3a90 	vmov	s15, r3
 8006bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006bb8:	ed97 6a01 	vldr	s12, [r7, #4]
 8006bbc:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8006c28 <HAL_RCC_GetSysClockFreq+0x204>
 8006bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006bc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bd8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006bda:	4b0e      	ldr	r3, [pc, #56]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bde:	0e1b      	lsrs	r3, r3, #24
 8006be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006be4:	3301      	adds	r3, #1
 8006be6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bfe:	ee17 3a90 	vmov	r3, s15
 8006c02:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006c04:	6a3b      	ldr	r3, [r7, #32]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	372c      	adds	r7, #44	@ 0x2c
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	46020c00 	.word	0x46020c00
 8006c18:	08010ce0 	.word	0x08010ce0
 8006c1c:	00f42400 	.word	0x00f42400
 8006c20:	007a1200 	.word	0x007a1200
 8006c24:	4b742400 	.word	0x4b742400
 8006c28:	46000000 	.word	0x46000000
 8006c2c:	4af42400 	.word	0x4af42400

08006c30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006c34:	f7ff fef6 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	4b07      	ldr	r3, [pc, #28]	@ (8006c58 <HAL_RCC_GetHCLKFreq+0x28>)
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	4906      	ldr	r1, [pc, #24]	@ (8006c5c <HAL_RCC_GetHCLKFreq+0x2c>)
 8006c44:	5ccb      	ldrb	r3, [r1, r3]
 8006c46:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4a:	4a05      	ldr	r2, [pc, #20]	@ (8006c60 <HAL_RCC_GetHCLKFreq+0x30>)
 8006c4c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006c4e:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <HAL_RCC_GetHCLKFreq+0x30>)
 8006c50:	681b      	ldr	r3, [r3, #0]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	46020c00 	.word	0x46020c00
 8006c5c:	08010cc8 	.word	0x08010cc8
 8006c60:	20000000 	.word	0x20000000

08006c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006c68:	f7ff ffe2 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	4b05      	ldr	r3, [pc, #20]	@ (8006c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	091b      	lsrs	r3, r3, #4
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	4903      	ldr	r1, [pc, #12]	@ (8006c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c7a:	5ccb      	ldrb	r3, [r1, r3]
 8006c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	46020c00 	.word	0x46020c00
 8006c88:	08010cd8 	.word	0x08010cd8

08006c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006c90:	f7ff ffce 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
 8006c94:	4602      	mov	r2, r0
 8006c96:	4b05      	ldr	r3, [pc, #20]	@ (8006cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	0a1b      	lsrs	r3, r3, #8
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	4903      	ldr	r1, [pc, #12]	@ (8006cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ca2:	5ccb      	ldrb	r3, [r1, r3]
 8006ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	46020c00 	.word	0x46020c00
 8006cb0:	08010cd8 	.word	0x08010cd8

08006cb4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006cb8:	f7ff ffba 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	4b05      	ldr	r3, [pc, #20]	@ (8006cd4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	091b      	lsrs	r3, r3, #4
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	4903      	ldr	r1, [pc, #12]	@ (8006cd8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006cca:	5ccb      	ldrb	r3, [r1, r3]
 8006ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	46020c00 	.word	0x46020c00
 8006cd8:	08010cd8 	.word	0x08010cd8

08006cdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8006de0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cea:	f003 0304 	and.w	r3, r3, #4
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006cf2:	f7fe fd4b 	bl	800578c <HAL_PWREx_GetVoltageRange>
 8006cf6:	6178      	str	r0, [r7, #20]
 8006cf8:	e019      	b.n	8006d2e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cfa:	4b39      	ldr	r3, [pc, #228]	@ (8006de0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d00:	4a37      	ldr	r2, [pc, #220]	@ (8006de0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006d02:	f043 0304 	orr.w	r3, r3, #4
 8006d06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006d0a:	4b35      	ldr	r3, [pc, #212]	@ (8006de0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d18:	f7fe fd38 	bl	800578c <HAL_PWREx_GetVoltageRange>
 8006d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d1e:	4b30      	ldr	r3, [pc, #192]	@ (8006de0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d24:	4a2e      	ldr	r2, [pc, #184]	@ (8006de0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006d26:	f023 0304 	bic.w	r3, r3, #4
 8006d2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d34:	d003      	beq.n	8006d3e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d3c:	d109      	bne.n	8006d52 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d44:	d202      	bcs.n	8006d4c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006d46:	2301      	movs	r3, #1
 8006d48:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006d4a:	e033      	b.n	8006db4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006d50:	e030      	b.n	8006db4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d58:	d208      	bcs.n	8006d6c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d60:	d102      	bne.n	8006d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006d62:	2303      	movs	r3, #3
 8006d64:	613b      	str	r3, [r7, #16]
 8006d66:	e025      	b.n	8006db4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e035      	b.n	8006dd8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d72:	d90f      	bls.n	8006d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d80:	d902      	bls.n	8006d88 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006d82:	2300      	movs	r3, #0
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	e015      	b.n	8006db4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006d88:	2301      	movs	r3, #1
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	e012      	b.n	8006db4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006d8e:	2300      	movs	r3, #0
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	e00f      	b.n	8006db4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d9a:	d109      	bne.n	8006db0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da2:	d102      	bne.n	8006daa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006da4:	2301      	movs	r3, #1
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	e004      	b.n	8006db4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006daa:	2302      	movs	r3, #2
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	e001      	b.n	8006db4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006db0:	2301      	movs	r3, #1
 8006db2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006db4:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f023 020f 	bic.w	r2, r3, #15
 8006dbc:	4909      	ldr	r1, [pc, #36]	@ (8006de4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006dc4:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d001      	beq.n	8006dd6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e000      	b.n	8006dd8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	46020c00 	.word	0x46020c00
 8006de4:	40022000 	.word	0x40022000

08006de8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dec:	b0c4      	sub	sp, #272	@ 0x110
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f002 0401 	and.w	r4, r2, #1
 8006e0c:	2500      	movs	r5, #0
 8006e0e:	ea54 0305 	orrs.w	r3, r4, r5
 8006e12:	d00b      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006e14:	4bd5      	ldr	r3, [pc, #852]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e1a:	f023 0103 	bic.w	r1, r3, #3
 8006e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e24:	4ad1      	ldr	r2, [pc, #836]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e26:	430b      	orrs	r3, r1
 8006e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f002 0802 	and.w	r8, r2, #2
 8006e38:	f04f 0900 	mov.w	r9, #0
 8006e3c:	ea58 0309 	orrs.w	r3, r8, r9
 8006e40:	d00b      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006e42:	4bca      	ldr	r3, [pc, #808]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e48:	f023 010c 	bic.w	r1, r3, #12
 8006e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e52:	4ac6      	ldr	r2, [pc, #792]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e54:	430b      	orrs	r3, r1
 8006e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	f002 0a04 	and.w	sl, r2, #4
 8006e66:	f04f 0b00 	mov.w	fp, #0
 8006e6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e6e:	d00b      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006e70:	4bbe      	ldr	r3, [pc, #760]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e76:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e80:	4aba      	ldr	r2, [pc, #744]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006e82:	430b      	orrs	r3, r1
 8006e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f002 0308 	and.w	r3, r2, #8
 8006e94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e9e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	d00b      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006ea8:	4bb0      	ldr	r3, [pc, #704]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb8:	4aac      	ldr	r2, [pc, #688]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006eba:	430b      	orrs	r3, r1
 8006ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f002 0310 	and.w	r3, r2, #16
 8006ecc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ed6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006eda:	460b      	mov	r3, r1
 8006edc:	4313      	orrs	r3, r2
 8006ede:	d00b      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006ee0:	4ba2      	ldr	r3, [pc, #648]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ee6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ef0:	4a9e      	ldr	r2, [pc, #632]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f0e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4313      	orrs	r3, r2
 8006f16:	d00b      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006f18:	4b94      	ldr	r3, [pc, #592]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f1e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f28:	4a90      	ldr	r2, [pc, #576]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f2a:	430b      	orrs	r3, r1
 8006f2c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f002 0320 	and.w	r3, r2, #32
 8006f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f40:	2300      	movs	r3, #0
 8006f42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006f46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	d00b      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006f50:	4b86      	ldr	r3, [pc, #536]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f56:	f023 0107 	bic.w	r1, r3, #7
 8006f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f60:	4a82      	ldr	r2, [pc, #520]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f62:	430b      	orrs	r3, r1
 8006f64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4313      	orrs	r3, r2
 8006f86:	d00b      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006f88:	4b78      	ldr	r3, [pc, #480]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f8e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f98:	4a74      	ldr	r2, [pc, #464]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006f9a:	430b      	orrs	r3, r1
 8006f9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006fac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fb6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	d00b      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd0:	4a66      	ldr	r2, [pc, #408]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006fd2:	430b      	orrs	r3, r1
 8006fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006ff8:	4b5c      	ldr	r3, [pc, #368]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8006ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ffe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007008:	4a58      	ldr	r2, [pc, #352]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800700a:	430b      	orrs	r3, r1
 800700c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800701c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007020:	2300      	movs	r3, #0
 8007022:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007026:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800702a:	460b      	mov	r3, r1
 800702c:	4313      	orrs	r3, r2
 800702e:	d00b      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007030:	4b4e      	ldr	r3, [pc, #312]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007036:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800703a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800703e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007040:	4a4a      	ldr	r2, [pc, #296]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007042:	430b      	orrs	r3, r1
 8007044:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8007048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007058:	2300      	movs	r3, #0
 800705a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800705e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007062:	460b      	mov	r3, r1
 8007064:	4313      	orrs	r3, r2
 8007066:	d00b      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8007068:	4b40      	ldr	r3, [pc, #256]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800706a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800706e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007076:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007078:	4a3c      	ldr	r2, [pc, #240]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800707a:	430b      	orrs	r3, r1
 800707c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8007080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800708c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007090:	2300      	movs	r3, #0
 8007092:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007096:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800709a:	460b      	mov	r3, r1
 800709c:	4313      	orrs	r3, r2
 800709e:	d00c      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80070a0:	4b32      	ldr	r3, [pc, #200]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80070aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070b2:	4a2e      	ldr	r2, [pc, #184]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070b4:	430b      	orrs	r3, r1
 80070b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80070c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070ca:	2300      	movs	r3, #0
 80070cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4313      	orrs	r3, r2
 80070d8:	d00c      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80070da:	4b24      	ldr	r3, [pc, #144]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070e0:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80070e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ec:	4a1f      	ldr	r2, [pc, #124]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80070ee:	430b      	orrs	r3, r1
 80070f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80070f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007104:	2300      	movs	r3, #0
 8007106:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800710a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800710e:	460b      	mov	r3, r1
 8007110:	4313      	orrs	r3, r2
 8007112:	d00c      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007114:	4b15      	ldr	r3, [pc, #84]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800711a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800711e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007126:	4a11      	ldr	r2, [pc, #68]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007128:	430b      	orrs	r3, r1
 800712a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800712e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800713a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800713e:	2300      	movs	r3, #0
 8007140:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007144:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007148:	460b      	mov	r3, r1
 800714a:	4313      	orrs	r3, r2
 800714c:	d010      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800714e:	4b07      	ldr	r3, [pc, #28]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007154:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800715c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007160:	4a02      	ldr	r2, [pc, #8]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8007162:	430b      	orrs	r3, r1
 8007164:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007168:	e002      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800716a:	bf00      	nop
 800716c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800717c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007180:	2300      	movs	r3, #0
 8007182:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007186:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800718a:	460b      	mov	r3, r1
 800718c:	4313      	orrs	r3, r2
 800718e:	d04c      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007194:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007198:	2b80      	cmp	r3, #128	@ 0x80
 800719a:	d02d      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800719c:	2b80      	cmp	r3, #128	@ 0x80
 800719e:	d827      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80071a0:	2b60      	cmp	r3, #96	@ 0x60
 80071a2:	d02b      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x414>
 80071a4:	2b60      	cmp	r3, #96	@ 0x60
 80071a6:	d823      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80071a8:	2b40      	cmp	r3, #64	@ 0x40
 80071aa:	d006      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80071ac:	2b40      	cmp	r3, #64	@ 0x40
 80071ae:	d81f      	bhi.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d009      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d011      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80071b8:	e01a      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071ba:	4bbe      	ldr	r3, [pc, #760]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071be:	4abd      	ldr	r2, [pc, #756]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071c4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80071c6:	e01a      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071cc:	3308      	adds	r3, #8
 80071ce:	4618      	mov	r0, r3
 80071d0:	f002 fc3c 	bl	8009a4c <RCCEx_PLL2_Config>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80071da:	e010      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e0:	332c      	adds	r3, #44	@ 0x2c
 80071e2:	4618      	mov	r0, r3
 80071e4:	f002 fcca 	bl	8009b7c <RCCEx_PLL3_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80071ee:	e006      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80071f6:	e002      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80071f8:	bf00      	nop
 80071fa:	e000      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80071fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071fe:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10d      	bne.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007206:	4bab      	ldr	r3, [pc, #684]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007208:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800720c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007214:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007218:	4aa6      	ldr	r2, [pc, #664]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800721a:	430b      	orrs	r3, r1
 800721c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007220:	e003      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007222:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007226:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800722a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800722e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007232:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007236:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800723a:	2300      	movs	r3, #0
 800723c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007240:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007244:	460b      	mov	r3, r1
 8007246:	4313      	orrs	r3, r2
 8007248:	d053      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800724a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800724e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007256:	d033      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8007258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800725c:	d82c      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800725e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007262:	d02f      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8007264:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007268:	d826      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800726a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800726e:	d008      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8007270:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007274:	d820      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800727a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800727e:	d011      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007280:	e01a      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007282:	4b8c      	ldr	r3, [pc, #560]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007286:	4a8b      	ldr	r2, [pc, #556]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800728c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800728e:	e01a      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007294:	3308      	adds	r3, #8
 8007296:	4618      	mov	r0, r3
 8007298:	f002 fbd8 	bl	8009a4c <RCCEx_PLL2_Config>
 800729c:	4603      	mov	r3, r0
 800729e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80072a2:	e010      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a8:	332c      	adds	r3, #44	@ 0x2c
 80072aa:	4618      	mov	r0, r3
 80072ac:	f002 fc66 	bl	8009b7c <RCCEx_PLL3_Config>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80072b6:	e006      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80072be:	e002      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80072c0:	bf00      	nop
 80072c2:	e000      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80072c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10d      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80072ce:	4b79      	ldr	r3, [pc, #484]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072d4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80072d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80072e0:	4a74      	ldr	r2, [pc, #464]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072e2:	430b      	orrs	r3, r1
 80072e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80072e8:	e003      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ea:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80072ee:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80072f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80072fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007300:	2300      	movs	r3, #0
 8007302:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007304:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007308:	460b      	mov	r3, r1
 800730a:	4313      	orrs	r3, r2
 800730c:	d046      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800730e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007316:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800731a:	d028      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800731c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007320:	d821      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007322:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007326:	d022      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007328:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800732c:	d81b      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800732e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007332:	d01c      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007334:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007338:	d815      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800733a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800733e:	d008      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8007340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007344:	d80f      	bhi.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d011      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x586>
 800734a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800734e:	d00e      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007350:	e009      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007356:	3308      	adds	r3, #8
 8007358:	4618      	mov	r0, r3
 800735a:	f002 fb77 	bl	8009a4c <RCCEx_PLL2_Config>
 800735e:	4603      	mov	r3, r0
 8007360:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007364:	e004      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800736c:	e000      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800736e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007370:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10d      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007378:	4b4e      	ldr	r3, [pc, #312]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800737a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800737e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007386:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800738a:	4a4a      	ldr	r2, [pc, #296]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800738c:	430b      	orrs	r3, r1
 800738e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007392:	e003      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007394:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007398:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800739c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80073a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80073aa:	2300      	movs	r3, #0
 80073ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80073ae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80073b2:	460b      	mov	r3, r1
 80073b4:	4313      	orrs	r3, r2
 80073b6:	d03f      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80073b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d81e      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80073c4:	a201      	add	r2, pc, #4	@ (adr r2, 80073cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	0800740b 	.word	0x0800740b
 80073d0:	080073e1 	.word	0x080073e1
 80073d4:	080073ef 	.word	0x080073ef
 80073d8:	0800740b 	.word	0x0800740b
 80073dc:	0800740b 	.word	0x0800740b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80073e0:	4b34      	ldr	r3, [pc, #208]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	4a33      	ldr	r2, [pc, #204]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80073e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ea:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80073ec:	e00e      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073f2:	332c      	adds	r3, #44	@ 0x2c
 80073f4:	4618      	mov	r0, r3
 80073f6:	f002 fbc1 	bl	8009b7c <RCCEx_PLL3_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007400:	e004      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007408:	e000      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 800740a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800740c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10d      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007414:	4b27      	ldr	r3, [pc, #156]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007416:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800741a:	f023 0107 	bic.w	r1, r3, #7
 800741e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007426:	4a23      	ldr	r2, [pc, #140]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007428:	430b      	orrs	r3, r1
 800742a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800742e:	e003      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007434:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007444:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007446:	2300      	movs	r3, #0
 8007448:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800744a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800744e:	460b      	mov	r3, r1
 8007450:	4313      	orrs	r3, r2
 8007452:	d04c      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007458:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800745c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007460:	d02a      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8007462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007466:	d821      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007468:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800746c:	d026      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800746e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007472:	d81b      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007478:	d00e      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800747a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800747e:	d815      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01d      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8007484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007488:	d110      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800748a:	4b0a      	ldr	r3, [pc, #40]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800748c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748e:	4a09      	ldr	r2, [pc, #36]	@ (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007494:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007496:	e014      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800749c:	332c      	adds	r3, #44	@ 0x2c
 800749e:	4618      	mov	r0, r3
 80074a0:	f002 fb6c 	bl	8009b7c <RCCEx_PLL3_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80074aa:	e00a      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80074b2:	e006      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80074b4:	46020c00 	.word	0x46020c00
        break;
 80074b8:	bf00      	nop
 80074ba:	e002      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80074bc:	bf00      	nop
 80074be:	e000      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80074c0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80074c2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10d      	bne.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80074ca:	4baf      	ldr	r3, [pc, #700]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80074cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80074d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074dc:	4aaa      	ldr	r2, [pc, #680]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80074de:	430b      	orrs	r3, r1
 80074e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80074e4:	e003      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80074ea:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80074fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80074fc:	2300      	movs	r3, #0
 80074fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8007500:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007504:	460b      	mov	r3, r1
 8007506:	4313      	orrs	r3, r2
 8007508:	f000 80b5 	beq.w	8007676 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800750c:	2300      	movs	r3, #0
 800750e:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007512:	4b9d      	ldr	r3, [pc, #628]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	d113      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007520:	4b99      	ldr	r3, [pc, #612]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007526:	4a98      	ldr	r2, [pc, #608]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007528:	f043 0304 	orr.w	r3, r3, #4
 800752c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007530:	4b95      	ldr	r3, [pc, #596]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800753e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007548:	4b90      	ldr	r3, [pc, #576]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800754a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754c:	4a8f      	ldr	r2, [pc, #572]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007554:	f7fc fcfe 	bl	8003f54 <HAL_GetTick>
 8007558:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800755c:	e00b      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800755e:	f7fc fcf9 	bl	8003f54 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d903      	bls.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007574:	e005      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007576:	4b85      	ldr	r3, [pc, #532]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8007578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0ed      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8007582:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007586:	2b00      	cmp	r3, #0
 8007588:	d165      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800758a:	4b7f      	ldr	r3, [pc, #508]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800758c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007590:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007594:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800759c:	2b00      	cmp	r3, #0
 800759e:	d023      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80075a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075a4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80075a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d01b      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075b0:	4b75      	ldr	r3, [pc, #468]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80075b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075be:	4b72      	ldr	r3, [pc, #456]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80075c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075c4:	4a70      	ldr	r2, [pc, #448]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80075c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075ce:	4b6e      	ldr	r3, [pc, #440]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80075d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075d4:	4a6c      	ldr	r2, [pc, #432]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80075d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075de:	4a6a      	ldr	r2, [pc, #424]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80075e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d019      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f4:	f7fc fcae 	bl	8003f54 <HAL_GetTick>
 80075f8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075fc:	e00d      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075fe:	f7fc fca9 	bl	8003f54 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007608:	1ad2      	subs	r2, r2, r3
 800760a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800760e:	429a      	cmp	r2, r3
 8007610:	d903      	bls.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8007618:	e006      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800761a:	4b5b      	ldr	r3, [pc, #364]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800761c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0ea      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8007628:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10d      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007630:	4b55      	ldr	r3, [pc, #340]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007636:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800763a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800763e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007642:	4a51      	ldr	r2, [pc, #324]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007644:	430b      	orrs	r3, r1
 8007646:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800764a:	e008      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800764c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007650:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8007654:	e003      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007656:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800765a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800765e:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8007662:	2b01      	cmp	r3, #1
 8007664:	d107      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007666:	4b48      	ldr	r3, [pc, #288]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800766c:	4a46      	ldr	r2, [pc, #280]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800766e:	f023 0304 	bic.w	r3, r3, #4
 8007672:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007682:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007684:	2300      	movs	r3, #0
 8007686:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007688:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800768c:	460b      	mov	r3, r1
 800768e:	4313      	orrs	r3, r2
 8007690:	d042      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007696:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800769a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800769e:	d022      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80076a0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80076a4:	d81b      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80076a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076aa:	d011      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 80076ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076b0:	d815      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d019      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x902>
 80076b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076ba:	d110      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076c0:	3308      	adds	r3, #8
 80076c2:	4618      	mov	r0, r3
 80076c4:	f002 f9c2 	bl	8009a4c <RCCEx_PLL2_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80076ce:	e00d      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	4a2c      	ldr	r2, [pc, #176]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076da:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80076dc:	e006      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80076e4:	e002      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80076e6:	bf00      	nop
 80076e8:	e000      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80076ea:	bf00      	nop
    }
    if (ret == HAL_OK)
 80076ec:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10d      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80076f4:	4b24      	ldr	r3, [pc, #144]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80076f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80076fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007702:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007706:	4a20      	ldr	r2, [pc, #128]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007708:	430b      	orrs	r3, r1
 800770a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800770e:	e003      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007710:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007714:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007724:	653b      	str	r3, [r7, #80]	@ 0x50
 8007726:	2300      	movs	r3, #0
 8007728:	657b      	str	r3, [r7, #84]	@ 0x54
 800772a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800772e:	460b      	mov	r3, r1
 8007730:	4313      	orrs	r3, r2
 8007732:	d031      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007738:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800773c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007740:	d00b      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007746:	d804      	bhi.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d008      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800774c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007750:	d007      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007758:	e004      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800775a:	bf00      	nop
 800775c:	e002      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800775e:	bf00      	nop
 8007760:	e000      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8007762:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007764:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007768:	2b00      	cmp	r3, #0
 800776a:	d111      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800776c:	4b06      	ldr	r3, [pc, #24]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800776e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007772:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800777a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800777e:	4a02      	ldr	r2, [pc, #8]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8007780:	430b      	orrs	r3, r1
 8007782:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007786:	e007      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8007788:	46020c00 	.word	0x46020c00
 800778c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007790:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007794:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80077a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077a6:	2300      	movs	r3, #0
 80077a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80077ae:	460b      	mov	r3, r1
 80077b0:	4313      	orrs	r3, r2
 80077b2:	d00c      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80077b4:	4bb2      	ldr	r3, [pc, #712]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80077b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077ba:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80077be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077c6:	4aae      	ldr	r2, [pc, #696]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80077c8:	430b      	orrs	r3, r1
 80077ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80077ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80077da:	643b      	str	r3, [r7, #64]	@ 0x40
 80077dc:	2300      	movs	r3, #0
 80077de:	647b      	str	r3, [r7, #68]	@ 0x44
 80077e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80077e4:	460b      	mov	r3, r1
 80077e6:	4313      	orrs	r3, r2
 80077e8:	d019      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80077ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80077f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077f6:	d105      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80077f8:	4ba1      	ldr	r3, [pc, #644]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80077fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fc:	4aa0      	ldr	r2, [pc, #640]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80077fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007802:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007804:	4b9e      	ldr	r3, [pc, #632]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007806:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800780a:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800780e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007812:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007816:	4a9a      	ldr	r2, [pc, #616]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007818:	430b      	orrs	r3, r1
 800781a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800781e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800782a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800782c:	2300      	movs	r3, #0
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007830:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007834:	460b      	mov	r3, r1
 8007836:	4313      	orrs	r3, r2
 8007838:	d00c      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800783a:	4b91      	ldr	r3, [pc, #580]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800783c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007840:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007848:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800784c:	4a8c      	ldr	r2, [pc, #560]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800784e:	430b      	orrs	r3, r1
 8007850:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007860:	633b      	str	r3, [r7, #48]	@ 0x30
 8007862:	2300      	movs	r3, #0
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
 8007866:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800786a:	460b      	mov	r3, r1
 800786c:	4313      	orrs	r3, r2
 800786e:	d00c      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007870:	4b83      	ldr	r3, [pc, #524]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007876:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800787a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800787e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007882:	4a7f      	ldr	r2, [pc, #508]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007884:	430b      	orrs	r3, r1
 8007886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800788a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007896:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007898:	2300      	movs	r3, #0
 800789a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800789c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80078a0:	460b      	mov	r3, r1
 80078a2:	4313      	orrs	r3, r2
 80078a4:	d00c      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80078a6:	4b76      	ldr	r3, [pc, #472]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80078a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078ac:	f023 0218 	bic.w	r2, r3, #24
 80078b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80078b8:	4971      	ldr	r1, [pc, #452]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80078c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80078cc:	623b      	str	r3, [r7, #32]
 80078ce:	2300      	movs	r3, #0
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80078d6:	460b      	mov	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	d032      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80078dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80078e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078e8:	d105      	bne.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ea:	4b65      	ldr	r3, [pc, #404]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80078ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ee:	4a64      	ldr	r2, [pc, #400]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80078f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078f4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80078f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80078fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007902:	d108      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007908:	3308      	adds	r3, #8
 800790a:	4618      	mov	r0, r3
 800790c:	f002 f89e 	bl	8009a4c <RCCEx_PLL2_Config>
 8007910:	4603      	mov	r3, r0
 8007912:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8007916:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10d      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800791e:	4b58      	ldr	r3, [pc, #352]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007920:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007924:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800792c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007930:	4953      	ldr	r1, [pc, #332]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007932:	4313      	orrs	r3, r2
 8007934:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007938:	e003      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800793e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8007942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	2100      	movs	r1, #0
 800794c:	61b9      	str	r1, [r7, #24]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	61fb      	str	r3, [r7, #28]
 8007954:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007958:	460b      	mov	r3, r1
 800795a:	4313      	orrs	r3, r2
 800795c:	d04a      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800795e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007962:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007966:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800796a:	d01e      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 800796c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007970:	d825      	bhi.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007972:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007976:	d00e      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007978:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800797c:	d81f      	bhi.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d021      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8007982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007986:	d11a      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007988:	4b3d      	ldr	r3, [pc, #244]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800798a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798c:	4a3c      	ldr	r2, [pc, #240]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800798e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007992:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8007994:	e018      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800799a:	3308      	adds	r3, #8
 800799c:	4618      	mov	r0, r3
 800799e:	f002 f855 	bl	8009a4c <RCCEx_PLL2_Config>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80079a8:	e00e      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ae:	332c      	adds	r3, #44	@ 0x2c
 80079b0:	4618      	mov	r0, r3
 80079b2:	f002 f8e3 	bl	8009b7c <RCCEx_PLL3_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80079bc:	e004      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80079c4:	e000      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80079c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10d      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80079d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80079d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80079da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80079e2:	4927      	ldr	r1, [pc, #156]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80079ea:	e003      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ec:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80079f0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80079f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	2300      	movs	r3, #0
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	d03d      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a1c:	d00e      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007a1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a22:	d815      	bhi.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d017      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a2c:	d110      	bne.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a2e:	4b14      	ldr	r3, [pc, #80]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	4a13      	ldr	r2, [pc, #76]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a38:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007a3a:	e00e      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a40:	3308      	adds	r3, #8
 8007a42:	4618      	mov	r0, r3
 8007a44:	f002 f802 	bl	8009a4c <RCCEx_PLL2_Config>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007a4e:	e004      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007a56:	e000      	b.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8007a58:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007a5a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d110      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8007a62:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a68:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a74:	4902      	ldr	r1, [pc, #8]	@ (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007a7c:	e006      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8007a7e:	bf00      	nop
 8007a80:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a84:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007a88:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007a98:	60bb      	str	r3, [r7, #8]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	d00c      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007aae:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ab6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007aba:	4928      	ldr	r1, [pc, #160]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8007ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	2100      	movs	r1, #0
 8007acc:	6039      	str	r1, [r7, #0]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	607b      	str	r3, [r7, #4]
 8007ad4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4313      	orrs	r3, r2
 8007adc:	d036      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8007ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ae2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007ae6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007aea:	d00d      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007aec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007af0:	d811      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8007af2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007af6:	d012      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007af8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007afc:	d80b      	bhi.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00d      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b06:	d106      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b08:	4b14      	ldr	r3, [pc, #80]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0c:	4a13      	ldr	r2, [pc, #76]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b12:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8007b14:	e004      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8007b1c:	e000      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8007b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b20:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10d      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8007b28:	4b0c      	ldr	r3, [pc, #48]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007b2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b2e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007b3a:	4908      	ldr	r1, [pc, #32]	@ (8007b5c <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007b42:	e003      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b44:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b48:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007b4c:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8007b56:	46bd      	mov	sp, r7
 8007b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b5c:	46020c00 	.word	0x46020c00

08007b60 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b089      	sub	sp, #36	@ 0x24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007b68:	4ba6      	ldr	r3, [pc, #664]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b70:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007b72:	4ba4      	ldr	r3, [pc, #656]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007b7c:	4ba1      	ldr	r3, [pc, #644]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	0a1b      	lsrs	r3, r3, #8
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	3301      	adds	r3, #1
 8007b88:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007b8a:	4b9e      	ldr	r3, [pc, #632]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8e:	091b      	lsrs	r3, r3, #4
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007b96:	4b9b      	ldr	r3, [pc, #620]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9a:	08db      	lsrs	r3, r3, #3
 8007b9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d062      	beq.n	8007c7e <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	f200 8081 	bhi.w	8007cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d024      	beq.n	8007c10 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d17a      	bne.n	8007cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007e08 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bde:	4b89      	ldr	r3, [pc, #548]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bf2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c0e:	e08f      	b.n	8007d30 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007c10:	4b7c      	ldr	r3, [pc, #496]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007c1c:	4b79      	ldr	r3, [pc, #484]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	0f1b      	lsrs	r3, r3, #28
 8007c22:	f003 030f 	and.w	r3, r3, #15
 8007c26:	e006      	b.n	8007c36 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8007c28:	4b76      	ldr	r3, [pc, #472]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	0f1b      	lsrs	r3, r3, #28
 8007c32:	f003 030f 	and.w	r3, r3, #15
 8007c36:	4a76      	ldr	r2, [pc, #472]	@ (8007e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3c:	ee07 3a90 	vmov	s15, r3
 8007c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	ee07 3a90 	vmov	s15, r3
 8007c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c60:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007c64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c70:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c7c:	e058      	b.n	8007d30 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	ee07 3a90 	vmov	s15, r3
 8007c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c88:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8007e14 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8007c8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c90:	4b5c      	ldr	r3, [pc, #368]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c98:	ee07 3a90 	vmov	s15, r3
 8007c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ca0:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ca4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007ca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007cac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cc0:	e036      	b.n	8007d30 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007cc2:	4b50      	ldr	r3, [pc, #320]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007cce:	4b4d      	ldr	r3, [pc, #308]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	0f1b      	lsrs	r3, r3, #28
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	e006      	b.n	8007ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8007cda:	4b4a      	ldr	r3, [pc, #296]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ce0:	041b      	lsls	r3, r3, #16
 8007ce2:	0f1b      	lsrs	r3, r3, #28
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	4a49      	ldr	r2, [pc, #292]	@ (8007e10 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d12:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007e0c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d2e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007d30:	4b34      	ldr	r3, [pc, #208]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d017      	beq.n	8007d6c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007d3c:	4b31      	ldr	r3, [pc, #196]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d40:	0a5b      	lsrs	r3, r3, #9
 8007d42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007d4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d52:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d62:	ee17 2a90 	vmov	r2, s15
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e002      	b.n	8007d72 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007d72:	4b24      	ldr	r3, [pc, #144]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d017      	beq.n	8007dae <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007d7e:	4b21      	ldr	r3, [pc, #132]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d82:	0c1b      	lsrs	r3, r3, #16
 8007d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d88:	ee07 3a90 	vmov	s15, r3
 8007d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007d90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d94:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007da4:	ee17 2a90 	vmov	r2, s15
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	605a      	str	r2, [r3, #4]
 8007dac:	e002      	b.n	8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007db4:	4b13      	ldr	r3, [pc, #76]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d017      	beq.n	8007df0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007dc0:	4b10      	ldr	r3, [pc, #64]	@ (8007e04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dc4:	0e1b      	lsrs	r3, r3, #24
 8007dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8007dd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de6:	ee17 2a90 	vmov	r2, s15
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007dee:	e002      	b.n	8007df6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	609a      	str	r2, [r3, #8]
}
 8007df6:	bf00      	nop
 8007df8:	3724      	adds	r7, #36	@ 0x24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	46020c00 	.word	0x46020c00
 8007e08:	4b742400 	.word	0x4b742400
 8007e0c:	46000000 	.word	0x46000000
 8007e10:	08010ce0 	.word	0x08010ce0
 8007e14:	4af42400 	.word	0x4af42400

08007e18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b089      	sub	sp, #36	@ 0x24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007e20:	4ba6      	ldr	r3, [pc, #664]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e28:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007e2a:	4ba4      	ldr	r3, [pc, #656]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007e34:	4ba1      	ldr	r3, [pc, #644]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e38:	0a1b      	lsrs	r3, r3, #8
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	3301      	adds	r3, #1
 8007e40:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007e42:	4b9e      	ldr	r3, [pc, #632]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e46:	091b      	lsrs	r3, r3, #4
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007e4e:	4b9b      	ldr	r3, [pc, #620]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e52:	08db      	lsrs	r3, r3, #3
 8007e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	fb02 f303 	mul.w	r3, r2, r3
 8007e5e:	ee07 3a90 	vmov	s15, r3
 8007e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e66:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d062      	beq.n	8007f36 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	f200 8081 	bhi.w	8007f7a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d024      	beq.n	8007ec8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d17a      	bne.n	8007f7a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80080c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e96:	4b89      	ldr	r3, [pc, #548]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007eaa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80080c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ec6:	e08f      	b.n	8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007ec8:	4b7c      	ldr	r3, [pc, #496]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007ed4:	4b79      	ldr	r3, [pc, #484]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	0f1b      	lsrs	r3, r3, #28
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	e006      	b.n	8007eee <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8007ee0:	4b76      	ldr	r3, [pc, #472]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ee6:	041b      	lsls	r3, r3, #16
 8007ee8:	0f1b      	lsrs	r3, r3, #28
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	4a76      	ldr	r2, [pc, #472]	@ (80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	ee07 3a90 	vmov	s15, r3
 8007f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f14:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f18:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80080c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f34:	e058      	b.n	8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	ee07 3a90 	vmov	s15, r3
 8007f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f40:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80080cc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8007f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f48:	4b5c      	ldr	r3, [pc, #368]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f50:	ee07 3a90 	vmov	s15, r3
 8007f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f58:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f5c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80080c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007f60:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007f64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f78:	e036      	b.n	8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007f7a:	4b50      	ldr	r3, [pc, #320]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8007f86:	4b4d      	ldr	r3, [pc, #308]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	0f1b      	lsrs	r3, r3, #28
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	e006      	b.n	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8007f92:	4b4a      	ldr	r3, [pc, #296]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f98:	041b      	lsls	r3, r3, #16
 8007f9a:	0f1b      	lsrs	r3, r3, #28
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	4a49      	ldr	r2, [pc, #292]	@ (80080c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	ee07 3a90 	vmov	s15, r3
 8007fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	ee07 3a90 	vmov	s15, r3
 8007fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80080c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fe6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007fe8:	4b34      	ldr	r3, [pc, #208]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d017      	beq.n	8008024 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007ff4:	4b31      	ldr	r3, [pc, #196]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff8:	0a5b      	lsrs	r3, r3, #9
 8007ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800800a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800800e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800801a:	ee17 2a90 	vmov	r2, s15
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	e002      	b.n	800802a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800802a:	4b24      	ldr	r3, [pc, #144]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800802c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d017      	beq.n	8008066 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008036:	4b21      	ldr	r3, [pc, #132]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803a:	0c1b      	lsrs	r3, r3, #16
 800803c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008040:	ee07 3a90 	vmov	s15, r3
 8008044:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008048:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800804c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008050:	edd7 6a07 	vldr	s13, [r7, #28]
 8008054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800805c:	ee17 2a90 	vmov	r2, s15
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	605a      	str	r2, [r3, #4]
 8008064:	e002      	b.n	800806c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800806c:	4b13      	ldr	r3, [pc, #76]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800806e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008070:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d017      	beq.n	80080a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008078:	4b10      	ldr	r3, [pc, #64]	@ (80080bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800807a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807c:	0e1b      	lsrs	r3, r3, #24
 800807e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800808a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800808e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008092:	edd7 6a07 	vldr	s13, [r7, #28]
 8008096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800809a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800809e:	ee17 2a90 	vmov	r2, s15
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80080a6:	e002      	b.n	80080ae <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	609a      	str	r2, [r3, #8]
}
 80080ae:	bf00      	nop
 80080b0:	3724      	adds	r7, #36	@ 0x24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	46020c00 	.word	0x46020c00
 80080c0:	4b742400 	.word	0x4b742400
 80080c4:	46000000 	.word	0x46000000
 80080c8:	08010ce0 	.word	0x08010ce0
 80080cc:	4af42400 	.word	0x4af42400

080080d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b089      	sub	sp, #36	@ 0x24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80080d8:	4ba6      	ldr	r3, [pc, #664]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80080da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80080e2:	4ba4      	ldr	r3, [pc, #656]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e6:	f003 0303 	and.w	r3, r3, #3
 80080ea:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80080ec:	4ba1      	ldr	r3, [pc, #644]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80080ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f0:	0a1b      	lsrs	r3, r3, #8
 80080f2:	f003 030f 	and.w	r3, r3, #15
 80080f6:	3301      	adds	r3, #1
 80080f8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80080fa:	4b9e      	ldr	r3, [pc, #632]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80080fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fe:	091b      	lsrs	r3, r3, #4
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008106:	4b9b      	ldr	r3, [pc, #620]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800810a:	08db      	lsrs	r3, r3, #3
 800810c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	fb02 f303 	mul.w	r3, r2, r3
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d062      	beq.n	80081ee <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b03      	cmp	r3, #3
 800812c:	f200 8081 	bhi.w	8008232 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d024      	beq.n	8008180 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d17a      	bne.n	8008232 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800814a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814e:	4b89      	ldr	r3, [pc, #548]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800815e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008162:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800837c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008166:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800816a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800816e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008172:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800817e:	e08f      	b.n	80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008180:	4b7c      	ldr	r3, [pc, #496]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800818c:	4b79      	ldr	r3, [pc, #484]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	0f1b      	lsrs	r3, r3, #28
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	e006      	b.n	80081a6 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8008198:	4b76      	ldr	r3, [pc, #472]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800819a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	0f1b      	lsrs	r3, r3, #28
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	4a76      	ldr	r2, [pc, #472]	@ (8008380 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80081a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ac:	ee07 3a90 	vmov	s15, r3
 80081b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	ee07 3a90 	vmov	s15, r3
 80081c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80081d0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800837c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80081d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80081e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081ec:	e058      	b.n	80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	ee07 3a90 	vmov	s15, r3
 80081f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f8:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8008384 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 80081fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008200:	4b5c      	ldr	r3, [pc, #368]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008208:	ee07 3a90 	vmov	s15, r3
 800820c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008210:	ed97 6a02 	vldr	s12, [r7, #8]
 8008214:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800837c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008218:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800821c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008224:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800822c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008230:	e036      	b.n	80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008232:	4b50      	ldr	r3, [pc, #320]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800823e:	4b4d      	ldr	r3, [pc, #308]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	0f1b      	lsrs	r3, r3, #28
 8008244:	f003 030f 	and.w	r3, r3, #15
 8008248:	e006      	b.n	8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800824a:	4b4a      	ldr	r3, [pc, #296]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800824c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008250:	041b      	lsls	r3, r3, #16
 8008252:	0f1b      	lsrs	r3, r3, #28
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	4a49      	ldr	r2, [pc, #292]	@ (8008380 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800825a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800825e:	ee07 3a90 	vmov	s15, r3
 8008262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	ee07 3a90 	vmov	s15, r3
 800826c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800827e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008282:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800837c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800828a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800828e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008292:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800829e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80082a0:	4b34      	ldr	r3, [pc, #208]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d017      	beq.n	80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80082ac:	4b31      	ldr	r3, [pc, #196]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082b0:	0a5b      	lsrs	r3, r3, #9
 80082b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80082be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80082c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082d2:	ee17 2a90 	vmov	r2, s15
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	e002      	b.n	80082e2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80082e2:	4b24      	ldr	r3, [pc, #144]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d017      	beq.n	800831e <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80082ee:	4b21      	ldr	r3, [pc, #132]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80082f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f2:	0c1b      	lsrs	r3, r3, #16
 80082f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082f8:	ee07 3a90 	vmov	s15, r3
 80082fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008300:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008304:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008308:	edd7 6a07 	vldr	s13, [r7, #28]
 800830c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008314:	ee17 2a90 	vmov	r2, s15
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	605a      	str	r2, [r3, #4]
 800831c:	e002      	b.n	8008324 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008324:	4b13      	ldr	r3, [pc, #76]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d017      	beq.n	8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008330:	4b10      	ldr	r3, [pc, #64]	@ (8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008334:	0e1b      	lsrs	r3, r3, #24
 8008336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008346:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800834a:	edd7 6a07 	vldr	s13, [r7, #28]
 800834e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008356:	ee17 2a90 	vmov	r2, s15
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800835e:	e002      	b.n	8008366 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	609a      	str	r2, [r3, #8]
}
 8008366:	bf00      	nop
 8008368:	3724      	adds	r7, #36	@ 0x24
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	46020c00 	.word	0x46020c00
 8008378:	4b742400 	.word	0x4b742400
 800837c:	46000000 	.word	0x46000000
 8008380:	08010ce0 	.word	0x08010ce0
 8008384:	4af42400 	.word	0x4af42400

08008388 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08e      	sub	sp, #56	@ 0x38
 800838c:	af00      	add	r7, sp, #0
 800838e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008396:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800839a:	430b      	orrs	r3, r1
 800839c:	d145      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800839e:	4ba7      	ldr	r3, [pc, #668]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083a8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80083aa:	4ba4      	ldr	r3, [pc, #656]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d108      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083be:	d104      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80083c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083c6:	f001 bb35 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80083ca:	4b9c      	ldr	r3, [pc, #624]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083d8:	d114      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80083da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083e0:	d110      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083e2:	4b96      	ldr	r3, [pc, #600]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083f0:	d103      	bne.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80083f2:	23fa      	movs	r3, #250	@ 0xfa
 80083f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083f6:	f001 bb1d 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 80083fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80083fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008400:	f001 bb18 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008404:	4b8d      	ldr	r3, [pc, #564]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800840c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008410:	d107      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008418:	d103      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800841a:	4b89      	ldr	r3, [pc, #548]	@ (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800841c:	637b      	str	r3, [r7, #52]	@ 0x34
 800841e:	f001 bb09 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	637b      	str	r3, [r7, #52]	@ 0x34
 8008426:	f001 bb05 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800842a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800842e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008432:	430b      	orrs	r3, r1
 8008434:	d151      	bne.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008436:	4b81      	ldr	r3, [pc, #516]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008438:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800843c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008440:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	2b80      	cmp	r3, #128	@ 0x80
 8008446:	d035      	beq.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844a:	2b80      	cmp	r3, #128	@ 0x80
 800844c:	d841      	bhi.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	2b60      	cmp	r3, #96	@ 0x60
 8008452:	d02a      	beq.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	2b60      	cmp	r3, #96	@ 0x60
 8008458:	d83b      	bhi.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800845a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845c:	2b40      	cmp	r3, #64	@ 0x40
 800845e:	d009      	beq.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	2b40      	cmp	r3, #64	@ 0x40
 8008464:	d835      	bhi.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00c      	beq.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800846c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846e:	2b20      	cmp	r3, #32
 8008470:	d012      	beq.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008472:	e02e      	b.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff fb71 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008482:	f001 bad7 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008486:	f107 0318 	add.w	r3, r7, #24
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff fcc4 	bl	8007e18 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008494:	f001 bace 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008498:	f107 030c 	add.w	r3, r7, #12
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff fe17 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084a6:	f001 bac5 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80084aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80084ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084b0:	f001 bac0 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084b4:	4b61      	ldr	r3, [pc, #388]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084c0:	d103      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80084c2:	4b60      	ldr	r3, [pc, #384]	@ (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80084c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084c6:	f001 bab5 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084ce:	f001 bab1 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084d6:	f001 baad 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80084da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084de:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80084e2:	430b      	orrs	r3, r1
 80084e4:	d158      	bne.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80084e6:	4b55      	ldr	r3, [pc, #340]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80084ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80084f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084f8:	d03b      	beq.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008500:	d846      	bhi.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008508:	d02e      	beq.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008510:	d83e      	bhi.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008518:	d00b      	beq.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008520:	d836      	bhi.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00d      	beq.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800852e:	d012      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008530:	e02e      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff fb12 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800853c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008540:	f001 ba78 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008544:	f107 0318 	add.w	r3, r7, #24
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fc65 	bl	8007e18 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008552:	f001 ba6f 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008556:	f107 030c 	add.w	r3, r7, #12
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fdb8 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008564:	f001 ba66 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008568:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800856c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800856e:	f001 ba61 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008572:	4b32      	ldr	r3, [pc, #200]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800857a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800857e:	d103      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008580:	4b30      	ldr	r3, [pc, #192]	@ (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008584:	f001 ba56 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800858c:	f001 ba52 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008594:	f001 ba4e 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800859c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80085a0:	430b      	orrs	r3, r1
 80085a2:	d126      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80085a4:	4b25      	ldr	r3, [pc, #148]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80085b0:	4b22      	ldr	r3, [pc, #136]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085bc:	d106      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80085c4:	4b1f      	ldr	r3, [pc, #124]	@ (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80085c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80085c8:	f001 ba34 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80085cc:	4b1b      	ldr	r3, [pc, #108]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085d8:	d107      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80085da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085e0:	d103      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80085e2:	4b19      	ldr	r3, [pc, #100]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80085e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e6:	f001 ba25 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ee:	f001 ba21 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80085f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f6:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80085fa:	430b      	orrs	r3, r1
 80085fc:	d16e      	bne.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80085fe:	4b0f      	ldr	r3, [pc, #60]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008604:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008608:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008610:	d03d      	beq.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008618:	d85c      	bhi.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008620:	d014      	beq.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008628:	d854      	bhi.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	2b00      	cmp	r3, #0
 800862e:	d01f      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008636:	d012      	beq.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008638:	e04c      	b.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800863a:	bf00      	nop
 800863c:	46020c00 	.word	0x46020c00
 8008640:	0003d090 	.word	0x0003d090
 8008644:	00f42400 	.word	0x00f42400
 8008648:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800864c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff fa85 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008658:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800865a:	f001 b9eb 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800865e:	f107 0318 	add.w	r3, r7, #24
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff fbd8 	bl	8007e18 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800866c:	f001 b9e2 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008670:	4ba7      	ldr	r3, [pc, #668]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800867c:	d103      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800867e:	4ba5      	ldr	r3, [pc, #660]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008680:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008682:	f001 b9d7 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800868a:	f001 b9d3 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800868e:	4ba0      	ldr	r3, [pc, #640]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b20      	cmp	r3, #32
 8008698:	d118      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800869a:	4b9d      	ldr	r3, [pc, #628]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d005      	beq.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80086a6:	4b9a      	ldr	r3, [pc, #616]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	0e1b      	lsrs	r3, r3, #24
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	e006      	b.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80086b2:	4b97      	ldr	r3, [pc, #604]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80086b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086b8:	041b      	lsls	r3, r3, #16
 80086ba:	0e1b      	lsrs	r3, r3, #24
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	4a95      	ldr	r2, [pc, #596]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80086c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086c8:	f001 b9b4 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086d0:	f001 b9b0 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086d8:	f001 b9ac 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80086dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80086e4:	430b      	orrs	r3, r1
 80086e6:	d17f      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80086e8:	4b89      	ldr	r3, [pc, #548]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80086ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80086ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80086f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d165      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80086fa:	4b85      	ldr	r3, [pc, #532]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80086fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008700:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008704:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800870c:	d034      	beq.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008714:	d853      	bhi.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800871c:	d00b      	beq.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008724:	d84b      	bhi.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008728:	2b00      	cmp	r3, #0
 800872a:	d016      	beq.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008732:	d009      	beq.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008734:	e043      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fa10 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008744:	f001 b976 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008748:	f107 0318 	add.w	r3, r7, #24
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff fb63 	bl	8007e18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008756:	f001 b96d 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800875a:	4b6d      	ldr	r3, [pc, #436]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008766:	d103      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008768:	4b6a      	ldr	r3, [pc, #424]	@ (8008914 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800876a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800876c:	f001 b962 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008774:	f001 b95e 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008778:	4b65      	ldr	r3, [pc, #404]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0320 	and.w	r3, r3, #32
 8008780:	2b20      	cmp	r3, #32
 8008782:	d118      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008784:	4b62      	ldr	r3, [pc, #392]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008790:	4b5f      	ldr	r3, [pc, #380]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	0e1b      	lsrs	r3, r3, #24
 8008796:	f003 030f 	and.w	r3, r3, #15
 800879a:	e006      	b.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800879c:	4b5c      	ldr	r3, [pc, #368]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800879e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087a2:	041b      	lsls	r3, r3, #16
 80087a4:	0e1b      	lsrs	r3, r3, #24
 80087a6:	f003 030f 	and.w	r3, r3, #15
 80087aa:	4a5b      	ldr	r2, [pc, #364]	@ (8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80087ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087b0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80087b2:	f001 b93f 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80087ba:	f001 b93b 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80087c2:	f001 b937 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087cc:	d108      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff f9c4 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80087d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087da:	637b      	str	r3, [r7, #52]	@ 0x34
 80087dc:	f001 b92a 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087e4:	f001 b926 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80087e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ec:	1e51      	subs	r1, r2, #1
 80087ee:	430b      	orrs	r3, r1
 80087f0:	d136      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80087f2:	4b47      	ldr	r3, [pc, #284]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80087f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087f8:	f003 0303 	and.w	r3, r3, #3
 80087fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008804:	f7fe fa42 	bl	8006c8c <HAL_RCC_GetPCLK2Freq>
 8008808:	6378      	str	r0, [r7, #52]	@ 0x34
 800880a:	f001 b913 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008810:	2b01      	cmp	r3, #1
 8008812:	d104      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008814:	f7fe f906 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008818:	6378      	str	r0, [r7, #52]	@ 0x34
 800881a:	f001 b90b 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800881e:	4b3c      	ldr	r3, [pc, #240]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800882a:	d106      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882e:	2b02      	cmp	r3, #2
 8008830:	d103      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8008832:	4b3a      	ldr	r3, [pc, #232]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008834:	637b      	str	r3, [r7, #52]	@ 0x34
 8008836:	f001 b8fd 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800883a:	4b35      	ldr	r3, [pc, #212]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800883c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b02      	cmp	r3, #2
 8008846:	d107      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884a:	2b03      	cmp	r3, #3
 800884c:	d104      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800884e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008852:	637b      	str	r3, [r7, #52]	@ 0x34
 8008854:	f001 b8ee 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34
 800885c:	f001 b8ea 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008864:	1e91      	subs	r1, r2, #2
 8008866:	430b      	orrs	r3, r1
 8008868:	d136      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800886a:	4b29      	ldr	r3, [pc, #164]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800886c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008870:	f003 030c 	and.w	r3, r3, #12
 8008874:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	2b00      	cmp	r3, #0
 800887a:	d104      	bne.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800887c:	f7fe f9f2 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8008880:	6378      	str	r0, [r7, #52]	@ 0x34
 8008882:	f001 b8d7 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	2b04      	cmp	r3, #4
 800888a:	d104      	bne.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800888c:	f7fe f8ca 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008890:	6378      	str	r0, [r7, #52]	@ 0x34
 8008892:	f001 b8cf 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008896:	4b1e      	ldr	r3, [pc, #120]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800889e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088a2:	d106      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80088a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a6:	2b08      	cmp	r3, #8
 80088a8:	d103      	bne.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80088aa:	4b1c      	ldr	r3, [pc, #112]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80088ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ae:	f001 b8c1 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80088b2:	4b17      	ldr	r3, [pc, #92]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d107      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80088c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c2:	2b0c      	cmp	r3, #12
 80088c4:	d104      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80088c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80088cc:	f001 b8b2 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088d4:	f001 b8ae 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80088d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088dc:	1f11      	subs	r1, r2, #4
 80088de:	430b      	orrs	r3, r1
 80088e0:	d13f      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80088e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80088e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80088ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d104      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80088f4:	f7fe f9b6 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 80088f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80088fa:	f001 b89b 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	2b10      	cmp	r3, #16
 8008902:	d10d      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008904:	f7fe f88e 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008908:	6378      	str	r0, [r7, #52]	@ 0x34
 800890a:	f001 b893 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800890e:	bf00      	nop
 8008910:	46020c00 	.word	0x46020c00
 8008914:	02dc6c00 	.word	0x02dc6c00
 8008918:	08010ce0 	.word	0x08010ce0
 800891c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008920:	4ba8      	ldr	r3, [pc, #672]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800892c:	d106      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	2b20      	cmp	r3, #32
 8008932:	d103      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008934:	4ba4      	ldr	r3, [pc, #656]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34
 8008938:	f001 b87c 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800893c:	4ba1      	ldr	r3, [pc, #644]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800893e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b02      	cmp	r3, #2
 8008948:	d107      	bne.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800894a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894c:	2b30      	cmp	r3, #48	@ 0x30
 800894e:	d104      	bne.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008950:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008954:	637b      	str	r3, [r7, #52]	@ 0x34
 8008956:	f001 b86d 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
 800895e:	f001 b869 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008966:	f1a2 0108 	sub.w	r1, r2, #8
 800896a:	430b      	orrs	r3, r1
 800896c:	d136      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800896e:	4b95      	ldr	r3, [pc, #596]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008974:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008978:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	2b00      	cmp	r3, #0
 800897e:	d104      	bne.n	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008980:	f7fe f970 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8008984:	6378      	str	r0, [r7, #52]	@ 0x34
 8008986:	f001 b855 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	2b40      	cmp	r3, #64	@ 0x40
 800898e:	d104      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008990:	f7fe f848 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008994:	6378      	str	r0, [r7, #52]	@ 0x34
 8008996:	f001 b84d 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800899a:	4b8a      	ldr	r3, [pc, #552]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a6:	d106      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	2b80      	cmp	r3, #128	@ 0x80
 80089ac:	d103      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80089ae:	4b86      	ldr	r3, [pc, #536]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80089b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b2:	f001 b83f 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80089b6:	4b83      	ldr	r3, [pc, #524]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80089b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089bc:	f003 0302 	and.w	r3, r3, #2
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d107      	bne.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80089c8:	d104      	bne.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80089ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d0:	f001 b830 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d8:	f001 b82c 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80089dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e0:	f1a2 0110 	sub.w	r1, r2, #16
 80089e4:	430b      	orrs	r3, r1
 80089e6:	d139      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80089e8:	4b76      	ldr	r3, [pc, #472]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80089ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d104      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80089fa:	f7fe f933 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 80089fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a00:	f001 b818 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a0a:	d104      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008a0c:	f7fe f80a 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008a10:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a12:	f001 b80f 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008a16:	4b6b      	ldr	r3, [pc, #428]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a22:	d107      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a2a:	d103      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008a2c:	4b66      	ldr	r3, [pc, #408]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a30:	f001 b800 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008a34:	4b63      	ldr	r3, [pc, #396]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d108      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a48:	d104      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a50:	f000 bff0 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a58:	f000 bfec 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8008a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a60:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8008a64:	430b      	orrs	r3, r1
 8008a66:	d139      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008a68:	4b56      	ldr	r3, [pc, #344]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a72:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d104      	bne.n	8008a84 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008a7a:	f7fe f8f3 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8008a7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a80:	f000 bfd8 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a8a:	d104      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008a8c:	f7fd ffca 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008a90:	6378      	str	r0, [r7, #52]	@ 0x34
 8008a92:	f000 bfcf 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008a96:	4b4b      	ldr	r3, [pc, #300]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aa2:	d107      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aaa:	d103      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8008aac:	4b46      	ldr	r3, [pc, #280]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab0:	f000 bfc0 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008ab4:	4b43      	ldr	r3, [pc, #268]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d108      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ac8:	d104      	bne.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8008aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad0:	f000 bfb0 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad8:	f000 bfac 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8008adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae0:	f1a2 0120 	sub.w	r1, r2, #32
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	d158      	bne.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008ae8:	4b36      	ldr	r3, [pc, #216]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8008afa:	f7fe f8db 	bl	8006cb4 <HAL_RCC_GetPCLK3Freq>
 8008afe:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b00:	f000 bf98 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d104      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008b0a:	f7fd ff8b 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008b0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008b10:	f000 bf90 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008b14:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b20:	d106      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d103      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8008b28:	4b27      	ldr	r3, [pc, #156]	@ (8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b2c:	f000 bf82 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008b30:	4b24      	ldr	r3, [pc, #144]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d107      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d104      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8008b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b4a:	f000 bf73 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d11b      	bne.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5c:	2b04      	cmp	r3, #4
 8008b5e:	d118      	bne.n	8008b92 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b60:	4b18      	ldr	r3, [pc, #96]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d005      	beq.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8008b6c:	4b15      	ldr	r3, [pc, #84]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	0e1b      	lsrs	r3, r3, #24
 8008b72:	f003 030f 	and.w	r3, r3, #15
 8008b76:	e006      	b.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8008b78:	4b12      	ldr	r3, [pc, #72]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b7e:	041b      	lsls	r3, r3, #16
 8008b80:	0e1b      	lsrs	r3, r3, #24
 8008b82:	f003 030f 	and.w	r3, r3, #15
 8008b86:	4a11      	ldr	r2, [pc, #68]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b8e:	f000 bf51 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b96:	f000 bf4d 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b9e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	d172      	bne.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008ba6:	4b07      	ldr	r3, [pc, #28]	@ (8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008bac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008bb0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bb8:	d10a      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008bba:	f7fd ff33 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008bbe:	6378      	str	r0, [r7, #52]	@ 0x34
 8008bc0:	f000 bf38 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8008bc4:	46020c00 	.word	0x46020c00
 8008bc8:	00f42400 	.word	0x00f42400
 8008bcc:	08010ce0 	.word	0x08010ce0
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bd6:	d108      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bd8:	f107 0318 	add.w	r3, r7, #24
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff f91b 	bl	8007e18 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008be6:	f000 bf25 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8008bf0:	f7fe f81e 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
 8008bf4:	6378      	str	r0, [r7, #52]	@ 0x34
 8008bf6:	f000 bf1d 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008c00:	d122      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008c02:	4bb0      	ldr	r3, [pc, #704]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0320 	and.w	r3, r3, #32
 8008c0a:	2b20      	cmp	r3, #32
 8008c0c:	d118      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008c0e:	4bad      	ldr	r3, [pc, #692]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d005      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8008c1a:	4baa      	ldr	r3, [pc, #680]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	0e1b      	lsrs	r3, r3, #24
 8008c20:	f003 030f 	and.w	r3, r3, #15
 8008c24:	e006      	b.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8008c26:	4ba7      	ldr	r3, [pc, #668]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008c2c:	041b      	lsls	r3, r3, #16
 8008c2e:	0e1b      	lsrs	r3, r3, #24
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	4aa4      	ldr	r2, [pc, #656]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c3c:	f000 befa 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c44:	f000 bef6 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008c48:	4b9e      	ldr	r3, [pc, #632]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c54:	d107      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c5c:	d103      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8008c5e:	4b9b      	ldr	r3, [pc, #620]	@ (8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8008c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c62:	f000 bee7 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008c66:	4b97      	ldr	r3, [pc, #604]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c72:	d107      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c7a:	d103      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8008c7c:	4b94      	ldr	r3, [pc, #592]	@ (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8008c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c80:	f000 bed8 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8008c84:	2300      	movs	r3, #0
 8008c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c88:	f000 bed4 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c90:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008c94:	430b      	orrs	r3, r1
 8008c96:	d158      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008c98:	4b8a      	ldr	r3, [pc, #552]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008c9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c9e:	f003 0307 	and.w	r3, r3, #7
 8008ca2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca6:	2b04      	cmp	r3, #4
 8008ca8:	d84b      	bhi.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8008caa:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8008cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb0:	08008ce9 	.word	0x08008ce9
 8008cb4:	08008cc5 	.word	0x08008cc5
 8008cb8:	08008cd7 	.word	0x08008cd7
 8008cbc:	08008cf3 	.word	0x08008cf3
 8008cc0:	08008cfd 	.word	0x08008cfd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fe ff49 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cd2:	f000 beaf 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd6:	f107 030c 	add.w	r3, r7, #12
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7ff f9f8 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ce4:	f000 bea6 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008ce8:	f7fd ffa2 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
 8008cec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008cee:	f000 bea1 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008cf2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008cf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cf8:	f000 be9c 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008cfc:	4b71      	ldr	r3, [pc, #452]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0320 	and.w	r3, r3, #32
 8008d04:	2b20      	cmp	r3, #32
 8008d06:	d118      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d08:	4b6e      	ldr	r3, [pc, #440]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008d14:	4b6b      	ldr	r3, [pc, #428]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	0e1b      	lsrs	r3, r3, #24
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	e006      	b.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8008d20:	4b68      	ldr	r3, [pc, #416]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d26:	041b      	lsls	r3, r3, #16
 8008d28:	0e1b      	lsrs	r3, r3, #24
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	4a66      	ldr	r2, [pc, #408]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d34:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d36:	f000 be7d 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d3e:	f000 be79 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d46:	f000 be75 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d4e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008d52:	430b      	orrs	r3, r1
 8008d54:	d167      	bne.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8008d56:	4b5b      	ldr	r3, [pc, #364]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d5c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008d60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d68:	d036      	beq.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d70:	d855      	bhi.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d78:	d029      	beq.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d80:	d84d      	bhi.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d88:	d013      	beq.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d90:	d845      	bhi.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d015      	beq.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d9e:	d13e      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fedb 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dae:	f000 be41 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008db2:	f107 030c 	add.w	r3, r7, #12
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7ff f98a 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dc0:	f000 be38 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008dc4:	f7fd ff34 	bl	8006c30 <HAL_RCC_GetHCLKFreq>
 8008dc8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008dca:	f000 be33 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008dce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008dd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dd4:	f000 be2e 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008dd8:	4b3a      	ldr	r3, [pc, #232]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b20      	cmp	r3, #32
 8008de2:	d118      	bne.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008de4:	4b37      	ldr	r3, [pc, #220]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d005      	beq.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8008df0:	4b34      	ldr	r3, [pc, #208]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	0e1b      	lsrs	r3, r3, #24
 8008df6:	f003 030f 	and.w	r3, r3, #15
 8008dfa:	e006      	b.n	8008e0a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008dfc:	4b31      	ldr	r3, [pc, #196]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e02:	041b      	lsls	r3, r3, #16
 8008e04:	0e1b      	lsrs	r3, r3, #24
 8008e06:	f003 030f 	and.w	r3, r3, #15
 8008e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e10:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008e12:	f000 be0f 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e1a:	f000 be0b 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e22:	f000 be07 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	d154      	bne.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008e32:	4b24      	ldr	r3, [pc, #144]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e3c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008e44:	f7fd ff0e 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8008e48:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e4a:	f000 bdf3 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e54:	d104      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e56:	f7fd fde5 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008e5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e5c:	f000 bdea 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008e60:	4b18      	ldr	r3, [pc, #96]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e6c:	d107      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e74:	d103      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8008e76:	4b16      	ldr	r3, [pc, #88]	@ (8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8008e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e7a:	f000 bddb 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008e7e:	4b11      	ldr	r3, [pc, #68]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0320 	and.w	r3, r3, #32
 8008e86:	2b20      	cmp	r3, #32
 8008e88:	d124      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e90:	d120      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008e92:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d005      	beq.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8008e9e:	4b09      	ldr	r3, [pc, #36]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	0e1b      	lsrs	r3, r3, #24
 8008ea4:	f003 030f 	and.w	r3, r3, #15
 8008ea8:	e006      	b.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8008eaa:	4b06      	ldr	r3, [pc, #24]	@ (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8008eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008eb0:	041b      	lsls	r3, r3, #16
 8008eb2:	0e1b      	lsrs	r3, r3, #24
 8008eb4:	f003 030f 	and.w	r3, r3, #15
 8008eb8:	4a03      	ldr	r2, [pc, #12]	@ (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8008eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec0:	f000 bdb8 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8008ec4:	46020c00 	.word	0x46020c00
 8008ec8:	08010ce0 	.word	0x08010ce0
 8008ecc:	007a1200 	.word	0x007a1200
 8008ed0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed8:	f000 bdac 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee0:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	d14c      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008ee8:	4ba8      	ldr	r3, [pc, #672]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008ef2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008efa:	f7fd feb3 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8008efe:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f00:	f000 bd98 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f0a:	d104      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f0c:	f7fd fd8a 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008f10:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f12:	f000 bd8f 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008f16:	4b9d      	ldr	r3, [pc, #628]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f22:	d107      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8008f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f2a:	d103      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 8008f2c:	4b98      	ldr	r3, [pc, #608]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f30:	f000 bd80 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008f34:	4b95      	ldr	r3, [pc, #596]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0320 	and.w	r3, r3, #32
 8008f3c:	2b20      	cmp	r3, #32
 8008f3e:	d11c      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 8008f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f46:	d118      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008f48:	4b90      	ldr	r3, [pc, #576]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d005      	beq.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8008f54:	4b8d      	ldr	r3, [pc, #564]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	0e1b      	lsrs	r3, r3, #24
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	e006      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8008f60:	4b8a      	ldr	r3, [pc, #552]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f66:	041b      	lsls	r3, r3, #16
 8008f68:	0e1b      	lsrs	r3, r3, #24
 8008f6a:	f003 030f 	and.w	r3, r3, #15
 8008f6e:	4a89      	ldr	r2, [pc, #548]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8008f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f76:	f000 bd5d 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7e:	f000 bd59 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008f82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f86:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	d158      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f94:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f98:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f9e:	d028      	beq.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fa4:	d848      	bhi.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa8:	2b80      	cmp	r3, #128	@ 0x80
 8008faa:	d00e      	beq.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8008fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fae:	2b80      	cmp	r3, #128	@ 0x80
 8008fb0:	d842      	bhi.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d003      	beq.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	2b40      	cmp	r3, #64	@ 0x40
 8008fbc:	d014      	beq.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 8008fbe:	e03b      	b.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008fc0:	f7fd fe78 	bl	8006cb4 <HAL_RCC_GetPCLK3Freq>
 8008fc4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008fc6:	f000 bd35 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fca:	4b70      	ldr	r3, [pc, #448]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fd6:	d103      	bne.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 8008fd8:	4b6d      	ldr	r3, [pc, #436]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8008fda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008fdc:	f000 bd2a 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fe4:	f000 bd26 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008fe8:	f7fd fd1c 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8008fec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008fee:	f000 bd21 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008ff2:	4b66      	ldr	r3, [pc, #408]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	d118      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008ffe:	4b63      	ldr	r3, [pc, #396]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d005      	beq.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 800900a:	4b60      	ldr	r3, [pc, #384]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	0e1b      	lsrs	r3, r3, #24
 8009010:	f003 030f 	and.w	r3, r3, #15
 8009014:	e006      	b.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 8009016:	4b5d      	ldr	r3, [pc, #372]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800901c:	041b      	lsls	r3, r3, #16
 800901e:	0e1b      	lsrs	r3, r3, #24
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	4a5b      	ldr	r2, [pc, #364]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8009026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800902a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800902c:	f000 bd02 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009034:	f000 bcfe 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 8009038:	2300      	movs	r3, #0
 800903a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800903c:	f000 bcfa 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009044:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009048:	430b      	orrs	r3, r1
 800904a:	d14c      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800904c:	4b4f      	ldr	r3, [pc, #316]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800904e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009052:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009056:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800905e:	f7fd fe01 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8009062:	6378      	str	r0, [r7, #52]	@ 0x34
 8009064:	f000 bce6 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800906e:	d104      	bne.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009070:	f7fd fcd8 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8009074:	6378      	str	r0, [r7, #52]	@ 0x34
 8009076:	f000 bcdd 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800907a:	4b44      	ldr	r3, [pc, #272]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009086:	d107      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 8009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800908e:	d103      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 8009090:	4b3f      	ldr	r3, [pc, #252]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009092:	637b      	str	r3, [r7, #52]	@ 0x34
 8009094:	f000 bcce 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009098:	4b3c      	ldr	r3, [pc, #240]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0320 	and.w	r3, r3, #32
 80090a0:	2b20      	cmp	r3, #32
 80090a2:	d11c      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 80090a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80090aa:	d118      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80090ac:	4b37      	ldr	r3, [pc, #220]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 80090b8:	4b34      	ldr	r3, [pc, #208]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	0e1b      	lsrs	r3, r3, #24
 80090be:	f003 030f 	and.w	r3, r3, #15
 80090c2:	e006      	b.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 80090c4:	4b31      	ldr	r3, [pc, #196]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80090c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80090ca:	041b      	lsls	r3, r3, #16
 80090cc:	0e1b      	lsrs	r3, r3, #24
 80090ce:	f003 030f 	and.w	r3, r3, #15
 80090d2:	4a30      	ldr	r2, [pc, #192]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 80090d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090da:	f000 bcab 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e2:	f000 bca7 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 80090e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090ea:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 80090ee:	430b      	orrs	r3, r1
 80090f0:	d152      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 80090f2:	4b26      	ldr	r3, [pc, #152]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80090f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090f8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80090fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 80090fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009104:	f7fd fdae 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8009108:	6378      	str	r0, [r7, #52]	@ 0x34
 800910a:	f000 bc93 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800910e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009114:	d104      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009116:	f7fd fc85 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 800911a:	6378      	str	r0, [r7, #52]	@ 0x34
 800911c:	f000 bc8a 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8009120:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800912c:	d107      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 800912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009130:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009134:	d103      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 8009136:	4b16      	ldr	r3, [pc, #88]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8009138:	637b      	str	r3, [r7, #52]	@ 0x34
 800913a:	f000 bc7b 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800913e:	4b13      	ldr	r3, [pc, #76]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	2b20      	cmp	r3, #32
 8009148:	d11c      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009150:	d118      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009152:	4b0e      	ldr	r3, [pc, #56]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800915e:	4b0b      	ldr	r3, [pc, #44]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	0e1b      	lsrs	r3, r3, #24
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	e006      	b.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 800916a:	4b08      	ldr	r3, [pc, #32]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800916c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009170:	041b      	lsls	r3, r3, #16
 8009172:	0e1b      	lsrs	r3, r3, #24
 8009174:	f003 030f 	and.w	r3, r3, #15
 8009178:	4a06      	ldr	r2, [pc, #24]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800917a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800917e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009180:	f000 bc58 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	637b      	str	r3, [r7, #52]	@ 0x34
 8009188:	f000 bc54 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800918c:	46020c00 	.word	0x46020c00
 8009190:	00f42400 	.word	0x00f42400
 8009194:	08010ce0 	.word	0x08010ce0
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8009198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800919c:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80091a0:	430b      	orrs	r3, r1
 80091a2:	d14a      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80091a4:	4ba5      	ldr	r3, [pc, #660]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80091a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091aa:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80091ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80091b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d104      	bne.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80091b6:	f7fd fd55 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 80091ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80091bc:	f000 bc3a 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80091c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091c6:	d104      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80091c8:	f7fd fc2c 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 80091cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80091ce:	f000 bc31 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80091d2:	4b9a      	ldr	r3, [pc, #616]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091de:	d107      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 80091e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091e6:	d103      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 80091e8:	4b95      	ldr	r3, [pc, #596]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80091ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ec:	f000 bc22 	b.w	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80091f0:	4b92      	ldr	r3, [pc, #584]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b20      	cmp	r3, #32
 80091fa:	d11b      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 80091fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009202:	d117      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009204:	4b8d      	ldr	r3, [pc, #564]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8009210:	4b8a      	ldr	r3, [pc, #552]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	0e1b      	lsrs	r3, r3, #24
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	e006      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800921c:	4b87      	ldr	r3, [pc, #540]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800921e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009222:	041b      	lsls	r3, r3, #16
 8009224:	0e1b      	lsrs	r3, r3, #24
 8009226:	f003 030f 	and.w	r3, r3, #15
 800922a:	4a86      	ldr	r2, [pc, #536]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800922c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009230:	637b      	str	r3, [r7, #52]	@ 0x34
 8009232:	e3ff      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	637b      	str	r3, [r7, #52]	@ 0x34
 8009238:	e3fc      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800923a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800923e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009242:	430b      	orrs	r3, r1
 8009244:	d164      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009246:	4b7d      	ldr	r3, [pc, #500]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800924c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009250:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009254:	2b00      	cmp	r3, #0
 8009256:	d120      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009258:	4b78      	ldr	r3, [pc, #480]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	2b20      	cmp	r3, #32
 8009262:	d117      	bne.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009264:	4b75      	ldr	r3, [pc, #468]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8009270:	4b72      	ldr	r3, [pc, #456]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	0e1b      	lsrs	r3, r3, #24
 8009276:	f003 030f 	and.w	r3, r3, #15
 800927a:	e006      	b.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800927c:	4b6f      	ldr	r3, [pc, #444]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800927e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009282:	041b      	lsls	r3, r3, #16
 8009284:	0e1b      	lsrs	r3, r3, #24
 8009286:	f003 030f 	and.w	r3, r3, #15
 800928a:	4a6e      	ldr	r2, [pc, #440]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800928c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009290:	637b      	str	r3, [r7, #52]	@ 0x34
 8009292:	e3cf      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	637b      	str	r3, [r7, #52]	@ 0x34
 8009298:	e3cc      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800929a:	4b68      	ldr	r3, [pc, #416]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800929c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092a8:	d112      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 80092aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092b0:	d10e      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092b2:	4b62      	ldr	r3, [pc, #392]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80092b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092c0:	d102      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 80092c2:	23fa      	movs	r3, #250	@ 0xfa
 80092c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092c6:	e3b5      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 80092c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80092cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092ce:	e3b1      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80092d0:	4b5a      	ldr	r3, [pc, #360]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092dc:	d106      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092e4:	d102      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 80092e6:	4b56      	ldr	r3, [pc, #344]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80092e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ea:	e3a3      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80092ec:	4b53      	ldr	r3, [pc, #332]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80092ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d107      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009300:	d103      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 8009302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009306:	637b      	str	r3, [r7, #52]	@ 0x34
 8009308:	e394      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800930a:	2300      	movs	r3, #0
 800930c:	637b      	str	r3, [r7, #52]	@ 0x34
 800930e:	e391      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009314:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009318:	430b      	orrs	r3, r1
 800931a:	d164      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800931c:	4b47      	ldr	r3, [pc, #284]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800931e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009322:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009326:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	2b00      	cmp	r3, #0
 800932c:	d120      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800932e:	4b43      	ldr	r3, [pc, #268]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b20      	cmp	r3, #32
 8009338:	d117      	bne.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800933a:	4b40      	ldr	r3, [pc, #256]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d005      	beq.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8009346:	4b3d      	ldr	r3, [pc, #244]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	0e1b      	lsrs	r3, r3, #24
 800934c:	f003 030f 	and.w	r3, r3, #15
 8009350:	e006      	b.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8009352:	4b3a      	ldr	r3, [pc, #232]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009354:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009358:	041b      	lsls	r3, r3, #16
 800935a:	0e1b      	lsrs	r3, r3, #24
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	4a38      	ldr	r2, [pc, #224]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8009362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009366:	637b      	str	r3, [r7, #52]	@ 0x34
 8009368:	e364      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	637b      	str	r3, [r7, #52]	@ 0x34
 800936e:	e361      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009370:	4b32      	ldr	r3, [pc, #200]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800937a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800937e:	d112      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8009380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009386:	d10e      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009388:	4b2c      	ldr	r3, [pc, #176]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800938a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800938e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009396:	d102      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8009398:	23fa      	movs	r3, #250	@ 0xfa
 800939a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800939c:	e34a      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800939e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80093a2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80093a4:	e346      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80093a6:	4b25      	ldr	r3, [pc, #148]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093b2:	d106      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093ba:	d102      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 80093bc:	4b20      	ldr	r3, [pc, #128]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c0:	e338      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80093c2:	4b1e      	ldr	r3, [pc, #120]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80093c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c8:	f003 0302 	and.w	r3, r3, #2
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d107      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 80093d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80093d6:	d103      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 80093d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80093de:	e329      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e4:	e326      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80093e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ea:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80093ee:	430b      	orrs	r3, r1
 80093f0:	d14e      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80093f2:	4b12      	ldr	r3, [pc, #72]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80093f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093f8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80093fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80093fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009400:	2b00      	cmp	r3, #0
 8009402:	d103      	bne.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009404:	f7fd fc2e 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 8009408:	6378      	str	r0, [r7, #52]	@ 0x34
 800940a:	e313      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800940c:	4b0b      	ldr	r3, [pc, #44]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800940e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009412:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800941a:	d119      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800941c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009422:	d115      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8009426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800942a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800942e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009432:	d109      	bne.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8009434:	23fa      	movs	r3, #250	@ 0xfa
 8009436:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009438:	e2fc      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800943a:	bf00      	nop
 800943c:	46020c00 	.word	0x46020c00
 8009440:	00f42400 	.word	0x00f42400
 8009444:	08010ce0 	.word	0x08010ce0
      }
      else
      {
        frequency = LSI_VALUE;
 8009448:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800944c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800944e:	e2f1      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009450:	4ba8      	ldr	r3, [pc, #672]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800945c:	d106      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009464:	d102      	bne.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 8009466:	4ba4      	ldr	r3, [pc, #656]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8009468:	637b      	str	r3, [r7, #52]	@ 0x34
 800946a:	e2e3      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800946c:	4ba1      	ldr	r3, [pc, #644]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800946e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b02      	cmp	r3, #2
 8009478:	d107      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009480:	d103      	bne.n	800948a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8009482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009486:	637b      	str	r3, [r7, #52]	@ 0x34
 8009488:	e2d4      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
 800948e:	e2d1      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009494:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009498:	430b      	orrs	r3, r1
 800949a:	d12d      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800949c:	4b95      	ldr	r3, [pc, #596]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800949e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094a2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80094a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80094a8:	4b92      	ldr	r3, [pc, #584]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094b4:	d105      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 80094bc:	4b8f      	ldr	r3, [pc, #572]	@ (80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 80094be:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c0:	e2b8      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80094c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094c8:	d107      	bne.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fe fb46 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80094d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094d8:	e2ac      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094e0:	d107      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e2:	f107 0318 	add.w	r3, r7, #24
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fe fc96 	bl	8007e18 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f0:	e2a0      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80094f2:	2300      	movs	r3, #0
 80094f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f6:	e29d      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80094f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094fc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009500:	430b      	orrs	r3, r1
 8009502:	d156      	bne.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009504:	4b7b      	ldr	r3, [pc, #492]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800950a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800950e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009512:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009516:	d028      	beq.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800951e:	d845      	bhi.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8009520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009522:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009526:	d013      	beq.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8009528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800952e:	d83d      	bhi.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8009530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009532:	2b00      	cmp	r3, #0
 8009534:	d004      	beq.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800953c:	d004      	beq.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800953e:	e035      	b.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009540:	f7fd fba4 	bl	8006c8c <HAL_RCC_GetPCLK2Freq>
 8009544:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009546:	e275      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009548:	f7fd fa6c 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 800954c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800954e:	e271      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009550:	4b68      	ldr	r3, [pc, #416]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800955c:	d102      	bne.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800955e:	4b66      	ldr	r3, [pc, #408]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8009560:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009562:	e267      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009564:	2300      	movs	r3, #0
 8009566:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009568:	e264      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800956a:	4b62      	ldr	r3, [pc, #392]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b20      	cmp	r3, #32
 8009574:	d117      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009576:	4b5f      	ldr	r3, [pc, #380]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8009582:	4b5c      	ldr	r3, [pc, #368]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	0e1b      	lsrs	r3, r3, #24
 8009588:	f003 030f 	and.w	r3, r3, #15
 800958c:	e006      	b.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800958e:	4b59      	ldr	r3, [pc, #356]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009594:	041b      	lsls	r3, r3, #16
 8009596:	0e1b      	lsrs	r3, r3, #24
 8009598:	f003 030f 	and.w	r3, r3, #15
 800959c:	4a58      	ldr	r2, [pc, #352]	@ (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 800959e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095a4:	e246      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095aa:	e243      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095b0:	e240      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80095b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095b6:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80095ba:	430b      	orrs	r3, r1
 80095bc:	d156      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80095be:	4b4d      	ldr	r3, [pc, #308]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80095c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80095c8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095d0:	d028      	beq.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 80095d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095d8:	d845      	bhi.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 80095da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095e0:	d013      	beq.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 80095e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095e8:	d83d      	bhi.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 80095f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095f6:	d004      	beq.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 80095f8:	e035      	b.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80095fa:	f7fd fb33 	bl	8006c64 <HAL_RCC_GetPCLK1Freq>
 80095fe:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009600:	e218      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009602:	f7fd fa0f 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8009606:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009608:	e214      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800960a:	4b3a      	ldr	r3, [pc, #232]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009616:	d102      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 8009618:	4b37      	ldr	r3, [pc, #220]	@ (80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800961a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800961c:	e20a      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009622:	e207      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009624:	4b33      	ldr	r3, [pc, #204]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0320 	and.w	r3, r3, #32
 800962c:	2b20      	cmp	r3, #32
 800962e:	d117      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009630:	4b30      	ldr	r3, [pc, #192]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d005      	beq.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800963c:	4b2d      	ldr	r3, [pc, #180]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	0e1b      	lsrs	r3, r3, #24
 8009642:	f003 030f 	and.w	r3, r3, #15
 8009646:	e006      	b.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8009648:	4b2a      	ldr	r3, [pc, #168]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800964a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800964e:	041b      	lsls	r3, r3, #16
 8009650:	0e1b      	lsrs	r3, r3, #24
 8009652:	f003 030f 	and.w	r3, r3, #15
 8009656:	4a2a      	ldr	r2, [pc, #168]	@ (8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8009658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800965c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800965e:	e1e9      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009660:	2300      	movs	r3, #0
 8009662:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009664:	e1e6      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800966a:	e1e3      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800966c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009670:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009674:	430b      	orrs	r3, r1
 8009676:	d17e      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009678:	4b1e      	ldr	r3, [pc, #120]	@ (80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800967a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800967e:	f003 0318 	and.w	r3, r3, #24
 8009682:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009686:	2b18      	cmp	r3, #24
 8009688:	d872      	bhi.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 800968a:	a201      	add	r2, pc, #4	@ (adr r2, 8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800968c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009690:	08009705 	.word	0x08009705
 8009694:	08009771 	.word	0x08009771
 8009698:	08009771 	.word	0x08009771
 800969c:	08009771 	.word	0x08009771
 80096a0:	08009771 	.word	0x08009771
 80096a4:	08009771 	.word	0x08009771
 80096a8:	08009771 	.word	0x08009771
 80096ac:	08009771 	.word	0x08009771
 80096b0:	0800970d 	.word	0x0800970d
 80096b4:	08009771 	.word	0x08009771
 80096b8:	08009771 	.word	0x08009771
 80096bc:	08009771 	.word	0x08009771
 80096c0:	08009771 	.word	0x08009771
 80096c4:	08009771 	.word	0x08009771
 80096c8:	08009771 	.word	0x08009771
 80096cc:	08009771 	.word	0x08009771
 80096d0:	08009715 	.word	0x08009715
 80096d4:	08009771 	.word	0x08009771
 80096d8:	08009771 	.word	0x08009771
 80096dc:	08009771 	.word	0x08009771
 80096e0:	08009771 	.word	0x08009771
 80096e4:	08009771 	.word	0x08009771
 80096e8:	08009771 	.word	0x08009771
 80096ec:	08009771 	.word	0x08009771
 80096f0:	0800972f 	.word	0x0800972f
 80096f4:	46020c00 	.word	0x46020c00
 80096f8:	00f42400 	.word	0x00f42400
 80096fc:	007a1200 	.word	0x007a1200
 8009700:	08010ce0 	.word	0x08010ce0
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009704:	f7fd fad6 	bl	8006cb4 <HAL_RCC_GetPCLK3Freq>
 8009708:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800970a:	e193      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800970c:	f7fd f98a 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 8009710:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009712:	e18f      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009714:	4b9f      	ldr	r3, [pc, #636]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800971c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009720:	d102      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 8009722:	4b9d      	ldr	r3, [pc, #628]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8009724:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009726:	e185      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009728:	2300      	movs	r3, #0
 800972a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800972c:	e182      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800972e:	4b99      	ldr	r3, [pc, #612]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	2b20      	cmp	r3, #32
 8009738:	d117      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800973a:	4b96      	ldr	r3, [pc, #600]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 8009746:	4b93      	ldr	r3, [pc, #588]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	0e1b      	lsrs	r3, r3, #24
 800974c:	f003 030f 	and.w	r3, r3, #15
 8009750:	e006      	b.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8009752:	4b90      	ldr	r3, [pc, #576]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009754:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009758:	041b      	lsls	r3, r3, #16
 800975a:	0e1b      	lsrs	r3, r3, #24
 800975c:	f003 030f 	and.w	r3, r3, #15
 8009760:	4a8e      	ldr	r2, [pc, #568]	@ (800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8009762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009766:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009768:	e164      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800976a:	2300      	movs	r3, #0
 800976c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800976e:	e161      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009774:	e15e      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800977a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800977e:	430b      	orrs	r3, r1
 8009780:	d155      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009782:	4b84      	ldr	r3, [pc, #528]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009784:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009788:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800978c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800978e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009790:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009794:	d013      	beq.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 8009796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009798:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800979c:	d844      	bhi.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800979e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097a4:	d013      	beq.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097ac:	d83c      	bhi.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d014      	beq.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 80097b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097ba:	d014      	beq.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 80097bc:	e034      	b.n	8009828 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097be:	f107 0318 	add.w	r3, r7, #24
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fe fb28 	bl	8007e18 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097cc:	e132      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe f9c4 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80097d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80097dc:	e12a      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80097de:	f7fd f921 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 80097e2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80097e4:	e126      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80097e6:	4b6b      	ldr	r3, [pc, #428]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0320 	and.w	r3, r3, #32
 80097ee:	2b20      	cmp	r3, #32
 80097f0:	d117      	bne.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80097f2:	4b68      	ldr	r3, [pc, #416]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d005      	beq.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 80097fe:	4b65      	ldr	r3, [pc, #404]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	0e1b      	lsrs	r3, r3, #24
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	e006      	b.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 800980a:	4b62      	ldr	r3, [pc, #392]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800980c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009810:	041b      	lsls	r3, r3, #16
 8009812:	0e1b      	lsrs	r3, r3, #24
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	4a60      	ldr	r2, [pc, #384]	@ (800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800981a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800981e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009820:	e108      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009826:	e105      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8009828:	2300      	movs	r3, #0
 800982a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800982c:	e102      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800982e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009832:	1e59      	subs	r1, r3, #1
 8009834:	ea52 0301 	orrs.w	r3, r2, r1
 8009838:	d13c      	bne.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800983a:	4b56      	ldr	r3, [pc, #344]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800983c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009840:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009844:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800984c:	d027      	beq.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800984e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009850:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009854:	d82b      	bhi.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8009856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009858:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800985c:	d017      	beq.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 800985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009860:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009864:	d823      	bhi.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8009866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009868:	2b00      	cmp	r3, #0
 800986a:	d004      	beq.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800986c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009872:	d004      	beq.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 8009874:	e01b      	b.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009876:	f7fd f8d5 	bl	8006a24 <HAL_RCC_GetSysClockFreq>
 800987a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800987c:	e0da      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800987e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe f96c 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800988c:	e0d2      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800988e:	f107 0318 	add.w	r3, r7, #24
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe fac0 	bl	8007e18 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800989c:	e0ca      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800989e:	f107 030c 	add.w	r3, r7, #12
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fc14 	bl	80080d0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098ac:	e0c2      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80098ae:	2300      	movs	r3, #0
 80098b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098b2:	e0bf      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80098b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098b8:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80098bc:	430b      	orrs	r3, r1
 80098be:	d131      	bne.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80098c0:	4b34      	ldr	r3, [pc, #208]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80098c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098ca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80098cc:	4b31      	ldr	r3, [pc, #196]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80098ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d106      	bne.n	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 80098da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d103      	bne.n	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 80098e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80098e6:	e0a5      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80098e8:	4b2a      	ldr	r3, [pc, #168]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80098ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098f6:	d112      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 80098f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098fe:	d10e      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009900:	4b24      	ldr	r3, [pc, #144]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800990a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800990e:	d102      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 8009910:	23fa      	movs	r3, #250	@ 0xfa
 8009912:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009914:	e08e      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8009916:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800991a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800991c:	e08a      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	637b      	str	r3, [r7, #52]	@ 0x34
 8009922:	e087      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009928:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800992c:	430b      	orrs	r3, r1
 800992e:	d13b      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009930:	4b18      	ldr	r3, [pc, #96]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009932:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009936:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800993a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800993c:	4b15      	ldr	r3, [pc, #84]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009948:	d105      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	2b00      	cmp	r3, #0
 800994e:	d102      	bne.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 8009950:	4b13      	ldr	r3, [pc, #76]	@ (80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 8009952:	637b      	str	r3, [r7, #52]	@ 0x34
 8009954:	e06e      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009956:	4b0f      	ldr	r3, [pc, #60]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800995e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009962:	d106      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800996a:	d102      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 800996c:	4b0d      	ldr	r3, [pc, #52]	@ (80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 800996e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009970:	e060      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009972:	4b08      	ldr	r3, [pc, #32]	@ (8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800997a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800997e:	d106      	bne.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009986:	d102      	bne.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 8009988:	4b03      	ldr	r3, [pc, #12]	@ (8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800998a:	637b      	str	r3, [r7, #52]	@ 0x34
 800998c:	e052      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	637b      	str	r3, [r7, #52]	@ 0x34
 8009992:	e04f      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8009994:	46020c00 	.word	0x46020c00
 8009998:	00f42400 	.word	0x00f42400
 800999c:	08010ce0 	.word	0x08010ce0
 80099a0:	02dc6c00 	.word	0x02dc6c00
 80099a4:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80099a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099ac:	f1a3 0108 	sub.w	r1, r3, #8
 80099b0:	ea52 0301 	orrs.w	r3, r2, r1
 80099b4:	d13c      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80099b6:	4b22      	ldr	r3, [pc, #136]	@ (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80099b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80099c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80099c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099ce:	d105      	bne.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 80099d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d102      	bne.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 80099d6:	4b1b      	ldr	r3, [pc, #108]	@ (8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 80099d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099da:	e02b      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80099dc:	4b18      	ldr	r3, [pc, #96]	@ (8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099e8:	d106      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 80099ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099f0:	d102      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 80099f2:	4b15      	ldr	r3, [pc, #84]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80099f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f6:	e01d      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80099f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099fe:	d107      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe f8ab 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a0e:	e011      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8009a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a12:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8009a16:	d108      	bne.n	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe f89f 	bl	8007b60 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a24:	085b      	lsrs	r3, r3, #1
 8009a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a28:	e004      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a2e:	e001      	b.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3738      	adds	r7, #56	@ 0x38
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	46020c00 	.word	0x46020c00
 8009a44:	007a1200 	.word	0x007a1200
 8009a48:	003d0900 	.word	0x003d0900

08009a4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009a54:	4b47      	ldr	r3, [pc, #284]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a46      	ldr	r2, [pc, #280]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009a5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a60:	f7fa fa78 	bl	8003f54 <HAL_GetTick>
 8009a64:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a66:	e008      	b.n	8009a7a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a68:	f7fa fa74 	bl	8003f54 <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d901      	bls.n	8009a7a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e077      	b.n	8009b6a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1f0      	bne.n	8009a68 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009a86:	4b3b      	ldr	r3, [pc, #236]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009a8e:	f023 0303 	bic.w	r3, r3, #3
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	6811      	ldr	r1, [r2, #0]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	6852      	ldr	r2, [r2, #4]
 8009a9a:	3a01      	subs	r2, #1
 8009a9c:	0212      	lsls	r2, r2, #8
 8009a9e:	430a      	orrs	r2, r1
 8009aa0:	4934      	ldr	r1, [pc, #208]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009aa6:	4b33      	ldr	r3, [pc, #204]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009aaa:	4b33      	ldr	r3, [pc, #204]	@ (8009b78 <RCCEx_PLL2_Config+0x12c>)
 8009aac:	4013      	ands	r3, r2
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	6892      	ldr	r2, [r2, #8]
 8009ab2:	3a01      	subs	r2, #1
 8009ab4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	68d2      	ldr	r2, [r2, #12]
 8009abc:	3a01      	subs	r2, #1
 8009abe:	0252      	lsls	r2, r2, #9
 8009ac0:	b292      	uxth	r2, r2
 8009ac2:	4311      	orrs	r1, r2
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	6912      	ldr	r2, [r2, #16]
 8009ac8:	3a01      	subs	r2, #1
 8009aca:	0412      	lsls	r2, r2, #16
 8009acc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009ad0:	4311      	orrs	r1, r2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	6952      	ldr	r2, [r2, #20]
 8009ad6:	3a01      	subs	r2, #1
 8009ad8:	0612      	lsls	r2, r2, #24
 8009ada:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	4924      	ldr	r1, [pc, #144]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009ae6:	4b23      	ldr	r3, [pc, #140]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aea:	f023 020c 	bic.w	r2, r3, #12
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	4920      	ldr	r1, [pc, #128]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009af8:	4b1e      	ldr	r3, [pc, #120]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	491c      	ldr	r1, [pc, #112]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009b06:	4b1b      	ldr	r3, [pc, #108]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009b0c:	f023 0310 	bic.w	r3, r3, #16
 8009b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b12:	4b18      	ldr	r3, [pc, #96]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b1a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	69d2      	ldr	r2, [r2, #28]
 8009b22:	00d2      	lsls	r2, r2, #3
 8009b24:	4913      	ldr	r1, [pc, #76]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009b2a:	4b12      	ldr	r3, [pc, #72]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2e:	4a11      	ldr	r2, [pc, #68]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009b30:	f043 0310 	orr.w	r3, r3, #16
 8009b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009b36:	4b0f      	ldr	r3, [pc, #60]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009b3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b40:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b42:	f7fa fa07 	bl	8003f54 <HAL_GetTick>
 8009b46:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b48:	e008      	b.n	8009b5c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b4a:	f7fa fa03 	bl	8003f54 <HAL_GetTick>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d901      	bls.n	8009b5c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e006      	b.n	8009b6a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b5c:	4b05      	ldr	r3, [pc, #20]	@ (8009b74 <RCCEx_PLL2_Config+0x128>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0f0      	beq.n	8009b4a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009b68:	2300      	movs	r3, #0

}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	46020c00 	.word	0x46020c00
 8009b78:	80800000 	.word	0x80800000

08009b7c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009b84:	4b47      	ldr	r3, [pc, #284]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a46      	ldr	r2, [pc, #280]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b90:	f7fa f9e0 	bl	8003f54 <HAL_GetTick>
 8009b94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b96:	e008      	b.n	8009baa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b98:	f7fa f9dc 	bl	8003f54 <HAL_GetTick>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d901      	bls.n	8009baa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e077      	b.n	8009c9a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009baa:	4b3e      	ldr	r3, [pc, #248]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1f0      	bne.n	8009b98 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009bbe:	f023 0303 	bic.w	r3, r3, #3
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6811      	ldr	r1, [r2, #0]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6852      	ldr	r2, [r2, #4]
 8009bca:	3a01      	subs	r2, #1
 8009bcc:	0212      	lsls	r2, r2, #8
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	4934      	ldr	r1, [pc, #208]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	630b      	str	r3, [r1, #48]	@ 0x30
 8009bd6:	4b33      	ldr	r3, [pc, #204]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bda:	4b33      	ldr	r3, [pc, #204]	@ (8009ca8 <RCCEx_PLL3_Config+0x12c>)
 8009bdc:	4013      	ands	r3, r2
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	6892      	ldr	r2, [r2, #8]
 8009be2:	3a01      	subs	r2, #1
 8009be4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	68d2      	ldr	r2, [r2, #12]
 8009bec:	3a01      	subs	r2, #1
 8009bee:	0252      	lsls	r2, r2, #9
 8009bf0:	b292      	uxth	r2, r2
 8009bf2:	4311      	orrs	r1, r2
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	6912      	ldr	r2, [r2, #16]
 8009bf8:	3a01      	subs	r2, #1
 8009bfa:	0412      	lsls	r2, r2, #16
 8009bfc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009c00:	4311      	orrs	r1, r2
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	6952      	ldr	r2, [r2, #20]
 8009c06:	3a01      	subs	r2, #1
 8009c08:	0612      	lsls	r2, r2, #24
 8009c0a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	4924      	ldr	r1, [pc, #144]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009c16:	4b23      	ldr	r3, [pc, #140]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1a:	f023 020c 	bic.w	r2, r3, #12
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	4920      	ldr	r1, [pc, #128]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009c28:	4b1e      	ldr	r3, [pc, #120]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	491c      	ldr	r1, [pc, #112]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009c36:	4b1b      	ldr	r3, [pc, #108]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c3c:	f023 0310 	bic.w	r3, r3, #16
 8009c40:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c42:	4b18      	ldr	r3, [pc, #96]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c4a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	69d2      	ldr	r2, [r2, #28]
 8009c52:	00d2      	lsls	r2, r2, #3
 8009c54:	4913      	ldr	r1, [pc, #76]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009c5a:	4b12      	ldr	r3, [pc, #72]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5e:	4a11      	ldr	r2, [pc, #68]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c60:	f043 0310 	orr.w	r3, r3, #16
 8009c64:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009c66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c70:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c72:	f7fa f96f 	bl	8003f54 <HAL_GetTick>
 8009c76:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c78:	e008      	b.n	8009c8c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c7a:	f7fa f96b 	bl	8003f54 <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d901      	bls.n	8009c8c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e006      	b.n	8009c9a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c8c:	4b05      	ldr	r3, [pc, #20]	@ (8009ca4 <RCCEx_PLL3_Config+0x128>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d0f0      	beq.n	8009c7a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	46020c00 	.word	0x46020c00
 8009ca8:	80800000 	.word	0x80800000

08009cac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e0fb      	b.n	8009eb6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a7f      	ldr	r2, [pc, #508]	@ (8009ec0 <HAL_SPI_Init+0x214>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d004      	beq.n	8009cd2 <HAL_SPI_Init+0x26>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a7d      	ldr	r2, [pc, #500]	@ (8009ec4 <HAL_SPI_Init+0x218>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	e000      	b.n	8009cd4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009cd2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a78      	ldr	r2, [pc, #480]	@ (8009ec0 <HAL_SPI_Init+0x214>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d004      	beq.n	8009cee <HAL_SPI_Init+0x42>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a76      	ldr	r2, [pc, #472]	@ (8009ec4 <HAL_SPI_Init+0x218>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d105      	bne.n	8009cfa <HAL_SPI_Init+0x4e>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	2b0f      	cmp	r3, #15
 8009cf4:	d901      	bls.n	8009cfa <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e0dd      	b.n	8009eb6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 ff2e 	bl	800ab5c <SPI_GetPacketSize>
 8009d00:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a6e      	ldr	r2, [pc, #440]	@ (8009ec0 <HAL_SPI_Init+0x214>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d004      	beq.n	8009d16 <HAL_SPI_Init+0x6a>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a6c      	ldr	r2, [pc, #432]	@ (8009ec4 <HAL_SPI_Init+0x218>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d102      	bne.n	8009d1c <HAL_SPI_Init+0x70>
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b08      	cmp	r3, #8
 8009d1a:	d816      	bhi.n	8009d4a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d20:	4a69      	ldr	r2, [pc, #420]	@ (8009ec8 <HAL_SPI_Init+0x21c>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d00e      	beq.n	8009d44 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a68      	ldr	r2, [pc, #416]	@ (8009ecc <HAL_SPI_Init+0x220>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d009      	beq.n	8009d44 <HAL_SPI_Init+0x98>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a66      	ldr	r2, [pc, #408]	@ (8009ed0 <HAL_SPI_Init+0x224>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d004      	beq.n	8009d44 <HAL_SPI_Init+0x98>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a65      	ldr	r2, [pc, #404]	@ (8009ed4 <HAL_SPI_Init+0x228>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d104      	bne.n	8009d4e <HAL_SPI_Init+0xa2>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b10      	cmp	r3, #16
 8009d48:	d901      	bls.n	8009d4e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e0b3      	b.n	8009eb6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d106      	bne.n	8009d68 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7f9 fcb8 	bl	80036d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 0201 	bic.w	r2, r2, #1
 8009d7e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009d8a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d94:	d119      	bne.n	8009dca <HAL_SPI_Init+0x11e>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d9e:	d103      	bne.n	8009da8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d008      	beq.n	8009dba <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10c      	bne.n	8009dca <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009db4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009db8:	d107      	bne.n	8009dca <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009dc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00f      	beq.n	8009df6 <HAL_SPI_Init+0x14a>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	2b06      	cmp	r3, #6
 8009ddc:	d90b      	bls.n	8009df6 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	e007      	b.n	8009e06 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	69da      	ldr	r2, [r3, #28]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e18:	ea42 0103 	orr.w	r1, r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68da      	ldr	r2, [r3, #12]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e30:	431a      	orrs	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	431a      	orrs	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	431a      	orrs	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	431a      	orrs	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	431a      	orrs	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e66:	431a      	orrs	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e6c:	431a      	orrs	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e72:	ea42 0103 	orr.w	r1, r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	430a      	orrs	r2, r1
 8009ea2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	46002000 	.word	0x46002000
 8009ec4:	56002000 	.word	0x56002000
 8009ec8:	40013000 	.word	0x40013000
 8009ecc:	50013000 	.word	0x50013000
 8009ed0:	40003800 	.word	0x40003800
 8009ed4:	50003800 	.word	0x50003800

08009ed8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3320      	adds	r3, #32
 8009eee:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a90      	ldr	r2, [pc, #576]	@ (800a138 <HAL_SPI_Transmit+0x260>)
 8009ef6:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ef8:	f7fa f82c 	bl	8003f54 <HAL_GetTick>
 8009efc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d001      	beq.n	8009f0e <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	e1f4      	b.n	800a2f8 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <HAL_SPI_Transmit+0x42>
 8009f14:	88fb      	ldrh	r3, [r7, #6]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e1ec      	b.n	800a2f8 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d101      	bne.n	8009f2c <HAL_SPI_Transmit+0x54>
 8009f28:	2302      	movs	r3, #2
 8009f2a:	e1e5      	b.n	800a2f8 <HAL_SPI_Transmit+0x420>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2203      	movs	r2, #3
 8009f38:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	88fa      	ldrh	r2, [r7, #6]
 8009f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	88fa      	ldrh	r2, [r7, #6]
 8009f56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009f84:	d108      	bne.n	8009f98 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	e009      	b.n	8009fac <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009faa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	0c1b      	lsrs	r3, r3, #16
 8009fb4:	041b      	lsls	r3, r3, #16
 8009fb6:	88f9      	ldrh	r1, [r7, #6]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	6812      	ldr	r2, [r2, #0]
 8009fbc:	430b      	orrs	r3, r1
 8009fbe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 0201 	orr.w	r2, r2, #1
 8009fce:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10c      	bne.n	8009ff8 <HAL_SPI_Transmit+0x120>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fe6:	d107      	bne.n	8009ff8 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	2b0f      	cmp	r3, #15
 8009ffe:	d95b      	bls.n	800a0b8 <HAL_SPI_Transmit+0x1e0>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a4d      	ldr	r2, [pc, #308]	@ (800a13c <HAL_SPI_Transmit+0x264>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d04f      	beq.n	800a0aa <HAL_SPI_Transmit+0x1d2>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a4c      	ldr	r2, [pc, #304]	@ (800a140 <HAL_SPI_Transmit+0x268>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d04a      	beq.n	800a0aa <HAL_SPI_Transmit+0x1d2>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a4a      	ldr	r2, [pc, #296]	@ (800a144 <HAL_SPI_Transmit+0x26c>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d045      	beq.n	800a0aa <HAL_SPI_Transmit+0x1d2>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a49      	ldr	r2, [pc, #292]	@ (800a148 <HAL_SPI_Transmit+0x270>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d147      	bne.n	800a0b8 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a028:	e03f      	b.n	800a0aa <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	f003 0302 	and.w	r3, r3, #2
 800a034:	2b02      	cmp	r3, #2
 800a036:	d114      	bne.n	800a062 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6812      	ldr	r2, [r2, #0]
 800a042:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a048:	1d1a      	adds	r2, r3, #4
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a054:	b29b      	uxth	r3, r3
 800a056:	3b01      	subs	r3, #1
 800a058:	b29a      	uxth	r2, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a060:	e023      	b.n	800a0aa <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a062:	f7f9 ff77 	bl	8003f54 <HAL_GetTick>
 800a066:	4602      	mov	r2, r0
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d803      	bhi.n	800a07a <HAL_SPI_Transmit+0x1a2>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a078:	d102      	bne.n	800a080 <HAL_SPI_Transmit+0x1a8>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d114      	bne.n	800a0aa <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 fc9d 	bl	800a9c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a08c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e126      	b.n	800a2f8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1b9      	bne.n	800a02a <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a0b6:	e0f9      	b.n	800a2ac <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	2b07      	cmp	r3, #7
 800a0be:	f240 80ee 	bls.w	800a29e <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a0c2:	e067      	b.n	800a194 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d13c      	bne.n	800a14c <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d918      	bls.n	800a110 <HAL_SPI_Transmit+0x238>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d014      	beq.n	800a110 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6812      	ldr	r2, [r2, #0]
 800a0f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0f6:	1d1a      	adds	r2, r3, #4
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a102:	b29b      	uxth	r3, r3
 800a104:	3b02      	subs	r3, #2
 800a106:	b29a      	uxth	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a10e:	e041      	b.n	800a194 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a114:	881a      	ldrh	r2, [r3, #0]
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a11e:	1c9a      	adds	r2, r3, #2
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b29a      	uxth	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a136:	e02d      	b.n	800a194 <HAL_SPI_Transmit+0x2bc>
 800a138:	46002000 	.word	0x46002000
 800a13c:	40013000 	.word	0x40013000
 800a140:	50013000 	.word	0x50013000
 800a144:	40003800 	.word	0x40003800
 800a148:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a14c:	f7f9 ff02 	bl	8003f54 <HAL_GetTick>
 800a150:	4602      	mov	r2, r0
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d803      	bhi.n	800a164 <HAL_SPI_Transmit+0x28c>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a162:	d102      	bne.n	800a16a <HAL_SPI_Transmit+0x292>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d114      	bne.n	800a194 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fc28 	bl	800a9c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a176:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e0b1      	b.n	800a2f8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d191      	bne.n	800a0c4 <HAL_SPI_Transmit+0x1ec>
 800a1a0:	e084      	b.n	800a2ac <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	f003 0302 	and.w	r3, r3, #2
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d152      	bne.n	800a256 <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d918      	bls.n	800a1ee <HAL_SPI_Transmit+0x316>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1c0:	2b40      	cmp	r3, #64	@ 0x40
 800a1c2:	d914      	bls.n	800a1ee <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6812      	ldr	r2, [r2, #0]
 800a1ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1d4:	1d1a      	adds	r2, r3, #4
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	3b04      	subs	r3, #4
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a1ec:	e057      	b.n	800a29e <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d917      	bls.n	800a22a <HAL_SPI_Transmit+0x352>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d013      	beq.n	800a22a <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a206:	881a      	ldrh	r2, [r3, #0]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a210:	1c9a      	adds	r2, r3, #2
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	3b02      	subs	r3, #2
 800a220:	b29a      	uxth	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a228:	e039      	b.n	800a29e <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3320      	adds	r3, #32
 800a234:	7812      	ldrb	r2, [r2, #0]
 800a236:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a248:	b29b      	uxth	r3, r3
 800a24a:	3b01      	subs	r3, #1
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a254:	e023      	b.n	800a29e <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a256:	f7f9 fe7d 	bl	8003f54 <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	429a      	cmp	r2, r3
 800a264:	d803      	bhi.n	800a26e <HAL_SPI_Transmit+0x396>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a26c:	d102      	bne.n	800a274 <HAL_SPI_Transmit+0x39c>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d114      	bne.n	800a29e <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 fba3 	bl	800a9c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a280:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e02c      	b.n	800a2f8 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f47f af7b 	bne.w	800a1a2 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2108      	movs	r1, #8
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f000 fc22 	bl	800ab00 <SPI_WaitOnFlagUntilTimeout>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d007      	beq.n	800a2d2 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2c8:	f043 0220 	orr.w	r2, r3, #32
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 fb74 	bl	800a9c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e000      	b.n	800a2f8 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
  }
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08e      	sub	sp, #56	@ 0x38
 800a304:	af02      	add	r7, sp, #8
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3320      	adds	r3, #32
 800a314:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3330      	adds	r3, #48	@ 0x30
 800a31c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a322:	095b      	lsrs	r3, r3, #5
 800a324:	b29b      	uxth	r3, r3
 800a326:	3301      	adds	r3, #1
 800a328:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a90      	ldr	r2, [pc, #576]	@ (800a570 <HAL_SPI_TransmitReceive+0x270>)
 800a330:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a332:	f7f9 fe0f 	bl	8003f54 <HAL_GetTick>
 800a336:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800a338:	887b      	ldrh	r3, [r7, #2]
 800a33a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800a33c:	887b      	ldrh	r3, [r7, #2]
 800a33e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d001      	beq.n	800a350 <HAL_SPI_TransmitReceive+0x50>
  {
    return HAL_BUSY;
 800a34c:	2302      	movs	r3, #2
 800a34e:	e332      	b.n	800a9b6 <HAL_SPI_TransmitReceive+0x6b6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <HAL_SPI_TransmitReceive+0x62>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <HAL_SPI_TransmitReceive+0x62>
 800a35c:	887b      	ldrh	r3, [r7, #2]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <HAL_SPI_TransmitReceive+0x66>
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e327      	b.n	800a9b6 <HAL_SPI_TransmitReceive+0x6b6>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d101      	bne.n	800a374 <HAL_SPI_TransmitReceive+0x74>
 800a370:	2302      	movs	r3, #2
 800a372:	e320      	b.n	800a9b6 <HAL_SPI_TransmitReceive+0x6b6>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2205      	movs	r2, #5
 800a380:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	887a      	ldrh	r2, [r7, #2]
 800a396:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	887a      	ldrh	r2, [r7, #2]
 800a39e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	887a      	ldrh	r2, [r7, #2]
 800a3ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	887a      	ldrh	r2, [r7, #2]
 800a3b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68da      	ldr	r2, [r3, #12]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a3d2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a66      	ldr	r2, [pc, #408]	@ (800a574 <HAL_SPI_TransmitReceive+0x274>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d00e      	beq.n	800a3fc <HAL_SPI_TransmitReceive+0xfc>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a65      	ldr	r2, [pc, #404]	@ (800a578 <HAL_SPI_TransmitReceive+0x278>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d009      	beq.n	800a3fc <HAL_SPI_TransmitReceive+0xfc>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a63      	ldr	r2, [pc, #396]	@ (800a57c <HAL_SPI_TransmitReceive+0x27c>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d004      	beq.n	800a3fc <HAL_SPI_TransmitReceive+0xfc>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a62      	ldr	r2, [pc, #392]	@ (800a580 <HAL_SPI_TransmitReceive+0x280>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d102      	bne.n	800a402 <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a3fc:	2310      	movs	r3, #16
 800a3fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a400:	e001      	b.n	800a406 <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a402:	2308      	movs	r3, #8
 800a404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	0c1b      	lsrs	r3, r3, #16
 800a40e:	041b      	lsls	r3, r3, #16
 800a410:	8879      	ldrh	r1, [r7, #2]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	430b      	orrs	r3, r1
 800a418:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f042 0201 	orr.w	r2, r2, #1
 800a428:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	69db      	ldr	r3, [r3, #28]
 800a430:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10c      	bne.n	800a452 <HAL_SPI_TransmitReceive+0x152>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a440:	d107      	bne.n	800a452 <HAL_SPI_TransmitReceive+0x152>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a450:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	2b0f      	cmp	r3, #15
 800a458:	f240 80c1 	bls.w	800a5de <HAL_SPI_TransmitReceive+0x2de>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a44      	ldr	r2, [pc, #272]	@ (800a574 <HAL_SPI_TransmitReceive+0x274>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d00f      	beq.n	800a486 <HAL_SPI_TransmitReceive+0x186>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a43      	ldr	r2, [pc, #268]	@ (800a578 <HAL_SPI_TransmitReceive+0x278>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d00a      	beq.n	800a486 <HAL_SPI_TransmitReceive+0x186>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a41      	ldr	r2, [pc, #260]	@ (800a57c <HAL_SPI_TransmitReceive+0x27c>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d005      	beq.n	800a486 <HAL_SPI_TransmitReceive+0x186>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a40      	ldr	r2, [pc, #256]	@ (800a580 <HAL_SPI_TransmitReceive+0x280>)
 800a480:	4293      	cmp	r3, r2
 800a482:	f040 80ac 	bne.w	800a5de <HAL_SPI_TransmitReceive+0x2de>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800a486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a488:	089b      	lsrs	r3, r3, #2
 800a48a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a48c:	e09e      	b.n	800a5cc <HAL_SPI_TransmitReceive+0x2cc>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	695b      	ldr	r3, [r3, #20]
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d120      	bne.n	800a4de <HAL_SPI_TransmitReceive+0x1de>
 800a49c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d01d      	beq.n	800a4de <HAL_SPI_TransmitReceive+0x1de>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a4a2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a4a4:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a8:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d217      	bcs.n	800a4de <HAL_SPI_TransmitReceive+0x1de>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6812      	ldr	r2, [r2, #0]
 800a4b8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4be:	1d1a      	adds	r2, r3, #4
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a4dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a4e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d06f      	beq.n	800a5cc <HAL_SPI_TransmitReceive+0x2cc>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d118      	bne.n	800a52c <HAL_SPI_TransmitReceive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a502:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a504:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a50a:	1d1a      	adds	r2, r3, #4
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a516:	b29b      	uxth	r3, r3
 800a518:	3b01      	subs	r3, #1
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a528:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a52a:	e04f      	b.n	800a5cc <HAL_SPI_TransmitReceive+0x2cc>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a52c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a52e:	8bfb      	ldrh	r3, [r7, #30]
 800a530:	429a      	cmp	r2, r3
 800a532:	d227      	bcs.n	800a584 <HAL_SPI_TransmitReceive+0x284>
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d022      	beq.n	800a584 <HAL_SPI_TransmitReceive+0x284>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a546:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a548:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a54e:	1d1a      	adds	r2, r3, #4
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	3b01      	subs	r3, #1
 800a55e:	b29a      	uxth	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a56c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a56e:	e02d      	b.n	800a5cc <HAL_SPI_TransmitReceive+0x2cc>
 800a570:	46002000 	.word	0x46002000
 800a574:	40013000 	.word	0x40013000
 800a578:	50013000 	.word	0x50013000
 800a57c:	40003800 	.word	0x40003800
 800a580:	50003800 	.word	0x50003800
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a584:	f7f9 fce6 	bl	8003f54 <HAL_GetTick>
 800a588:	4602      	mov	r2, r0
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a590:	429a      	cmp	r2, r3
 800a592:	d803      	bhi.n	800a59c <HAL_SPI_TransmitReceive+0x29c>
 800a594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a596:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a59a:	d102      	bne.n	800a5a2 <HAL_SPI_TransmitReceive+0x2a2>
 800a59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d114      	bne.n	800a5cc <HAL_SPI_TransmitReceive+0x2cc>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f000 fa0c 	bl	800a9c0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e1f4      	b.n	800a9b6 <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a5cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f47f af5d 	bne.w	800a48e <HAL_SPI_TransmitReceive+0x18e>
 800a5d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f47f af59 	bne.w	800a48e <HAL_SPI_TransmitReceive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a5dc:	e1c5      	b.n	800a96a <HAL_SPI_TransmitReceive+0x66a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	2b07      	cmp	r3, #7
 800a5e4:	f240 81b9 	bls.w	800a95a <HAL_SPI_TransmitReceive+0x65a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800a5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ea:	085b      	lsrs	r3, r3, #1
 800a5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a5ee:	e0c0      	b.n	800a772 <HAL_SPI_TransmitReceive+0x472>
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d11f      	bne.n	800a63e <HAL_SPI_TransmitReceive+0x33e>
 800a5fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01c      	beq.n	800a63e <HAL_SPI_TransmitReceive+0x33e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a604:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a606:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a60a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d216      	bcs.n	800a63e <HAL_SPI_TransmitReceive+0x33e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a614:	881a      	ldrh	r2, [r3, #0]
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a61e:	1c9a      	adds	r2, r3, #2
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	3b01      	subs	r3, #1
 800a62e:	b29a      	uxth	r2, r3
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a63c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a646:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 8092 	beq.w	800a772 <HAL_SPI_TransmitReceive+0x472>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d118      	bne.n	800a68e <HAL_SPI_TransmitReceive+0x38e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a660:	6a3a      	ldr	r2, [r7, #32]
 800a662:	8812      	ldrh	r2, [r2, #0]
 800a664:	b292      	uxth	r2, r2
 800a666:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a66c:	1c9a      	adds	r2, r3, #2
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a678:	b29b      	uxth	r3, r3
 800a67a:	3b01      	subs	r3, #1
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a68a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a68c:	e071      	b.n	800a772 <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a68e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a690:	8bfb      	ldrh	r3, [r7, #30]
 800a692:	429a      	cmp	r2, r3
 800a694:	d228      	bcs.n	800a6e8 <HAL_SPI_TransmitReceive+0x3e8>
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d023      	beq.n	800a6e8 <HAL_SPI_TransmitReceive+0x3e8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6a4:	6a3a      	ldr	r2, [r7, #32]
 800a6a6:	8812      	ldrh	r2, [r2, #0]
 800a6a8:	b292      	uxth	r2, r2
 800a6aa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6b0:	1c9a      	adds	r2, r3, #2
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ba:	6a3a      	ldr	r2, [r7, #32]
 800a6bc:	8812      	ldrh	r2, [r2, #0]
 800a6be:	b292      	uxth	r2, r2
 800a6c0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c6:	1c9a      	adds	r2, r3, #2
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	3b02      	subs	r3, #2
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a6e4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a6e6:	e044      	b.n	800a772 <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a6e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d11d      	bne.n	800a72a <HAL_SPI_TransmitReceive+0x42a>
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d018      	beq.n	800a72a <HAL_SPI_TransmitReceive+0x42a>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6fc:	6a3a      	ldr	r2, [r7, #32]
 800a6fe:	8812      	ldrh	r2, [r2, #0]
 800a700:	b292      	uxth	r2, r2
 800a702:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a708:	1c9a      	adds	r2, r3, #2
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a714:	b29b      	uxth	r3, r3
 800a716:	3b01      	subs	r3, #1
 800a718:	b29a      	uxth	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a726:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a728:	e023      	b.n	800a772 <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a72a:	f7f9 fc13 	bl	8003f54 <HAL_GetTick>
 800a72e:	4602      	mov	r2, r0
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a736:	429a      	cmp	r2, r3
 800a738:	d803      	bhi.n	800a742 <HAL_SPI_TransmitReceive+0x442>
 800a73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a740:	d102      	bne.n	800a748 <HAL_SPI_TransmitReceive+0x448>
 800a742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a744:	2b00      	cmp	r3, #0
 800a746:	d114      	bne.n	800a772 <HAL_SPI_TransmitReceive+0x472>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f000 f939 	bl	800a9c0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a754:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2201      	movs	r2, #1
 800a762:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e121      	b.n	800a9b6 <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a772:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a774:	2b00      	cmp	r3, #0
 800a776:	f47f af3b 	bne.w	800a5f0 <HAL_SPI_TransmitReceive+0x2f0>
 800a77a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f47f af37 	bne.w	800a5f0 <HAL_SPI_TransmitReceive+0x2f0>
 800a782:	e0f2      	b.n	800a96a <HAL_SPI_TransmitReceive+0x66a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d121      	bne.n	800a7d6 <HAL_SPI_TransmitReceive+0x4d6>
 800a792:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a794:	2b00      	cmp	r3, #0
 800a796:	d01e      	beq.n	800a7d6 <HAL_SPI_TransmitReceive+0x4d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a798:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a79a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a79e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d218      	bcs.n	800a7d6 <HAL_SPI_TransmitReceive+0x4d6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3320      	adds	r3, #32
 800a7ae:	7812      	ldrb	r2, [r2, #0]
 800a7b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a7de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 80ba 	beq.w	800a95a <HAL_SPI_TransmitReceive+0x65a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d11b      	bne.n	800a82c <HAL_SPI_TransmitReceive+0x52c>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a800:	7812      	ldrb	r2, [r2, #0]
 800a802:	b2d2      	uxtb	r2, r2
 800a804:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a80a:	1c5a      	adds	r2, r3, #1
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a816:	b29b      	uxth	r3, r3
 800a818:	3b01      	subs	r3, #1
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a828:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a82a:	e096      	b.n	800a95a <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a82c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a82e:	8bfb      	ldrh	r3, [r7, #30]
 800a830:	429a      	cmp	r2, r3
 800a832:	d24a      	bcs.n	800a8ca <HAL_SPI_TransmitReceive+0x5ca>
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d045      	beq.n	800a8ca <HAL_SPI_TransmitReceive+0x5ca>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a84a:	7812      	ldrb	r2, [r2, #0]
 800a84c:	b2d2      	uxtb	r2, r2
 800a84e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a854:	1c5a      	adds	r2, r3, #1
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a866:	7812      	ldrb	r2, [r2, #0]
 800a868:	b2d2      	uxtb	r2, r2
 800a86a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a870:	1c5a      	adds	r2, r3, #1
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a882:	7812      	ldrb	r2, [r2, #0]
 800a884:	b2d2      	uxtb	r2, r2
 800a886:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a88c:	1c5a      	adds	r2, r3, #1
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a89e:	7812      	ldrb	r2, [r2, #0]
 800a8a0:	b2d2      	uxtb	r2, r2
 800a8a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	3b04      	subs	r3, #4
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a8c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a8c8:	e047      	b.n	800a95a <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800a8ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d820      	bhi.n	800a912 <HAL_SPI_TransmitReceive+0x612>
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d01b      	beq.n	800a912 <HAL_SPI_TransmitReceive+0x612>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8e6:	7812      	ldrb	r2, [r2, #0]
 800a8e8:	b2d2      	uxtb	r2, r2
 800a8ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	3b01      	subs	r3, #1
 800a900:	b29a      	uxth	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800a90e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a910:	e023      	b.n	800a95a <HAL_SPI_TransmitReceive+0x65a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a912:	f7f9 fb1f 	bl	8003f54 <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a91e:	429a      	cmp	r2, r3
 800a920:	d803      	bhi.n	800a92a <HAL_SPI_TransmitReceive+0x62a>
 800a922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a928:	d102      	bne.n	800a930 <HAL_SPI_TransmitReceive+0x630>
 800a92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d114      	bne.n	800a95a <HAL_SPI_TransmitReceive+0x65a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 f845 	bl	800a9c0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a93c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e02d      	b.n	800a9b6 <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a95a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f47f af11 	bne.w	800a784 <HAL_SPI_TransmitReceive+0x484>
 800a962:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a964:	2b00      	cmp	r3, #0
 800a966:	f47f af0d 	bne.w	800a784 <HAL_SPI_TransmitReceive+0x484>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a970:	2200      	movs	r2, #0
 800a972:	2108      	movs	r1, #8
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 f8c3 	bl	800ab00 <SPI_WaitOnFlagUntilTimeout>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d007      	beq.n	800a990 <HAL_SPI_TransmitReceive+0x690>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a986:	f043 0220 	orr.w	r2, r3, #32
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 f815 	bl	800a9c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <HAL_SPI_TransmitReceive+0x6b4>
  {
    return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e000      	b.n	800a9b6 <HAL_SPI_TransmitReceive+0x6b6>
  }
  else
  {
    return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
  }
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3730      	adds	r7, #48	@ 0x30
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop

0800a9c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	699a      	ldr	r2, [r3, #24]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f042 0208 	orr.w	r2, r2, #8
 800a9de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	699a      	ldr	r2, [r3, #24]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f042 0210 	orr.w	r2, r2, #16
 800a9ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 0201 	bic.w	r2, r2, #1
 800a9fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	6812      	ldr	r2, [r2, #0]
 800aa0a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800aa0e:	f023 0303 	bic.w	r3, r3, #3
 800aa12:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	689a      	ldr	r2, [r3, #8]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aa22:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d014      	beq.n	800aa5a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f003 0320 	and.w	r3, r3, #32
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00f      	beq.n	800aa5a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	699a      	ldr	r2, [r3, #24]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f042 0220 	orr.w	r2, r2, #32
 800aa58:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d014      	beq.n	800aa90 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00f      	beq.n	800aa90 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa76:	f043 0204 	orr.w	r2, r3, #4
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	699a      	ldr	r2, [r3, #24]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa8e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00f      	beq.n	800aaba <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaa0:	f043 0201 	orr.w	r2, r3, #1
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	699a      	ldr	r2, [r3, #24]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aab8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00f      	beq.n	800aae4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaca:	f043 0208 	orr.w	r2, r3, #8
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	699a      	ldr	r2, [r3, #24]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aae2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800aaf4:	bf00      	nop
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ab10:	e010      	b.n	800ab34 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab12:	f7f9 fa1f 	bl	8003f54 <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d803      	bhi.n	800ab2a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab28:	d102      	bne.n	800ab30 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e00f      	b.n	800ab54 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	695a      	ldr	r2, [r3, #20]
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	bf0c      	ite	eq
 800ab44:	2301      	moveq	r3, #1
 800ab46:	2300      	movne	r3, #0
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	79fb      	ldrb	r3, [r7, #7]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d0df      	beq.n	800ab12 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab68:	095b      	lsrs	r3, r3, #5
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	3301      	adds	r3, #1
 800ab74:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	3307      	adds	r3, #7
 800ab7a:	08db      	lsrs	r3, r3, #3
 800ab7c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	fb02 f303 	mul.w	r3, r2, r3
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b083      	sub	sp, #12
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d12e      	bne.n	800ac06 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d101      	bne.n	800abb6 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800abb2:	2302      	movs	r3, #2
 800abb4:	e028      	b.n	800ac08 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2202      	movs	r2, #2
 800abc2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f022 0201 	bic.w	r2, r2, #1
 800abd4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800abe2:	ea42 0103 	orr.w	r1, r2, r3
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	430a      	orrs	r2, r1
 800abf0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	e000      	b.n	800ac08 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
  }
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e049      	b.n	800acba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d106      	bne.n	800ac40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7f8 fdb8 	bl	80037b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4619      	mov	r1, r3
 800ac52:	4610      	mov	r0, r2
 800ac54:	f000 f9d0 	bl	800aff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d001      	beq.n	800acdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e06a      	b.n	800adb2 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2202      	movs	r2, #2
 800ace0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a35      	ldr	r2, [pc, #212]	@ (800adc0 <HAL_TIM_Base_Start+0xfc>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d040      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a34      	ldr	r2, [pc, #208]	@ (800adc4 <HAL_TIM_Base_Start+0x100>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d03b      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad00:	d036      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad0a:	d031      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a2d      	ldr	r2, [pc, #180]	@ (800adc8 <HAL_TIM_Base_Start+0x104>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d02c      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a2c      	ldr	r2, [pc, #176]	@ (800adcc <HAL_TIM_Base_Start+0x108>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d027      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a2a      	ldr	r2, [pc, #168]	@ (800add0 <HAL_TIM_Base_Start+0x10c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d022      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a29      	ldr	r2, [pc, #164]	@ (800add4 <HAL_TIM_Base_Start+0x110>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d01d      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a27      	ldr	r2, [pc, #156]	@ (800add8 <HAL_TIM_Base_Start+0x114>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d018      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a26      	ldr	r2, [pc, #152]	@ (800addc <HAL_TIM_Base_Start+0x118>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d013      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a24      	ldr	r2, [pc, #144]	@ (800ade0 <HAL_TIM_Base_Start+0x11c>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d00e      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a23      	ldr	r2, [pc, #140]	@ (800ade4 <HAL_TIM_Base_Start+0x120>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d009      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a21      	ldr	r2, [pc, #132]	@ (800ade8 <HAL_TIM_Base_Start+0x124>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d004      	beq.n	800ad70 <HAL_TIM_Base_Start+0xac>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a20      	ldr	r2, [pc, #128]	@ (800adec <HAL_TIM_Base_Start+0x128>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d115      	bne.n	800ad9c <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	689a      	ldr	r2, [r3, #8]
 800ad76:	4b1e      	ldr	r3, [pc, #120]	@ (800adf0 <HAL_TIM_Base_Start+0x12c>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2b06      	cmp	r3, #6
 800ad80:	d015      	beq.n	800adae <HAL_TIM_Base_Start+0xea>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad88:	d011      	beq.n	800adae <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f042 0201 	orr.w	r2, r2, #1
 800ad98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad9a:	e008      	b.n	800adae <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f042 0201 	orr.w	r2, r2, #1
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	e000      	b.n	800adb0 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	40012c00 	.word	0x40012c00
 800adc4:	50012c00 	.word	0x50012c00
 800adc8:	40000400 	.word	0x40000400
 800adcc:	50000400 	.word	0x50000400
 800add0:	40000800 	.word	0x40000800
 800add4:	50000800 	.word	0x50000800
 800add8:	40000c00 	.word	0x40000c00
 800addc:	50000c00 	.word	0x50000c00
 800ade0:	40013400 	.word	0x40013400
 800ade4:	50013400 	.word	0x50013400
 800ade8:	40014000 	.word	0x40014000
 800adec:	50014000 	.word	0x50014000
 800adf0:	00010007 	.word	0x00010007

0800adf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d101      	bne.n	800ae10 <HAL_TIM_ConfigClockSource+0x1c>
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	e0e6      	b.n	800afde <HAL_TIM_ConfigClockSource+0x1ea>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ae2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ae32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a67      	ldr	r2, [pc, #412]	@ (800afe8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	f000 80b1 	beq.w	800afb2 <HAL_TIM_ConfigClockSource+0x1be>
 800ae50:	4a65      	ldr	r2, [pc, #404]	@ (800afe8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	f200 80b6 	bhi.w	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ae58:	4a64      	ldr	r2, [pc, #400]	@ (800afec <HAL_TIM_ConfigClockSource+0x1f8>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	f000 80a9 	beq.w	800afb2 <HAL_TIM_ConfigClockSource+0x1be>
 800ae60:	4a62      	ldr	r2, [pc, #392]	@ (800afec <HAL_TIM_ConfigClockSource+0x1f8>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	f200 80ae 	bhi.w	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ae68:	4a61      	ldr	r2, [pc, #388]	@ (800aff0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	f000 80a1 	beq.w	800afb2 <HAL_TIM_ConfigClockSource+0x1be>
 800ae70:	4a5f      	ldr	r2, [pc, #380]	@ (800aff0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	f200 80a6 	bhi.w	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ae78:	4a5e      	ldr	r2, [pc, #376]	@ (800aff4 <HAL_TIM_ConfigClockSource+0x200>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	f000 8099 	beq.w	800afb2 <HAL_TIM_ConfigClockSource+0x1be>
 800ae80:	4a5c      	ldr	r2, [pc, #368]	@ (800aff4 <HAL_TIM_ConfigClockSource+0x200>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	f200 809e 	bhi.w	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ae88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ae8c:	f000 8091 	beq.w	800afb2 <HAL_TIM_ConfigClockSource+0x1be>
 800ae90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ae94:	f200 8096 	bhi.w	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800ae98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae9c:	f000 8089 	beq.w	800afb2 <HAL_TIM_ConfigClockSource+0x1be>
 800aea0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aea4:	f200 808e 	bhi.w	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800aea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeac:	d03e      	beq.n	800af2c <HAL_TIM_ConfigClockSource+0x138>
 800aeae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeb2:	f200 8087 	bhi.w	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800aeb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeba:	f000 8086 	beq.w	800afca <HAL_TIM_ConfigClockSource+0x1d6>
 800aebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aec2:	d87f      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800aec4:	2b70      	cmp	r3, #112	@ 0x70
 800aec6:	d01a      	beq.n	800aefe <HAL_TIM_ConfigClockSource+0x10a>
 800aec8:	2b70      	cmp	r3, #112	@ 0x70
 800aeca:	d87b      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800aecc:	2b60      	cmp	r3, #96	@ 0x60
 800aece:	d050      	beq.n	800af72 <HAL_TIM_ConfigClockSource+0x17e>
 800aed0:	2b60      	cmp	r3, #96	@ 0x60
 800aed2:	d877      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800aed4:	2b50      	cmp	r3, #80	@ 0x50
 800aed6:	d03c      	beq.n	800af52 <HAL_TIM_ConfigClockSource+0x15e>
 800aed8:	2b50      	cmp	r3, #80	@ 0x50
 800aeda:	d873      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800aedc:	2b40      	cmp	r3, #64	@ 0x40
 800aede:	d058      	beq.n	800af92 <HAL_TIM_ConfigClockSource+0x19e>
 800aee0:	2b40      	cmp	r3, #64	@ 0x40
 800aee2:	d86f      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800aee4:	2b30      	cmp	r3, #48	@ 0x30
 800aee6:	d064      	beq.n	800afb2 <HAL_TIM_ConfigClockSource+0x1be>
 800aee8:	2b30      	cmp	r3, #48	@ 0x30
 800aeea:	d86b      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800aeec:	2b20      	cmp	r3, #32
 800aeee:	d060      	beq.n	800afb2 <HAL_TIM_ConfigClockSource+0x1be>
 800aef0:	2b20      	cmp	r3, #32
 800aef2:	d867      	bhi.n	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d05c      	beq.n	800afb2 <HAL_TIM_ConfigClockSource+0x1be>
 800aef8:	2b10      	cmp	r3, #16
 800aefa:	d05a      	beq.n	800afb2 <HAL_TIM_ConfigClockSource+0x1be>
 800aefc:	e062      	b.n	800afc4 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af0e:	f000 fa50 	bl	800b3b2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800af20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	609a      	str	r2, [r3, #8]
      break;
 800af2a:	e04f      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af3c:	f000 fa39 	bl	800b3b2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	689a      	ldr	r2, [r3, #8]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af4e:	609a      	str	r2, [r3, #8]
      break;
 800af50:	e03c      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af5e:	461a      	mov	r2, r3
 800af60:	f000 f94a 	bl	800b1f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2150      	movs	r1, #80	@ 0x50
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fa04 	bl	800b378 <TIM_ITRx_SetConfig>
      break;
 800af70:	e02c      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af7e:	461a      	mov	r2, r3
 800af80:	f000 f9ac 	bl	800b2dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2160      	movs	r1, #96	@ 0x60
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f9f4 	bl	800b378 <TIM_ITRx_SetConfig>
      break;
 800af90:	e01c      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af9e:	461a      	mov	r2, r3
 800afa0:	f000 f92a 	bl	800b1f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2140      	movs	r1, #64	@ 0x40
 800afaa:	4618      	mov	r0, r3
 800afac:	f000 f9e4 	bl	800b378 <TIM_ITRx_SetConfig>
      break;
 800afb0:	e00c      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f000 f9db 	bl	800b378 <TIM_ITRx_SetConfig>
      break;
 800afc2:	e003      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	73fb      	strb	r3, [r7, #15]
      break;
 800afc8:	e000      	b.n	800afcc <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800afca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	00100070 	.word	0x00100070
 800afec:	00100040 	.word	0x00100040
 800aff0:	00100030 	.word	0x00100030
 800aff4:	00100020 	.word	0x00100020

0800aff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a6b      	ldr	r2, [pc, #428]	@ (800b1b8 <TIM_Base_SetConfig+0x1c0>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d02b      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a6a      	ldr	r2, [pc, #424]	@ (800b1bc <TIM_Base_SetConfig+0x1c4>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d027      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b01e:	d023      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b026:	d01f      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a65      	ldr	r2, [pc, #404]	@ (800b1c0 <TIM_Base_SetConfig+0x1c8>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d01b      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a64      	ldr	r2, [pc, #400]	@ (800b1c4 <TIM_Base_SetConfig+0x1cc>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d017      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a63      	ldr	r2, [pc, #396]	@ (800b1c8 <TIM_Base_SetConfig+0x1d0>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d013      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a62      	ldr	r2, [pc, #392]	@ (800b1cc <TIM_Base_SetConfig+0x1d4>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d00f      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a61      	ldr	r2, [pc, #388]	@ (800b1d0 <TIM_Base_SetConfig+0x1d8>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d00b      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a60      	ldr	r2, [pc, #384]	@ (800b1d4 <TIM_Base_SetConfig+0x1dc>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d007      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a5f      	ldr	r2, [pc, #380]	@ (800b1d8 <TIM_Base_SetConfig+0x1e0>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d003      	beq.n	800b068 <TIM_Base_SetConfig+0x70>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a5e      	ldr	r2, [pc, #376]	@ (800b1dc <TIM_Base_SetConfig+0x1e4>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d108      	bne.n	800b07a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b06e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	4313      	orrs	r3, r2
 800b078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a4e      	ldr	r2, [pc, #312]	@ (800b1b8 <TIM_Base_SetConfig+0x1c0>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d043      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a4d      	ldr	r2, [pc, #308]	@ (800b1bc <TIM_Base_SetConfig+0x1c4>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d03f      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b090:	d03b      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b098:	d037      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a48      	ldr	r2, [pc, #288]	@ (800b1c0 <TIM_Base_SetConfig+0x1c8>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d033      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a47      	ldr	r2, [pc, #284]	@ (800b1c4 <TIM_Base_SetConfig+0x1cc>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d02f      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a46      	ldr	r2, [pc, #280]	@ (800b1c8 <TIM_Base_SetConfig+0x1d0>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d02b      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a45      	ldr	r2, [pc, #276]	@ (800b1cc <TIM_Base_SetConfig+0x1d4>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d027      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a44      	ldr	r2, [pc, #272]	@ (800b1d0 <TIM_Base_SetConfig+0x1d8>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d023      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a43      	ldr	r2, [pc, #268]	@ (800b1d4 <TIM_Base_SetConfig+0x1dc>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d01f      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a42      	ldr	r2, [pc, #264]	@ (800b1d8 <TIM_Base_SetConfig+0x1e0>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d01b      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a41      	ldr	r2, [pc, #260]	@ (800b1dc <TIM_Base_SetConfig+0x1e4>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d017      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a40      	ldr	r2, [pc, #256]	@ (800b1e0 <TIM_Base_SetConfig+0x1e8>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d013      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a3f      	ldr	r2, [pc, #252]	@ (800b1e4 <TIM_Base_SetConfig+0x1ec>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d00f      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a3e      	ldr	r2, [pc, #248]	@ (800b1e8 <TIM_Base_SetConfig+0x1f0>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00b      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a3d      	ldr	r2, [pc, #244]	@ (800b1ec <TIM_Base_SetConfig+0x1f4>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d007      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a3c      	ldr	r2, [pc, #240]	@ (800b1f0 <TIM_Base_SetConfig+0x1f8>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d003      	beq.n	800b10a <TIM_Base_SetConfig+0x112>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a3b      	ldr	r2, [pc, #236]	@ (800b1f4 <TIM_Base_SetConfig+0x1fc>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d108      	bne.n	800b11c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	4313      	orrs	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	4313      	orrs	r3, r2
 800b128:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	689a      	ldr	r2, [r3, #8]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a1e      	ldr	r2, [pc, #120]	@ (800b1b8 <TIM_Base_SetConfig+0x1c0>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d023      	beq.n	800b18a <TIM_Base_SetConfig+0x192>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a1d      	ldr	r2, [pc, #116]	@ (800b1bc <TIM_Base_SetConfig+0x1c4>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d01f      	beq.n	800b18a <TIM_Base_SetConfig+0x192>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a22      	ldr	r2, [pc, #136]	@ (800b1d8 <TIM_Base_SetConfig+0x1e0>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d01b      	beq.n	800b18a <TIM_Base_SetConfig+0x192>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a21      	ldr	r2, [pc, #132]	@ (800b1dc <TIM_Base_SetConfig+0x1e4>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d017      	beq.n	800b18a <TIM_Base_SetConfig+0x192>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a20      	ldr	r2, [pc, #128]	@ (800b1e0 <TIM_Base_SetConfig+0x1e8>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d013      	beq.n	800b18a <TIM_Base_SetConfig+0x192>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a1f      	ldr	r2, [pc, #124]	@ (800b1e4 <TIM_Base_SetConfig+0x1ec>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d00f      	beq.n	800b18a <TIM_Base_SetConfig+0x192>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a1e      	ldr	r2, [pc, #120]	@ (800b1e8 <TIM_Base_SetConfig+0x1f0>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d00b      	beq.n	800b18a <TIM_Base_SetConfig+0x192>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a1d      	ldr	r2, [pc, #116]	@ (800b1ec <TIM_Base_SetConfig+0x1f4>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d007      	beq.n	800b18a <TIM_Base_SetConfig+0x192>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a1c      	ldr	r2, [pc, #112]	@ (800b1f0 <TIM_Base_SetConfig+0x1f8>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d003      	beq.n	800b18a <TIM_Base_SetConfig+0x192>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a1b      	ldr	r2, [pc, #108]	@ (800b1f4 <TIM_Base_SetConfig+0x1fc>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d103      	bne.n	800b192 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	691a      	ldr	r2, [r3, #16]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f043 0204 	orr.w	r2, r3, #4
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	601a      	str	r2, [r3, #0]
}
 800b1aa:	bf00      	nop
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	40012c00 	.word	0x40012c00
 800b1bc:	50012c00 	.word	0x50012c00
 800b1c0:	40000400 	.word	0x40000400
 800b1c4:	50000400 	.word	0x50000400
 800b1c8:	40000800 	.word	0x40000800
 800b1cc:	50000800 	.word	0x50000800
 800b1d0:	40000c00 	.word	0x40000c00
 800b1d4:	50000c00 	.word	0x50000c00
 800b1d8:	40013400 	.word	0x40013400
 800b1dc:	50013400 	.word	0x50013400
 800b1e0:	40014000 	.word	0x40014000
 800b1e4:	50014000 	.word	0x50014000
 800b1e8:	40014400 	.word	0x40014400
 800b1ec:	50014400 	.word	0x50014400
 800b1f0:	40014800 	.word	0x40014800
 800b1f4:	50014800 	.word	0x50014800

0800b1f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6a1b      	ldr	r3, [r3, #32]
 800b208:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	f023 0201 	bic.w	r2, r3, #1
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 1N: Reset the CC1NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	4a26      	ldr	r2, [pc, #152]	@ (800b2b4 <TIM_TI1_ConfigInputStage+0xbc>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d023      	beq.n	800b266 <TIM_TI1_ConfigInputStage+0x6e>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	4a25      	ldr	r2, [pc, #148]	@ (800b2b8 <TIM_TI1_ConfigInputStage+0xc0>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d01f      	beq.n	800b266 <TIM_TI1_ConfigInputStage+0x6e>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	4a24      	ldr	r2, [pc, #144]	@ (800b2bc <TIM_TI1_ConfigInputStage+0xc4>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d01b      	beq.n	800b266 <TIM_TI1_ConfigInputStage+0x6e>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4a23      	ldr	r2, [pc, #140]	@ (800b2c0 <TIM_TI1_ConfigInputStage+0xc8>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d017      	beq.n	800b266 <TIM_TI1_ConfigInputStage+0x6e>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	4a22      	ldr	r2, [pc, #136]	@ (800b2c4 <TIM_TI1_ConfigInputStage+0xcc>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d013      	beq.n	800b266 <TIM_TI1_ConfigInputStage+0x6e>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	4a21      	ldr	r2, [pc, #132]	@ (800b2c8 <TIM_TI1_ConfigInputStage+0xd0>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00f      	beq.n	800b266 <TIM_TI1_ConfigInputStage+0x6e>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	4a20      	ldr	r2, [pc, #128]	@ (800b2cc <TIM_TI1_ConfigInputStage+0xd4>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d00b      	beq.n	800b266 <TIM_TI1_ConfigInputStage+0x6e>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4a1f      	ldr	r2, [pc, #124]	@ (800b2d0 <TIM_TI1_ConfigInputStage+0xd8>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d007      	beq.n	800b266 <TIM_TI1_ConfigInputStage+0x6e>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	4a1e      	ldr	r2, [pc, #120]	@ (800b2d4 <TIM_TI1_ConfigInputStage+0xdc>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d003      	beq.n	800b266 <TIM_TI1_ConfigInputStage+0x6e>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	4a1d      	ldr	r2, [pc, #116]	@ (800b2d8 <TIM_TI1_ConfigInputStage+0xe0>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d105      	bne.n	800b272 <TIM_TI1_ConfigInputStage+0x7a>
  {
    TIMx->CCER &= ~TIM_CCER_CC1NE;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	f023 0204 	bic.w	r2, r3, #4
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b27e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	011b      	lsls	r3, r3, #4
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	4313      	orrs	r3, r2
 800b288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f023 030a 	bic.w	r3, r3, #10
 800b290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	4313      	orrs	r3, r2
 800b298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	621a      	str	r2, [r3, #32]
}
 800b2a6:	bf00      	nop
 800b2a8:	371c      	adds	r7, #28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	40012c00 	.word	0x40012c00
 800b2b8:	50012c00 	.word	0x50012c00
 800b2bc:	40013400 	.word	0x40013400
 800b2c0:	50013400 	.word	0x50013400
 800b2c4:	40014000 	.word	0x40014000
 800b2c8:	50014000 	.word	0x50014000
 800b2cc:	40014400 	.word	0x40014400
 800b2d0:	50014400 	.word	0x50014400
 800b2d4:	40014800 	.word	0x40014800
 800b2d8:	50014800 	.word	0x50014800

0800b2dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b087      	sub	sp, #28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6a1b      	ldr	r3, [r3, #32]
 800b2ec:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	f023 0210 	bic.w	r2, r3, #16
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 2N: Reset the CC2NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b368 <TIM_TI2_ConfigInputStage+0x8c>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d00b      	beq.n	800b31a <TIM_TI2_ConfigInputStage+0x3e>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	4a19      	ldr	r2, [pc, #100]	@ (800b36c <TIM_TI2_ConfigInputStage+0x90>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d007      	beq.n	800b31a <TIM_TI2_ConfigInputStage+0x3e>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	4a18      	ldr	r2, [pc, #96]	@ (800b370 <TIM_TI2_ConfigInputStage+0x94>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d003      	beq.n	800b31a <TIM_TI2_ConfigInputStage+0x3e>
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	4a17      	ldr	r2, [pc, #92]	@ (800b374 <TIM_TI2_ConfigInputStage+0x98>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d105      	bne.n	800b326 <TIM_TI2_ConfigInputStage+0x4a>
  {
    TIMx->CCER &= ~TIM_CCER_CC2NE;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	031b      	lsls	r3, r3, #12
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b344:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	011b      	lsls	r3, r3, #4
 800b34a:	697a      	ldr	r2, [r7, #20]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	693a      	ldr	r2, [r7, #16]
 800b354:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	621a      	str	r2, [r3, #32]
}
 800b35c:	bf00      	nop
 800b35e:	371c      	adds	r7, #28
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	40012c00 	.word	0x40012c00
 800b36c:	50012c00 	.word	0x50012c00
 800b370:	40013400 	.word	0x40013400
 800b374:	50013400 	.word	0x50013400

0800b378 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b38e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b392:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	4313      	orrs	r3, r2
 800b39a:	f043 0307 	orr.w	r3, r3, #7
 800b39e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	609a      	str	r2, [r3, #8]
}
 800b3a6:	bf00      	nop
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b087      	sub	sp, #28
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	60f8      	str	r0, [r7, #12]
 800b3ba:	60b9      	str	r1, [r7, #8]
 800b3bc:	607a      	str	r2, [r7, #4]
 800b3be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	021a      	lsls	r2, r3, #8
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	697a      	ldr	r2, [r7, #20]
 800b3e4:	609a      	str	r2, [r3, #8]
}
 800b3e6:	bf00      	nop
 800b3e8:	371c      	adds	r7, #28
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
	...

0800b3f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b404:	2b01      	cmp	r3, #1
 800b406:	d101      	bne.n	800b40c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b408:	2302      	movs	r3, #2
 800b40a:	e097      	b.n	800b53c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2202      	movs	r2, #2
 800b418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a45      	ldr	r2, [pc, #276]	@ (800b548 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d00e      	beq.n	800b454 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a44      	ldr	r2, [pc, #272]	@ (800b54c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d009      	beq.n	800b454 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a42      	ldr	r2, [pc, #264]	@ (800b550 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d004      	beq.n	800b454 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a41      	ldr	r2, [pc, #260]	@ (800b554 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d108      	bne.n	800b466 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b45a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4313      	orrs	r3, r2
 800b464:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b46c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b470:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	4313      	orrs	r3, r2
 800b47a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a2f      	ldr	r2, [pc, #188]	@ (800b548 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d040      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a2e      	ldr	r2, [pc, #184]	@ (800b54c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d03b      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4a0:	d036      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4aa:	d031      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a29      	ldr	r2, [pc, #164]	@ (800b558 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d02c      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a28      	ldr	r2, [pc, #160]	@ (800b55c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d027      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a26      	ldr	r2, [pc, #152]	@ (800b560 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d022      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a25      	ldr	r2, [pc, #148]	@ (800b564 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d01d      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a23      	ldr	r2, [pc, #140]	@ (800b568 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d018      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a22      	ldr	r2, [pc, #136]	@ (800b56c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d013      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a18      	ldr	r2, [pc, #96]	@ (800b550 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d00e      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a17      	ldr	r2, [pc, #92]	@ (800b554 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d009      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a1b      	ldr	r2, [pc, #108]	@ (800b570 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d004      	beq.n	800b510 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a1a      	ldr	r2, [pc, #104]	@ (800b574 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d10c      	bne.n	800b52a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	4313      	orrs	r3, r2
 800b520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	40012c00 	.word	0x40012c00
 800b54c:	50012c00 	.word	0x50012c00
 800b550:	40013400 	.word	0x40013400
 800b554:	50013400 	.word	0x50013400
 800b558:	40000400 	.word	0x40000400
 800b55c:	50000400 	.word	0x50000400
 800b560:	40000800 	.word	0x40000800
 800b564:	50000800 	.word	0x50000800
 800b568:	40000c00 	.word	0x40000c00
 800b56c:	50000c00 	.word	0x50000c00
 800b570:	40014000 	.word	0x40014000
 800b574:	50014000 	.word	0x50014000

0800b578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e042      	b.n	800b610 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b590:	2b00      	cmp	r3, #0
 800b592:	d106      	bne.n	800b5a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7f8 f927 	bl	80037f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2224      	movs	r2, #36	@ 0x24
 800b5a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f022 0201 	bic.w	r2, r2, #1
 800b5b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 fa64 	bl	800ba90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f8b3 	bl	800b734 <UART_SetConfig>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d101      	bne.n	800b5d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e01b      	b.n	800b610 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b5e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	689a      	ldr	r2, [r3, #8]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b5f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f042 0201 	orr.w	r2, r2, #1
 800b606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 fae3 	bl	800bbd4 <UART_CheckIdleState>
 800b60e:	4603      	mov	r3, r0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08a      	sub	sp, #40	@ 0x28
 800b61c:	af02      	add	r7, sp, #8
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	603b      	str	r3, [r7, #0]
 800b624:	4613      	mov	r3, r2
 800b626:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b62e:	2b20      	cmp	r3, #32
 800b630:	d17b      	bne.n	800b72a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <HAL_UART_Transmit+0x26>
 800b638:	88fb      	ldrh	r3, [r7, #6]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e074      	b.n	800b72c <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2221      	movs	r2, #33	@ 0x21
 800b64e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b652:	f7f8 fc7f 	bl	8003f54 <HAL_GetTick>
 800b656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	88fa      	ldrh	r2, [r7, #6]
 800b65c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	88fa      	ldrh	r2, [r7, #6]
 800b664:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b670:	d108      	bne.n	800b684 <HAL_UART_Transmit+0x6c>
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d104      	bne.n	800b684 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	61bb      	str	r3, [r7, #24]
 800b682:	e003      	b.n	800b68c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b688:	2300      	movs	r3, #0
 800b68a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b68c:	e030      	b.n	800b6f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2200      	movs	r2, #0
 800b696:	2180      	movs	r1, #128	@ 0x80
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f000 fb45 	bl	800bd28 <UART_WaitOnFlagUntilTimeout>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d005      	beq.n	800b6b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e03d      	b.n	800b72c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10b      	bne.n	800b6ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	881b      	ldrh	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	3302      	adds	r3, #2
 800b6ca:	61bb      	str	r3, [r7, #24]
 800b6cc:	e007      	b.n	800b6de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	781a      	ldrb	r2, [r3, #0]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d1c8      	bne.n	800b68e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	2200      	movs	r2, #0
 800b704:	2140      	movs	r1, #64	@ 0x40
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f000 fb0e 	bl	800bd28 <UART_WaitOnFlagUntilTimeout>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d005      	beq.n	800b71e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2220      	movs	r2, #32
 800b716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	e006      	b.n	800b72c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2220      	movs	r2, #32
 800b722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	e000      	b.n	800b72c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b72a:	2302      	movs	r3, #2
  }
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3720      	adds	r7, #32
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b738:	b094      	sub	sp, #80	@ 0x50
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	4b83      	ldr	r3, [pc, #524]	@ (800b958 <UART_SetConfig+0x224>)
 800b74a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74e:	689a      	ldr	r2, [r3, #8]
 800b750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	431a      	orrs	r2, r3
 800b756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b758:	695b      	ldr	r3, [r3, #20]
 800b75a:	431a      	orrs	r2, r3
 800b75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	4313      	orrs	r3, r2
 800b762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	497c      	ldr	r1, [pc, #496]	@ (800b95c <UART_SetConfig+0x228>)
 800b76c:	4019      	ands	r1, r3
 800b76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b774:	430b      	orrs	r3, r1
 800b776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b784:	68d9      	ldr	r1, [r3, #12]
 800b786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	ea40 0301 	orr.w	r3, r0, r1
 800b78e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	4b6f      	ldr	r3, [pc, #444]	@ (800b958 <UART_SetConfig+0x224>)
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d009      	beq.n	800b7b4 <UART_SetConfig+0x80>
 800b7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	4b6e      	ldr	r3, [pc, #440]	@ (800b960 <UART_SetConfig+0x22c>)
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d004      	beq.n	800b7b4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ac:	6a1a      	ldr	r2, [r3, #32]
 800b7ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b7be:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7c8:	430b      	orrs	r3, r1
 800b7ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d2:	f023 000f 	bic.w	r0, r3, #15
 800b7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	ea40 0301 	orr.w	r3, r0, r1
 800b7e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	4b5e      	ldr	r3, [pc, #376]	@ (800b964 <UART_SetConfig+0x230>)
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d102      	bne.n	800b7f4 <UART_SetConfig+0xc0>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7f2:	e032      	b.n	800b85a <UART_SetConfig+0x126>
 800b7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	4b5b      	ldr	r3, [pc, #364]	@ (800b968 <UART_SetConfig+0x234>)
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d102      	bne.n	800b804 <UART_SetConfig+0xd0>
 800b7fe:	2302      	movs	r3, #2
 800b800:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b802:	e02a      	b.n	800b85a <UART_SetConfig+0x126>
 800b804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	4b58      	ldr	r3, [pc, #352]	@ (800b96c <UART_SetConfig+0x238>)
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d102      	bne.n	800b814 <UART_SetConfig+0xe0>
 800b80e:	2304      	movs	r3, #4
 800b810:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b812:	e022      	b.n	800b85a <UART_SetConfig+0x126>
 800b814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	4b55      	ldr	r3, [pc, #340]	@ (800b970 <UART_SetConfig+0x23c>)
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d102      	bne.n	800b824 <UART_SetConfig+0xf0>
 800b81e:	2308      	movs	r3, #8
 800b820:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b822:	e01a      	b.n	800b85a <UART_SetConfig+0x126>
 800b824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	4b52      	ldr	r3, [pc, #328]	@ (800b974 <UART_SetConfig+0x240>)
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d102      	bne.n	800b834 <UART_SetConfig+0x100>
 800b82e:	2310      	movs	r3, #16
 800b830:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b832:	e012      	b.n	800b85a <UART_SetConfig+0x126>
 800b834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	4b4f      	ldr	r3, [pc, #316]	@ (800b978 <UART_SetConfig+0x244>)
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d103      	bne.n	800b846 <UART_SetConfig+0x112>
 800b83e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800b842:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b844:	e009      	b.n	800b85a <UART_SetConfig+0x126>
 800b846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	4b43      	ldr	r3, [pc, #268]	@ (800b958 <UART_SetConfig+0x224>)
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d102      	bne.n	800b856 <UART_SetConfig+0x122>
 800b850:	2320      	movs	r3, #32
 800b852:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b854:	e001      	b.n	800b85a <UART_SetConfig+0x126>
 800b856:	2300      	movs	r3, #0
 800b858:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	4b3e      	ldr	r3, [pc, #248]	@ (800b958 <UART_SetConfig+0x224>)
 800b860:	429a      	cmp	r2, r3
 800b862:	d005      	beq.n	800b870 <UART_SetConfig+0x13c>
 800b864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	4b3d      	ldr	r3, [pc, #244]	@ (800b960 <UART_SetConfig+0x22c>)
 800b86a:	429a      	cmp	r2, r3
 800b86c:	f040 8088 	bne.w	800b980 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b872:	2200      	movs	r2, #0
 800b874:	623b      	str	r3, [r7, #32]
 800b876:	627a      	str	r2, [r7, #36]	@ 0x24
 800b878:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b87c:	f7fc fd84 	bl	8008388 <HAL_RCCEx_GetPeriphCLKFreq>
 800b880:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b884:	2b00      	cmp	r3, #0
 800b886:	f000 80eb 	beq.w	800ba60 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b88e:	4a3b      	ldr	r2, [pc, #236]	@ (800b97c <UART_SetConfig+0x248>)
 800b890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b894:	461a      	mov	r2, r3
 800b896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b898:	fbb3 f3f2 	udiv	r3, r3, r2
 800b89c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a0:	685a      	ldr	r2, [r3, #4]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	005b      	lsls	r3, r3, #1
 800b8a6:	4413      	add	r3, r2
 800b8a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d305      	bcc.n	800b8ba <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d903      	bls.n	800b8c2 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b8c0:	e048      	b.n	800b954 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	61bb      	str	r3, [r7, #24]
 800b8c8:	61fa      	str	r2, [r7, #28]
 800b8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ce:	4a2b      	ldr	r2, [pc, #172]	@ (800b97c <UART_SetConfig+0x248>)
 800b8d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	613b      	str	r3, [r7, #16]
 800b8da:	617a      	str	r2, [r7, #20]
 800b8dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b8e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b8e4:	f7f5 f9e0 	bl	8000ca8 <__aeabi_uldivmod>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	f04f 0200 	mov.w	r2, #0
 800b8f4:	f04f 0300 	mov.w	r3, #0
 800b8f8:	020b      	lsls	r3, r1, #8
 800b8fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b8fe:	0202      	lsls	r2, r0, #8
 800b900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b902:	6849      	ldr	r1, [r1, #4]
 800b904:	0849      	lsrs	r1, r1, #1
 800b906:	2000      	movs	r0, #0
 800b908:	460c      	mov	r4, r1
 800b90a:	4605      	mov	r5, r0
 800b90c:	eb12 0804 	adds.w	r8, r2, r4
 800b910:	eb43 0905 	adc.w	r9, r3, r5
 800b914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	60bb      	str	r3, [r7, #8]
 800b91c:	60fa      	str	r2, [r7, #12]
 800b91e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b922:	4640      	mov	r0, r8
 800b924:	4649      	mov	r1, r9
 800b926:	f7f5 f9bf 	bl	8000ca8 <__aeabi_uldivmod>
 800b92a:	4602      	mov	r2, r0
 800b92c:	460b      	mov	r3, r1
 800b92e:	4613      	mov	r3, r2
 800b930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b934:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b938:	d308      	bcc.n	800b94c <UART_SetConfig+0x218>
 800b93a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b93c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b940:	d204      	bcs.n	800b94c <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800b942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b948:	60da      	str	r2, [r3, #12]
 800b94a:	e003      	b.n	800b954 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b952:	e085      	b.n	800ba60 <UART_SetConfig+0x32c>
 800b954:	e084      	b.n	800ba60 <UART_SetConfig+0x32c>
 800b956:	bf00      	nop
 800b958:	46002400 	.word	0x46002400
 800b95c:	cfff69f3 	.word	0xcfff69f3
 800b960:	56002400 	.word	0x56002400
 800b964:	40013800 	.word	0x40013800
 800b968:	40004400 	.word	0x40004400
 800b96c:	40004800 	.word	0x40004800
 800b970:	40004c00 	.word	0x40004c00
 800b974:	40005000 	.word	0x40005000
 800b978:	40006400 	.word	0x40006400
 800b97c:	08010dac 	.word	0x08010dac
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b982:	69db      	ldr	r3, [r3, #28]
 800b984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b988:	d13c      	bne.n	800ba04 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b98a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b98c:	2200      	movs	r2, #0
 800b98e:	603b      	str	r3, [r7, #0]
 800b990:	607a      	str	r2, [r7, #4]
 800b992:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b996:	f7fc fcf7 	bl	8008388 <HAL_RCCEx_GetPeriphCLKFreq>
 800b99a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b99c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d05e      	beq.n	800ba60 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a6:	4a39      	ldr	r2, [pc, #228]	@ (800ba8c <UART_SetConfig+0x358>)
 800b9a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9b4:	005a      	lsls	r2, r3, #1
 800b9b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	085b      	lsrs	r3, r3, #1
 800b9bc:	441a      	add	r2, r3
 800b9be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ca:	2b0f      	cmp	r3, #15
 800b9cc:	d916      	bls.n	800b9fc <UART_SetConfig+0x2c8>
 800b9ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9d4:	d212      	bcs.n	800b9fc <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	f023 030f 	bic.w	r3, r3, #15
 800b9de:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9e2:	085b      	lsrs	r3, r3, #1
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	f003 0307 	and.w	r3, r3, #7
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b9f8:	60da      	str	r2, [r3, #12]
 800b9fa:	e031      	b.n	800ba60 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ba02:	e02d      	b.n	800ba60 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ba04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba06:	2200      	movs	r2, #0
 800ba08:	469a      	mov	sl, r3
 800ba0a:	4693      	mov	fp, r2
 800ba0c:	4650      	mov	r0, sl
 800ba0e:	4659      	mov	r1, fp
 800ba10:	f7fc fcba 	bl	8008388 <HAL_RCCEx_GetPeriphCLKFreq>
 800ba14:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ba16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d021      	beq.n	800ba60 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba20:	4a1a      	ldr	r2, [pc, #104]	@ (800ba8c <UART_SetConfig+0x358>)
 800ba22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba26:	461a      	mov	r2, r3
 800ba28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	085b      	lsrs	r3, r3, #1
 800ba34:	441a      	add	r2, r3
 800ba36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba42:	2b0f      	cmp	r3, #15
 800ba44:	d909      	bls.n	800ba5a <UART_SetConfig+0x326>
 800ba46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba4c:	d205      	bcs.n	800ba5a <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	60da      	str	r2, [r3, #12]
 800ba58:	e002      	b.n	800ba60 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba62:	2201      	movs	r2, #1
 800ba64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ba68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba72:	2200      	movs	r2, #0
 800ba74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ba76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba78:	2200      	movs	r2, #0
 800ba7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ba7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3750      	adds	r7, #80	@ 0x50
 800ba84:	46bd      	mov	sp, r7
 800ba86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba8a:	bf00      	nop
 800ba8c:	08010dac 	.word	0x08010dac

0800ba90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba9c:	f003 0308 	and.w	r3, r3, #8
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00a      	beq.n	800baba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	430a      	orrs	r2, r1
 800bab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00a      	beq.n	800badc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	430a      	orrs	r2, r1
 800bada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae0:	f003 0302 	and.w	r3, r3, #2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00a      	beq.n	800bafe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	430a      	orrs	r2, r1
 800bafc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb02:	f003 0304 	and.w	r3, r3, #4
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00a      	beq.n	800bb20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	430a      	orrs	r2, r1
 800bb1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb24:	f003 0310 	and.w	r3, r3, #16
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00a      	beq.n	800bb42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	430a      	orrs	r2, r1
 800bb40:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb46:	f003 0320 	and.w	r3, r3, #32
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00a      	beq.n	800bb64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	430a      	orrs	r2, r1
 800bb62:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d01a      	beq.n	800bba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	430a      	orrs	r2, r1
 800bb84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb8e:	d10a      	bne.n	800bba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	430a      	orrs	r2, r1
 800bba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00a      	beq.n	800bbc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	430a      	orrs	r2, r1
 800bbc6:	605a      	str	r2, [r3, #4]
  }
}
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b098      	sub	sp, #96	@ 0x60
 800bbd8:	af02      	add	r7, sp, #8
 800bbda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbe4:	f7f8 f9b6 	bl	8003f54 <HAL_GetTick>
 800bbe8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 0308 	and.w	r3, r3, #8
 800bbf4:	2b08      	cmp	r3, #8
 800bbf6:	d12f      	bne.n	800bc58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc00:	2200      	movs	r2, #0
 800bc02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f88e 	bl	800bd28 <UART_WaitOnFlagUntilTimeout>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d022      	beq.n	800bc58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1a:	e853 3f00 	ldrex	r3, [r3]
 800bc1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc26:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc30:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc38:	e841 2300 	strex	r3, r2, [r1]
 800bc3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1e6      	bne.n	800bc12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2220      	movs	r2, #32
 800bc48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e063      	b.n	800bd20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 0304 	and.w	r3, r3, #4
 800bc62:	2b04      	cmp	r3, #4
 800bc64:	d149      	bne.n	800bcfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f857 	bl	800bd28 <UART_WaitOnFlagUntilTimeout>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d03c      	beq.n	800bcfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc88:	e853 3f00 	ldrex	r3, [r3]
 800bc8c:	623b      	str	r3, [r7, #32]
   return(result);
 800bc8e:	6a3b      	ldr	r3, [r7, #32]
 800bc90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc9e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bca6:	e841 2300 	strex	r3, r2, [r1]
 800bcaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bcac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1e6      	bne.n	800bc80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	e853 3f00 	ldrex	r3, [r3]
 800bcc0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f023 0301 	bic.w	r3, r3, #1
 800bcc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3308      	adds	r3, #8
 800bcd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcd2:	61fa      	str	r2, [r7, #28]
 800bcd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	69b9      	ldr	r1, [r7, #24]
 800bcd8:	69fa      	ldr	r2, [r7, #28]
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	617b      	str	r3, [r7, #20]
   return(result);
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e5      	bne.n	800bcb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2220      	movs	r2, #32
 800bcea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e012      	b.n	800bd20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2220      	movs	r2, #32
 800bcfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2220      	movs	r2, #32
 800bd06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2200      	movs	r2, #0
 800bd14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3758      	adds	r7, #88	@ 0x58
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	603b      	str	r3, [r7, #0]
 800bd34:	4613      	mov	r3, r2
 800bd36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd38:	e04f      	b.n	800bdda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd40:	d04b      	beq.n	800bdda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd42:	f7f8 f907 	bl	8003f54 <HAL_GetTick>
 800bd46:	4602      	mov	r2, r0
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d302      	bcc.n	800bd58 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	e04e      	b.n	800bdfa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 0304 	and.w	r3, r3, #4
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d037      	beq.n	800bdda <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2b80      	cmp	r3, #128	@ 0x80
 800bd6e:	d034      	beq.n	800bdda <UART_WaitOnFlagUntilTimeout+0xb2>
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b40      	cmp	r3, #64	@ 0x40
 800bd74:	d031      	beq.n	800bdda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	69db      	ldr	r3, [r3, #28]
 800bd7c:	f003 0308 	and.w	r3, r3, #8
 800bd80:	2b08      	cmp	r3, #8
 800bd82:	d110      	bne.n	800bda6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2208      	movs	r2, #8
 800bd8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f000 f838 	bl	800be02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2208      	movs	r2, #8
 800bd96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e029      	b.n	800bdfa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	69db      	ldr	r3, [r3, #28]
 800bdac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bdb4:	d111      	bne.n	800bdda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bdbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f000 f81e 	bl	800be02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2220      	movs	r2, #32
 800bdca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	e00f      	b.n	800bdfa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	69da      	ldr	r2, [r3, #28]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	4013      	ands	r3, r2
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	bf0c      	ite	eq
 800bdea:	2301      	moveq	r3, #1
 800bdec:	2300      	movne	r3, #0
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d0a0      	beq.n	800bd3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be02:	b480      	push	{r7}
 800be04:	b095      	sub	sp, #84	@ 0x54
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be12:	e853 3f00 	ldrex	r3, [r3]
 800be16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	461a      	mov	r2, r3
 800be26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be28:	643b      	str	r3, [r7, #64]	@ 0x40
 800be2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be30:	e841 2300 	strex	r3, r2, [r1]
 800be34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1e6      	bne.n	800be0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3308      	adds	r3, #8
 800be42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be44:	6a3b      	ldr	r3, [r7, #32]
 800be46:	e853 3f00 	ldrex	r3, [r3]
 800be4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be52:	f023 0301 	bic.w	r3, r3, #1
 800be56:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3308      	adds	r3, #8
 800be5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be68:	e841 2300 	strex	r3, r2, [r1]
 800be6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e3      	bne.n	800be3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d118      	bne.n	800beae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	e853 3f00 	ldrex	r3, [r3]
 800be88:	60bb      	str	r3, [r7, #8]
   return(result);
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	f023 0310 	bic.w	r3, r3, #16
 800be90:	647b      	str	r3, [r7, #68]	@ 0x44
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be9a:	61bb      	str	r3, [r7, #24]
 800be9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9e:	6979      	ldr	r1, [r7, #20]
 800bea0:	69ba      	ldr	r2, [r7, #24]
 800bea2:	e841 2300 	strex	r3, r2, [r1]
 800bea6:	613b      	str	r3, [r7, #16]
   return(result);
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1e6      	bne.n	800be7c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2220      	movs	r2, #32
 800beb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bec2:	bf00      	nop
 800bec4:	3754      	adds	r7, #84	@ 0x54
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bece:	b480      	push	{r7}
 800bed0:	b085      	sub	sp, #20
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d101      	bne.n	800bee4 <HAL_UARTEx_DisableFifoMode+0x16>
 800bee0:	2302      	movs	r3, #2
 800bee2:	e027      	b.n	800bf34 <HAL_UARTEx_DisableFifoMode+0x66>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2224      	movs	r2, #36	@ 0x24
 800bef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f022 0201 	bic.w	r2, r2, #1
 800bf0a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bf12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d101      	bne.n	800bf58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf54:	2302      	movs	r3, #2
 800bf56:	e02d      	b.n	800bfb4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2224      	movs	r2, #36	@ 0x24
 800bf64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f022 0201 	bic.w	r2, r2, #1
 800bf7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	430a      	orrs	r2, r1
 800bf92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 f84f 	bl	800c038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d101      	bne.n	800bfd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	e02d      	b.n	800c030 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2224      	movs	r2, #36	@ 0x24
 800bfe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f022 0201 	bic.w	r2, r2, #1
 800bffa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	430a      	orrs	r2, r1
 800c00e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f811 	bl	800c038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2220      	movs	r2, #32
 800c022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c044:	2b00      	cmp	r3, #0
 800c046:	d108      	bne.n	800c05a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c058:	e031      	b.n	800c0be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c05a:	2308      	movs	r3, #8
 800c05c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c05e:	2308      	movs	r3, #8
 800c060:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	0e5b      	lsrs	r3, r3, #25
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	f003 0307 	and.w	r3, r3, #7
 800c070:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	0f5b      	lsrs	r3, r3, #29
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	f003 0307 	and.w	r3, r3, #7
 800c080:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	7b3a      	ldrb	r2, [r7, #12]
 800c086:	4911      	ldr	r1, [pc, #68]	@ (800c0cc <UARTEx_SetNbDataToProcess+0x94>)
 800c088:	5c8a      	ldrb	r2, [r1, r2]
 800c08a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c08e:	7b3a      	ldrb	r2, [r7, #12]
 800c090:	490f      	ldr	r1, [pc, #60]	@ (800c0d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c092:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c094:	fb93 f3f2 	sdiv	r3, r3, r2
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
 800c0a2:	7b7a      	ldrb	r2, [r7, #13]
 800c0a4:	4909      	ldr	r1, [pc, #36]	@ (800c0cc <UARTEx_SetNbDataToProcess+0x94>)
 800c0a6:	5c8a      	ldrb	r2, [r1, r2]
 800c0a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c0ac:	7b7a      	ldrb	r2, [r7, #13]
 800c0ae:	4908      	ldr	r1, [pc, #32]	@ (800c0d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c0b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c0be:	bf00      	nop
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	08010dc4 	.word	0x08010dc4
 800c0d0:	08010dcc 	.word	0x08010dcc

0800c0d4 <__cvt>:
 800c0d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d8:	ec57 6b10 	vmov	r6, r7, d0
 800c0dc:	2f00      	cmp	r7, #0
 800c0de:	460c      	mov	r4, r1
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	463b      	mov	r3, r7
 800c0e4:	bfb4      	ite	lt
 800c0e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c0ea:	2300      	movge	r3, #0
 800c0ec:	4691      	mov	r9, r2
 800c0ee:	bfbf      	itttt	lt
 800c0f0:	4632      	movlt	r2, r6
 800c0f2:	461f      	movlt	r7, r3
 800c0f4:	232d      	movlt	r3, #45	@ 0x2d
 800c0f6:	4616      	movlt	r6, r2
 800c0f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c0fc:	700b      	strb	r3, [r1, #0]
 800c0fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c100:	f023 0820 	bic.w	r8, r3, #32
 800c104:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c108:	d005      	beq.n	800c116 <__cvt+0x42>
 800c10a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c10e:	d100      	bne.n	800c112 <__cvt+0x3e>
 800c110:	3401      	adds	r4, #1
 800c112:	2102      	movs	r1, #2
 800c114:	e000      	b.n	800c118 <__cvt+0x44>
 800c116:	2103      	movs	r1, #3
 800c118:	ab03      	add	r3, sp, #12
 800c11a:	4622      	mov	r2, r4
 800c11c:	9301      	str	r3, [sp, #4]
 800c11e:	ab02      	add	r3, sp, #8
 800c120:	ec47 6b10 	vmov	d0, r6, r7
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	4653      	mov	r3, sl
 800c128:	f001 fede 	bl	800dee8 <_dtoa_r>
 800c12c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c130:	4605      	mov	r5, r0
 800c132:	d119      	bne.n	800c168 <__cvt+0x94>
 800c134:	f019 0f01 	tst.w	r9, #1
 800c138:	d00e      	beq.n	800c158 <__cvt+0x84>
 800c13a:	eb00 0904 	add.w	r9, r0, r4
 800c13e:	2200      	movs	r2, #0
 800c140:	2300      	movs	r3, #0
 800c142:	4630      	mov	r0, r6
 800c144:	4639      	mov	r1, r7
 800c146:	f7f4 fccf 	bl	8000ae8 <__aeabi_dcmpeq>
 800c14a:	b108      	cbz	r0, 800c150 <__cvt+0x7c>
 800c14c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c150:	2230      	movs	r2, #48	@ 0x30
 800c152:	9b03      	ldr	r3, [sp, #12]
 800c154:	454b      	cmp	r3, r9
 800c156:	d31e      	bcc.n	800c196 <__cvt+0xc2>
 800c158:	9b03      	ldr	r3, [sp, #12]
 800c15a:	4628      	mov	r0, r5
 800c15c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c15e:	1b5b      	subs	r3, r3, r5
 800c160:	6013      	str	r3, [r2, #0]
 800c162:	b004      	add	sp, #16
 800c164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c168:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c16c:	eb00 0904 	add.w	r9, r0, r4
 800c170:	d1e5      	bne.n	800c13e <__cvt+0x6a>
 800c172:	7803      	ldrb	r3, [r0, #0]
 800c174:	2b30      	cmp	r3, #48	@ 0x30
 800c176:	d10a      	bne.n	800c18e <__cvt+0xba>
 800c178:	2200      	movs	r2, #0
 800c17a:	2300      	movs	r3, #0
 800c17c:	4630      	mov	r0, r6
 800c17e:	4639      	mov	r1, r7
 800c180:	f7f4 fcb2 	bl	8000ae8 <__aeabi_dcmpeq>
 800c184:	b918      	cbnz	r0, 800c18e <__cvt+0xba>
 800c186:	f1c4 0401 	rsb	r4, r4, #1
 800c18a:	f8ca 4000 	str.w	r4, [sl]
 800c18e:	f8da 3000 	ldr.w	r3, [sl]
 800c192:	4499      	add	r9, r3
 800c194:	e7d3      	b.n	800c13e <__cvt+0x6a>
 800c196:	1c59      	adds	r1, r3, #1
 800c198:	9103      	str	r1, [sp, #12]
 800c19a:	701a      	strb	r2, [r3, #0]
 800c19c:	e7d9      	b.n	800c152 <__cvt+0x7e>

0800c19e <__exponent>:
 800c19e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1a0:	2900      	cmp	r1, #0
 800c1a2:	7002      	strb	r2, [r0, #0]
 800c1a4:	bfba      	itte	lt
 800c1a6:	4249      	neglt	r1, r1
 800c1a8:	232d      	movlt	r3, #45	@ 0x2d
 800c1aa:	232b      	movge	r3, #43	@ 0x2b
 800c1ac:	2909      	cmp	r1, #9
 800c1ae:	7043      	strb	r3, [r0, #1]
 800c1b0:	dd28      	ble.n	800c204 <__exponent+0x66>
 800c1b2:	f10d 0307 	add.w	r3, sp, #7
 800c1b6:	270a      	movs	r7, #10
 800c1b8:	461d      	mov	r5, r3
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	fbb1 f6f7 	udiv	r6, r1, r7
 800c1c2:	fb07 1416 	mls	r4, r7, r6, r1
 800c1c6:	3430      	adds	r4, #48	@ 0x30
 800c1c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	4631      	mov	r1, r6
 800c1d0:	2c63      	cmp	r4, #99	@ 0x63
 800c1d2:	dcf2      	bgt.n	800c1ba <__exponent+0x1c>
 800c1d4:	3130      	adds	r1, #48	@ 0x30
 800c1d6:	1e94      	subs	r4, r2, #2
 800c1d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c1dc:	1c41      	adds	r1, r0, #1
 800c1de:	4623      	mov	r3, r4
 800c1e0:	42ab      	cmp	r3, r5
 800c1e2:	d30a      	bcc.n	800c1fa <__exponent+0x5c>
 800c1e4:	f10d 0309 	add.w	r3, sp, #9
 800c1e8:	1a9b      	subs	r3, r3, r2
 800c1ea:	42ac      	cmp	r4, r5
 800c1ec:	bf88      	it	hi
 800c1ee:	2300      	movhi	r3, #0
 800c1f0:	3302      	adds	r3, #2
 800c1f2:	4403      	add	r3, r0
 800c1f4:	1a18      	subs	r0, r3, r0
 800c1f6:	b003      	add	sp, #12
 800c1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c1fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c202:	e7ed      	b.n	800c1e0 <__exponent+0x42>
 800c204:	2330      	movs	r3, #48	@ 0x30
 800c206:	3130      	adds	r1, #48	@ 0x30
 800c208:	7083      	strb	r3, [r0, #2]
 800c20a:	1d03      	adds	r3, r0, #4
 800c20c:	70c1      	strb	r1, [r0, #3]
 800c20e:	e7f1      	b.n	800c1f4 <__exponent+0x56>

0800c210 <_printf_float>:
 800c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	b08d      	sub	sp, #52	@ 0x34
 800c216:	460c      	mov	r4, r1
 800c218:	4616      	mov	r6, r2
 800c21a:	461f      	mov	r7, r3
 800c21c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c220:	4605      	mov	r5, r0
 800c222:	f001 fda5 	bl	800dd70 <_localeconv_r>
 800c226:	6803      	ldr	r3, [r0, #0]
 800c228:	4618      	mov	r0, r3
 800c22a:	9304      	str	r3, [sp, #16]
 800c22c:	f7f4 f830 	bl	8000290 <strlen>
 800c230:	2300      	movs	r3, #0
 800c232:	9005      	str	r0, [sp, #20]
 800c234:	930a      	str	r3, [sp, #40]	@ 0x28
 800c236:	f8d8 3000 	ldr.w	r3, [r8]
 800c23a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c23e:	3307      	adds	r3, #7
 800c240:	f8d4 b000 	ldr.w	fp, [r4]
 800c244:	f023 0307 	bic.w	r3, r3, #7
 800c248:	f103 0208 	add.w	r2, r3, #8
 800c24c:	f8c8 2000 	str.w	r2, [r8]
 800c250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c254:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c258:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c25c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c260:	9307      	str	r3, [sp, #28]
 800c262:	4b9d      	ldr	r3, [pc, #628]	@ (800c4d8 <_printf_float+0x2c8>)
 800c264:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c268:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c26c:	f7f4 fc6e 	bl	8000b4c <__aeabi_dcmpun>
 800c270:	bb70      	cbnz	r0, 800c2d0 <_printf_float+0xc0>
 800c272:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c276:	4b98      	ldr	r3, [pc, #608]	@ (800c4d8 <_printf_float+0x2c8>)
 800c278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c27c:	f7f4 fc48 	bl	8000b10 <__aeabi_dcmple>
 800c280:	bb30      	cbnz	r0, 800c2d0 <_printf_float+0xc0>
 800c282:	2200      	movs	r2, #0
 800c284:	2300      	movs	r3, #0
 800c286:	4640      	mov	r0, r8
 800c288:	4649      	mov	r1, r9
 800c28a:	f7f4 fc37 	bl	8000afc <__aeabi_dcmplt>
 800c28e:	b110      	cbz	r0, 800c296 <_printf_float+0x86>
 800c290:	232d      	movs	r3, #45	@ 0x2d
 800c292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c296:	4a91      	ldr	r2, [pc, #580]	@ (800c4dc <_printf_float+0x2cc>)
 800c298:	4b91      	ldr	r3, [pc, #580]	@ (800c4e0 <_printf_float+0x2d0>)
 800c29a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c29e:	bf8c      	ite	hi
 800c2a0:	4690      	movhi	r8, r2
 800c2a2:	4698      	movls	r8, r3
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	f04f 0900 	mov.w	r9, #0
 800c2aa:	6123      	str	r3, [r4, #16]
 800c2ac:	f02b 0304 	bic.w	r3, fp, #4
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	4633      	mov	r3, r6
 800c2b4:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	9700      	str	r7, [sp, #0]
 800c2bc:	f000 f9d2 	bl	800c664 <_printf_common>
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	f040 808d 	bne.w	800c3e0 <_printf_float+0x1d0>
 800c2c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2ca:	b00d      	add	sp, #52	@ 0x34
 800c2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d0:	4642      	mov	r2, r8
 800c2d2:	464b      	mov	r3, r9
 800c2d4:	4640      	mov	r0, r8
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	f7f4 fc38 	bl	8000b4c <__aeabi_dcmpun>
 800c2dc:	b140      	cbz	r0, 800c2f0 <_printf_float+0xe0>
 800c2de:	464b      	mov	r3, r9
 800c2e0:	4a80      	ldr	r2, [pc, #512]	@ (800c4e4 <_printf_float+0x2d4>)
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	bfbc      	itt	lt
 800c2e6:	232d      	movlt	r3, #45	@ 0x2d
 800c2e8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c2ec:	4b7e      	ldr	r3, [pc, #504]	@ (800c4e8 <_printf_float+0x2d8>)
 800c2ee:	e7d4      	b.n	800c29a <_printf_float+0x8a>
 800c2f0:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c2f4:	6863      	ldr	r3, [r4, #4]
 800c2f6:	9206      	str	r2, [sp, #24]
 800c2f8:	1c5a      	adds	r2, r3, #1
 800c2fa:	d13b      	bne.n	800c374 <_printf_float+0x164>
 800c2fc:	2306      	movs	r3, #6
 800c2fe:	6063      	str	r3, [r4, #4]
 800c300:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c304:	2300      	movs	r3, #0
 800c306:	4628      	mov	r0, r5
 800c308:	6022      	str	r2, [r4, #0]
 800c30a:	9303      	str	r3, [sp, #12]
 800c30c:	ab0a      	add	r3, sp, #40	@ 0x28
 800c30e:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c312:	ab09      	add	r3, sp, #36	@ 0x24
 800c314:	ec49 8b10 	vmov	d0, r8, r9
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c31e:	6861      	ldr	r1, [r4, #4]
 800c320:	f7ff fed8 	bl	800c0d4 <__cvt>
 800c324:	9b06      	ldr	r3, [sp, #24]
 800c326:	4680      	mov	r8, r0
 800c328:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c32a:	2b47      	cmp	r3, #71	@ 0x47
 800c32c:	d129      	bne.n	800c382 <_printf_float+0x172>
 800c32e:	1cc8      	adds	r0, r1, #3
 800c330:	db02      	blt.n	800c338 <_printf_float+0x128>
 800c332:	6863      	ldr	r3, [r4, #4]
 800c334:	4299      	cmp	r1, r3
 800c336:	dd41      	ble.n	800c3bc <_printf_float+0x1ac>
 800c338:	f1aa 0a02 	sub.w	sl, sl, #2
 800c33c:	fa5f fa8a 	uxtb.w	sl, sl
 800c340:	3901      	subs	r1, #1
 800c342:	4652      	mov	r2, sl
 800c344:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c348:	9109      	str	r1, [sp, #36]	@ 0x24
 800c34a:	f7ff ff28 	bl	800c19e <__exponent>
 800c34e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c350:	4681      	mov	r9, r0
 800c352:	1813      	adds	r3, r2, r0
 800c354:	2a01      	cmp	r2, #1
 800c356:	6123      	str	r3, [r4, #16]
 800c358:	dc02      	bgt.n	800c360 <_printf_float+0x150>
 800c35a:	6822      	ldr	r2, [r4, #0]
 800c35c:	07d2      	lsls	r2, r2, #31
 800c35e:	d501      	bpl.n	800c364 <_printf_float+0x154>
 800c360:	3301      	adds	r3, #1
 800c362:	6123      	str	r3, [r4, #16]
 800c364:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d0a2      	beq.n	800c2b2 <_printf_float+0xa2>
 800c36c:	232d      	movs	r3, #45	@ 0x2d
 800c36e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c372:	e79e      	b.n	800c2b2 <_printf_float+0xa2>
 800c374:	9a06      	ldr	r2, [sp, #24]
 800c376:	2a47      	cmp	r2, #71	@ 0x47
 800c378:	d1c2      	bne.n	800c300 <_printf_float+0xf0>
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1c0      	bne.n	800c300 <_printf_float+0xf0>
 800c37e:	2301      	movs	r3, #1
 800c380:	e7bd      	b.n	800c2fe <_printf_float+0xee>
 800c382:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c386:	d9db      	bls.n	800c340 <_printf_float+0x130>
 800c388:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c38c:	d118      	bne.n	800c3c0 <_printf_float+0x1b0>
 800c38e:	2900      	cmp	r1, #0
 800c390:	6863      	ldr	r3, [r4, #4]
 800c392:	dd0b      	ble.n	800c3ac <_printf_float+0x19c>
 800c394:	6121      	str	r1, [r4, #16]
 800c396:	b913      	cbnz	r3, 800c39e <_printf_float+0x18e>
 800c398:	6822      	ldr	r2, [r4, #0]
 800c39a:	07d0      	lsls	r0, r2, #31
 800c39c:	d502      	bpl.n	800c3a4 <_printf_float+0x194>
 800c39e:	3301      	adds	r3, #1
 800c3a0:	440b      	add	r3, r1
 800c3a2:	6123      	str	r3, [r4, #16]
 800c3a4:	f04f 0900 	mov.w	r9, #0
 800c3a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c3aa:	e7db      	b.n	800c364 <_printf_float+0x154>
 800c3ac:	b913      	cbnz	r3, 800c3b4 <_printf_float+0x1a4>
 800c3ae:	6822      	ldr	r2, [r4, #0]
 800c3b0:	07d2      	lsls	r2, r2, #31
 800c3b2:	d501      	bpl.n	800c3b8 <_printf_float+0x1a8>
 800c3b4:	3302      	adds	r3, #2
 800c3b6:	e7f4      	b.n	800c3a2 <_printf_float+0x192>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e7f2      	b.n	800c3a2 <_printf_float+0x192>
 800c3bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c3c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3c2:	4299      	cmp	r1, r3
 800c3c4:	db05      	blt.n	800c3d2 <_printf_float+0x1c2>
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	6121      	str	r1, [r4, #16]
 800c3ca:	07d8      	lsls	r0, r3, #31
 800c3cc:	d5ea      	bpl.n	800c3a4 <_printf_float+0x194>
 800c3ce:	1c4b      	adds	r3, r1, #1
 800c3d0:	e7e7      	b.n	800c3a2 <_printf_float+0x192>
 800c3d2:	2900      	cmp	r1, #0
 800c3d4:	bfd4      	ite	le
 800c3d6:	f1c1 0202 	rsble	r2, r1, #2
 800c3da:	2201      	movgt	r2, #1
 800c3dc:	4413      	add	r3, r2
 800c3de:	e7e0      	b.n	800c3a2 <_printf_float+0x192>
 800c3e0:	6823      	ldr	r3, [r4, #0]
 800c3e2:	055a      	lsls	r2, r3, #21
 800c3e4:	d407      	bmi.n	800c3f6 <_printf_float+0x1e6>
 800c3e6:	6923      	ldr	r3, [r4, #16]
 800c3e8:	4642      	mov	r2, r8
 800c3ea:	4631      	mov	r1, r6
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	47b8      	blx	r7
 800c3f0:	3001      	adds	r0, #1
 800c3f2:	d12b      	bne.n	800c44c <_printf_float+0x23c>
 800c3f4:	e767      	b.n	800c2c6 <_printf_float+0xb6>
 800c3f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c3fa:	f240 80dd 	bls.w	800c5b8 <_printf_float+0x3a8>
 800c3fe:	2200      	movs	r2, #0
 800c400:	2300      	movs	r3, #0
 800c402:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c406:	f7f4 fb6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d033      	beq.n	800c476 <_printf_float+0x266>
 800c40e:	2301      	movs	r3, #1
 800c410:	4a36      	ldr	r2, [pc, #216]	@ (800c4ec <_printf_float+0x2dc>)
 800c412:	4631      	mov	r1, r6
 800c414:	4628      	mov	r0, r5
 800c416:	47b8      	blx	r7
 800c418:	3001      	adds	r0, #1
 800c41a:	f43f af54 	beq.w	800c2c6 <_printf_float+0xb6>
 800c41e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c422:	4543      	cmp	r3, r8
 800c424:	db02      	blt.n	800c42c <_printf_float+0x21c>
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	07d8      	lsls	r0, r3, #31
 800c42a:	d50f      	bpl.n	800c44c <_printf_float+0x23c>
 800c42c:	4631      	mov	r1, r6
 800c42e:	4628      	mov	r0, r5
 800c430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c434:	47b8      	blx	r7
 800c436:	3001      	adds	r0, #1
 800c438:	f43f af45 	beq.w	800c2c6 <_printf_float+0xb6>
 800c43c:	f04f 0900 	mov.w	r9, #0
 800c440:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c444:	f104 0a1a 	add.w	sl, r4, #26
 800c448:	45c8      	cmp	r8, r9
 800c44a:	dc09      	bgt.n	800c460 <_printf_float+0x250>
 800c44c:	6823      	ldr	r3, [r4, #0]
 800c44e:	079b      	lsls	r3, r3, #30
 800c450:	f100 8103 	bmi.w	800c65a <_printf_float+0x44a>
 800c454:	68e0      	ldr	r0, [r4, #12]
 800c456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c458:	4298      	cmp	r0, r3
 800c45a:	bfb8      	it	lt
 800c45c:	4618      	movlt	r0, r3
 800c45e:	e734      	b.n	800c2ca <_printf_float+0xba>
 800c460:	2301      	movs	r3, #1
 800c462:	4652      	mov	r2, sl
 800c464:	4631      	mov	r1, r6
 800c466:	4628      	mov	r0, r5
 800c468:	47b8      	blx	r7
 800c46a:	3001      	adds	r0, #1
 800c46c:	f43f af2b 	beq.w	800c2c6 <_printf_float+0xb6>
 800c470:	f109 0901 	add.w	r9, r9, #1
 800c474:	e7e8      	b.n	800c448 <_printf_float+0x238>
 800c476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c478:	2b00      	cmp	r3, #0
 800c47a:	dc39      	bgt.n	800c4f0 <_printf_float+0x2e0>
 800c47c:	2301      	movs	r3, #1
 800c47e:	4a1b      	ldr	r2, [pc, #108]	@ (800c4ec <_printf_float+0x2dc>)
 800c480:	4631      	mov	r1, r6
 800c482:	4628      	mov	r0, r5
 800c484:	47b8      	blx	r7
 800c486:	3001      	adds	r0, #1
 800c488:	f43f af1d 	beq.w	800c2c6 <_printf_float+0xb6>
 800c48c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c490:	ea59 0303 	orrs.w	r3, r9, r3
 800c494:	d102      	bne.n	800c49c <_printf_float+0x28c>
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	07d9      	lsls	r1, r3, #31
 800c49a:	d5d7      	bpl.n	800c44c <_printf_float+0x23c>
 800c49c:	4631      	mov	r1, r6
 800c49e:	4628      	mov	r0, r5
 800c4a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4a4:	47b8      	blx	r7
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	f43f af0d 	beq.w	800c2c6 <_printf_float+0xb6>
 800c4ac:	f04f 0a00 	mov.w	sl, #0
 800c4b0:	f104 0b1a 	add.w	fp, r4, #26
 800c4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b6:	425b      	negs	r3, r3
 800c4b8:	4553      	cmp	r3, sl
 800c4ba:	dc01      	bgt.n	800c4c0 <_printf_float+0x2b0>
 800c4bc:	464b      	mov	r3, r9
 800c4be:	e793      	b.n	800c3e8 <_printf_float+0x1d8>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	465a      	mov	r2, fp
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	47b8      	blx	r7
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	f43f aefb 	beq.w	800c2c6 <_printf_float+0xb6>
 800c4d0:	f10a 0a01 	add.w	sl, sl, #1
 800c4d4:	e7ee      	b.n	800c4b4 <_printf_float+0x2a4>
 800c4d6:	bf00      	nop
 800c4d8:	7fefffff 	.word	0x7fefffff
 800c4dc:	08010dd8 	.word	0x08010dd8
 800c4e0:	08010dd4 	.word	0x08010dd4
 800c4e4:	08010de0 	.word	0x08010de0
 800c4e8:	08010ddc 	.word	0x08010ddc
 800c4ec:	08010de4 	.word	0x08010de4
 800c4f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c4f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c4f6:	4553      	cmp	r3, sl
 800c4f8:	bfa8      	it	ge
 800c4fa:	4653      	movge	r3, sl
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	4699      	mov	r9, r3
 800c500:	dc36      	bgt.n	800c570 <_printf_float+0x360>
 800c502:	f04f 0b00 	mov.w	fp, #0
 800c506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c50a:	f104 021a 	add.w	r2, r4, #26
 800c50e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c510:	9306      	str	r3, [sp, #24]
 800c512:	eba3 0309 	sub.w	r3, r3, r9
 800c516:	455b      	cmp	r3, fp
 800c518:	dc31      	bgt.n	800c57e <_printf_float+0x36e>
 800c51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c51c:	459a      	cmp	sl, r3
 800c51e:	dc3a      	bgt.n	800c596 <_printf_float+0x386>
 800c520:	6823      	ldr	r3, [r4, #0]
 800c522:	07da      	lsls	r2, r3, #31
 800c524:	d437      	bmi.n	800c596 <_printf_float+0x386>
 800c526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c528:	ebaa 0903 	sub.w	r9, sl, r3
 800c52c:	9b06      	ldr	r3, [sp, #24]
 800c52e:	ebaa 0303 	sub.w	r3, sl, r3
 800c532:	4599      	cmp	r9, r3
 800c534:	bfa8      	it	ge
 800c536:	4699      	movge	r9, r3
 800c538:	f1b9 0f00 	cmp.w	r9, #0
 800c53c:	dc33      	bgt.n	800c5a6 <_printf_float+0x396>
 800c53e:	f04f 0800 	mov.w	r8, #0
 800c542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c546:	f104 0b1a 	add.w	fp, r4, #26
 800c54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c54c:	ebaa 0303 	sub.w	r3, sl, r3
 800c550:	eba3 0309 	sub.w	r3, r3, r9
 800c554:	4543      	cmp	r3, r8
 800c556:	f77f af79 	ble.w	800c44c <_printf_float+0x23c>
 800c55a:	2301      	movs	r3, #1
 800c55c:	465a      	mov	r2, fp
 800c55e:	4631      	mov	r1, r6
 800c560:	4628      	mov	r0, r5
 800c562:	47b8      	blx	r7
 800c564:	3001      	adds	r0, #1
 800c566:	f43f aeae 	beq.w	800c2c6 <_printf_float+0xb6>
 800c56a:	f108 0801 	add.w	r8, r8, #1
 800c56e:	e7ec      	b.n	800c54a <_printf_float+0x33a>
 800c570:	4642      	mov	r2, r8
 800c572:	4631      	mov	r1, r6
 800c574:	4628      	mov	r0, r5
 800c576:	47b8      	blx	r7
 800c578:	3001      	adds	r0, #1
 800c57a:	d1c2      	bne.n	800c502 <_printf_float+0x2f2>
 800c57c:	e6a3      	b.n	800c2c6 <_printf_float+0xb6>
 800c57e:	2301      	movs	r3, #1
 800c580:	4631      	mov	r1, r6
 800c582:	4628      	mov	r0, r5
 800c584:	9206      	str	r2, [sp, #24]
 800c586:	47b8      	blx	r7
 800c588:	3001      	adds	r0, #1
 800c58a:	f43f ae9c 	beq.w	800c2c6 <_printf_float+0xb6>
 800c58e:	f10b 0b01 	add.w	fp, fp, #1
 800c592:	9a06      	ldr	r2, [sp, #24]
 800c594:	e7bb      	b.n	800c50e <_printf_float+0x2fe>
 800c596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c59a:	4631      	mov	r1, r6
 800c59c:	4628      	mov	r0, r5
 800c59e:	47b8      	blx	r7
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	d1c0      	bne.n	800c526 <_printf_float+0x316>
 800c5a4:	e68f      	b.n	800c2c6 <_printf_float+0xb6>
 800c5a6:	9a06      	ldr	r2, [sp, #24]
 800c5a8:	464b      	mov	r3, r9
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	4442      	add	r2, r8
 800c5b0:	47b8      	blx	r7
 800c5b2:	3001      	adds	r0, #1
 800c5b4:	d1c3      	bne.n	800c53e <_printf_float+0x32e>
 800c5b6:	e686      	b.n	800c2c6 <_printf_float+0xb6>
 800c5b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c5bc:	f1ba 0f01 	cmp.w	sl, #1
 800c5c0:	dc01      	bgt.n	800c5c6 <_printf_float+0x3b6>
 800c5c2:	07db      	lsls	r3, r3, #31
 800c5c4:	d536      	bpl.n	800c634 <_printf_float+0x424>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	4642      	mov	r2, r8
 800c5ca:	4631      	mov	r1, r6
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	47b8      	blx	r7
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	f43f ae78 	beq.w	800c2c6 <_printf_float+0xb6>
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	4628      	mov	r0, r5
 800c5da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5de:	47b8      	blx	r7
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	f43f ae70 	beq.w	800c2c6 <_printf_float+0xb6>
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c5ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c5f2:	f7f4 fa79 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5f6:	b9c0      	cbnz	r0, 800c62a <_printf_float+0x41a>
 800c5f8:	4653      	mov	r3, sl
 800c5fa:	f108 0201 	add.w	r2, r8, #1
 800c5fe:	4631      	mov	r1, r6
 800c600:	4628      	mov	r0, r5
 800c602:	47b8      	blx	r7
 800c604:	3001      	adds	r0, #1
 800c606:	d10c      	bne.n	800c622 <_printf_float+0x412>
 800c608:	e65d      	b.n	800c2c6 <_printf_float+0xb6>
 800c60a:	2301      	movs	r3, #1
 800c60c:	465a      	mov	r2, fp
 800c60e:	4631      	mov	r1, r6
 800c610:	4628      	mov	r0, r5
 800c612:	47b8      	blx	r7
 800c614:	3001      	adds	r0, #1
 800c616:	f43f ae56 	beq.w	800c2c6 <_printf_float+0xb6>
 800c61a:	f108 0801 	add.w	r8, r8, #1
 800c61e:	45d0      	cmp	r8, sl
 800c620:	dbf3      	blt.n	800c60a <_printf_float+0x3fa>
 800c622:	464b      	mov	r3, r9
 800c624:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c628:	e6df      	b.n	800c3ea <_printf_float+0x1da>
 800c62a:	f04f 0800 	mov.w	r8, #0
 800c62e:	f104 0b1a 	add.w	fp, r4, #26
 800c632:	e7f4      	b.n	800c61e <_printf_float+0x40e>
 800c634:	2301      	movs	r3, #1
 800c636:	4642      	mov	r2, r8
 800c638:	e7e1      	b.n	800c5fe <_printf_float+0x3ee>
 800c63a:	2301      	movs	r3, #1
 800c63c:	464a      	mov	r2, r9
 800c63e:	4631      	mov	r1, r6
 800c640:	4628      	mov	r0, r5
 800c642:	47b8      	blx	r7
 800c644:	3001      	adds	r0, #1
 800c646:	f43f ae3e 	beq.w	800c2c6 <_printf_float+0xb6>
 800c64a:	f108 0801 	add.w	r8, r8, #1
 800c64e:	68e3      	ldr	r3, [r4, #12]
 800c650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c652:	1a5b      	subs	r3, r3, r1
 800c654:	4543      	cmp	r3, r8
 800c656:	dcf0      	bgt.n	800c63a <_printf_float+0x42a>
 800c658:	e6fc      	b.n	800c454 <_printf_float+0x244>
 800c65a:	f04f 0800 	mov.w	r8, #0
 800c65e:	f104 0919 	add.w	r9, r4, #25
 800c662:	e7f4      	b.n	800c64e <_printf_float+0x43e>

0800c664 <_printf_common>:
 800c664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c668:	4616      	mov	r6, r2
 800c66a:	4698      	mov	r8, r3
 800c66c:	688a      	ldr	r2, [r1, #8]
 800c66e:	4607      	mov	r7, r0
 800c670:	690b      	ldr	r3, [r1, #16]
 800c672:	460c      	mov	r4, r1
 800c674:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c678:	4293      	cmp	r3, r2
 800c67a:	bfb8      	it	lt
 800c67c:	4613      	movlt	r3, r2
 800c67e:	6033      	str	r3, [r6, #0]
 800c680:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c684:	b10a      	cbz	r2, 800c68a <_printf_common+0x26>
 800c686:	3301      	adds	r3, #1
 800c688:	6033      	str	r3, [r6, #0]
 800c68a:	6823      	ldr	r3, [r4, #0]
 800c68c:	0699      	lsls	r1, r3, #26
 800c68e:	bf42      	ittt	mi
 800c690:	6833      	ldrmi	r3, [r6, #0]
 800c692:	3302      	addmi	r3, #2
 800c694:	6033      	strmi	r3, [r6, #0]
 800c696:	6825      	ldr	r5, [r4, #0]
 800c698:	f015 0506 	ands.w	r5, r5, #6
 800c69c:	d106      	bne.n	800c6ac <_printf_common+0x48>
 800c69e:	f104 0a19 	add.w	sl, r4, #25
 800c6a2:	68e3      	ldr	r3, [r4, #12]
 800c6a4:	6832      	ldr	r2, [r6, #0]
 800c6a6:	1a9b      	subs	r3, r3, r2
 800c6a8:	42ab      	cmp	r3, r5
 800c6aa:	dc2b      	bgt.n	800c704 <_printf_common+0xa0>
 800c6ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c6b0:	6822      	ldr	r2, [r4, #0]
 800c6b2:	3b00      	subs	r3, #0
 800c6b4:	bf18      	it	ne
 800c6b6:	2301      	movne	r3, #1
 800c6b8:	0692      	lsls	r2, r2, #26
 800c6ba:	d430      	bmi.n	800c71e <_printf_common+0xba>
 800c6bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c6c0:	4641      	mov	r1, r8
 800c6c2:	4638      	mov	r0, r7
 800c6c4:	47c8      	blx	r9
 800c6c6:	3001      	adds	r0, #1
 800c6c8:	d023      	beq.n	800c712 <_printf_common+0xae>
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	341a      	adds	r4, #26
 800c6ce:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c6d2:	f003 0306 	and.w	r3, r3, #6
 800c6d6:	2b04      	cmp	r3, #4
 800c6d8:	bf0a      	itet	eq
 800c6da:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c6de:	2500      	movne	r5, #0
 800c6e0:	6833      	ldreq	r3, [r6, #0]
 800c6e2:	f04f 0600 	mov.w	r6, #0
 800c6e6:	bf08      	it	eq
 800c6e8:	1aed      	subeq	r5, r5, r3
 800c6ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c6ee:	bf08      	it	eq
 800c6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	bfc4      	itt	gt
 800c6f8:	1a9b      	subgt	r3, r3, r2
 800c6fa:	18ed      	addgt	r5, r5, r3
 800c6fc:	42b5      	cmp	r5, r6
 800c6fe:	d11a      	bne.n	800c736 <_printf_common+0xd2>
 800c700:	2000      	movs	r0, #0
 800c702:	e008      	b.n	800c716 <_printf_common+0xb2>
 800c704:	2301      	movs	r3, #1
 800c706:	4652      	mov	r2, sl
 800c708:	4641      	mov	r1, r8
 800c70a:	4638      	mov	r0, r7
 800c70c:	47c8      	blx	r9
 800c70e:	3001      	adds	r0, #1
 800c710:	d103      	bne.n	800c71a <_printf_common+0xb6>
 800c712:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71a:	3501      	adds	r5, #1
 800c71c:	e7c1      	b.n	800c6a2 <_printf_common+0x3e>
 800c71e:	18e1      	adds	r1, r4, r3
 800c720:	1c5a      	adds	r2, r3, #1
 800c722:	2030      	movs	r0, #48	@ 0x30
 800c724:	3302      	adds	r3, #2
 800c726:	4422      	add	r2, r4
 800c728:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c72c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c730:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c734:	e7c2      	b.n	800c6bc <_printf_common+0x58>
 800c736:	2301      	movs	r3, #1
 800c738:	4622      	mov	r2, r4
 800c73a:	4641      	mov	r1, r8
 800c73c:	4638      	mov	r0, r7
 800c73e:	47c8      	blx	r9
 800c740:	3001      	adds	r0, #1
 800c742:	d0e6      	beq.n	800c712 <_printf_common+0xae>
 800c744:	3601      	adds	r6, #1
 800c746:	e7d9      	b.n	800c6fc <_printf_common+0x98>

0800c748 <_printf_i>:
 800c748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c74c:	7e0f      	ldrb	r7, [r1, #24]
 800c74e:	4691      	mov	r9, r2
 800c750:	4680      	mov	r8, r0
 800c752:	460c      	mov	r4, r1
 800c754:	2f78      	cmp	r7, #120	@ 0x78
 800c756:	469a      	mov	sl, r3
 800c758:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c75a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c75e:	d807      	bhi.n	800c770 <_printf_i+0x28>
 800c760:	2f62      	cmp	r7, #98	@ 0x62
 800c762:	d80a      	bhi.n	800c77a <_printf_i+0x32>
 800c764:	2f00      	cmp	r7, #0
 800c766:	f000 80d1 	beq.w	800c90c <_printf_i+0x1c4>
 800c76a:	2f58      	cmp	r7, #88	@ 0x58
 800c76c:	f000 80b8 	beq.w	800c8e0 <_printf_i+0x198>
 800c770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c774:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c778:	e03a      	b.n	800c7f0 <_printf_i+0xa8>
 800c77a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c77e:	2b15      	cmp	r3, #21
 800c780:	d8f6      	bhi.n	800c770 <_printf_i+0x28>
 800c782:	a101      	add	r1, pc, #4	@ (adr r1, 800c788 <_printf_i+0x40>)
 800c784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c788:	0800c7e1 	.word	0x0800c7e1
 800c78c:	0800c7f5 	.word	0x0800c7f5
 800c790:	0800c771 	.word	0x0800c771
 800c794:	0800c771 	.word	0x0800c771
 800c798:	0800c771 	.word	0x0800c771
 800c79c:	0800c771 	.word	0x0800c771
 800c7a0:	0800c7f5 	.word	0x0800c7f5
 800c7a4:	0800c771 	.word	0x0800c771
 800c7a8:	0800c771 	.word	0x0800c771
 800c7ac:	0800c771 	.word	0x0800c771
 800c7b0:	0800c771 	.word	0x0800c771
 800c7b4:	0800c8f3 	.word	0x0800c8f3
 800c7b8:	0800c81f 	.word	0x0800c81f
 800c7bc:	0800c8ad 	.word	0x0800c8ad
 800c7c0:	0800c771 	.word	0x0800c771
 800c7c4:	0800c771 	.word	0x0800c771
 800c7c8:	0800c915 	.word	0x0800c915
 800c7cc:	0800c771 	.word	0x0800c771
 800c7d0:	0800c81f 	.word	0x0800c81f
 800c7d4:	0800c771 	.word	0x0800c771
 800c7d8:	0800c771 	.word	0x0800c771
 800c7dc:	0800c8b5 	.word	0x0800c8b5
 800c7e0:	6833      	ldr	r3, [r6, #0]
 800c7e2:	1d1a      	adds	r2, r3, #4
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	6032      	str	r2, [r6, #0]
 800c7e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e09c      	b.n	800c92e <_printf_i+0x1e6>
 800c7f4:	6833      	ldr	r3, [r6, #0]
 800c7f6:	6820      	ldr	r0, [r4, #0]
 800c7f8:	1d19      	adds	r1, r3, #4
 800c7fa:	6031      	str	r1, [r6, #0]
 800c7fc:	0606      	lsls	r6, r0, #24
 800c7fe:	d501      	bpl.n	800c804 <_printf_i+0xbc>
 800c800:	681d      	ldr	r5, [r3, #0]
 800c802:	e003      	b.n	800c80c <_printf_i+0xc4>
 800c804:	0645      	lsls	r5, r0, #25
 800c806:	d5fb      	bpl.n	800c800 <_printf_i+0xb8>
 800c808:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c80c:	2d00      	cmp	r5, #0
 800c80e:	da03      	bge.n	800c818 <_printf_i+0xd0>
 800c810:	232d      	movs	r3, #45	@ 0x2d
 800c812:	426d      	negs	r5, r5
 800c814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c818:	4858      	ldr	r0, [pc, #352]	@ (800c97c <_printf_i+0x234>)
 800c81a:	230a      	movs	r3, #10
 800c81c:	e011      	b.n	800c842 <_printf_i+0xfa>
 800c81e:	6821      	ldr	r1, [r4, #0]
 800c820:	6833      	ldr	r3, [r6, #0]
 800c822:	0608      	lsls	r0, r1, #24
 800c824:	f853 5b04 	ldr.w	r5, [r3], #4
 800c828:	d402      	bmi.n	800c830 <_printf_i+0xe8>
 800c82a:	0649      	lsls	r1, r1, #25
 800c82c:	bf48      	it	mi
 800c82e:	b2ad      	uxthmi	r5, r5
 800c830:	2f6f      	cmp	r7, #111	@ 0x6f
 800c832:	6033      	str	r3, [r6, #0]
 800c834:	4851      	ldr	r0, [pc, #324]	@ (800c97c <_printf_i+0x234>)
 800c836:	bf14      	ite	ne
 800c838:	230a      	movne	r3, #10
 800c83a:	2308      	moveq	r3, #8
 800c83c:	2100      	movs	r1, #0
 800c83e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c842:	6866      	ldr	r6, [r4, #4]
 800c844:	2e00      	cmp	r6, #0
 800c846:	60a6      	str	r6, [r4, #8]
 800c848:	db05      	blt.n	800c856 <_printf_i+0x10e>
 800c84a:	6821      	ldr	r1, [r4, #0]
 800c84c:	432e      	orrs	r6, r5
 800c84e:	f021 0104 	bic.w	r1, r1, #4
 800c852:	6021      	str	r1, [r4, #0]
 800c854:	d04b      	beq.n	800c8ee <_printf_i+0x1a6>
 800c856:	4616      	mov	r6, r2
 800c858:	fbb5 f1f3 	udiv	r1, r5, r3
 800c85c:	fb03 5711 	mls	r7, r3, r1, r5
 800c860:	5dc7      	ldrb	r7, [r0, r7]
 800c862:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c866:	462f      	mov	r7, r5
 800c868:	460d      	mov	r5, r1
 800c86a:	42bb      	cmp	r3, r7
 800c86c:	d9f4      	bls.n	800c858 <_printf_i+0x110>
 800c86e:	2b08      	cmp	r3, #8
 800c870:	d10b      	bne.n	800c88a <_printf_i+0x142>
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	07df      	lsls	r7, r3, #31
 800c876:	d508      	bpl.n	800c88a <_printf_i+0x142>
 800c878:	6923      	ldr	r3, [r4, #16]
 800c87a:	6861      	ldr	r1, [r4, #4]
 800c87c:	4299      	cmp	r1, r3
 800c87e:	bfde      	ittt	le
 800c880:	2330      	movle	r3, #48	@ 0x30
 800c882:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c886:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c88a:	1b92      	subs	r2, r2, r6
 800c88c:	6122      	str	r2, [r4, #16]
 800c88e:	464b      	mov	r3, r9
 800c890:	aa03      	add	r2, sp, #12
 800c892:	4621      	mov	r1, r4
 800c894:	4640      	mov	r0, r8
 800c896:	f8cd a000 	str.w	sl, [sp]
 800c89a:	f7ff fee3 	bl	800c664 <_printf_common>
 800c89e:	3001      	adds	r0, #1
 800c8a0:	d14a      	bne.n	800c938 <_printf_i+0x1f0>
 800c8a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8a6:	b004      	add	sp, #16
 800c8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	f043 0320 	orr.w	r3, r3, #32
 800c8b2:	6023      	str	r3, [r4, #0]
 800c8b4:	2778      	movs	r7, #120	@ 0x78
 800c8b6:	4832      	ldr	r0, [pc, #200]	@ (800c980 <_printf_i+0x238>)
 800c8b8:	6823      	ldr	r3, [r4, #0]
 800c8ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c8be:	061f      	lsls	r7, r3, #24
 800c8c0:	6831      	ldr	r1, [r6, #0]
 800c8c2:	f851 5b04 	ldr.w	r5, [r1], #4
 800c8c6:	d402      	bmi.n	800c8ce <_printf_i+0x186>
 800c8c8:	065f      	lsls	r7, r3, #25
 800c8ca:	bf48      	it	mi
 800c8cc:	b2ad      	uxthmi	r5, r5
 800c8ce:	6031      	str	r1, [r6, #0]
 800c8d0:	07d9      	lsls	r1, r3, #31
 800c8d2:	bf44      	itt	mi
 800c8d4:	f043 0320 	orrmi.w	r3, r3, #32
 800c8d8:	6023      	strmi	r3, [r4, #0]
 800c8da:	b11d      	cbz	r5, 800c8e4 <_printf_i+0x19c>
 800c8dc:	2310      	movs	r3, #16
 800c8de:	e7ad      	b.n	800c83c <_printf_i+0xf4>
 800c8e0:	4826      	ldr	r0, [pc, #152]	@ (800c97c <_printf_i+0x234>)
 800c8e2:	e7e9      	b.n	800c8b8 <_printf_i+0x170>
 800c8e4:	6823      	ldr	r3, [r4, #0]
 800c8e6:	f023 0320 	bic.w	r3, r3, #32
 800c8ea:	6023      	str	r3, [r4, #0]
 800c8ec:	e7f6      	b.n	800c8dc <_printf_i+0x194>
 800c8ee:	4616      	mov	r6, r2
 800c8f0:	e7bd      	b.n	800c86e <_printf_i+0x126>
 800c8f2:	6833      	ldr	r3, [r6, #0]
 800c8f4:	6825      	ldr	r5, [r4, #0]
 800c8f6:	1d18      	adds	r0, r3, #4
 800c8f8:	6961      	ldr	r1, [r4, #20]
 800c8fa:	6030      	str	r0, [r6, #0]
 800c8fc:	062e      	lsls	r6, r5, #24
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	d501      	bpl.n	800c906 <_printf_i+0x1be>
 800c902:	6019      	str	r1, [r3, #0]
 800c904:	e002      	b.n	800c90c <_printf_i+0x1c4>
 800c906:	0668      	lsls	r0, r5, #25
 800c908:	d5fb      	bpl.n	800c902 <_printf_i+0x1ba>
 800c90a:	8019      	strh	r1, [r3, #0]
 800c90c:	2300      	movs	r3, #0
 800c90e:	4616      	mov	r6, r2
 800c910:	6123      	str	r3, [r4, #16]
 800c912:	e7bc      	b.n	800c88e <_printf_i+0x146>
 800c914:	6833      	ldr	r3, [r6, #0]
 800c916:	2100      	movs	r1, #0
 800c918:	1d1a      	adds	r2, r3, #4
 800c91a:	6032      	str	r2, [r6, #0]
 800c91c:	681e      	ldr	r6, [r3, #0]
 800c91e:	6862      	ldr	r2, [r4, #4]
 800c920:	4630      	mov	r0, r6
 800c922:	f001 fa29 	bl	800dd78 <memchr>
 800c926:	b108      	cbz	r0, 800c92c <_printf_i+0x1e4>
 800c928:	1b80      	subs	r0, r0, r6
 800c92a:	6060      	str	r0, [r4, #4]
 800c92c:	6863      	ldr	r3, [r4, #4]
 800c92e:	6123      	str	r3, [r4, #16]
 800c930:	2300      	movs	r3, #0
 800c932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c936:	e7aa      	b.n	800c88e <_printf_i+0x146>
 800c938:	6923      	ldr	r3, [r4, #16]
 800c93a:	4632      	mov	r2, r6
 800c93c:	4649      	mov	r1, r9
 800c93e:	4640      	mov	r0, r8
 800c940:	47d0      	blx	sl
 800c942:	3001      	adds	r0, #1
 800c944:	d0ad      	beq.n	800c8a2 <_printf_i+0x15a>
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	079b      	lsls	r3, r3, #30
 800c94a:	d413      	bmi.n	800c974 <_printf_i+0x22c>
 800c94c:	68e0      	ldr	r0, [r4, #12]
 800c94e:	9b03      	ldr	r3, [sp, #12]
 800c950:	4298      	cmp	r0, r3
 800c952:	bfb8      	it	lt
 800c954:	4618      	movlt	r0, r3
 800c956:	e7a6      	b.n	800c8a6 <_printf_i+0x15e>
 800c958:	2301      	movs	r3, #1
 800c95a:	4632      	mov	r2, r6
 800c95c:	4649      	mov	r1, r9
 800c95e:	4640      	mov	r0, r8
 800c960:	47d0      	blx	sl
 800c962:	3001      	adds	r0, #1
 800c964:	d09d      	beq.n	800c8a2 <_printf_i+0x15a>
 800c966:	3501      	adds	r5, #1
 800c968:	68e3      	ldr	r3, [r4, #12]
 800c96a:	9903      	ldr	r1, [sp, #12]
 800c96c:	1a5b      	subs	r3, r3, r1
 800c96e:	42ab      	cmp	r3, r5
 800c970:	dcf2      	bgt.n	800c958 <_printf_i+0x210>
 800c972:	e7eb      	b.n	800c94c <_printf_i+0x204>
 800c974:	2500      	movs	r5, #0
 800c976:	f104 0619 	add.w	r6, r4, #25
 800c97a:	e7f5      	b.n	800c968 <_printf_i+0x220>
 800c97c:	08010de6 	.word	0x08010de6
 800c980:	08010df7 	.word	0x08010df7

0800c984 <_scanf_float>:
 800c984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c988:	b087      	sub	sp, #28
 800c98a:	4691      	mov	r9, r2
 800c98c:	4680      	mov	r8, r0
 800c98e:	460c      	mov	r4, r1
 800c990:	9303      	str	r3, [sp, #12]
 800c992:	688b      	ldr	r3, [r1, #8]
 800c994:	1e5a      	subs	r2, r3, #1
 800c996:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c99a:	460a      	mov	r2, r1
 800c99c:	bf89      	itett	hi
 800c99e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c9a2:	f04f 0b00 	movls.w	fp, #0
 800c9a6:	eb03 0b05 	addhi.w	fp, r3, r5
 800c9aa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c9ae:	f04f 0500 	mov.w	r5, #0
 800c9b2:	bf88      	it	hi
 800c9b4:	608b      	strhi	r3, [r1, #8]
 800c9b6:	680b      	ldr	r3, [r1, #0]
 800c9b8:	46aa      	mov	sl, r5
 800c9ba:	462f      	mov	r7, r5
 800c9bc:	9502      	str	r5, [sp, #8]
 800c9be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c9c2:	f842 3b1c 	str.w	r3, [r2], #28
 800c9c6:	4616      	mov	r6, r2
 800c9c8:	9201      	str	r2, [sp, #4]
 800c9ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c9ce:	68a2      	ldr	r2, [r4, #8]
 800c9d0:	b15a      	cbz	r2, 800c9ea <_scanf_float+0x66>
 800c9d2:	f8d9 3000 	ldr.w	r3, [r9]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b4e      	cmp	r3, #78	@ 0x4e
 800c9da:	d863      	bhi.n	800caa4 <_scanf_float+0x120>
 800c9dc:	2b40      	cmp	r3, #64	@ 0x40
 800c9de:	d83b      	bhi.n	800ca58 <_scanf_float+0xd4>
 800c9e0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c9e4:	b2c8      	uxtb	r0, r1
 800c9e6:	280e      	cmp	r0, #14
 800c9e8:	d939      	bls.n	800ca5e <_scanf_float+0xda>
 800c9ea:	b11f      	cbz	r7, 800c9f4 <_scanf_float+0x70>
 800c9ec:	6823      	ldr	r3, [r4, #0]
 800c9ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c9f8:	f1ba 0f01 	cmp.w	sl, #1
 800c9fc:	f200 8115 	bhi.w	800cc2a <_scanf_float+0x2a6>
 800ca00:	9b01      	ldr	r3, [sp, #4]
 800ca02:	429e      	cmp	r6, r3
 800ca04:	f200 8106 	bhi.w	800cc14 <_scanf_float+0x290>
 800ca08:	2001      	movs	r0, #1
 800ca0a:	b007      	add	sp, #28
 800ca0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca10:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ca14:	2a0d      	cmp	r2, #13
 800ca16:	d8e8      	bhi.n	800c9ea <_scanf_float+0x66>
 800ca18:	a101      	add	r1, pc, #4	@ (adr r1, 800ca20 <_scanf_float+0x9c>)
 800ca1a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca1e:	bf00      	nop
 800ca20:	0800cb69 	.word	0x0800cb69
 800ca24:	0800c9eb 	.word	0x0800c9eb
 800ca28:	0800c9eb 	.word	0x0800c9eb
 800ca2c:	0800c9eb 	.word	0x0800c9eb
 800ca30:	0800cbc5 	.word	0x0800cbc5
 800ca34:	0800cb9f 	.word	0x0800cb9f
 800ca38:	0800c9eb 	.word	0x0800c9eb
 800ca3c:	0800c9eb 	.word	0x0800c9eb
 800ca40:	0800cb77 	.word	0x0800cb77
 800ca44:	0800c9eb 	.word	0x0800c9eb
 800ca48:	0800c9eb 	.word	0x0800c9eb
 800ca4c:	0800c9eb 	.word	0x0800c9eb
 800ca50:	0800c9eb 	.word	0x0800c9eb
 800ca54:	0800cb33 	.word	0x0800cb33
 800ca58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ca5c:	e7da      	b.n	800ca14 <_scanf_float+0x90>
 800ca5e:	290e      	cmp	r1, #14
 800ca60:	d8c3      	bhi.n	800c9ea <_scanf_float+0x66>
 800ca62:	a001      	add	r0, pc, #4	@ (adr r0, 800ca68 <_scanf_float+0xe4>)
 800ca64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ca68:	0800cb23 	.word	0x0800cb23
 800ca6c:	0800c9eb 	.word	0x0800c9eb
 800ca70:	0800cb23 	.word	0x0800cb23
 800ca74:	0800cbb3 	.word	0x0800cbb3
 800ca78:	0800c9eb 	.word	0x0800c9eb
 800ca7c:	0800cac5 	.word	0x0800cac5
 800ca80:	0800cb09 	.word	0x0800cb09
 800ca84:	0800cb09 	.word	0x0800cb09
 800ca88:	0800cb09 	.word	0x0800cb09
 800ca8c:	0800cb09 	.word	0x0800cb09
 800ca90:	0800cb09 	.word	0x0800cb09
 800ca94:	0800cb09 	.word	0x0800cb09
 800ca98:	0800cb09 	.word	0x0800cb09
 800ca9c:	0800cb09 	.word	0x0800cb09
 800caa0:	0800cb09 	.word	0x0800cb09
 800caa4:	2b6e      	cmp	r3, #110	@ 0x6e
 800caa6:	d809      	bhi.n	800cabc <_scanf_float+0x138>
 800caa8:	2b60      	cmp	r3, #96	@ 0x60
 800caaa:	d8b1      	bhi.n	800ca10 <_scanf_float+0x8c>
 800caac:	2b54      	cmp	r3, #84	@ 0x54
 800caae:	d07b      	beq.n	800cba8 <_scanf_float+0x224>
 800cab0:	2b59      	cmp	r3, #89	@ 0x59
 800cab2:	d19a      	bne.n	800c9ea <_scanf_float+0x66>
 800cab4:	2d07      	cmp	r5, #7
 800cab6:	d198      	bne.n	800c9ea <_scanf_float+0x66>
 800cab8:	2508      	movs	r5, #8
 800caba:	e02f      	b.n	800cb1c <_scanf_float+0x198>
 800cabc:	2b74      	cmp	r3, #116	@ 0x74
 800cabe:	d073      	beq.n	800cba8 <_scanf_float+0x224>
 800cac0:	2b79      	cmp	r3, #121	@ 0x79
 800cac2:	e7f6      	b.n	800cab2 <_scanf_float+0x12e>
 800cac4:	6821      	ldr	r1, [r4, #0]
 800cac6:	05c8      	lsls	r0, r1, #23
 800cac8:	d51e      	bpl.n	800cb08 <_scanf_float+0x184>
 800caca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cace:	3701      	adds	r7, #1
 800cad0:	6021      	str	r1, [r4, #0]
 800cad2:	f1bb 0f00 	cmp.w	fp, #0
 800cad6:	d003      	beq.n	800cae0 <_scanf_float+0x15c>
 800cad8:	3201      	adds	r2, #1
 800cada:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cade:	60a2      	str	r2, [r4, #8]
 800cae0:	68a3      	ldr	r3, [r4, #8]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	60a3      	str	r3, [r4, #8]
 800cae6:	6923      	ldr	r3, [r4, #16]
 800cae8:	3301      	adds	r3, #1
 800caea:	6123      	str	r3, [r4, #16]
 800caec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800caf0:	3b01      	subs	r3, #1
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	f8c9 3004 	str.w	r3, [r9, #4]
 800caf8:	f340 8083 	ble.w	800cc02 <_scanf_float+0x27e>
 800cafc:	f8d9 3000 	ldr.w	r3, [r9]
 800cb00:	3301      	adds	r3, #1
 800cb02:	f8c9 3000 	str.w	r3, [r9]
 800cb06:	e762      	b.n	800c9ce <_scanf_float+0x4a>
 800cb08:	eb1a 0105 	adds.w	r1, sl, r5
 800cb0c:	f47f af6d 	bne.w	800c9ea <_scanf_float+0x66>
 800cb10:	6822      	ldr	r2, [r4, #0]
 800cb12:	460d      	mov	r5, r1
 800cb14:	468a      	mov	sl, r1
 800cb16:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cb1a:	6022      	str	r2, [r4, #0]
 800cb1c:	f806 3b01 	strb.w	r3, [r6], #1
 800cb20:	e7de      	b.n	800cae0 <_scanf_float+0x15c>
 800cb22:	6822      	ldr	r2, [r4, #0]
 800cb24:	0610      	lsls	r0, r2, #24
 800cb26:	f57f af60 	bpl.w	800c9ea <_scanf_float+0x66>
 800cb2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cb2e:	6022      	str	r2, [r4, #0]
 800cb30:	e7f4      	b.n	800cb1c <_scanf_float+0x198>
 800cb32:	f1ba 0f00 	cmp.w	sl, #0
 800cb36:	d10c      	bne.n	800cb52 <_scanf_float+0x1ce>
 800cb38:	b977      	cbnz	r7, 800cb58 <_scanf_float+0x1d4>
 800cb3a:	6822      	ldr	r2, [r4, #0]
 800cb3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cb40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cb44:	d108      	bne.n	800cb58 <_scanf_float+0x1d4>
 800cb46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb4a:	f04f 0a01 	mov.w	sl, #1
 800cb4e:	6022      	str	r2, [r4, #0]
 800cb50:	e7e4      	b.n	800cb1c <_scanf_float+0x198>
 800cb52:	f1ba 0f02 	cmp.w	sl, #2
 800cb56:	d051      	beq.n	800cbfc <_scanf_float+0x278>
 800cb58:	2d01      	cmp	r5, #1
 800cb5a:	d002      	beq.n	800cb62 <_scanf_float+0x1de>
 800cb5c:	2d04      	cmp	r5, #4
 800cb5e:	f47f af44 	bne.w	800c9ea <_scanf_float+0x66>
 800cb62:	3501      	adds	r5, #1
 800cb64:	b2ed      	uxtb	r5, r5
 800cb66:	e7d9      	b.n	800cb1c <_scanf_float+0x198>
 800cb68:	f1ba 0f01 	cmp.w	sl, #1
 800cb6c:	f47f af3d 	bne.w	800c9ea <_scanf_float+0x66>
 800cb70:	f04f 0a02 	mov.w	sl, #2
 800cb74:	e7d2      	b.n	800cb1c <_scanf_float+0x198>
 800cb76:	b975      	cbnz	r5, 800cb96 <_scanf_float+0x212>
 800cb78:	2f00      	cmp	r7, #0
 800cb7a:	f47f af37 	bne.w	800c9ec <_scanf_float+0x68>
 800cb7e:	6822      	ldr	r2, [r4, #0]
 800cb80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cb84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cb88:	f040 8103 	bne.w	800cd92 <_scanf_float+0x40e>
 800cb8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cb90:	2501      	movs	r5, #1
 800cb92:	6022      	str	r2, [r4, #0]
 800cb94:	e7c2      	b.n	800cb1c <_scanf_float+0x198>
 800cb96:	2d03      	cmp	r5, #3
 800cb98:	d0e3      	beq.n	800cb62 <_scanf_float+0x1de>
 800cb9a:	2d05      	cmp	r5, #5
 800cb9c:	e7df      	b.n	800cb5e <_scanf_float+0x1da>
 800cb9e:	2d02      	cmp	r5, #2
 800cba0:	f47f af23 	bne.w	800c9ea <_scanf_float+0x66>
 800cba4:	2503      	movs	r5, #3
 800cba6:	e7b9      	b.n	800cb1c <_scanf_float+0x198>
 800cba8:	2d06      	cmp	r5, #6
 800cbaa:	f47f af1e 	bne.w	800c9ea <_scanf_float+0x66>
 800cbae:	2507      	movs	r5, #7
 800cbb0:	e7b4      	b.n	800cb1c <_scanf_float+0x198>
 800cbb2:	6822      	ldr	r2, [r4, #0]
 800cbb4:	0591      	lsls	r1, r2, #22
 800cbb6:	f57f af18 	bpl.w	800c9ea <_scanf_float+0x66>
 800cbba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cbbe:	9702      	str	r7, [sp, #8]
 800cbc0:	6022      	str	r2, [r4, #0]
 800cbc2:	e7ab      	b.n	800cb1c <_scanf_float+0x198>
 800cbc4:	6822      	ldr	r2, [r4, #0]
 800cbc6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cbca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cbce:	d005      	beq.n	800cbdc <_scanf_float+0x258>
 800cbd0:	0550      	lsls	r0, r2, #21
 800cbd2:	f57f af0a 	bpl.w	800c9ea <_scanf_float+0x66>
 800cbd6:	2f00      	cmp	r7, #0
 800cbd8:	f000 80db 	beq.w	800cd92 <_scanf_float+0x40e>
 800cbdc:	0591      	lsls	r1, r2, #22
 800cbde:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cbe2:	bf58      	it	pl
 800cbe4:	9902      	ldrpl	r1, [sp, #8]
 800cbe6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cbea:	bf58      	it	pl
 800cbec:	1a79      	subpl	r1, r7, r1
 800cbee:	6022      	str	r2, [r4, #0]
 800cbf0:	f04f 0700 	mov.w	r7, #0
 800cbf4:	bf58      	it	pl
 800cbf6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cbfa:	e78f      	b.n	800cb1c <_scanf_float+0x198>
 800cbfc:	f04f 0a03 	mov.w	sl, #3
 800cc00:	e78c      	b.n	800cb1c <_scanf_float+0x198>
 800cc02:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cc06:	4649      	mov	r1, r9
 800cc08:	4640      	mov	r0, r8
 800cc0a:	4798      	blx	r3
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	f43f aede 	beq.w	800c9ce <_scanf_float+0x4a>
 800cc12:	e6ea      	b.n	800c9ea <_scanf_float+0x66>
 800cc14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc18:	464a      	mov	r2, r9
 800cc1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc1e:	4640      	mov	r0, r8
 800cc20:	4798      	blx	r3
 800cc22:	6923      	ldr	r3, [r4, #16]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	6123      	str	r3, [r4, #16]
 800cc28:	e6ea      	b.n	800ca00 <_scanf_float+0x7c>
 800cc2a:	1e6b      	subs	r3, r5, #1
 800cc2c:	2b06      	cmp	r3, #6
 800cc2e:	d824      	bhi.n	800cc7a <_scanf_float+0x2f6>
 800cc30:	2d02      	cmp	r5, #2
 800cc32:	d836      	bhi.n	800cca2 <_scanf_float+0x31e>
 800cc34:	9b01      	ldr	r3, [sp, #4]
 800cc36:	429e      	cmp	r6, r3
 800cc38:	f67f aee6 	bls.w	800ca08 <_scanf_float+0x84>
 800cc3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc40:	464a      	mov	r2, r9
 800cc42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc46:	4640      	mov	r0, r8
 800cc48:	4798      	blx	r3
 800cc4a:	6923      	ldr	r3, [r4, #16]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	6123      	str	r3, [r4, #16]
 800cc50:	e7f0      	b.n	800cc34 <_scanf_float+0x2b0>
 800cc52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc56:	464a      	mov	r2, r9
 800cc58:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cc5c:	4640      	mov	r0, r8
 800cc5e:	4798      	blx	r3
 800cc60:	6923      	ldr	r3, [r4, #16]
 800cc62:	3b01      	subs	r3, #1
 800cc64:	6123      	str	r3, [r4, #16]
 800cc66:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cc6a:	fa5f fa8a 	uxtb.w	sl, sl
 800cc6e:	f1ba 0f02 	cmp.w	sl, #2
 800cc72:	d1ee      	bne.n	800cc52 <_scanf_float+0x2ce>
 800cc74:	3d03      	subs	r5, #3
 800cc76:	b2ed      	uxtb	r5, r5
 800cc78:	1b76      	subs	r6, r6, r5
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	05da      	lsls	r2, r3, #23
 800cc7e:	d52f      	bpl.n	800cce0 <_scanf_float+0x35c>
 800cc80:	055b      	lsls	r3, r3, #21
 800cc82:	d511      	bpl.n	800cca8 <_scanf_float+0x324>
 800cc84:	9b01      	ldr	r3, [sp, #4]
 800cc86:	429e      	cmp	r6, r3
 800cc88:	f67f aebe 	bls.w	800ca08 <_scanf_float+0x84>
 800cc8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc90:	464a      	mov	r2, r9
 800cc92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc96:	4640      	mov	r0, r8
 800cc98:	4798      	blx	r3
 800cc9a:	6923      	ldr	r3, [r4, #16]
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	6123      	str	r3, [r4, #16]
 800cca0:	e7f0      	b.n	800cc84 <_scanf_float+0x300>
 800cca2:	46aa      	mov	sl, r5
 800cca4:	46b3      	mov	fp, r6
 800cca6:	e7de      	b.n	800cc66 <_scanf_float+0x2e2>
 800cca8:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ccac:	1e75      	subs	r5, r6, #1
 800ccae:	6923      	ldr	r3, [r4, #16]
 800ccb0:	2965      	cmp	r1, #101	@ 0x65
 800ccb2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ccb6:	6123      	str	r3, [r4, #16]
 800ccb8:	d00c      	beq.n	800ccd4 <_scanf_float+0x350>
 800ccba:	2945      	cmp	r1, #69	@ 0x45
 800ccbc:	d00a      	beq.n	800ccd4 <_scanf_float+0x350>
 800ccbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccc2:	464a      	mov	r2, r9
 800ccc4:	4640      	mov	r0, r8
 800ccc6:	1eb5      	subs	r5, r6, #2
 800ccc8:	4798      	blx	r3
 800ccca:	6923      	ldr	r3, [r4, #16]
 800cccc:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	6123      	str	r3, [r4, #16]
 800ccd4:	462e      	mov	r6, r5
 800ccd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ccda:	464a      	mov	r2, r9
 800ccdc:	4640      	mov	r0, r8
 800ccde:	4798      	blx	r3
 800cce0:	6822      	ldr	r2, [r4, #0]
 800cce2:	f012 0210 	ands.w	r2, r2, #16
 800cce6:	d001      	beq.n	800ccec <_scanf_float+0x368>
 800cce8:	2000      	movs	r0, #0
 800ccea:	e68e      	b.n	800ca0a <_scanf_float+0x86>
 800ccec:	7032      	strb	r2, [r6, #0]
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ccf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccf8:	d125      	bne.n	800cd46 <_scanf_float+0x3c2>
 800ccfa:	9b02      	ldr	r3, [sp, #8]
 800ccfc:	429f      	cmp	r7, r3
 800ccfe:	d00a      	beq.n	800cd16 <_scanf_float+0x392>
 800cd00:	1bda      	subs	r2, r3, r7
 800cd02:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cd06:	4924      	ldr	r1, [pc, #144]	@ (800cd98 <_scanf_float+0x414>)
 800cd08:	429e      	cmp	r6, r3
 800cd0a:	bf28      	it	cs
 800cd0c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cd10:	4630      	mov	r0, r6
 800cd12:	f000 f87b 	bl	800ce0c <siprintf>
 800cd16:	2200      	movs	r2, #0
 800cd18:	9901      	ldr	r1, [sp, #4]
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	f000 ff40 	bl	800dba0 <_strtod_r>
 800cd20:	6821      	ldr	r1, [r4, #0]
 800cd22:	9b03      	ldr	r3, [sp, #12]
 800cd24:	f011 0f02 	tst.w	r1, #2
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	ec57 6b10 	vmov	r6, r7, d0
 800cd2e:	f103 0204 	add.w	r2, r3, #4
 800cd32:	d015      	beq.n	800cd60 <_scanf_float+0x3dc>
 800cd34:	9903      	ldr	r1, [sp, #12]
 800cd36:	600a      	str	r2, [r1, #0]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	e9c3 6700 	strd	r6, r7, [r3]
 800cd3e:	68e3      	ldr	r3, [r4, #12]
 800cd40:	3301      	adds	r3, #1
 800cd42:	60e3      	str	r3, [r4, #12]
 800cd44:	e7d0      	b.n	800cce8 <_scanf_float+0x364>
 800cd46:	9b04      	ldr	r3, [sp, #16]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d0e4      	beq.n	800cd16 <_scanf_float+0x392>
 800cd4c:	9905      	ldr	r1, [sp, #20]
 800cd4e:	230a      	movs	r3, #10
 800cd50:	4640      	mov	r0, r8
 800cd52:	3101      	adds	r1, #1
 800cd54:	f000 ffa4 	bl	800dca0 <_strtol_r>
 800cd58:	9b04      	ldr	r3, [sp, #16]
 800cd5a:	9e05      	ldr	r6, [sp, #20]
 800cd5c:	1ac2      	subs	r2, r0, r3
 800cd5e:	e7d0      	b.n	800cd02 <_scanf_float+0x37e>
 800cd60:	f011 0f04 	tst.w	r1, #4
 800cd64:	9903      	ldr	r1, [sp, #12]
 800cd66:	600a      	str	r2, [r1, #0]
 800cd68:	d1e6      	bne.n	800cd38 <_scanf_float+0x3b4>
 800cd6a:	681d      	ldr	r5, [r3, #0]
 800cd6c:	4632      	mov	r2, r6
 800cd6e:	463b      	mov	r3, r7
 800cd70:	4630      	mov	r0, r6
 800cd72:	4639      	mov	r1, r7
 800cd74:	f7f3 feea 	bl	8000b4c <__aeabi_dcmpun>
 800cd78:	b128      	cbz	r0, 800cd86 <_scanf_float+0x402>
 800cd7a:	4808      	ldr	r0, [pc, #32]	@ (800cd9c <_scanf_float+0x418>)
 800cd7c:	f001 f820 	bl	800ddc0 <nanf>
 800cd80:	ed85 0a00 	vstr	s0, [r5]
 800cd84:	e7db      	b.n	800cd3e <_scanf_float+0x3ba>
 800cd86:	4630      	mov	r0, r6
 800cd88:	4639      	mov	r1, r7
 800cd8a:	f7f3 ff3d 	bl	8000c08 <__aeabi_d2f>
 800cd8e:	6028      	str	r0, [r5, #0]
 800cd90:	e7d5      	b.n	800cd3e <_scanf_float+0x3ba>
 800cd92:	2700      	movs	r7, #0
 800cd94:	e62e      	b.n	800c9f4 <_scanf_float+0x70>
 800cd96:	bf00      	nop
 800cd98:	08010e08 	.word	0x08010e08
 800cd9c:	08010fa9 	.word	0x08010fa9

0800cda0 <sniprintf>:
 800cda0:	b40c      	push	{r2, r3}
 800cda2:	4b19      	ldr	r3, [pc, #100]	@ (800ce08 <sniprintf+0x68>)
 800cda4:	b530      	push	{r4, r5, lr}
 800cda6:	1e0c      	subs	r4, r1, #0
 800cda8:	b09d      	sub	sp, #116	@ 0x74
 800cdaa:	681d      	ldr	r5, [r3, #0]
 800cdac:	da08      	bge.n	800cdc0 <sniprintf+0x20>
 800cdae:	238b      	movs	r3, #139	@ 0x8b
 800cdb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cdb4:	602b      	str	r3, [r5, #0]
 800cdb6:	b01d      	add	sp, #116	@ 0x74
 800cdb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdbc:	b002      	add	sp, #8
 800cdbe:	4770      	bx	lr
 800cdc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cdc4:	9002      	str	r0, [sp, #8]
 800cdc6:	9006      	str	r0, [sp, #24]
 800cdc8:	a902      	add	r1, sp, #8
 800cdca:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cdce:	f04f 0300 	mov.w	r3, #0
 800cdd2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cdd8:	bf14      	ite	ne
 800cdda:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800cdde:	4623      	moveq	r3, r4
 800cde0:	9304      	str	r3, [sp, #16]
 800cde2:	9307      	str	r3, [sp, #28]
 800cde4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cde8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cdec:	ab21      	add	r3, sp, #132	@ 0x84
 800cdee:	9301      	str	r3, [sp, #4]
 800cdf0:	f002 f9dc 	bl	800f1ac <_svfiprintf_r>
 800cdf4:	1c43      	adds	r3, r0, #1
 800cdf6:	bfbc      	itt	lt
 800cdf8:	238b      	movlt	r3, #139	@ 0x8b
 800cdfa:	602b      	strlt	r3, [r5, #0]
 800cdfc:	2c00      	cmp	r4, #0
 800cdfe:	d0da      	beq.n	800cdb6 <sniprintf+0x16>
 800ce00:	9b02      	ldr	r3, [sp, #8]
 800ce02:	2200      	movs	r2, #0
 800ce04:	701a      	strb	r2, [r3, #0]
 800ce06:	e7d6      	b.n	800cdb6 <sniprintf+0x16>
 800ce08:	2000019c 	.word	0x2000019c

0800ce0c <siprintf>:
 800ce0c:	b40e      	push	{r1, r2, r3}
 800ce0e:	b510      	push	{r4, lr}
 800ce10:	b09d      	sub	sp, #116	@ 0x74
 800ce12:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce16:	2400      	movs	r4, #0
 800ce18:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ce1a:	9002      	str	r0, [sp, #8]
 800ce1c:	9006      	str	r0, [sp, #24]
 800ce1e:	9107      	str	r1, [sp, #28]
 800ce20:	9104      	str	r1, [sp, #16]
 800ce22:	4809      	ldr	r0, [pc, #36]	@ (800ce48 <siprintf+0x3c>)
 800ce24:	4909      	ldr	r1, [pc, #36]	@ (800ce4c <siprintf+0x40>)
 800ce26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce2a:	9105      	str	r1, [sp, #20]
 800ce2c:	a902      	add	r1, sp, #8
 800ce2e:	6800      	ldr	r0, [r0, #0]
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ce34:	f002 f9ba 	bl	800f1ac <_svfiprintf_r>
 800ce38:	9b02      	ldr	r3, [sp, #8]
 800ce3a:	701c      	strb	r4, [r3, #0]
 800ce3c:	b01d      	add	sp, #116	@ 0x74
 800ce3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce42:	b003      	add	sp, #12
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	2000019c 	.word	0x2000019c
 800ce4c:	ffff0208 	.word	0xffff0208

0800ce50 <std>:
 800ce50:	2300      	movs	r3, #0
 800ce52:	b510      	push	{r4, lr}
 800ce54:	4604      	mov	r4, r0
 800ce56:	6083      	str	r3, [r0, #8]
 800ce58:	8181      	strh	r1, [r0, #12]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce5e:	81c2      	strh	r2, [r0, #14]
 800ce60:	2208      	movs	r2, #8
 800ce62:	6183      	str	r3, [r0, #24]
 800ce64:	e9c0 3300 	strd	r3, r3, [r0]
 800ce68:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce6c:	305c      	adds	r0, #92	@ 0x5c
 800ce6e:	f000 ff37 	bl	800dce0 <memset>
 800ce72:	4b0d      	ldr	r3, [pc, #52]	@ (800cea8 <std+0x58>)
 800ce74:	6224      	str	r4, [r4, #32]
 800ce76:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce78:	4b0c      	ldr	r3, [pc, #48]	@ (800ceac <std+0x5c>)
 800ce7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce7c:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb0 <std+0x60>)
 800ce7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce80:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb4 <std+0x64>)
 800ce82:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce84:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb8 <std+0x68>)
 800ce86:	429c      	cmp	r4, r3
 800ce88:	d006      	beq.n	800ce98 <std+0x48>
 800ce8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce8e:	4294      	cmp	r4, r2
 800ce90:	d002      	beq.n	800ce98 <std+0x48>
 800ce92:	33d0      	adds	r3, #208	@ 0xd0
 800ce94:	429c      	cmp	r4, r3
 800ce96:	d105      	bne.n	800cea4 <std+0x54>
 800ce98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cea0:	f000 bf62 	b.w	800dd68 <__retarget_lock_init_recursive>
 800cea4:	bd10      	pop	{r4, pc}
 800cea6:	bf00      	nop
 800cea8:	0800fff9 	.word	0x0800fff9
 800ceac:	0801001b 	.word	0x0801001b
 800ceb0:	08010053 	.word	0x08010053
 800ceb4:	08010077 	.word	0x08010077
 800ceb8:	20000438 	.word	0x20000438

0800cebc <stdio_exit_handler>:
 800cebc:	4a02      	ldr	r2, [pc, #8]	@ (800cec8 <stdio_exit_handler+0xc>)
 800cebe:	4903      	ldr	r1, [pc, #12]	@ (800cecc <stdio_exit_handler+0x10>)
 800cec0:	4803      	ldr	r0, [pc, #12]	@ (800ced0 <stdio_exit_handler+0x14>)
 800cec2:	f000 beef 	b.w	800dca4 <_fwalk_sglue>
 800cec6:	bf00      	nop
 800cec8:	20000024 	.word	0x20000024
 800cecc:	0800f625 	.word	0x0800f625
 800ced0:	200001a0 	.word	0x200001a0

0800ced4 <cleanup_stdio>:
 800ced4:	6841      	ldr	r1, [r0, #4]
 800ced6:	4b0c      	ldr	r3, [pc, #48]	@ (800cf08 <cleanup_stdio+0x34>)
 800ced8:	4299      	cmp	r1, r3
 800ceda:	b510      	push	{r4, lr}
 800cedc:	4604      	mov	r4, r0
 800cede:	d001      	beq.n	800cee4 <cleanup_stdio+0x10>
 800cee0:	f002 fba0 	bl	800f624 <_fflush_r>
 800cee4:	68a1      	ldr	r1, [r4, #8]
 800cee6:	4b09      	ldr	r3, [pc, #36]	@ (800cf0c <cleanup_stdio+0x38>)
 800cee8:	4299      	cmp	r1, r3
 800ceea:	d002      	beq.n	800cef2 <cleanup_stdio+0x1e>
 800ceec:	4620      	mov	r0, r4
 800ceee:	f002 fb99 	bl	800f624 <_fflush_r>
 800cef2:	68e1      	ldr	r1, [r4, #12]
 800cef4:	4b06      	ldr	r3, [pc, #24]	@ (800cf10 <cleanup_stdio+0x3c>)
 800cef6:	4299      	cmp	r1, r3
 800cef8:	d004      	beq.n	800cf04 <cleanup_stdio+0x30>
 800cefa:	4620      	mov	r0, r4
 800cefc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf00:	f002 bb90 	b.w	800f624 <_fflush_r>
 800cf04:	bd10      	pop	{r4, pc}
 800cf06:	bf00      	nop
 800cf08:	20000438 	.word	0x20000438
 800cf0c:	200004a0 	.word	0x200004a0
 800cf10:	20000508 	.word	0x20000508

0800cf14 <global_stdio_init.part.0>:
 800cf14:	b510      	push	{r4, lr}
 800cf16:	4b0b      	ldr	r3, [pc, #44]	@ (800cf44 <global_stdio_init.part.0+0x30>)
 800cf18:	2104      	movs	r1, #4
 800cf1a:	4c0b      	ldr	r4, [pc, #44]	@ (800cf48 <global_stdio_init.part.0+0x34>)
 800cf1c:	4a0b      	ldr	r2, [pc, #44]	@ (800cf4c <global_stdio_init.part.0+0x38>)
 800cf1e:	4620      	mov	r0, r4
 800cf20:	601a      	str	r2, [r3, #0]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f7ff ff94 	bl	800ce50 <std>
 800cf28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	2109      	movs	r1, #9
 800cf30:	f7ff ff8e 	bl	800ce50 <std>
 800cf34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf38:	2202      	movs	r2, #2
 800cf3a:	2112      	movs	r1, #18
 800cf3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf40:	f7ff bf86 	b.w	800ce50 <std>
 800cf44:	20000570 	.word	0x20000570
 800cf48:	20000438 	.word	0x20000438
 800cf4c:	0800cebd 	.word	0x0800cebd

0800cf50 <__sfp_lock_acquire>:
 800cf50:	4801      	ldr	r0, [pc, #4]	@ (800cf58 <__sfp_lock_acquire+0x8>)
 800cf52:	f000 bf0a 	b.w	800dd6a <__retarget_lock_acquire_recursive>
 800cf56:	bf00      	nop
 800cf58:	20000575 	.word	0x20000575

0800cf5c <__sfp_lock_release>:
 800cf5c:	4801      	ldr	r0, [pc, #4]	@ (800cf64 <__sfp_lock_release+0x8>)
 800cf5e:	f000 bf05 	b.w	800dd6c <__retarget_lock_release_recursive>
 800cf62:	bf00      	nop
 800cf64:	20000575 	.word	0x20000575

0800cf68 <__sinit>:
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	f7ff fff0 	bl	800cf50 <__sfp_lock_acquire>
 800cf70:	6a23      	ldr	r3, [r4, #32]
 800cf72:	b11b      	cbz	r3, 800cf7c <__sinit+0x14>
 800cf74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf78:	f7ff bff0 	b.w	800cf5c <__sfp_lock_release>
 800cf7c:	4b04      	ldr	r3, [pc, #16]	@ (800cf90 <__sinit+0x28>)
 800cf7e:	6223      	str	r3, [r4, #32]
 800cf80:	4b04      	ldr	r3, [pc, #16]	@ (800cf94 <__sinit+0x2c>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1f5      	bne.n	800cf74 <__sinit+0xc>
 800cf88:	f7ff ffc4 	bl	800cf14 <global_stdio_init.part.0>
 800cf8c:	e7f2      	b.n	800cf74 <__sinit+0xc>
 800cf8e:	bf00      	nop
 800cf90:	0800ced5 	.word	0x0800ced5
 800cf94:	20000570 	.word	0x20000570

0800cf98 <sulp>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	460d      	mov	r5, r1
 800cf9e:	4616      	mov	r6, r2
 800cfa0:	ec45 4b10 	vmov	d0, r4, r5
 800cfa4:	f002 fee6 	bl	800fd74 <__ulp>
 800cfa8:	ec51 0b10 	vmov	r0, r1, d0
 800cfac:	b17e      	cbz	r6, 800cfce <sulp+0x36>
 800cfae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cfb2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	dd09      	ble.n	800cfce <sulp+0x36>
 800cfba:	051b      	lsls	r3, r3, #20
 800cfbc:	2400      	movs	r4, #0
 800cfbe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cfc2:	4622      	mov	r2, r4
 800cfc4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cfc8:	462b      	mov	r3, r5
 800cfca:	f7f3 fb25 	bl	8000618 <__aeabi_dmul>
 800cfce:	ec41 0b10 	vmov	d0, r0, r1
 800cfd2:	bd70      	pop	{r4, r5, r6, pc}
 800cfd4:	0000      	movs	r0, r0
	...

0800cfd8 <_strtod_l>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	b09f      	sub	sp, #124	@ 0x7c
 800cfde:	460c      	mov	r4, r1
 800cfe0:	f04f 0a00 	mov.w	sl, #0
 800cfe4:	f04f 0b00 	mov.w	fp, #0
 800cfe8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cfea:	2200      	movs	r2, #0
 800cfec:	9005      	str	r0, [sp, #20]
 800cfee:	921a      	str	r2, [sp, #104]	@ 0x68
 800cff0:	460a      	mov	r2, r1
 800cff2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cff4:	7811      	ldrb	r1, [r2, #0]
 800cff6:	292b      	cmp	r1, #43	@ 0x2b
 800cff8:	d04a      	beq.n	800d090 <_strtod_l+0xb8>
 800cffa:	d838      	bhi.n	800d06e <_strtod_l+0x96>
 800cffc:	290d      	cmp	r1, #13
 800cffe:	d832      	bhi.n	800d066 <_strtod_l+0x8e>
 800d000:	2908      	cmp	r1, #8
 800d002:	d832      	bhi.n	800d06a <_strtod_l+0x92>
 800d004:	2900      	cmp	r1, #0
 800d006:	d03b      	beq.n	800d080 <_strtod_l+0xa8>
 800d008:	2200      	movs	r2, #0
 800d00a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d00c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d00e:	782a      	ldrb	r2, [r5, #0]
 800d010:	2a30      	cmp	r2, #48	@ 0x30
 800d012:	f040 80b2 	bne.w	800d17a <_strtod_l+0x1a2>
 800d016:	786a      	ldrb	r2, [r5, #1]
 800d018:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d01c:	2a58      	cmp	r2, #88	@ 0x58
 800d01e:	d16e      	bne.n	800d0fe <_strtod_l+0x126>
 800d020:	9302      	str	r3, [sp, #8]
 800d022:	a919      	add	r1, sp, #100	@ 0x64
 800d024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d026:	4a90      	ldr	r2, [pc, #576]	@ (800d268 <_strtod_l+0x290>)
 800d028:	9301      	str	r3, [sp, #4]
 800d02a:	ab1a      	add	r3, sp, #104	@ 0x68
 800d02c:	9805      	ldr	r0, [sp, #20]
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d032:	f001 fd91 	bl	800eb58 <__gethex>
 800d036:	f010 060f 	ands.w	r6, r0, #15
 800d03a:	4604      	mov	r4, r0
 800d03c:	d005      	beq.n	800d04a <_strtod_l+0x72>
 800d03e:	2e06      	cmp	r6, #6
 800d040:	d128      	bne.n	800d094 <_strtod_l+0xbc>
 800d042:	3501      	adds	r5, #1
 800d044:	2300      	movs	r3, #0
 800d046:	9519      	str	r5, [sp, #100]	@ 0x64
 800d048:	930e      	str	r3, [sp, #56]	@ 0x38
 800d04a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	f040 858e 	bne.w	800db6e <_strtod_l+0xb96>
 800d052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d054:	b1cb      	cbz	r3, 800d08a <_strtod_l+0xb2>
 800d056:	4652      	mov	r2, sl
 800d058:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d05c:	ec43 2b10 	vmov	d0, r2, r3
 800d060:	b01f      	add	sp, #124	@ 0x7c
 800d062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d066:	2920      	cmp	r1, #32
 800d068:	d1ce      	bne.n	800d008 <_strtod_l+0x30>
 800d06a:	3201      	adds	r2, #1
 800d06c:	e7c1      	b.n	800cff2 <_strtod_l+0x1a>
 800d06e:	292d      	cmp	r1, #45	@ 0x2d
 800d070:	d1ca      	bne.n	800d008 <_strtod_l+0x30>
 800d072:	2101      	movs	r1, #1
 800d074:	910e      	str	r1, [sp, #56]	@ 0x38
 800d076:	1c51      	adds	r1, r2, #1
 800d078:	9119      	str	r1, [sp, #100]	@ 0x64
 800d07a:	7852      	ldrb	r2, [r2, #1]
 800d07c:	2a00      	cmp	r2, #0
 800d07e:	d1c5      	bne.n	800d00c <_strtod_l+0x34>
 800d080:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d082:	9419      	str	r4, [sp, #100]	@ 0x64
 800d084:	2b00      	cmp	r3, #0
 800d086:	f040 8570 	bne.w	800db6a <_strtod_l+0xb92>
 800d08a:	4652      	mov	r2, sl
 800d08c:	465b      	mov	r3, fp
 800d08e:	e7e5      	b.n	800d05c <_strtod_l+0x84>
 800d090:	2100      	movs	r1, #0
 800d092:	e7ef      	b.n	800d074 <_strtod_l+0x9c>
 800d094:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d096:	b13a      	cbz	r2, 800d0a8 <_strtod_l+0xd0>
 800d098:	2135      	movs	r1, #53	@ 0x35
 800d09a:	a81c      	add	r0, sp, #112	@ 0x70
 800d09c:	f002 ff68 	bl	800ff70 <__copybits>
 800d0a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0a2:	9805      	ldr	r0, [sp, #20]
 800d0a4:	f002 fb32 	bl	800f70c <_Bfree>
 800d0a8:	3e01      	subs	r6, #1
 800d0aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d0ac:	2e04      	cmp	r6, #4
 800d0ae:	d806      	bhi.n	800d0be <_strtod_l+0xe6>
 800d0b0:	e8df f006 	tbb	[pc, r6]
 800d0b4:	201d0314 	.word	0x201d0314
 800d0b8:	14          	.byte	0x14
 800d0b9:	00          	.byte	0x00
 800d0ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d0be:	05e1      	lsls	r1, r4, #23
 800d0c0:	bf48      	it	mi
 800d0c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d0c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0ca:	0d1b      	lsrs	r3, r3, #20
 800d0cc:	051b      	lsls	r3, r3, #20
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1bb      	bne.n	800d04a <_strtod_l+0x72>
 800d0d2:	f000 fe1f 	bl	800dd14 <__errno>
 800d0d6:	2322      	movs	r3, #34	@ 0x22
 800d0d8:	6003      	str	r3, [r0, #0]
 800d0da:	e7b6      	b.n	800d04a <_strtod_l+0x72>
 800d0dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d0e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d0e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d0e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d0ec:	e7e7      	b.n	800d0be <_strtod_l+0xe6>
 800d0ee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d270 <_strtod_l+0x298>
 800d0f2:	e7e4      	b.n	800d0be <_strtod_l+0xe6>
 800d0f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d0f8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d0fc:	e7df      	b.n	800d0be <_strtod_l+0xe6>
 800d0fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	9219      	str	r2, [sp, #100]	@ 0x64
 800d104:	785b      	ldrb	r3, [r3, #1]
 800d106:	2b30      	cmp	r3, #48	@ 0x30
 800d108:	d0f9      	beq.n	800d0fe <_strtod_l+0x126>
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d09d      	beq.n	800d04a <_strtod_l+0x72>
 800d10e:	2301      	movs	r3, #1
 800d110:	2700      	movs	r7, #0
 800d112:	9308      	str	r3, [sp, #32]
 800d114:	220a      	movs	r2, #10
 800d116:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d118:	46b9      	mov	r9, r7
 800d11a:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d11c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d11e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d120:	7805      	ldrb	r5, [r0, #0]
 800d122:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d126:	b2d9      	uxtb	r1, r3
 800d128:	2909      	cmp	r1, #9
 800d12a:	d928      	bls.n	800d17e <_strtod_l+0x1a6>
 800d12c:	2201      	movs	r2, #1
 800d12e:	494f      	ldr	r1, [pc, #316]	@ (800d26c <_strtod_l+0x294>)
 800d130:	f000 fdde 	bl	800dcf0 <strncmp>
 800d134:	2800      	cmp	r0, #0
 800d136:	d032      	beq.n	800d19e <_strtod_l+0x1c6>
 800d138:	2000      	movs	r0, #0
 800d13a:	462a      	mov	r2, r5
 800d13c:	464d      	mov	r5, r9
 800d13e:	4603      	mov	r3, r0
 800d140:	900a      	str	r0, [sp, #40]	@ 0x28
 800d142:	2a65      	cmp	r2, #101	@ 0x65
 800d144:	d001      	beq.n	800d14a <_strtod_l+0x172>
 800d146:	2a45      	cmp	r2, #69	@ 0x45
 800d148:	d114      	bne.n	800d174 <_strtod_l+0x19c>
 800d14a:	b91d      	cbnz	r5, 800d154 <_strtod_l+0x17c>
 800d14c:	9a08      	ldr	r2, [sp, #32]
 800d14e:	4302      	orrs	r2, r0
 800d150:	d096      	beq.n	800d080 <_strtod_l+0xa8>
 800d152:	2500      	movs	r5, #0
 800d154:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d156:	1c62      	adds	r2, r4, #1
 800d158:	9219      	str	r2, [sp, #100]	@ 0x64
 800d15a:	7862      	ldrb	r2, [r4, #1]
 800d15c:	2a2b      	cmp	r2, #43	@ 0x2b
 800d15e:	d079      	beq.n	800d254 <_strtod_l+0x27c>
 800d160:	2a2d      	cmp	r2, #45	@ 0x2d
 800d162:	d07d      	beq.n	800d260 <_strtod_l+0x288>
 800d164:	f04f 0c00 	mov.w	ip, #0
 800d168:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d16c:	2909      	cmp	r1, #9
 800d16e:	f240 8085 	bls.w	800d27c <_strtod_l+0x2a4>
 800d172:	9419      	str	r4, [sp, #100]	@ 0x64
 800d174:	f04f 0800 	mov.w	r8, #0
 800d178:	e0a5      	b.n	800d2c6 <_strtod_l+0x2ee>
 800d17a:	2300      	movs	r3, #0
 800d17c:	e7c8      	b.n	800d110 <_strtod_l+0x138>
 800d17e:	f1b9 0f08 	cmp.w	r9, #8
 800d182:	f100 0001 	add.w	r0, r0, #1
 800d186:	f109 0901 	add.w	r9, r9, #1
 800d18a:	bfd4      	ite	le
 800d18c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d18e:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d192:	9019      	str	r0, [sp, #100]	@ 0x64
 800d194:	bfdc      	itt	le
 800d196:	fb02 3301 	mlale	r3, r2, r1, r3
 800d19a:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d19c:	e7bf      	b.n	800d11e <_strtod_l+0x146>
 800d19e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1a0:	1c5a      	adds	r2, r3, #1
 800d1a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1a4:	785a      	ldrb	r2, [r3, #1]
 800d1a6:	f1b9 0f00 	cmp.w	r9, #0
 800d1aa:	d03a      	beq.n	800d222 <_strtod_l+0x24a>
 800d1ac:	464d      	mov	r5, r9
 800d1ae:	900a      	str	r0, [sp, #40]	@ 0x28
 800d1b0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d1b4:	2b09      	cmp	r3, #9
 800d1b6:	d912      	bls.n	800d1de <_strtod_l+0x206>
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e7c2      	b.n	800d142 <_strtod_l+0x16a>
 800d1bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1be:	3001      	adds	r0, #1
 800d1c0:	1c5a      	adds	r2, r3, #1
 800d1c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1c4:	785a      	ldrb	r2, [r3, #1]
 800d1c6:	2a30      	cmp	r2, #48	@ 0x30
 800d1c8:	d0f8      	beq.n	800d1bc <_strtod_l+0x1e4>
 800d1ca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d1ce:	2b08      	cmp	r3, #8
 800d1d0:	f200 84d2 	bhi.w	800db78 <_strtod_l+0xba0>
 800d1d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1da:	4605      	mov	r5, r0
 800d1dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1de:	3a30      	subs	r2, #48	@ 0x30
 800d1e0:	f100 0301 	add.w	r3, r0, #1
 800d1e4:	d017      	beq.n	800d216 <_strtod_l+0x23e>
 800d1e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d1e8:	462e      	mov	r6, r5
 800d1ea:	f04f 0e0a 	mov.w	lr, #10
 800d1ee:	4419      	add	r1, r3
 800d1f0:	910a      	str	r1, [sp, #40]	@ 0x28
 800d1f2:	1c71      	adds	r1, r6, #1
 800d1f4:	eba1 0c05 	sub.w	ip, r1, r5
 800d1f8:	4563      	cmp	r3, ip
 800d1fa:	dc14      	bgt.n	800d226 <_strtod_l+0x24e>
 800d1fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d200:	182b      	adds	r3, r5, r0
 800d202:	3501      	adds	r5, #1
 800d204:	2b08      	cmp	r3, #8
 800d206:	4405      	add	r5, r0
 800d208:	dc1a      	bgt.n	800d240 <_strtod_l+0x268>
 800d20a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d20c:	230a      	movs	r3, #10
 800d20e:	fb03 2301 	mla	r3, r3, r1, r2
 800d212:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d214:	2300      	movs	r3, #0
 800d216:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d218:	4618      	mov	r0, r3
 800d21a:	1c51      	adds	r1, r2, #1
 800d21c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d21e:	7852      	ldrb	r2, [r2, #1]
 800d220:	e7c6      	b.n	800d1b0 <_strtod_l+0x1d8>
 800d222:	4648      	mov	r0, r9
 800d224:	e7cf      	b.n	800d1c6 <_strtod_l+0x1ee>
 800d226:	2e08      	cmp	r6, #8
 800d228:	dc05      	bgt.n	800d236 <_strtod_l+0x25e>
 800d22a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d22c:	fb0e f606 	mul.w	r6, lr, r6
 800d230:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d232:	460e      	mov	r6, r1
 800d234:	e7dd      	b.n	800d1f2 <_strtod_l+0x21a>
 800d236:	2910      	cmp	r1, #16
 800d238:	bfd8      	it	le
 800d23a:	fb0e f707 	mulle.w	r7, lr, r7
 800d23e:	e7f8      	b.n	800d232 <_strtod_l+0x25a>
 800d240:	2b0f      	cmp	r3, #15
 800d242:	bfdc      	itt	le
 800d244:	230a      	movle	r3, #10
 800d246:	fb03 2707 	mlale	r7, r3, r7, r2
 800d24a:	e7e3      	b.n	800d214 <_strtod_l+0x23c>
 800d24c:	2300      	movs	r3, #0
 800d24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d250:	2301      	movs	r3, #1
 800d252:	e77b      	b.n	800d14c <_strtod_l+0x174>
 800d254:	f04f 0c00 	mov.w	ip, #0
 800d258:	1ca2      	adds	r2, r4, #2
 800d25a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d25c:	78a2      	ldrb	r2, [r4, #2]
 800d25e:	e783      	b.n	800d168 <_strtod_l+0x190>
 800d260:	f04f 0c01 	mov.w	ip, #1
 800d264:	e7f8      	b.n	800d258 <_strtod_l+0x280>
 800d266:	bf00      	nop
 800d268:	08010fc0 	.word	0x08010fc0
 800d26c:	08010e0d 	.word	0x08010e0d
 800d270:	7ff00000 	.word	0x7ff00000
 800d274:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d276:	1c51      	adds	r1, r2, #1
 800d278:	9119      	str	r1, [sp, #100]	@ 0x64
 800d27a:	7852      	ldrb	r2, [r2, #1]
 800d27c:	2a30      	cmp	r2, #48	@ 0x30
 800d27e:	d0f9      	beq.n	800d274 <_strtod_l+0x29c>
 800d280:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d284:	2908      	cmp	r1, #8
 800d286:	f63f af75 	bhi.w	800d174 <_strtod_l+0x19c>
 800d28a:	3a30      	subs	r2, #48	@ 0x30
 800d28c:	f04f 080a 	mov.w	r8, #10
 800d290:	9209      	str	r2, [sp, #36]	@ 0x24
 800d292:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d294:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d296:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d298:	1c56      	adds	r6, r2, #1
 800d29a:	9619      	str	r6, [sp, #100]	@ 0x64
 800d29c:	7852      	ldrb	r2, [r2, #1]
 800d29e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d2a2:	f1be 0f09 	cmp.w	lr, #9
 800d2a6:	d939      	bls.n	800d31c <_strtod_l+0x344>
 800d2a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d2aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d2ae:	1a76      	subs	r6, r6, r1
 800d2b0:	2e08      	cmp	r6, #8
 800d2b2:	dc03      	bgt.n	800d2bc <_strtod_l+0x2e4>
 800d2b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d2b6:	4588      	cmp	r8, r1
 800d2b8:	bfa8      	it	ge
 800d2ba:	4688      	movge	r8, r1
 800d2bc:	f1bc 0f00 	cmp.w	ip, #0
 800d2c0:	d001      	beq.n	800d2c6 <_strtod_l+0x2ee>
 800d2c2:	f1c8 0800 	rsb	r8, r8, #0
 800d2c6:	2d00      	cmp	r5, #0
 800d2c8:	d14e      	bne.n	800d368 <_strtod_l+0x390>
 800d2ca:	9908      	ldr	r1, [sp, #32]
 800d2cc:	4308      	orrs	r0, r1
 800d2ce:	f47f aebc 	bne.w	800d04a <_strtod_l+0x72>
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	f47f aed4 	bne.w	800d080 <_strtod_l+0xa8>
 800d2d8:	2a69      	cmp	r2, #105	@ 0x69
 800d2da:	d028      	beq.n	800d32e <_strtod_l+0x356>
 800d2dc:	dc25      	bgt.n	800d32a <_strtod_l+0x352>
 800d2de:	2a49      	cmp	r2, #73	@ 0x49
 800d2e0:	d025      	beq.n	800d32e <_strtod_l+0x356>
 800d2e2:	2a4e      	cmp	r2, #78	@ 0x4e
 800d2e4:	f47f aecc 	bne.w	800d080 <_strtod_l+0xa8>
 800d2e8:	499a      	ldr	r1, [pc, #616]	@ (800d554 <_strtod_l+0x57c>)
 800d2ea:	a819      	add	r0, sp, #100	@ 0x64
 800d2ec:	f001 fe54 	bl	800ef98 <__match>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	f43f aec5 	beq.w	800d080 <_strtod_l+0xa8>
 800d2f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	2b28      	cmp	r3, #40	@ 0x28
 800d2fc:	d12e      	bne.n	800d35c <_strtod_l+0x384>
 800d2fe:	aa1c      	add	r2, sp, #112	@ 0x70
 800d300:	4995      	ldr	r1, [pc, #596]	@ (800d558 <_strtod_l+0x580>)
 800d302:	a819      	add	r0, sp, #100	@ 0x64
 800d304:	f001 fe5c 	bl	800efc0 <__hexnan>
 800d308:	2805      	cmp	r0, #5
 800d30a:	d127      	bne.n	800d35c <_strtod_l+0x384>
 800d30c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d30e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d312:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d316:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d31a:	e696      	b.n	800d04a <_strtod_l+0x72>
 800d31c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d31e:	fb08 2101 	mla	r1, r8, r1, r2
 800d322:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d326:	9209      	str	r2, [sp, #36]	@ 0x24
 800d328:	e7b5      	b.n	800d296 <_strtod_l+0x2be>
 800d32a:	2a6e      	cmp	r2, #110	@ 0x6e
 800d32c:	e7da      	b.n	800d2e4 <_strtod_l+0x30c>
 800d32e:	498b      	ldr	r1, [pc, #556]	@ (800d55c <_strtod_l+0x584>)
 800d330:	a819      	add	r0, sp, #100	@ 0x64
 800d332:	f001 fe31 	bl	800ef98 <__match>
 800d336:	2800      	cmp	r0, #0
 800d338:	f43f aea2 	beq.w	800d080 <_strtod_l+0xa8>
 800d33c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d33e:	a819      	add	r0, sp, #100	@ 0x64
 800d340:	4987      	ldr	r1, [pc, #540]	@ (800d560 <_strtod_l+0x588>)
 800d342:	3b01      	subs	r3, #1
 800d344:	9319      	str	r3, [sp, #100]	@ 0x64
 800d346:	f001 fe27 	bl	800ef98 <__match>
 800d34a:	b910      	cbnz	r0, 800d352 <_strtod_l+0x37a>
 800d34c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d34e:	3301      	adds	r3, #1
 800d350:	9319      	str	r3, [sp, #100]	@ 0x64
 800d352:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d570 <_strtod_l+0x598>
 800d356:	f04f 0a00 	mov.w	sl, #0
 800d35a:	e676      	b.n	800d04a <_strtod_l+0x72>
 800d35c:	4881      	ldr	r0, [pc, #516]	@ (800d564 <_strtod_l+0x58c>)
 800d35e:	f000 fd27 	bl	800ddb0 <nan>
 800d362:	ec5b ab10 	vmov	sl, fp, d0
 800d366:	e670      	b.n	800d04a <_strtod_l+0x72>
 800d368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d36a:	f1b9 0f00 	cmp.w	r9, #0
 800d36e:	bf08      	it	eq
 800d370:	46a9      	moveq	r9, r5
 800d372:	2d10      	cmp	r5, #16
 800d374:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d376:	eba8 0303 	sub.w	r3, r8, r3
 800d37a:	462c      	mov	r4, r5
 800d37c:	bfa8      	it	ge
 800d37e:	2410      	movge	r4, #16
 800d380:	9309      	str	r3, [sp, #36]	@ 0x24
 800d382:	f7f3 f8cf 	bl	8000524 <__aeabi_ui2d>
 800d386:	2d09      	cmp	r5, #9
 800d388:	4682      	mov	sl, r0
 800d38a:	468b      	mov	fp, r1
 800d38c:	dc13      	bgt.n	800d3b6 <_strtod_l+0x3de>
 800d38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d390:	2b00      	cmp	r3, #0
 800d392:	f43f ae5a 	beq.w	800d04a <_strtod_l+0x72>
 800d396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d398:	dd78      	ble.n	800d48c <_strtod_l+0x4b4>
 800d39a:	2b16      	cmp	r3, #22
 800d39c:	dc5f      	bgt.n	800d45e <_strtod_l+0x486>
 800d39e:	4972      	ldr	r1, [pc, #456]	@ (800d568 <_strtod_l+0x590>)
 800d3a0:	4652      	mov	r2, sl
 800d3a2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3a6:	465b      	mov	r3, fp
 800d3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3ac:	f7f3 f934 	bl	8000618 <__aeabi_dmul>
 800d3b0:	4682      	mov	sl, r0
 800d3b2:	468b      	mov	fp, r1
 800d3b4:	e649      	b.n	800d04a <_strtod_l+0x72>
 800d3b6:	4b6c      	ldr	r3, [pc, #432]	@ (800d568 <_strtod_l+0x590>)
 800d3b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d3bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d3c0:	f7f3 f92a 	bl	8000618 <__aeabi_dmul>
 800d3c4:	4682      	mov	sl, r0
 800d3c6:	468b      	mov	fp, r1
 800d3c8:	4638      	mov	r0, r7
 800d3ca:	f7f3 f8ab 	bl	8000524 <__aeabi_ui2d>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	4650      	mov	r0, sl
 800d3d4:	4659      	mov	r1, fp
 800d3d6:	f7f2 ff69 	bl	80002ac <__adddf3>
 800d3da:	2d0f      	cmp	r5, #15
 800d3dc:	4682      	mov	sl, r0
 800d3de:	468b      	mov	fp, r1
 800d3e0:	ddd5      	ble.n	800d38e <_strtod_l+0x3b6>
 800d3e2:	1b2c      	subs	r4, r5, r4
 800d3e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e6:	441c      	add	r4, r3
 800d3e8:	2c00      	cmp	r4, #0
 800d3ea:	f340 8093 	ble.w	800d514 <_strtod_l+0x53c>
 800d3ee:	f014 030f 	ands.w	r3, r4, #15
 800d3f2:	d00a      	beq.n	800d40a <_strtod_l+0x432>
 800d3f4:	495c      	ldr	r1, [pc, #368]	@ (800d568 <_strtod_l+0x590>)
 800d3f6:	4652      	mov	r2, sl
 800d3f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3fc:	465b      	mov	r3, fp
 800d3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d402:	f7f3 f909 	bl	8000618 <__aeabi_dmul>
 800d406:	4682      	mov	sl, r0
 800d408:	468b      	mov	fp, r1
 800d40a:	f034 040f 	bics.w	r4, r4, #15
 800d40e:	d073      	beq.n	800d4f8 <_strtod_l+0x520>
 800d410:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d414:	dd49      	ble.n	800d4aa <_strtod_l+0x4d2>
 800d416:	2400      	movs	r4, #0
 800d418:	46a0      	mov	r8, r4
 800d41a:	46a1      	mov	r9, r4
 800d41c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d41e:	2322      	movs	r3, #34	@ 0x22
 800d420:	9a05      	ldr	r2, [sp, #20]
 800d422:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d570 <_strtod_l+0x598>
 800d426:	f04f 0a00 	mov.w	sl, #0
 800d42a:	6013      	str	r3, [r2, #0]
 800d42c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f43f ae0b 	beq.w	800d04a <_strtod_l+0x72>
 800d434:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d436:	9805      	ldr	r0, [sp, #20]
 800d438:	f002 f968 	bl	800f70c <_Bfree>
 800d43c:	4649      	mov	r1, r9
 800d43e:	9805      	ldr	r0, [sp, #20]
 800d440:	f002 f964 	bl	800f70c <_Bfree>
 800d444:	4641      	mov	r1, r8
 800d446:	9805      	ldr	r0, [sp, #20]
 800d448:	f002 f960 	bl	800f70c <_Bfree>
 800d44c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d44e:	9805      	ldr	r0, [sp, #20]
 800d450:	f002 f95c 	bl	800f70c <_Bfree>
 800d454:	4621      	mov	r1, r4
 800d456:	9805      	ldr	r0, [sp, #20]
 800d458:	f002 f958 	bl	800f70c <_Bfree>
 800d45c:	e5f5      	b.n	800d04a <_strtod_l+0x72>
 800d45e:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d464:	4293      	cmp	r3, r2
 800d466:	dbbc      	blt.n	800d3e2 <_strtod_l+0x40a>
 800d468:	f1c5 050f 	rsb	r5, r5, #15
 800d46c:	4c3e      	ldr	r4, [pc, #248]	@ (800d568 <_strtod_l+0x590>)
 800d46e:	4652      	mov	r2, sl
 800d470:	465b      	mov	r3, fp
 800d472:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d47a:	f7f3 f8cd 	bl	8000618 <__aeabi_dmul>
 800d47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d480:	1b5d      	subs	r5, r3, r5
 800d482:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d486:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d48a:	e78f      	b.n	800d3ac <_strtod_l+0x3d4>
 800d48c:	3316      	adds	r3, #22
 800d48e:	dba8      	blt.n	800d3e2 <_strtod_l+0x40a>
 800d490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d492:	4650      	mov	r0, sl
 800d494:	4659      	mov	r1, fp
 800d496:	eba3 0808 	sub.w	r8, r3, r8
 800d49a:	4b33      	ldr	r3, [pc, #204]	@ (800d568 <_strtod_l+0x590>)
 800d49c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d4a0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d4a4:	f7f3 f9e2 	bl	800086c <__aeabi_ddiv>
 800d4a8:	e782      	b.n	800d3b0 <_strtod_l+0x3d8>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	1124      	asrs	r4, r4, #4
 800d4ae:	4650      	mov	r0, sl
 800d4b0:	4659      	mov	r1, fp
 800d4b2:	4f2e      	ldr	r7, [pc, #184]	@ (800d56c <_strtod_l+0x594>)
 800d4b4:	461e      	mov	r6, r3
 800d4b6:	2c01      	cmp	r4, #1
 800d4b8:	dc21      	bgt.n	800d4fe <_strtod_l+0x526>
 800d4ba:	b10b      	cbz	r3, 800d4c0 <_strtod_l+0x4e8>
 800d4bc:	4682      	mov	sl, r0
 800d4be:	468b      	mov	fp, r1
 800d4c0:	492a      	ldr	r1, [pc, #168]	@ (800d56c <_strtod_l+0x594>)
 800d4c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d4c6:	4652      	mov	r2, sl
 800d4c8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d4cc:	465b      	mov	r3, fp
 800d4ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4d2:	f7f3 f8a1 	bl	8000618 <__aeabi_dmul>
 800d4d6:	4b26      	ldr	r3, [pc, #152]	@ (800d570 <_strtod_l+0x598>)
 800d4d8:	460a      	mov	r2, r1
 800d4da:	4682      	mov	sl, r0
 800d4dc:	400b      	ands	r3, r1
 800d4de:	4925      	ldr	r1, [pc, #148]	@ (800d574 <_strtod_l+0x59c>)
 800d4e0:	428b      	cmp	r3, r1
 800d4e2:	d898      	bhi.n	800d416 <_strtod_l+0x43e>
 800d4e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d4e8:	428b      	cmp	r3, r1
 800d4ea:	bf86      	itte	hi
 800d4ec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d578 <_strtod_l+0x5a0>
 800d4f0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800d4f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	9308      	str	r3, [sp, #32]
 800d4fc:	e076      	b.n	800d5ec <_strtod_l+0x614>
 800d4fe:	07e2      	lsls	r2, r4, #31
 800d500:	d504      	bpl.n	800d50c <_strtod_l+0x534>
 800d502:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d506:	f7f3 f887 	bl	8000618 <__aeabi_dmul>
 800d50a:	2301      	movs	r3, #1
 800d50c:	3601      	adds	r6, #1
 800d50e:	1064      	asrs	r4, r4, #1
 800d510:	3708      	adds	r7, #8
 800d512:	e7d0      	b.n	800d4b6 <_strtod_l+0x4de>
 800d514:	d0f0      	beq.n	800d4f8 <_strtod_l+0x520>
 800d516:	4264      	negs	r4, r4
 800d518:	f014 020f 	ands.w	r2, r4, #15
 800d51c:	d00a      	beq.n	800d534 <_strtod_l+0x55c>
 800d51e:	4b12      	ldr	r3, [pc, #72]	@ (800d568 <_strtod_l+0x590>)
 800d520:	4650      	mov	r0, sl
 800d522:	4659      	mov	r1, fp
 800d524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	f7f3 f99e 	bl	800086c <__aeabi_ddiv>
 800d530:	4682      	mov	sl, r0
 800d532:	468b      	mov	fp, r1
 800d534:	1124      	asrs	r4, r4, #4
 800d536:	d0df      	beq.n	800d4f8 <_strtod_l+0x520>
 800d538:	2c1f      	cmp	r4, #31
 800d53a:	dd1f      	ble.n	800d57c <_strtod_l+0x5a4>
 800d53c:	2400      	movs	r4, #0
 800d53e:	46a0      	mov	r8, r4
 800d540:	46a1      	mov	r9, r4
 800d542:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d544:	2322      	movs	r3, #34	@ 0x22
 800d546:	9a05      	ldr	r2, [sp, #20]
 800d548:	f04f 0a00 	mov.w	sl, #0
 800d54c:	f04f 0b00 	mov.w	fp, #0
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	e76b      	b.n	800d42c <_strtod_l+0x454>
 800d554:	08010de1 	.word	0x08010de1
 800d558:	08010fac 	.word	0x08010fac
 800d55c:	08010dd9 	.word	0x08010dd9
 800d560:	08010e1a 	.word	0x08010e1a
 800d564:	08010fa9 	.word	0x08010fa9
 800d568:	08011138 	.word	0x08011138
 800d56c:	08011110 	.word	0x08011110
 800d570:	7ff00000 	.word	0x7ff00000
 800d574:	7ca00000 	.word	0x7ca00000
 800d578:	7fefffff 	.word	0x7fefffff
 800d57c:	f014 0310 	ands.w	r3, r4, #16
 800d580:	4650      	mov	r0, sl
 800d582:	4659      	mov	r1, fp
 800d584:	4ea9      	ldr	r6, [pc, #676]	@ (800d82c <_strtod_l+0x854>)
 800d586:	bf18      	it	ne
 800d588:	236a      	movne	r3, #106	@ 0x6a
 800d58a:	9308      	str	r3, [sp, #32]
 800d58c:	2300      	movs	r3, #0
 800d58e:	07e7      	lsls	r7, r4, #31
 800d590:	d504      	bpl.n	800d59c <_strtod_l+0x5c4>
 800d592:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d596:	f7f3 f83f 	bl	8000618 <__aeabi_dmul>
 800d59a:	2301      	movs	r3, #1
 800d59c:	1064      	asrs	r4, r4, #1
 800d59e:	f106 0608 	add.w	r6, r6, #8
 800d5a2:	d1f4      	bne.n	800d58e <_strtod_l+0x5b6>
 800d5a4:	b10b      	cbz	r3, 800d5aa <_strtod_l+0x5d2>
 800d5a6:	4682      	mov	sl, r0
 800d5a8:	468b      	mov	fp, r1
 800d5aa:	9b08      	ldr	r3, [sp, #32]
 800d5ac:	b1b3      	cbz	r3, 800d5dc <_strtod_l+0x604>
 800d5ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d5b2:	4659      	mov	r1, fp
 800d5b4:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	dd0f      	ble.n	800d5dc <_strtod_l+0x604>
 800d5bc:	2b1f      	cmp	r3, #31
 800d5be:	dd56      	ble.n	800d66e <_strtod_l+0x696>
 800d5c0:	2b34      	cmp	r3, #52	@ 0x34
 800d5c2:	f04f 0a00 	mov.w	sl, #0
 800d5c6:	bfdb      	ittet	le
 800d5c8:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800d5cc:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d5d0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d5d4:	4093      	lslle	r3, r2
 800d5d6:	bfd8      	it	le
 800d5d8:	ea03 0b01 	andle.w	fp, r3, r1
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2300      	movs	r3, #0
 800d5e0:	4650      	mov	r0, sl
 800d5e2:	4659      	mov	r1, fp
 800d5e4:	f7f3 fa80 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d1a7      	bne.n	800d53c <_strtod_l+0x564>
 800d5ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5ee:	464a      	mov	r2, r9
 800d5f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	462b      	mov	r3, r5
 800d5f6:	9805      	ldr	r0, [sp, #20]
 800d5f8:	f002 f8f2 	bl	800f7e0 <__s2b>
 800d5fc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d5fe:	2800      	cmp	r0, #0
 800d600:	f43f af09 	beq.w	800d416 <_strtod_l+0x43e>
 800d604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d606:	2400      	movs	r4, #0
 800d608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d60a:	2a00      	cmp	r2, #0
 800d60c:	eba3 0308 	sub.w	r3, r3, r8
 800d610:	46a0      	mov	r8, r4
 800d612:	bfa8      	it	ge
 800d614:	2300      	movge	r3, #0
 800d616:	9312      	str	r3, [sp, #72]	@ 0x48
 800d618:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d61c:	9316      	str	r3, [sp, #88]	@ 0x58
 800d61e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d620:	9805      	ldr	r0, [sp, #20]
 800d622:	6859      	ldr	r1, [r3, #4]
 800d624:	f002 f832 	bl	800f68c <_Balloc>
 800d628:	4681      	mov	r9, r0
 800d62a:	2800      	cmp	r0, #0
 800d62c:	f43f aef7 	beq.w	800d41e <_strtod_l+0x446>
 800d630:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d632:	300c      	adds	r0, #12
 800d634:	691a      	ldr	r2, [r3, #16]
 800d636:	f103 010c 	add.w	r1, r3, #12
 800d63a:	3202      	adds	r2, #2
 800d63c:	0092      	lsls	r2, r2, #2
 800d63e:	f000 fba9 	bl	800dd94 <memcpy>
 800d642:	aa1c      	add	r2, sp, #112	@ 0x70
 800d644:	a91b      	add	r1, sp, #108	@ 0x6c
 800d646:	9805      	ldr	r0, [sp, #20]
 800d648:	ec4b ab10 	vmov	d0, sl, fp
 800d64c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d650:	f002 fc04 	bl	800fe5c <__d2b>
 800d654:	901a      	str	r0, [sp, #104]	@ 0x68
 800d656:	2800      	cmp	r0, #0
 800d658:	f43f aee1 	beq.w	800d41e <_strtod_l+0x446>
 800d65c:	2101      	movs	r1, #1
 800d65e:	9805      	ldr	r0, [sp, #20]
 800d660:	f002 f954 	bl	800f90c <__i2b>
 800d664:	4680      	mov	r8, r0
 800d666:	b948      	cbnz	r0, 800d67c <_strtod_l+0x6a4>
 800d668:	f04f 0800 	mov.w	r8, #0
 800d66c:	e6d7      	b.n	800d41e <_strtod_l+0x446>
 800d66e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d672:	fa02 f303 	lsl.w	r3, r2, r3
 800d676:	ea03 0a0a 	and.w	sl, r3, sl
 800d67a:	e7af      	b.n	800d5dc <_strtod_l+0x604>
 800d67c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d67e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d680:	2d00      	cmp	r5, #0
 800d682:	bfa9      	itett	ge
 800d684:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d686:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d688:	18ef      	addge	r7, r5, r3
 800d68a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d68c:	bfb8      	it	lt
 800d68e:	1b5e      	sublt	r6, r3, r5
 800d690:	9b08      	ldr	r3, [sp, #32]
 800d692:	bfb8      	it	lt
 800d694:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d696:	1aed      	subs	r5, r5, r3
 800d698:	4b65      	ldr	r3, [pc, #404]	@ (800d830 <_strtod_l+0x858>)
 800d69a:	4415      	add	r5, r2
 800d69c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d6a0:	3d01      	subs	r5, #1
 800d6a2:	429d      	cmp	r5, r3
 800d6a4:	da4f      	bge.n	800d746 <_strtod_l+0x76e>
 800d6a6:	1b5b      	subs	r3, r3, r5
 800d6a8:	2101      	movs	r1, #1
 800d6aa:	2b1f      	cmp	r3, #31
 800d6ac:	eba2 0203 	sub.w	r2, r2, r3
 800d6b0:	dc3d      	bgt.n	800d72e <_strtod_l+0x756>
 800d6b2:	fa01 f303 	lsl.w	r3, r1, r3
 800d6b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6bc:	18bd      	adds	r5, r7, r2
 800d6be:	9b08      	ldr	r3, [sp, #32]
 800d6c0:	4416      	add	r6, r2
 800d6c2:	42af      	cmp	r7, r5
 800d6c4:	441e      	add	r6, r3
 800d6c6:	463b      	mov	r3, r7
 800d6c8:	bfa8      	it	ge
 800d6ca:	462b      	movge	r3, r5
 800d6cc:	42b3      	cmp	r3, r6
 800d6ce:	bfa8      	it	ge
 800d6d0:	4633      	movge	r3, r6
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	bfc2      	ittt	gt
 800d6d6:	1aed      	subgt	r5, r5, r3
 800d6d8:	1af6      	subgt	r6, r6, r3
 800d6da:	1aff      	subgt	r7, r7, r3
 800d6dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	dd16      	ble.n	800d710 <_strtod_l+0x738>
 800d6e2:	4641      	mov	r1, r8
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	9805      	ldr	r0, [sp, #20]
 800d6e8:	f002 f9ca 	bl	800fa80 <__pow5mult>
 800d6ec:	4680      	mov	r8, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d0ba      	beq.n	800d668 <_strtod_l+0x690>
 800d6f2:	4601      	mov	r1, r0
 800d6f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d6f6:	9805      	ldr	r0, [sp, #20]
 800d6f8:	f002 f91e 	bl	800f938 <__multiply>
 800d6fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d6fe:	2800      	cmp	r0, #0
 800d700:	f43f ae8d 	beq.w	800d41e <_strtod_l+0x446>
 800d704:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d706:	9805      	ldr	r0, [sp, #20]
 800d708:	f002 f800 	bl	800f70c <_Bfree>
 800d70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d70e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d710:	2d00      	cmp	r5, #0
 800d712:	dc1d      	bgt.n	800d750 <_strtod_l+0x778>
 800d714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d716:	2b00      	cmp	r3, #0
 800d718:	dd23      	ble.n	800d762 <_strtod_l+0x78a>
 800d71a:	4649      	mov	r1, r9
 800d71c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d71e:	9805      	ldr	r0, [sp, #20]
 800d720:	f002 f9ae 	bl	800fa80 <__pow5mult>
 800d724:	4681      	mov	r9, r0
 800d726:	b9e0      	cbnz	r0, 800d762 <_strtod_l+0x78a>
 800d728:	f04f 0900 	mov.w	r9, #0
 800d72c:	e677      	b.n	800d41e <_strtod_l+0x446>
 800d72e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d732:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d734:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d738:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d73c:	35e2      	adds	r5, #226	@ 0xe2
 800d73e:	fa01 f305 	lsl.w	r3, r1, r5
 800d742:	9310      	str	r3, [sp, #64]	@ 0x40
 800d744:	e7ba      	b.n	800d6bc <_strtod_l+0x6e4>
 800d746:	2300      	movs	r3, #0
 800d748:	9310      	str	r3, [sp, #64]	@ 0x40
 800d74a:	2301      	movs	r3, #1
 800d74c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d74e:	e7b5      	b.n	800d6bc <_strtod_l+0x6e4>
 800d750:	462a      	mov	r2, r5
 800d752:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d754:	9805      	ldr	r0, [sp, #20]
 800d756:	f002 f9ed 	bl	800fb34 <__lshift>
 800d75a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d1d9      	bne.n	800d714 <_strtod_l+0x73c>
 800d760:	e65d      	b.n	800d41e <_strtod_l+0x446>
 800d762:	2e00      	cmp	r6, #0
 800d764:	dd07      	ble.n	800d776 <_strtod_l+0x79e>
 800d766:	4649      	mov	r1, r9
 800d768:	4632      	mov	r2, r6
 800d76a:	9805      	ldr	r0, [sp, #20]
 800d76c:	f002 f9e2 	bl	800fb34 <__lshift>
 800d770:	4681      	mov	r9, r0
 800d772:	2800      	cmp	r0, #0
 800d774:	d0d8      	beq.n	800d728 <_strtod_l+0x750>
 800d776:	2f00      	cmp	r7, #0
 800d778:	dd08      	ble.n	800d78c <_strtod_l+0x7b4>
 800d77a:	4641      	mov	r1, r8
 800d77c:	463a      	mov	r2, r7
 800d77e:	9805      	ldr	r0, [sp, #20]
 800d780:	f002 f9d8 	bl	800fb34 <__lshift>
 800d784:	4680      	mov	r8, r0
 800d786:	2800      	cmp	r0, #0
 800d788:	f43f ae49 	beq.w	800d41e <_strtod_l+0x446>
 800d78c:	464a      	mov	r2, r9
 800d78e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d790:	9805      	ldr	r0, [sp, #20]
 800d792:	f002 fa57 	bl	800fc44 <__mdiff>
 800d796:	4604      	mov	r4, r0
 800d798:	2800      	cmp	r0, #0
 800d79a:	f43f ae40 	beq.w	800d41e <_strtod_l+0x446>
 800d79e:	68c3      	ldr	r3, [r0, #12]
 800d7a0:	4641      	mov	r1, r8
 800d7a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	60c3      	str	r3, [r0, #12]
 800d7a8:	f002 fa30 	bl	800fc0c <__mcmp>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	da45      	bge.n	800d83c <_strtod_l+0x864>
 800d7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7b2:	ea53 030a 	orrs.w	r3, r3, sl
 800d7b6:	d16b      	bne.n	800d890 <_strtod_l+0x8b8>
 800d7b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d167      	bne.n	800d890 <_strtod_l+0x8b8>
 800d7c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d7c4:	0d1b      	lsrs	r3, r3, #20
 800d7c6:	051b      	lsls	r3, r3, #20
 800d7c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d7cc:	d960      	bls.n	800d890 <_strtod_l+0x8b8>
 800d7ce:	6963      	ldr	r3, [r4, #20]
 800d7d0:	b913      	cbnz	r3, 800d7d8 <_strtod_l+0x800>
 800d7d2:	6923      	ldr	r3, [r4, #16]
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	dd5b      	ble.n	800d890 <_strtod_l+0x8b8>
 800d7d8:	4621      	mov	r1, r4
 800d7da:	2201      	movs	r2, #1
 800d7dc:	9805      	ldr	r0, [sp, #20]
 800d7de:	f002 f9a9 	bl	800fb34 <__lshift>
 800d7e2:	4641      	mov	r1, r8
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	f002 fa11 	bl	800fc0c <__mcmp>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	dd50      	ble.n	800d890 <_strtod_l+0x8b8>
 800d7ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d7f2:	9a08      	ldr	r2, [sp, #32]
 800d7f4:	0d1b      	lsrs	r3, r3, #20
 800d7f6:	051b      	lsls	r3, r3, #20
 800d7f8:	2a00      	cmp	r2, #0
 800d7fa:	d06a      	beq.n	800d8d2 <_strtod_l+0x8fa>
 800d7fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d800:	d867      	bhi.n	800d8d2 <_strtod_l+0x8fa>
 800d802:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d806:	f67f ae9d 	bls.w	800d544 <_strtod_l+0x56c>
 800d80a:	4b0a      	ldr	r3, [pc, #40]	@ (800d834 <_strtod_l+0x85c>)
 800d80c:	4650      	mov	r0, sl
 800d80e:	4659      	mov	r1, fp
 800d810:	2200      	movs	r2, #0
 800d812:	f7f2 ff01 	bl	8000618 <__aeabi_dmul>
 800d816:	4b08      	ldr	r3, [pc, #32]	@ (800d838 <_strtod_l+0x860>)
 800d818:	4682      	mov	sl, r0
 800d81a:	468b      	mov	fp, r1
 800d81c:	400b      	ands	r3, r1
 800d81e:	2b00      	cmp	r3, #0
 800d820:	f47f ae08 	bne.w	800d434 <_strtod_l+0x45c>
 800d824:	2322      	movs	r3, #34	@ 0x22
 800d826:	9a05      	ldr	r2, [sp, #20]
 800d828:	6013      	str	r3, [r2, #0]
 800d82a:	e603      	b.n	800d434 <_strtod_l+0x45c>
 800d82c:	08010fd8 	.word	0x08010fd8
 800d830:	fffffc02 	.word	0xfffffc02
 800d834:	39500000 	.word	0x39500000
 800d838:	7ff00000 	.word	0x7ff00000
 800d83c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d840:	d165      	bne.n	800d90e <_strtod_l+0x936>
 800d842:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d844:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d848:	b35a      	cbz	r2, 800d8a2 <_strtod_l+0x8ca>
 800d84a:	4a9f      	ldr	r2, [pc, #636]	@ (800dac8 <_strtod_l+0xaf0>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d12b      	bne.n	800d8a8 <_strtod_l+0x8d0>
 800d850:	9b08      	ldr	r3, [sp, #32]
 800d852:	4651      	mov	r1, sl
 800d854:	b303      	cbz	r3, 800d898 <_strtod_l+0x8c0>
 800d856:	465a      	mov	r2, fp
 800d858:	4b9c      	ldr	r3, [pc, #624]	@ (800dacc <_strtod_l+0xaf4>)
 800d85a:	4013      	ands	r3, r2
 800d85c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d860:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d864:	d81b      	bhi.n	800d89e <_strtod_l+0x8c6>
 800d866:	0d1b      	lsrs	r3, r3, #20
 800d868:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d86c:	fa02 f303 	lsl.w	r3, r2, r3
 800d870:	4299      	cmp	r1, r3
 800d872:	d119      	bne.n	800d8a8 <_strtod_l+0x8d0>
 800d874:	4b96      	ldr	r3, [pc, #600]	@ (800dad0 <_strtod_l+0xaf8>)
 800d876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d878:	429a      	cmp	r2, r3
 800d87a:	d102      	bne.n	800d882 <_strtod_l+0x8aa>
 800d87c:	3101      	adds	r1, #1
 800d87e:	f43f adce 	beq.w	800d41e <_strtod_l+0x446>
 800d882:	4b92      	ldr	r3, [pc, #584]	@ (800dacc <_strtod_l+0xaf4>)
 800d884:	f04f 0a00 	mov.w	sl, #0
 800d888:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d88a:	401a      	ands	r2, r3
 800d88c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d890:	9b08      	ldr	r3, [sp, #32]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1b9      	bne.n	800d80a <_strtod_l+0x832>
 800d896:	e5cd      	b.n	800d434 <_strtod_l+0x45c>
 800d898:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d89c:	e7e8      	b.n	800d870 <_strtod_l+0x898>
 800d89e:	4613      	mov	r3, r2
 800d8a0:	e7e6      	b.n	800d870 <_strtod_l+0x898>
 800d8a2:	ea53 030a 	orrs.w	r3, r3, sl
 800d8a6:	d0a2      	beq.n	800d7ee <_strtod_l+0x816>
 800d8a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d8aa:	b1db      	cbz	r3, 800d8e4 <_strtod_l+0x90c>
 800d8ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d8ae:	4213      	tst	r3, r2
 800d8b0:	d0ee      	beq.n	800d890 <_strtod_l+0x8b8>
 800d8b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8b4:	4650      	mov	r0, sl
 800d8b6:	9a08      	ldr	r2, [sp, #32]
 800d8b8:	4659      	mov	r1, fp
 800d8ba:	b1bb      	cbz	r3, 800d8ec <_strtod_l+0x914>
 800d8bc:	f7ff fb6c 	bl	800cf98 <sulp>
 800d8c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d8c4:	ec53 2b10 	vmov	r2, r3, d0
 800d8c8:	f7f2 fcf0 	bl	80002ac <__adddf3>
 800d8cc:	4682      	mov	sl, r0
 800d8ce:	468b      	mov	fp, r1
 800d8d0:	e7de      	b.n	800d890 <_strtod_l+0x8b8>
 800d8d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d8d6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d8da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d8de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d8e2:	e7d5      	b.n	800d890 <_strtod_l+0x8b8>
 800d8e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d8e6:	ea13 0f0a 	tst.w	r3, sl
 800d8ea:	e7e1      	b.n	800d8b0 <_strtod_l+0x8d8>
 800d8ec:	f7ff fb54 	bl	800cf98 <sulp>
 800d8f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d8f4:	ec53 2b10 	vmov	r2, r3, d0
 800d8f8:	f7f2 fcd6 	bl	80002a8 <__aeabi_dsub>
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	2300      	movs	r3, #0
 800d900:	4682      	mov	sl, r0
 800d902:	468b      	mov	fp, r1
 800d904:	f7f3 f8f0 	bl	8000ae8 <__aeabi_dcmpeq>
 800d908:	2800      	cmp	r0, #0
 800d90a:	d0c1      	beq.n	800d890 <_strtod_l+0x8b8>
 800d90c:	e61a      	b.n	800d544 <_strtod_l+0x56c>
 800d90e:	4641      	mov	r1, r8
 800d910:	4620      	mov	r0, r4
 800d912:	f002 fafb 	bl	800ff0c <__ratio>
 800d916:	2200      	movs	r2, #0
 800d918:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d91c:	ec57 6b10 	vmov	r6, r7, d0
 800d920:	4630      	mov	r0, r6
 800d922:	4639      	mov	r1, r7
 800d924:	f7f3 f8f4 	bl	8000b10 <__aeabi_dcmple>
 800d928:	2800      	cmp	r0, #0
 800d92a:	d06f      	beq.n	800da0c <_strtod_l+0xa34>
 800d92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d17a      	bne.n	800da28 <_strtod_l+0xa50>
 800d932:	f1ba 0f00 	cmp.w	sl, #0
 800d936:	d158      	bne.n	800d9ea <_strtod_l+0xa12>
 800d938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d93a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d15a      	bne.n	800d9f8 <_strtod_l+0xa20>
 800d942:	2200      	movs	r2, #0
 800d944:	4b63      	ldr	r3, [pc, #396]	@ (800dad4 <_strtod_l+0xafc>)
 800d946:	4630      	mov	r0, r6
 800d948:	4639      	mov	r1, r7
 800d94a:	f7f3 f8d7 	bl	8000afc <__aeabi_dcmplt>
 800d94e:	2800      	cmp	r0, #0
 800d950:	d159      	bne.n	800da06 <_strtod_l+0xa2e>
 800d952:	4630      	mov	r0, r6
 800d954:	4639      	mov	r1, r7
 800d956:	2200      	movs	r2, #0
 800d958:	4b5f      	ldr	r3, [pc, #380]	@ (800dad8 <_strtod_l+0xb00>)
 800d95a:	f7f2 fe5d 	bl	8000618 <__aeabi_dmul>
 800d95e:	4606      	mov	r6, r0
 800d960:	460f      	mov	r7, r1
 800d962:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d966:	9606      	str	r6, [sp, #24]
 800d968:	9307      	str	r3, [sp, #28]
 800d96a:	4d58      	ldr	r5, [pc, #352]	@ (800dacc <_strtod_l+0xaf4>)
 800d96c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d970:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d976:	401d      	ands	r5, r3
 800d978:	4b58      	ldr	r3, [pc, #352]	@ (800dadc <_strtod_l+0xb04>)
 800d97a:	429d      	cmp	r5, r3
 800d97c:	f040 80b2 	bne.w	800dae4 <_strtod_l+0xb0c>
 800d980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d982:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d986:	ec4b ab10 	vmov	d0, sl, fp
 800d98a:	f002 f9f3 	bl	800fd74 <__ulp>
 800d98e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d992:	ec51 0b10 	vmov	r0, r1, d0
 800d996:	f7f2 fe3f 	bl	8000618 <__aeabi_dmul>
 800d99a:	4652      	mov	r2, sl
 800d99c:	465b      	mov	r3, fp
 800d99e:	f7f2 fc85 	bl	80002ac <__adddf3>
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4949      	ldr	r1, [pc, #292]	@ (800dacc <_strtod_l+0xaf4>)
 800d9a6:	4682      	mov	sl, r0
 800d9a8:	4a4d      	ldr	r2, [pc, #308]	@ (800dae0 <_strtod_l+0xb08>)
 800d9aa:	4019      	ands	r1, r3
 800d9ac:	4291      	cmp	r1, r2
 800d9ae:	d942      	bls.n	800da36 <_strtod_l+0xa5e>
 800d9b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d9b2:	4b47      	ldr	r3, [pc, #284]	@ (800dad0 <_strtod_l+0xaf8>)
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d103      	bne.n	800d9c0 <_strtod_l+0x9e8>
 800d9b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	f43f ad2f 	beq.w	800d41e <_strtod_l+0x446>
 800d9c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dad0 <_strtod_l+0xaf8>
 800d9c4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d9c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d9ca:	9805      	ldr	r0, [sp, #20]
 800d9cc:	f001 fe9e 	bl	800f70c <_Bfree>
 800d9d0:	4649      	mov	r1, r9
 800d9d2:	9805      	ldr	r0, [sp, #20]
 800d9d4:	f001 fe9a 	bl	800f70c <_Bfree>
 800d9d8:	4641      	mov	r1, r8
 800d9da:	9805      	ldr	r0, [sp, #20]
 800d9dc:	f001 fe96 	bl	800f70c <_Bfree>
 800d9e0:	4621      	mov	r1, r4
 800d9e2:	9805      	ldr	r0, [sp, #20]
 800d9e4:	f001 fe92 	bl	800f70c <_Bfree>
 800d9e8:	e619      	b.n	800d61e <_strtod_l+0x646>
 800d9ea:	f1ba 0f01 	cmp.w	sl, #1
 800d9ee:	d103      	bne.n	800d9f8 <_strtod_l+0xa20>
 800d9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f43f ada6 	beq.w	800d544 <_strtod_l+0x56c>
 800d9f8:	2600      	movs	r6, #0
 800d9fa:	4f36      	ldr	r7, [pc, #216]	@ (800dad4 <_strtod_l+0xafc>)
 800d9fc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800daa8 <_strtod_l+0xad0>
 800da00:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da04:	e7b1      	b.n	800d96a <_strtod_l+0x992>
 800da06:	2600      	movs	r6, #0
 800da08:	4f33      	ldr	r7, [pc, #204]	@ (800dad8 <_strtod_l+0xb00>)
 800da0a:	e7aa      	b.n	800d962 <_strtod_l+0x98a>
 800da0c:	4b32      	ldr	r3, [pc, #200]	@ (800dad8 <_strtod_l+0xb00>)
 800da0e:	4630      	mov	r0, r6
 800da10:	4639      	mov	r1, r7
 800da12:	2200      	movs	r2, #0
 800da14:	f7f2 fe00 	bl	8000618 <__aeabi_dmul>
 800da18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da1a:	4606      	mov	r6, r0
 800da1c:	460f      	mov	r7, r1
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d09f      	beq.n	800d962 <_strtod_l+0x98a>
 800da22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800da26:	e7a0      	b.n	800d96a <_strtod_l+0x992>
 800da28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dab0 <_strtod_l+0xad8>
 800da2c:	ec57 6b17 	vmov	r6, r7, d7
 800da30:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da34:	e799      	b.n	800d96a <_strtod_l+0x992>
 800da36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800da3a:	9b08      	ldr	r3, [sp, #32]
 800da3c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1c1      	bne.n	800d9c8 <_strtod_l+0x9f0>
 800da44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da48:	0d1b      	lsrs	r3, r3, #20
 800da4a:	051b      	lsls	r3, r3, #20
 800da4c:	429d      	cmp	r5, r3
 800da4e:	d1bb      	bne.n	800d9c8 <_strtod_l+0x9f0>
 800da50:	4630      	mov	r0, r6
 800da52:	4639      	mov	r1, r7
 800da54:	f7f3 f940 	bl	8000cd8 <__aeabi_d2lz>
 800da58:	f7f2 fdb0 	bl	80005bc <__aeabi_l2d>
 800da5c:	4602      	mov	r2, r0
 800da5e:	460b      	mov	r3, r1
 800da60:	4630      	mov	r0, r6
 800da62:	4639      	mov	r1, r7
 800da64:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800da68:	f7f2 fc1e 	bl	80002a8 <__aeabi_dsub>
 800da6c:	460b      	mov	r3, r1
 800da6e:	4602      	mov	r2, r0
 800da70:	ea46 060a 	orr.w	r6, r6, sl
 800da74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800da78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da7a:	431e      	orrs	r6, r3
 800da7c:	d06f      	beq.n	800db5e <_strtod_l+0xb86>
 800da7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800dab8 <_strtod_l+0xae0>)
 800da80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da84:	f7f3 f83a 	bl	8000afc <__aeabi_dcmplt>
 800da88:	2800      	cmp	r0, #0
 800da8a:	f47f acd3 	bne.w	800d434 <_strtod_l+0x45c>
 800da8e:	a30c      	add	r3, pc, #48	@ (adr r3, 800dac0 <_strtod_l+0xae8>)
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da98:	f7f3 f84e 	bl	8000b38 <__aeabi_dcmpgt>
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d093      	beq.n	800d9c8 <_strtod_l+0x9f0>
 800daa0:	e4c8      	b.n	800d434 <_strtod_l+0x45c>
 800daa2:	bf00      	nop
 800daa4:	f3af 8000 	nop.w
 800daa8:	00000000 	.word	0x00000000
 800daac:	bff00000 	.word	0xbff00000
 800dab0:	00000000 	.word	0x00000000
 800dab4:	3ff00000 	.word	0x3ff00000
 800dab8:	94a03595 	.word	0x94a03595
 800dabc:	3fdfffff 	.word	0x3fdfffff
 800dac0:	35afe535 	.word	0x35afe535
 800dac4:	3fe00000 	.word	0x3fe00000
 800dac8:	000fffff 	.word	0x000fffff
 800dacc:	7ff00000 	.word	0x7ff00000
 800dad0:	7fefffff 	.word	0x7fefffff
 800dad4:	3ff00000 	.word	0x3ff00000
 800dad8:	3fe00000 	.word	0x3fe00000
 800dadc:	7fe00000 	.word	0x7fe00000
 800dae0:	7c9fffff 	.word	0x7c9fffff
 800dae4:	9b08      	ldr	r3, [sp, #32]
 800dae6:	b323      	cbz	r3, 800db32 <_strtod_l+0xb5a>
 800dae8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800daec:	d821      	bhi.n	800db32 <_strtod_l+0xb5a>
 800daee:	4630      	mov	r0, r6
 800daf0:	4639      	mov	r1, r7
 800daf2:	a327      	add	r3, pc, #156	@ (adr r3, 800db90 <_strtod_l+0xbb8>)
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	f7f3 f80a 	bl	8000b10 <__aeabi_dcmple>
 800dafc:	b1a0      	cbz	r0, 800db28 <_strtod_l+0xb50>
 800dafe:	4639      	mov	r1, r7
 800db00:	4630      	mov	r0, r6
 800db02:	f7f3 f861 	bl	8000bc8 <__aeabi_d2uiz>
 800db06:	2801      	cmp	r0, #1
 800db08:	bf38      	it	cc
 800db0a:	2001      	movcc	r0, #1
 800db0c:	f7f2 fd0a 	bl	8000524 <__aeabi_ui2d>
 800db10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db12:	4606      	mov	r6, r0
 800db14:	460f      	mov	r7, r1
 800db16:	b9fb      	cbnz	r3, 800db58 <_strtod_l+0xb80>
 800db18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db1c:	9014      	str	r0, [sp, #80]	@ 0x50
 800db1e:	9315      	str	r3, [sp, #84]	@ 0x54
 800db20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800db24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800db28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800db2e:	1b5b      	subs	r3, r3, r5
 800db30:	9311      	str	r3, [sp, #68]	@ 0x44
 800db32:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800db36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800db3a:	f002 f91b 	bl	800fd74 <__ulp>
 800db3e:	4650      	mov	r0, sl
 800db40:	4659      	mov	r1, fp
 800db42:	ec53 2b10 	vmov	r2, r3, d0
 800db46:	f7f2 fd67 	bl	8000618 <__aeabi_dmul>
 800db4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800db4e:	f7f2 fbad 	bl	80002ac <__adddf3>
 800db52:	4682      	mov	sl, r0
 800db54:	468b      	mov	fp, r1
 800db56:	e770      	b.n	800da3a <_strtod_l+0xa62>
 800db58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800db5c:	e7e0      	b.n	800db20 <_strtod_l+0xb48>
 800db5e:	a30e      	add	r3, pc, #56	@ (adr r3, 800db98 <_strtod_l+0xbc0>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	f7f2 ffca 	bl	8000afc <__aeabi_dcmplt>
 800db68:	e798      	b.n	800da9c <_strtod_l+0xac4>
 800db6a:	2300      	movs	r3, #0
 800db6c:	930e      	str	r3, [sp, #56]	@ 0x38
 800db6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db70:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800db72:	6013      	str	r3, [r2, #0]
 800db74:	f7ff ba6d 	b.w	800d052 <_strtod_l+0x7a>
 800db78:	2a65      	cmp	r2, #101	@ 0x65
 800db7a:	f43f ab67 	beq.w	800d24c <_strtod_l+0x274>
 800db7e:	2a45      	cmp	r2, #69	@ 0x45
 800db80:	f43f ab64 	beq.w	800d24c <_strtod_l+0x274>
 800db84:	2301      	movs	r3, #1
 800db86:	f7ff bba0 	b.w	800d2ca <_strtod_l+0x2f2>
 800db8a:	bf00      	nop
 800db8c:	f3af 8000 	nop.w
 800db90:	ffc00000 	.word	0xffc00000
 800db94:	41dfffff 	.word	0x41dfffff
 800db98:	94a03595 	.word	0x94a03595
 800db9c:	3fcfffff 	.word	0x3fcfffff

0800dba0 <_strtod_r>:
 800dba0:	4b01      	ldr	r3, [pc, #4]	@ (800dba8 <_strtod_r+0x8>)
 800dba2:	f7ff ba19 	b.w	800cfd8 <_strtod_l>
 800dba6:	bf00      	nop
 800dba8:	20000030 	.word	0x20000030

0800dbac <_strtol_l.isra.0>:
 800dbac:	2b24      	cmp	r3, #36	@ 0x24
 800dbae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb2:	4686      	mov	lr, r0
 800dbb4:	4690      	mov	r8, r2
 800dbb6:	d801      	bhi.n	800dbbc <_strtol_l.isra.0+0x10>
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d106      	bne.n	800dbca <_strtol_l.isra.0+0x1e>
 800dbbc:	f000 f8aa 	bl	800dd14 <__errno>
 800dbc0:	2316      	movs	r3, #22
 800dbc2:	6003      	str	r3, [r0, #0]
 800dbc4:	2000      	movs	r0, #0
 800dbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbca:	460d      	mov	r5, r1
 800dbcc:	4833      	ldr	r0, [pc, #204]	@ (800dc9c <_strtol_l.isra.0+0xf0>)
 800dbce:	462a      	mov	r2, r5
 800dbd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbd4:	5d06      	ldrb	r6, [r0, r4]
 800dbd6:	f016 0608 	ands.w	r6, r6, #8
 800dbda:	d1f8      	bne.n	800dbce <_strtol_l.isra.0+0x22>
 800dbdc:	2c2d      	cmp	r4, #45	@ 0x2d
 800dbde:	d110      	bne.n	800dc02 <_strtol_l.isra.0+0x56>
 800dbe0:	782c      	ldrb	r4, [r5, #0]
 800dbe2:	2601      	movs	r6, #1
 800dbe4:	1c95      	adds	r5, r2, #2
 800dbe6:	f033 0210 	bics.w	r2, r3, #16
 800dbea:	d115      	bne.n	800dc18 <_strtol_l.isra.0+0x6c>
 800dbec:	2c30      	cmp	r4, #48	@ 0x30
 800dbee:	d10d      	bne.n	800dc0c <_strtol_l.isra.0+0x60>
 800dbf0:	782a      	ldrb	r2, [r5, #0]
 800dbf2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dbf6:	2a58      	cmp	r2, #88	@ 0x58
 800dbf8:	d108      	bne.n	800dc0c <_strtol_l.isra.0+0x60>
 800dbfa:	786c      	ldrb	r4, [r5, #1]
 800dbfc:	3502      	adds	r5, #2
 800dbfe:	2310      	movs	r3, #16
 800dc00:	e00a      	b.n	800dc18 <_strtol_l.isra.0+0x6c>
 800dc02:	2c2b      	cmp	r4, #43	@ 0x2b
 800dc04:	bf04      	itt	eq
 800dc06:	782c      	ldrbeq	r4, [r5, #0]
 800dc08:	1c95      	addeq	r5, r2, #2
 800dc0a:	e7ec      	b.n	800dbe6 <_strtol_l.isra.0+0x3a>
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d1f6      	bne.n	800dbfe <_strtol_l.isra.0+0x52>
 800dc10:	2c30      	cmp	r4, #48	@ 0x30
 800dc12:	bf14      	ite	ne
 800dc14:	230a      	movne	r3, #10
 800dc16:	2308      	moveq	r3, #8
 800dc18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800dc22:	4610      	mov	r0, r2
 800dc24:	fbbc f9f3 	udiv	r9, ip, r3
 800dc28:	fb03 ca19 	mls	sl, r3, r9, ip
 800dc2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dc30:	2f09      	cmp	r7, #9
 800dc32:	d80f      	bhi.n	800dc54 <_strtol_l.isra.0+0xa8>
 800dc34:	463c      	mov	r4, r7
 800dc36:	42a3      	cmp	r3, r4
 800dc38:	dd1b      	ble.n	800dc72 <_strtol_l.isra.0+0xc6>
 800dc3a:	1c57      	adds	r7, r2, #1
 800dc3c:	d007      	beq.n	800dc4e <_strtol_l.isra.0+0xa2>
 800dc3e:	4581      	cmp	r9, r0
 800dc40:	d314      	bcc.n	800dc6c <_strtol_l.isra.0+0xc0>
 800dc42:	d101      	bne.n	800dc48 <_strtol_l.isra.0+0x9c>
 800dc44:	45a2      	cmp	sl, r4
 800dc46:	db11      	blt.n	800dc6c <_strtol_l.isra.0+0xc0>
 800dc48:	fb00 4003 	mla	r0, r0, r3, r4
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc52:	e7eb      	b.n	800dc2c <_strtol_l.isra.0+0x80>
 800dc54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dc58:	2f19      	cmp	r7, #25
 800dc5a:	d801      	bhi.n	800dc60 <_strtol_l.isra.0+0xb4>
 800dc5c:	3c37      	subs	r4, #55	@ 0x37
 800dc5e:	e7ea      	b.n	800dc36 <_strtol_l.isra.0+0x8a>
 800dc60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dc64:	2f19      	cmp	r7, #25
 800dc66:	d804      	bhi.n	800dc72 <_strtol_l.isra.0+0xc6>
 800dc68:	3c57      	subs	r4, #87	@ 0x57
 800dc6a:	e7e4      	b.n	800dc36 <_strtol_l.isra.0+0x8a>
 800dc6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc70:	e7ed      	b.n	800dc4e <_strtol_l.isra.0+0xa2>
 800dc72:	1c53      	adds	r3, r2, #1
 800dc74:	d108      	bne.n	800dc88 <_strtol_l.isra.0+0xdc>
 800dc76:	2322      	movs	r3, #34	@ 0x22
 800dc78:	4660      	mov	r0, ip
 800dc7a:	f8ce 3000 	str.w	r3, [lr]
 800dc7e:	f1b8 0f00 	cmp.w	r8, #0
 800dc82:	d0a0      	beq.n	800dbc6 <_strtol_l.isra.0+0x1a>
 800dc84:	1e69      	subs	r1, r5, #1
 800dc86:	e006      	b.n	800dc96 <_strtol_l.isra.0+0xea>
 800dc88:	b106      	cbz	r6, 800dc8c <_strtol_l.isra.0+0xe0>
 800dc8a:	4240      	negs	r0, r0
 800dc8c:	f1b8 0f00 	cmp.w	r8, #0
 800dc90:	d099      	beq.n	800dbc6 <_strtol_l.isra.0+0x1a>
 800dc92:	2a00      	cmp	r2, #0
 800dc94:	d1f6      	bne.n	800dc84 <_strtol_l.isra.0+0xd8>
 800dc96:	f8c8 1000 	str.w	r1, [r8]
 800dc9a:	e794      	b.n	800dbc6 <_strtol_l.isra.0+0x1a>
 800dc9c:	08011001 	.word	0x08011001

0800dca0 <_strtol_r>:
 800dca0:	f7ff bf84 	b.w	800dbac <_strtol_l.isra.0>

0800dca4 <_fwalk_sglue>:
 800dca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dca8:	4607      	mov	r7, r0
 800dcaa:	4688      	mov	r8, r1
 800dcac:	4614      	mov	r4, r2
 800dcae:	2600      	movs	r6, #0
 800dcb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dcb4:	f1b9 0901 	subs.w	r9, r9, #1
 800dcb8:	d505      	bpl.n	800dcc6 <_fwalk_sglue+0x22>
 800dcba:	6824      	ldr	r4, [r4, #0]
 800dcbc:	2c00      	cmp	r4, #0
 800dcbe:	d1f7      	bne.n	800dcb0 <_fwalk_sglue+0xc>
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcc6:	89ab      	ldrh	r3, [r5, #12]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d907      	bls.n	800dcdc <_fwalk_sglue+0x38>
 800dccc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	d003      	beq.n	800dcdc <_fwalk_sglue+0x38>
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	4638      	mov	r0, r7
 800dcd8:	47c0      	blx	r8
 800dcda:	4306      	orrs	r6, r0
 800dcdc:	3568      	adds	r5, #104	@ 0x68
 800dcde:	e7e9      	b.n	800dcb4 <_fwalk_sglue+0x10>

0800dce0 <memset>:
 800dce0:	4402      	add	r2, r0
 800dce2:	4603      	mov	r3, r0
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d100      	bne.n	800dcea <memset+0xa>
 800dce8:	4770      	bx	lr
 800dcea:	f803 1b01 	strb.w	r1, [r3], #1
 800dcee:	e7f9      	b.n	800dce4 <memset+0x4>

0800dcf0 <strncmp>:
 800dcf0:	b510      	push	{r4, lr}
 800dcf2:	b16a      	cbz	r2, 800dd10 <strncmp+0x20>
 800dcf4:	3901      	subs	r1, #1
 800dcf6:	1884      	adds	r4, r0, r2
 800dcf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcfc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d103      	bne.n	800dd0c <strncmp+0x1c>
 800dd04:	42a0      	cmp	r0, r4
 800dd06:	d001      	beq.n	800dd0c <strncmp+0x1c>
 800dd08:	2a00      	cmp	r2, #0
 800dd0a:	d1f5      	bne.n	800dcf8 <strncmp+0x8>
 800dd0c:	1ad0      	subs	r0, r2, r3
 800dd0e:	bd10      	pop	{r4, pc}
 800dd10:	4610      	mov	r0, r2
 800dd12:	e7fc      	b.n	800dd0e <strncmp+0x1e>

0800dd14 <__errno>:
 800dd14:	4b01      	ldr	r3, [pc, #4]	@ (800dd1c <__errno+0x8>)
 800dd16:	6818      	ldr	r0, [r3, #0]
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	2000019c 	.word	0x2000019c

0800dd20 <__libc_init_array>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	4d0d      	ldr	r5, [pc, #52]	@ (800dd58 <__libc_init_array+0x38>)
 800dd24:	2600      	movs	r6, #0
 800dd26:	4c0d      	ldr	r4, [pc, #52]	@ (800dd5c <__libc_init_array+0x3c>)
 800dd28:	1b64      	subs	r4, r4, r5
 800dd2a:	10a4      	asrs	r4, r4, #2
 800dd2c:	42a6      	cmp	r6, r4
 800dd2e:	d109      	bne.n	800dd44 <__libc_init_array+0x24>
 800dd30:	4d0b      	ldr	r5, [pc, #44]	@ (800dd60 <__libc_init_array+0x40>)
 800dd32:	2600      	movs	r6, #0
 800dd34:	4c0b      	ldr	r4, [pc, #44]	@ (800dd64 <__libc_init_array+0x44>)
 800dd36:	f002 fd87 	bl	8010848 <_init>
 800dd3a:	1b64      	subs	r4, r4, r5
 800dd3c:	10a4      	asrs	r4, r4, #2
 800dd3e:	42a6      	cmp	r6, r4
 800dd40:	d105      	bne.n	800dd4e <__libc_init_array+0x2e>
 800dd42:	bd70      	pop	{r4, r5, r6, pc}
 800dd44:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd48:	3601      	adds	r6, #1
 800dd4a:	4798      	blx	r3
 800dd4c:	e7ee      	b.n	800dd2c <__libc_init_array+0xc>
 800dd4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd52:	3601      	adds	r6, #1
 800dd54:	4798      	blx	r3
 800dd56:	e7f2      	b.n	800dd3e <__libc_init_array+0x1e>
 800dd58:	08011208 	.word	0x08011208
 800dd5c:	08011208 	.word	0x08011208
 800dd60:	08011208 	.word	0x08011208
 800dd64:	0801120c 	.word	0x0801120c

0800dd68 <__retarget_lock_init_recursive>:
 800dd68:	4770      	bx	lr

0800dd6a <__retarget_lock_acquire_recursive>:
 800dd6a:	4770      	bx	lr

0800dd6c <__retarget_lock_release_recursive>:
 800dd6c:	4770      	bx	lr
	...

0800dd70 <_localeconv_r>:
 800dd70:	4800      	ldr	r0, [pc, #0]	@ (800dd74 <_localeconv_r+0x4>)
 800dd72:	4770      	bx	lr
 800dd74:	20000120 	.word	0x20000120

0800dd78 <memchr>:
 800dd78:	b2c9      	uxtb	r1, r1
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	4402      	add	r2, r0
 800dd7e:	b510      	push	{r4, lr}
 800dd80:	4293      	cmp	r3, r2
 800dd82:	4618      	mov	r0, r3
 800dd84:	d101      	bne.n	800dd8a <memchr+0x12>
 800dd86:	2000      	movs	r0, #0
 800dd88:	e003      	b.n	800dd92 <memchr+0x1a>
 800dd8a:	7804      	ldrb	r4, [r0, #0]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	428c      	cmp	r4, r1
 800dd90:	d1f6      	bne.n	800dd80 <memchr+0x8>
 800dd92:	bd10      	pop	{r4, pc}

0800dd94 <memcpy>:
 800dd94:	440a      	add	r2, r1
 800dd96:	1e43      	subs	r3, r0, #1
 800dd98:	4291      	cmp	r1, r2
 800dd9a:	d100      	bne.n	800dd9e <memcpy+0xa>
 800dd9c:	4770      	bx	lr
 800dd9e:	b510      	push	{r4, lr}
 800dda0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dda4:	4291      	cmp	r1, r2
 800dda6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddaa:	d1f9      	bne.n	800dda0 <memcpy+0xc>
 800ddac:	bd10      	pop	{r4, pc}
	...

0800ddb0 <nan>:
 800ddb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ddb8 <nan+0x8>
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop
 800ddb8:	00000000 	.word	0x00000000
 800ddbc:	7ff80000 	.word	0x7ff80000

0800ddc0 <nanf>:
 800ddc0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ddc8 <nanf+0x8>
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	7fc00000 	.word	0x7fc00000

0800ddcc <quorem>:
 800ddcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd0:	6903      	ldr	r3, [r0, #16]
 800ddd2:	4607      	mov	r7, r0
 800ddd4:	690c      	ldr	r4, [r1, #16]
 800ddd6:	42a3      	cmp	r3, r4
 800ddd8:	f2c0 8083 	blt.w	800dee2 <quorem+0x116>
 800dddc:	3c01      	subs	r4, #1
 800ddde:	f100 0514 	add.w	r5, r0, #20
 800dde2:	f101 0814 	add.w	r8, r1, #20
 800dde6:	00a3      	lsls	r3, r4, #2
 800dde8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddf6:	9301      	str	r3, [sp, #4]
 800ddf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	429a      	cmp	r2, r3
 800de00:	fbb2 f6f3 	udiv	r6, r2, r3
 800de04:	d331      	bcc.n	800de6a <quorem+0x9e>
 800de06:	f04f 0a00 	mov.w	sl, #0
 800de0a:	46c4      	mov	ip, r8
 800de0c:	46ae      	mov	lr, r5
 800de0e:	46d3      	mov	fp, sl
 800de10:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de14:	b298      	uxth	r0, r3
 800de16:	45e1      	cmp	r9, ip
 800de18:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800de1c:	fb06 a000 	mla	r0, r6, r0, sl
 800de20:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800de24:	b280      	uxth	r0, r0
 800de26:	fb06 2303 	mla	r3, r6, r3, r2
 800de2a:	f8de 2000 	ldr.w	r2, [lr]
 800de2e:	b292      	uxth	r2, r2
 800de30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de34:	eba2 0200 	sub.w	r2, r2, r0
 800de38:	b29b      	uxth	r3, r3
 800de3a:	f8de 0000 	ldr.w	r0, [lr]
 800de3e:	445a      	add	r2, fp
 800de40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de44:	b292      	uxth	r2, r2
 800de46:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800de4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800de4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800de52:	f84e 2b04 	str.w	r2, [lr], #4
 800de56:	d2db      	bcs.n	800de10 <quorem+0x44>
 800de58:	9b00      	ldr	r3, [sp, #0]
 800de5a:	58eb      	ldr	r3, [r5, r3]
 800de5c:	b92b      	cbnz	r3, 800de6a <quorem+0x9e>
 800de5e:	9b01      	ldr	r3, [sp, #4]
 800de60:	3b04      	subs	r3, #4
 800de62:	429d      	cmp	r5, r3
 800de64:	461a      	mov	r2, r3
 800de66:	d330      	bcc.n	800deca <quorem+0xfe>
 800de68:	613c      	str	r4, [r7, #16]
 800de6a:	4638      	mov	r0, r7
 800de6c:	f001 fece 	bl	800fc0c <__mcmp>
 800de70:	2800      	cmp	r0, #0
 800de72:	db26      	blt.n	800dec2 <quorem+0xf6>
 800de74:	4629      	mov	r1, r5
 800de76:	2000      	movs	r0, #0
 800de78:	f858 2b04 	ldr.w	r2, [r8], #4
 800de7c:	f8d1 c000 	ldr.w	ip, [r1]
 800de80:	fa1f fe82 	uxth.w	lr, r2
 800de84:	45c1      	cmp	r9, r8
 800de86:	fa1f f38c 	uxth.w	r3, ip
 800de8a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800de8e:	eba3 030e 	sub.w	r3, r3, lr
 800de92:	4403      	add	r3, r0
 800de94:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800de98:	b29b      	uxth	r3, r3
 800de9a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800de9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dea2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dea6:	f841 3b04 	str.w	r3, [r1], #4
 800deaa:	d2e5      	bcs.n	800de78 <quorem+0xac>
 800deac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800deb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800deb4:	b922      	cbnz	r2, 800dec0 <quorem+0xf4>
 800deb6:	3b04      	subs	r3, #4
 800deb8:	429d      	cmp	r5, r3
 800deba:	461a      	mov	r2, r3
 800debc:	d30b      	bcc.n	800ded6 <quorem+0x10a>
 800debe:	613c      	str	r4, [r7, #16]
 800dec0:	3601      	adds	r6, #1
 800dec2:	4630      	mov	r0, r6
 800dec4:	b003      	add	sp, #12
 800dec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deca:	6812      	ldr	r2, [r2, #0]
 800decc:	3b04      	subs	r3, #4
 800dece:	2a00      	cmp	r2, #0
 800ded0:	d1ca      	bne.n	800de68 <quorem+0x9c>
 800ded2:	3c01      	subs	r4, #1
 800ded4:	e7c5      	b.n	800de62 <quorem+0x96>
 800ded6:	6812      	ldr	r2, [r2, #0]
 800ded8:	3b04      	subs	r3, #4
 800deda:	2a00      	cmp	r2, #0
 800dedc:	d1ef      	bne.n	800debe <quorem+0xf2>
 800dede:	3c01      	subs	r4, #1
 800dee0:	e7ea      	b.n	800deb8 <quorem+0xec>
 800dee2:	2000      	movs	r0, #0
 800dee4:	e7ee      	b.n	800dec4 <quorem+0xf8>
	...

0800dee8 <_dtoa_r>:
 800dee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deec:	69c7      	ldr	r7, [r0, #28]
 800deee:	b097      	sub	sp, #92	@ 0x5c
 800def0:	4681      	mov	r9, r0
 800def2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800def4:	9107      	str	r1, [sp, #28]
 800def6:	920c      	str	r2, [sp, #48]	@ 0x30
 800def8:	9311      	str	r3, [sp, #68]	@ 0x44
 800defa:	ec55 4b10 	vmov	r4, r5, d0
 800defe:	ed8d 0b04 	vstr	d0, [sp, #16]
 800df02:	b97f      	cbnz	r7, 800df24 <_dtoa_r+0x3c>
 800df04:	2010      	movs	r0, #16
 800df06:	f001 fa4d 	bl	800f3a4 <malloc>
 800df0a:	4602      	mov	r2, r0
 800df0c:	f8c9 001c 	str.w	r0, [r9, #28]
 800df10:	b920      	cbnz	r0, 800df1c <_dtoa_r+0x34>
 800df12:	4ba9      	ldr	r3, [pc, #676]	@ (800e1b8 <_dtoa_r+0x2d0>)
 800df14:	21ef      	movs	r1, #239	@ 0xef
 800df16:	48a9      	ldr	r0, [pc, #676]	@ (800e1bc <_dtoa_r+0x2d4>)
 800df18:	f002 f95c 	bl	80101d4 <__assert_func>
 800df1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df20:	6007      	str	r7, [r0, #0]
 800df22:	60c7      	str	r7, [r0, #12]
 800df24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df28:	6819      	ldr	r1, [r3, #0]
 800df2a:	b159      	cbz	r1, 800df44 <_dtoa_r+0x5c>
 800df2c:	685a      	ldr	r2, [r3, #4]
 800df2e:	2301      	movs	r3, #1
 800df30:	4648      	mov	r0, r9
 800df32:	4093      	lsls	r3, r2
 800df34:	604a      	str	r2, [r1, #4]
 800df36:	608b      	str	r3, [r1, #8]
 800df38:	f001 fbe8 	bl	800f70c <_Bfree>
 800df3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df40:	2200      	movs	r2, #0
 800df42:	601a      	str	r2, [r3, #0]
 800df44:	1e2b      	subs	r3, r5, #0
 800df46:	bfb7      	itett	lt
 800df48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800df4c:	2300      	movge	r3, #0
 800df4e:	2201      	movlt	r2, #1
 800df50:	9305      	strlt	r3, [sp, #20]
 800df52:	bfa8      	it	ge
 800df54:	6033      	strge	r3, [r6, #0]
 800df56:	9f05      	ldr	r7, [sp, #20]
 800df58:	4b99      	ldr	r3, [pc, #612]	@ (800e1c0 <_dtoa_r+0x2d8>)
 800df5a:	bfb8      	it	lt
 800df5c:	6032      	strlt	r2, [r6, #0]
 800df5e:	43bb      	bics	r3, r7
 800df60:	d112      	bne.n	800df88 <_dtoa_r+0xa0>
 800df62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800df66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800df68:	6013      	str	r3, [r2, #0]
 800df6a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df6e:	4323      	orrs	r3, r4
 800df70:	f000 855a 	beq.w	800ea28 <_dtoa_r+0xb40>
 800df74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df76:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e1d4 <_dtoa_r+0x2ec>
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f000 855c 	beq.w	800ea38 <_dtoa_r+0xb50>
 800df80:	f10a 0303 	add.w	r3, sl, #3
 800df84:	f000 bd56 	b.w	800ea34 <_dtoa_r+0xb4c>
 800df88:	ed9d 7b04 	vldr	d7, [sp, #16]
 800df8c:	2200      	movs	r2, #0
 800df8e:	2300      	movs	r3, #0
 800df90:	ec51 0b17 	vmov	r0, r1, d7
 800df94:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800df98:	f7f2 fda6 	bl	8000ae8 <__aeabi_dcmpeq>
 800df9c:	4680      	mov	r8, r0
 800df9e:	b158      	cbz	r0, 800dfb8 <_dtoa_r+0xd0>
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dfa4:	6013      	str	r3, [r2, #0]
 800dfa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dfa8:	b113      	cbz	r3, 800dfb0 <_dtoa_r+0xc8>
 800dfaa:	4b86      	ldr	r3, [pc, #536]	@ (800e1c4 <_dtoa_r+0x2dc>)
 800dfac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800e1d8 <_dtoa_r+0x2f0>
 800dfb4:	f000 bd40 	b.w	800ea38 <_dtoa_r+0xb50>
 800dfb8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dfbc:	aa14      	add	r2, sp, #80	@ 0x50
 800dfbe:	a915      	add	r1, sp, #84	@ 0x54
 800dfc0:	4648      	mov	r0, r9
 800dfc2:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800dfc6:	f001 ff49 	bl	800fe5c <__d2b>
 800dfca:	9002      	str	r0, [sp, #8]
 800dfcc:	2e00      	cmp	r6, #0
 800dfce:	d076      	beq.n	800e0be <_dtoa_r+0x1d6>
 800dfd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfd2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dfd6:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800dfda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfde:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dfe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dfe6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dfea:	4619      	mov	r1, r3
 800dfec:	2200      	movs	r2, #0
 800dfee:	4b76      	ldr	r3, [pc, #472]	@ (800e1c8 <_dtoa_r+0x2e0>)
 800dff0:	f7f2 f95a 	bl	80002a8 <__aeabi_dsub>
 800dff4:	a36a      	add	r3, pc, #424	@ (adr r3, 800e1a0 <_dtoa_r+0x2b8>)
 800dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffa:	f7f2 fb0d 	bl	8000618 <__aeabi_dmul>
 800dffe:	a36a      	add	r3, pc, #424	@ (adr r3, 800e1a8 <_dtoa_r+0x2c0>)
 800e000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e004:	f7f2 f952 	bl	80002ac <__adddf3>
 800e008:	4604      	mov	r4, r0
 800e00a:	460d      	mov	r5, r1
 800e00c:	4630      	mov	r0, r6
 800e00e:	f7f2 fa99 	bl	8000544 <__aeabi_i2d>
 800e012:	a367      	add	r3, pc, #412	@ (adr r3, 800e1b0 <_dtoa_r+0x2c8>)
 800e014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e018:	f7f2 fafe 	bl	8000618 <__aeabi_dmul>
 800e01c:	4602      	mov	r2, r0
 800e01e:	460b      	mov	r3, r1
 800e020:	4620      	mov	r0, r4
 800e022:	4629      	mov	r1, r5
 800e024:	f7f2 f942 	bl	80002ac <__adddf3>
 800e028:	4604      	mov	r4, r0
 800e02a:	460d      	mov	r5, r1
 800e02c:	f7f2 fda4 	bl	8000b78 <__aeabi_d2iz>
 800e030:	2200      	movs	r2, #0
 800e032:	4607      	mov	r7, r0
 800e034:	2300      	movs	r3, #0
 800e036:	4620      	mov	r0, r4
 800e038:	4629      	mov	r1, r5
 800e03a:	f7f2 fd5f 	bl	8000afc <__aeabi_dcmplt>
 800e03e:	b140      	cbz	r0, 800e052 <_dtoa_r+0x16a>
 800e040:	4638      	mov	r0, r7
 800e042:	f7f2 fa7f 	bl	8000544 <__aeabi_i2d>
 800e046:	4622      	mov	r2, r4
 800e048:	462b      	mov	r3, r5
 800e04a:	f7f2 fd4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800e04e:	b900      	cbnz	r0, 800e052 <_dtoa_r+0x16a>
 800e050:	3f01      	subs	r7, #1
 800e052:	2f16      	cmp	r7, #22
 800e054:	d852      	bhi.n	800e0fc <_dtoa_r+0x214>
 800e056:	4b5d      	ldr	r3, [pc, #372]	@ (800e1cc <_dtoa_r+0x2e4>)
 800e058:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e05c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e064:	f7f2 fd4a 	bl	8000afc <__aeabi_dcmplt>
 800e068:	2800      	cmp	r0, #0
 800e06a:	d049      	beq.n	800e100 <_dtoa_r+0x218>
 800e06c:	3f01      	subs	r7, #1
 800e06e:	2300      	movs	r3, #0
 800e070:	9310      	str	r3, [sp, #64]	@ 0x40
 800e072:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e074:	1b9b      	subs	r3, r3, r6
 800e076:	1e5a      	subs	r2, r3, #1
 800e078:	bf4c      	ite	mi
 800e07a:	f1c3 0301 	rsbmi	r3, r3, #1
 800e07e:	2300      	movpl	r3, #0
 800e080:	9206      	str	r2, [sp, #24]
 800e082:	bf45      	ittet	mi
 800e084:	9300      	strmi	r3, [sp, #0]
 800e086:	2300      	movmi	r3, #0
 800e088:	9300      	strpl	r3, [sp, #0]
 800e08a:	9306      	strmi	r3, [sp, #24]
 800e08c:	2f00      	cmp	r7, #0
 800e08e:	db39      	blt.n	800e104 <_dtoa_r+0x21c>
 800e090:	9b06      	ldr	r3, [sp, #24]
 800e092:	970d      	str	r7, [sp, #52]	@ 0x34
 800e094:	443b      	add	r3, r7
 800e096:	9306      	str	r3, [sp, #24]
 800e098:	2300      	movs	r3, #0
 800e09a:	9308      	str	r3, [sp, #32]
 800e09c:	9b07      	ldr	r3, [sp, #28]
 800e09e:	2b09      	cmp	r3, #9
 800e0a0:	d863      	bhi.n	800e16a <_dtoa_r+0x282>
 800e0a2:	2b05      	cmp	r3, #5
 800e0a4:	bfc5      	ittet	gt
 800e0a6:	3b04      	subgt	r3, #4
 800e0a8:	2400      	movgt	r4, #0
 800e0aa:	2401      	movle	r4, #1
 800e0ac:	9307      	strgt	r3, [sp, #28]
 800e0ae:	9b07      	ldr	r3, [sp, #28]
 800e0b0:	3b02      	subs	r3, #2
 800e0b2:	2b03      	cmp	r3, #3
 800e0b4:	d865      	bhi.n	800e182 <_dtoa_r+0x29a>
 800e0b6:	e8df f003 	tbb	[pc, r3]
 800e0ba:	5654      	.short	0x5654
 800e0bc:	2d39      	.short	0x2d39
 800e0be:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e0c2:	441e      	add	r6, r3
 800e0c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e0c8:	2b20      	cmp	r3, #32
 800e0ca:	bfc9      	itett	gt
 800e0cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e0d0:	f1c3 0320 	rsble	r3, r3, #32
 800e0d4:	409f      	lslgt	r7, r3
 800e0d6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e0da:	bfd8      	it	le
 800e0dc:	fa04 f003 	lslle.w	r0, r4, r3
 800e0e0:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800e0e4:	bfc4      	itt	gt
 800e0e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e0ea:	ea47 0003 	orrgt.w	r0, r7, r3
 800e0ee:	f7f2 fa19 	bl	8000524 <__aeabi_ui2d>
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e0f8:	9212      	str	r2, [sp, #72]	@ 0x48
 800e0fa:	e776      	b.n	800dfea <_dtoa_r+0x102>
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e7b7      	b.n	800e070 <_dtoa_r+0x188>
 800e100:	9010      	str	r0, [sp, #64]	@ 0x40
 800e102:	e7b6      	b.n	800e072 <_dtoa_r+0x18a>
 800e104:	9b00      	ldr	r3, [sp, #0]
 800e106:	1bdb      	subs	r3, r3, r7
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	427b      	negs	r3, r7
 800e10c:	9308      	str	r3, [sp, #32]
 800e10e:	2300      	movs	r3, #0
 800e110:	930d      	str	r3, [sp, #52]	@ 0x34
 800e112:	e7c3      	b.n	800e09c <_dtoa_r+0x1b4>
 800e114:	2301      	movs	r3, #1
 800e116:	9309      	str	r3, [sp, #36]	@ 0x24
 800e118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e11a:	eb07 0b03 	add.w	fp, r7, r3
 800e11e:	f10b 0301 	add.w	r3, fp, #1
 800e122:	2b01      	cmp	r3, #1
 800e124:	9303      	str	r3, [sp, #12]
 800e126:	bfb8      	it	lt
 800e128:	2301      	movlt	r3, #1
 800e12a:	e006      	b.n	800e13a <_dtoa_r+0x252>
 800e12c:	2301      	movs	r3, #1
 800e12e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e130:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e132:	2b00      	cmp	r3, #0
 800e134:	dd28      	ble.n	800e188 <_dtoa_r+0x2a0>
 800e136:	469b      	mov	fp, r3
 800e138:	9303      	str	r3, [sp, #12]
 800e13a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e13e:	2100      	movs	r1, #0
 800e140:	2204      	movs	r2, #4
 800e142:	f102 0514 	add.w	r5, r2, #20
 800e146:	429d      	cmp	r5, r3
 800e148:	d926      	bls.n	800e198 <_dtoa_r+0x2b0>
 800e14a:	6041      	str	r1, [r0, #4]
 800e14c:	4648      	mov	r0, r9
 800e14e:	f001 fa9d 	bl	800f68c <_Balloc>
 800e152:	4682      	mov	sl, r0
 800e154:	2800      	cmp	r0, #0
 800e156:	d141      	bne.n	800e1dc <_dtoa_r+0x2f4>
 800e158:	4b1d      	ldr	r3, [pc, #116]	@ (800e1d0 <_dtoa_r+0x2e8>)
 800e15a:	4602      	mov	r2, r0
 800e15c:	f240 11af 	movw	r1, #431	@ 0x1af
 800e160:	e6d9      	b.n	800df16 <_dtoa_r+0x2e>
 800e162:	2300      	movs	r3, #0
 800e164:	e7e3      	b.n	800e12e <_dtoa_r+0x246>
 800e166:	2300      	movs	r3, #0
 800e168:	e7d5      	b.n	800e116 <_dtoa_r+0x22e>
 800e16a:	2401      	movs	r4, #1
 800e16c:	2300      	movs	r3, #0
 800e16e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e170:	9307      	str	r3, [sp, #28]
 800e172:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e176:	2200      	movs	r2, #0
 800e178:	2312      	movs	r3, #18
 800e17a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e17e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e180:	e7db      	b.n	800e13a <_dtoa_r+0x252>
 800e182:	2301      	movs	r3, #1
 800e184:	9309      	str	r3, [sp, #36]	@ 0x24
 800e186:	e7f4      	b.n	800e172 <_dtoa_r+0x28a>
 800e188:	f04f 0b01 	mov.w	fp, #1
 800e18c:	465b      	mov	r3, fp
 800e18e:	f8cd b00c 	str.w	fp, [sp, #12]
 800e192:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e196:	e7d0      	b.n	800e13a <_dtoa_r+0x252>
 800e198:	3101      	adds	r1, #1
 800e19a:	0052      	lsls	r2, r2, #1
 800e19c:	e7d1      	b.n	800e142 <_dtoa_r+0x25a>
 800e19e:	bf00      	nop
 800e1a0:	636f4361 	.word	0x636f4361
 800e1a4:	3fd287a7 	.word	0x3fd287a7
 800e1a8:	8b60c8b3 	.word	0x8b60c8b3
 800e1ac:	3fc68a28 	.word	0x3fc68a28
 800e1b0:	509f79fb 	.word	0x509f79fb
 800e1b4:	3fd34413 	.word	0x3fd34413
 800e1b8:	08010e24 	.word	0x08010e24
 800e1bc:	08010e3b 	.word	0x08010e3b
 800e1c0:	7ff00000 	.word	0x7ff00000
 800e1c4:	08010de5 	.word	0x08010de5
 800e1c8:	3ff80000 	.word	0x3ff80000
 800e1cc:	08011138 	.word	0x08011138
 800e1d0:	08010e93 	.word	0x08010e93
 800e1d4:	08010e20 	.word	0x08010e20
 800e1d8:	08010de4 	.word	0x08010de4
 800e1dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e1e0:	6018      	str	r0, [r3, #0]
 800e1e2:	9b03      	ldr	r3, [sp, #12]
 800e1e4:	2b0e      	cmp	r3, #14
 800e1e6:	f200 80a1 	bhi.w	800e32c <_dtoa_r+0x444>
 800e1ea:	2c00      	cmp	r4, #0
 800e1ec:	f000 809e 	beq.w	800e32c <_dtoa_r+0x444>
 800e1f0:	2f00      	cmp	r7, #0
 800e1f2:	dd33      	ble.n	800e25c <_dtoa_r+0x374>
 800e1f4:	f007 020f 	and.w	r2, r7, #15
 800e1f8:	4b9b      	ldr	r3, [pc, #620]	@ (800e468 <_dtoa_r+0x580>)
 800e1fa:	05f8      	lsls	r0, r7, #23
 800e1fc:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e204:	ed93 7b00 	vldr	d7, [r3]
 800e208:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e20c:	d516      	bpl.n	800e23c <_dtoa_r+0x354>
 800e20e:	4b97      	ldr	r3, [pc, #604]	@ (800e46c <_dtoa_r+0x584>)
 800e210:	f004 040f 	and.w	r4, r4, #15
 800e214:	2603      	movs	r6, #3
 800e216:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e21a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e21e:	f7f2 fb25 	bl	800086c <__aeabi_ddiv>
 800e222:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e226:	4d91      	ldr	r5, [pc, #580]	@ (800e46c <_dtoa_r+0x584>)
 800e228:	b954      	cbnz	r4, 800e240 <_dtoa_r+0x358>
 800e22a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e22e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e232:	f7f2 fb1b 	bl	800086c <__aeabi_ddiv>
 800e236:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e23a:	e028      	b.n	800e28e <_dtoa_r+0x3a6>
 800e23c:	2602      	movs	r6, #2
 800e23e:	e7f2      	b.n	800e226 <_dtoa_r+0x33e>
 800e240:	07e1      	lsls	r1, r4, #31
 800e242:	d508      	bpl.n	800e256 <_dtoa_r+0x36e>
 800e244:	3601      	adds	r6, #1
 800e246:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e24a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e24e:	f7f2 f9e3 	bl	8000618 <__aeabi_dmul>
 800e252:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e256:	1064      	asrs	r4, r4, #1
 800e258:	3508      	adds	r5, #8
 800e25a:	e7e5      	b.n	800e228 <_dtoa_r+0x340>
 800e25c:	f000 80af 	beq.w	800e3be <_dtoa_r+0x4d6>
 800e260:	427c      	negs	r4, r7
 800e262:	4b81      	ldr	r3, [pc, #516]	@ (800e468 <_dtoa_r+0x580>)
 800e264:	4d81      	ldr	r5, [pc, #516]	@ (800e46c <_dtoa_r+0x584>)
 800e266:	2602      	movs	r6, #2
 800e268:	f004 020f 	and.w	r2, r4, #15
 800e26c:	1124      	asrs	r4, r4, #4
 800e26e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e272:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	f7f2 f9cd 	bl	8000618 <__aeabi_dmul>
 800e27e:	2300      	movs	r3, #0
 800e280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e284:	2c00      	cmp	r4, #0
 800e286:	f040 808f 	bne.w	800e3a8 <_dtoa_r+0x4c0>
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1d3      	bne.n	800e236 <_dtoa_r+0x34e>
 800e28e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e290:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e294:	2b00      	cmp	r3, #0
 800e296:	f000 8094 	beq.w	800e3c2 <_dtoa_r+0x4da>
 800e29a:	2200      	movs	r2, #0
 800e29c:	4b74      	ldr	r3, [pc, #464]	@ (800e470 <_dtoa_r+0x588>)
 800e29e:	4620      	mov	r0, r4
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	f7f2 fc2b 	bl	8000afc <__aeabi_dcmplt>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	f000 808b 	beq.w	800e3c2 <_dtoa_r+0x4da>
 800e2ac:	9b03      	ldr	r3, [sp, #12]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f000 8087 	beq.w	800e3c2 <_dtoa_r+0x4da>
 800e2b4:	f1bb 0f00 	cmp.w	fp, #0
 800e2b8:	dd34      	ble.n	800e324 <_dtoa_r+0x43c>
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e2c0:	3601      	adds	r6, #1
 800e2c2:	465c      	mov	r4, fp
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	4b6b      	ldr	r3, [pc, #428]	@ (800e474 <_dtoa_r+0x58c>)
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f7f2 f9a5 	bl	8000618 <__aeabi_dmul>
 800e2ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	f7f2 f936 	bl	8000544 <__aeabi_i2d>
 800e2d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2dc:	f7f2 f99c 	bl	8000618 <__aeabi_dmul>
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	4b65      	ldr	r3, [pc, #404]	@ (800e478 <_dtoa_r+0x590>)
 800e2e4:	f7f1 ffe2 	bl	80002ac <__adddf3>
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e2ee:	2c00      	cmp	r4, #0
 800e2f0:	d16a      	bne.n	800e3c8 <_dtoa_r+0x4e0>
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	4b61      	ldr	r3, [pc, #388]	@ (800e47c <_dtoa_r+0x594>)
 800e2f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2fa:	f7f1 ffd5 	bl	80002a8 <__aeabi_dsub>
 800e2fe:	4602      	mov	r2, r0
 800e300:	460b      	mov	r3, r1
 800e302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e306:	462a      	mov	r2, r5
 800e308:	4633      	mov	r3, r6
 800e30a:	f7f2 fc15 	bl	8000b38 <__aeabi_dcmpgt>
 800e30e:	2800      	cmp	r0, #0
 800e310:	f040 8298 	bne.w	800e844 <_dtoa_r+0x95c>
 800e314:	462a      	mov	r2, r5
 800e316:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e31a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e31e:	f7f2 fbed 	bl	8000afc <__aeabi_dcmplt>
 800e322:	bb38      	cbnz	r0, 800e374 <_dtoa_r+0x48c>
 800e324:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e328:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e32c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f2c0 8157 	blt.w	800e5e2 <_dtoa_r+0x6fa>
 800e334:	2f0e      	cmp	r7, #14
 800e336:	f300 8154 	bgt.w	800e5e2 <_dtoa_r+0x6fa>
 800e33a:	4b4b      	ldr	r3, [pc, #300]	@ (800e468 <_dtoa_r+0x580>)
 800e33c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e340:	ed93 7b00 	vldr	d7, [r3]
 800e344:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e346:	2b00      	cmp	r3, #0
 800e348:	ed8d 7b00 	vstr	d7, [sp]
 800e34c:	f280 80e5 	bge.w	800e51a <_dtoa_r+0x632>
 800e350:	9b03      	ldr	r3, [sp, #12]
 800e352:	2b00      	cmp	r3, #0
 800e354:	f300 80e1 	bgt.w	800e51a <_dtoa_r+0x632>
 800e358:	d10c      	bne.n	800e374 <_dtoa_r+0x48c>
 800e35a:	2200      	movs	r2, #0
 800e35c:	4b47      	ldr	r3, [pc, #284]	@ (800e47c <_dtoa_r+0x594>)
 800e35e:	ec51 0b17 	vmov	r0, r1, d7
 800e362:	f7f2 f959 	bl	8000618 <__aeabi_dmul>
 800e366:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e36a:	f7f2 fbdb 	bl	8000b24 <__aeabi_dcmpge>
 800e36e:	2800      	cmp	r0, #0
 800e370:	f000 8266 	beq.w	800e840 <_dtoa_r+0x958>
 800e374:	2400      	movs	r4, #0
 800e376:	4625      	mov	r5, r4
 800e378:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e37a:	4656      	mov	r6, sl
 800e37c:	ea6f 0803 	mvn.w	r8, r3
 800e380:	2700      	movs	r7, #0
 800e382:	4621      	mov	r1, r4
 800e384:	4648      	mov	r0, r9
 800e386:	f001 f9c1 	bl	800f70c <_Bfree>
 800e38a:	2d00      	cmp	r5, #0
 800e38c:	f000 80bd 	beq.w	800e50a <_dtoa_r+0x622>
 800e390:	b12f      	cbz	r7, 800e39e <_dtoa_r+0x4b6>
 800e392:	42af      	cmp	r7, r5
 800e394:	d003      	beq.n	800e39e <_dtoa_r+0x4b6>
 800e396:	4639      	mov	r1, r7
 800e398:	4648      	mov	r0, r9
 800e39a:	f001 f9b7 	bl	800f70c <_Bfree>
 800e39e:	4629      	mov	r1, r5
 800e3a0:	4648      	mov	r0, r9
 800e3a2:	f001 f9b3 	bl	800f70c <_Bfree>
 800e3a6:	e0b0      	b.n	800e50a <_dtoa_r+0x622>
 800e3a8:	07e2      	lsls	r2, r4, #31
 800e3aa:	d505      	bpl.n	800e3b8 <_dtoa_r+0x4d0>
 800e3ac:	3601      	adds	r6, #1
 800e3ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3b2:	f7f2 f931 	bl	8000618 <__aeabi_dmul>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	1064      	asrs	r4, r4, #1
 800e3ba:	3508      	adds	r5, #8
 800e3bc:	e762      	b.n	800e284 <_dtoa_r+0x39c>
 800e3be:	2602      	movs	r6, #2
 800e3c0:	e765      	b.n	800e28e <_dtoa_r+0x3a6>
 800e3c2:	46b8      	mov	r8, r7
 800e3c4:	9c03      	ldr	r4, [sp, #12]
 800e3c6:	e784      	b.n	800e2d2 <_dtoa_r+0x3ea>
 800e3c8:	4b27      	ldr	r3, [pc, #156]	@ (800e468 <_dtoa_r+0x580>)
 800e3ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e3cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3d0:	4454      	add	r4, sl
 800e3d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3d6:	2900      	cmp	r1, #0
 800e3d8:	d054      	beq.n	800e484 <_dtoa_r+0x59c>
 800e3da:	2000      	movs	r0, #0
 800e3dc:	4928      	ldr	r1, [pc, #160]	@ (800e480 <_dtoa_r+0x598>)
 800e3de:	f7f2 fa45 	bl	800086c <__aeabi_ddiv>
 800e3e2:	4633      	mov	r3, r6
 800e3e4:	4656      	mov	r6, sl
 800e3e6:	462a      	mov	r2, r5
 800e3e8:	f7f1 ff5e 	bl	80002a8 <__aeabi_dsub>
 800e3ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e3f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3f4:	f7f2 fbc0 	bl	8000b78 <__aeabi_d2iz>
 800e3f8:	4605      	mov	r5, r0
 800e3fa:	f7f2 f8a3 	bl	8000544 <__aeabi_i2d>
 800e3fe:	4602      	mov	r2, r0
 800e400:	460b      	mov	r3, r1
 800e402:	3530      	adds	r5, #48	@ 0x30
 800e404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e408:	f7f1 ff4e 	bl	80002a8 <__aeabi_dsub>
 800e40c:	4602      	mov	r2, r0
 800e40e:	460b      	mov	r3, r1
 800e410:	f806 5b01 	strb.w	r5, [r6], #1
 800e414:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e418:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e41c:	f7f2 fb6e 	bl	8000afc <__aeabi_dcmplt>
 800e420:	2800      	cmp	r0, #0
 800e422:	d172      	bne.n	800e50a <_dtoa_r+0x622>
 800e424:	2000      	movs	r0, #0
 800e426:	4912      	ldr	r1, [pc, #72]	@ (800e470 <_dtoa_r+0x588>)
 800e428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e42c:	f7f1 ff3c 	bl	80002a8 <__aeabi_dsub>
 800e430:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e434:	f7f2 fb62 	bl	8000afc <__aeabi_dcmplt>
 800e438:	2800      	cmp	r0, #0
 800e43a:	f040 80b4 	bne.w	800e5a6 <_dtoa_r+0x6be>
 800e43e:	42a6      	cmp	r6, r4
 800e440:	f43f af70 	beq.w	800e324 <_dtoa_r+0x43c>
 800e444:	2200      	movs	r2, #0
 800e446:	4b0b      	ldr	r3, [pc, #44]	@ (800e474 <_dtoa_r+0x58c>)
 800e448:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e44c:	f7f2 f8e4 	bl	8000618 <__aeabi_dmul>
 800e450:	2200      	movs	r2, #0
 800e452:	4b08      	ldr	r3, [pc, #32]	@ (800e474 <_dtoa_r+0x58c>)
 800e454:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e458:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e45c:	f7f2 f8dc 	bl	8000618 <__aeabi_dmul>
 800e460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e464:	e7c4      	b.n	800e3f0 <_dtoa_r+0x508>
 800e466:	bf00      	nop
 800e468:	08011138 	.word	0x08011138
 800e46c:	08011110 	.word	0x08011110
 800e470:	3ff00000 	.word	0x3ff00000
 800e474:	40240000 	.word	0x40240000
 800e478:	401c0000 	.word	0x401c0000
 800e47c:	40140000 	.word	0x40140000
 800e480:	3fe00000 	.word	0x3fe00000
 800e484:	4631      	mov	r1, r6
 800e486:	4656      	mov	r6, sl
 800e488:	4628      	mov	r0, r5
 800e48a:	f7f2 f8c5 	bl	8000618 <__aeabi_dmul>
 800e48e:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e490:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e498:	f7f2 fb6e 	bl	8000b78 <__aeabi_d2iz>
 800e49c:	4605      	mov	r5, r0
 800e49e:	f7f2 f851 	bl	8000544 <__aeabi_i2d>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	3530      	adds	r5, #48	@ 0x30
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4ac:	f7f1 fefc 	bl	80002a8 <__aeabi_dsub>
 800e4b0:	f806 5b01 	strb.w	r5, [r6], #1
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	42a6      	cmp	r6, r4
 800e4ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4be:	f04f 0200 	mov.w	r2, #0
 800e4c2:	d124      	bne.n	800e50e <_dtoa_r+0x626>
 800e4c4:	4baf      	ldr	r3, [pc, #700]	@ (800e784 <_dtoa_r+0x89c>)
 800e4c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e4ca:	f7f1 feef 	bl	80002ac <__adddf3>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4d6:	f7f2 fb2f 	bl	8000b38 <__aeabi_dcmpgt>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	d163      	bne.n	800e5a6 <_dtoa_r+0x6be>
 800e4de:	2000      	movs	r0, #0
 800e4e0:	49a8      	ldr	r1, [pc, #672]	@ (800e784 <_dtoa_r+0x89c>)
 800e4e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e4e6:	f7f1 fedf 	bl	80002a8 <__aeabi_dsub>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4f2:	f7f2 fb03 	bl	8000afc <__aeabi_dcmplt>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	f43f af14 	beq.w	800e324 <_dtoa_r+0x43c>
 800e4fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e4fe:	1e73      	subs	r3, r6, #1
 800e500:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e502:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e506:	2b30      	cmp	r3, #48	@ 0x30
 800e508:	d0f8      	beq.n	800e4fc <_dtoa_r+0x614>
 800e50a:	4647      	mov	r7, r8
 800e50c:	e03b      	b.n	800e586 <_dtoa_r+0x69e>
 800e50e:	4b9e      	ldr	r3, [pc, #632]	@ (800e788 <_dtoa_r+0x8a0>)
 800e510:	f7f2 f882 	bl	8000618 <__aeabi_dmul>
 800e514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e518:	e7bc      	b.n	800e494 <_dtoa_r+0x5ac>
 800e51a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e51e:	4656      	mov	r6, sl
 800e520:	4620      	mov	r0, r4
 800e522:	4629      	mov	r1, r5
 800e524:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e528:	f7f2 f9a0 	bl	800086c <__aeabi_ddiv>
 800e52c:	f7f2 fb24 	bl	8000b78 <__aeabi_d2iz>
 800e530:	4680      	mov	r8, r0
 800e532:	f7f2 f807 	bl	8000544 <__aeabi_i2d>
 800e536:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e53a:	f7f2 f86d 	bl	8000618 <__aeabi_dmul>
 800e53e:	4602      	mov	r2, r0
 800e540:	4620      	mov	r0, r4
 800e542:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e546:	460b      	mov	r3, r1
 800e548:	4629      	mov	r1, r5
 800e54a:	f7f1 fead 	bl	80002a8 <__aeabi_dsub>
 800e54e:	9d03      	ldr	r5, [sp, #12]
 800e550:	f806 4b01 	strb.w	r4, [r6], #1
 800e554:	eba6 040a 	sub.w	r4, r6, sl
 800e558:	4602      	mov	r2, r0
 800e55a:	460b      	mov	r3, r1
 800e55c:	42a5      	cmp	r5, r4
 800e55e:	d133      	bne.n	800e5c8 <_dtoa_r+0x6e0>
 800e560:	f7f1 fea4 	bl	80002ac <__adddf3>
 800e564:	4604      	mov	r4, r0
 800e566:	460d      	mov	r5, r1
 800e568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e56c:	f7f2 fae4 	bl	8000b38 <__aeabi_dcmpgt>
 800e570:	b9c0      	cbnz	r0, 800e5a4 <_dtoa_r+0x6bc>
 800e572:	4620      	mov	r0, r4
 800e574:	4629      	mov	r1, r5
 800e576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e57a:	f7f2 fab5 	bl	8000ae8 <__aeabi_dcmpeq>
 800e57e:	b110      	cbz	r0, 800e586 <_dtoa_r+0x69e>
 800e580:	f018 0f01 	tst.w	r8, #1
 800e584:	d10e      	bne.n	800e5a4 <_dtoa_r+0x6bc>
 800e586:	9902      	ldr	r1, [sp, #8]
 800e588:	4648      	mov	r0, r9
 800e58a:	f001 f8bf 	bl	800f70c <_Bfree>
 800e58e:	2300      	movs	r3, #0
 800e590:	3701      	adds	r7, #1
 800e592:	7033      	strb	r3, [r6, #0]
 800e594:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e596:	601f      	str	r7, [r3, #0]
 800e598:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f000 824c 	beq.w	800ea38 <_dtoa_r+0xb50>
 800e5a0:	601e      	str	r6, [r3, #0]
 800e5a2:	e249      	b.n	800ea38 <_dtoa_r+0xb50>
 800e5a4:	46b8      	mov	r8, r7
 800e5a6:	4633      	mov	r3, r6
 800e5a8:	461e      	mov	r6, r3
 800e5aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5ae:	2a39      	cmp	r2, #57	@ 0x39
 800e5b0:	d106      	bne.n	800e5c0 <_dtoa_r+0x6d8>
 800e5b2:	459a      	cmp	sl, r3
 800e5b4:	d1f8      	bne.n	800e5a8 <_dtoa_r+0x6c0>
 800e5b6:	2230      	movs	r2, #48	@ 0x30
 800e5b8:	f108 0801 	add.w	r8, r8, #1
 800e5bc:	f88a 2000 	strb.w	r2, [sl]
 800e5c0:	781a      	ldrb	r2, [r3, #0]
 800e5c2:	3201      	adds	r2, #1
 800e5c4:	701a      	strb	r2, [r3, #0]
 800e5c6:	e7a0      	b.n	800e50a <_dtoa_r+0x622>
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	4b6f      	ldr	r3, [pc, #444]	@ (800e788 <_dtoa_r+0x8a0>)
 800e5cc:	f7f2 f824 	bl	8000618 <__aeabi_dmul>
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	4604      	mov	r4, r0
 800e5d6:	460d      	mov	r5, r1
 800e5d8:	f7f2 fa86 	bl	8000ae8 <__aeabi_dcmpeq>
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	d09f      	beq.n	800e520 <_dtoa_r+0x638>
 800e5e0:	e7d1      	b.n	800e586 <_dtoa_r+0x69e>
 800e5e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5e4:	2a00      	cmp	r2, #0
 800e5e6:	f000 80ea 	beq.w	800e7be <_dtoa_r+0x8d6>
 800e5ea:	9a07      	ldr	r2, [sp, #28]
 800e5ec:	2a01      	cmp	r2, #1
 800e5ee:	f300 80cd 	bgt.w	800e78c <_dtoa_r+0x8a4>
 800e5f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e5f4:	2a00      	cmp	r2, #0
 800e5f6:	f000 80c1 	beq.w	800e77c <_dtoa_r+0x894>
 800e5fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e5fe:	9c08      	ldr	r4, [sp, #32]
 800e600:	9e00      	ldr	r6, [sp, #0]
 800e602:	9a00      	ldr	r2, [sp, #0]
 800e604:	2101      	movs	r1, #1
 800e606:	4648      	mov	r0, r9
 800e608:	441a      	add	r2, r3
 800e60a:	9200      	str	r2, [sp, #0]
 800e60c:	9a06      	ldr	r2, [sp, #24]
 800e60e:	441a      	add	r2, r3
 800e610:	9206      	str	r2, [sp, #24]
 800e612:	f001 f97b 	bl	800f90c <__i2b>
 800e616:	4605      	mov	r5, r0
 800e618:	b166      	cbz	r6, 800e634 <_dtoa_r+0x74c>
 800e61a:	9b06      	ldr	r3, [sp, #24]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	dd09      	ble.n	800e634 <_dtoa_r+0x74c>
 800e620:	42b3      	cmp	r3, r6
 800e622:	9a00      	ldr	r2, [sp, #0]
 800e624:	bfa8      	it	ge
 800e626:	4633      	movge	r3, r6
 800e628:	1ad2      	subs	r2, r2, r3
 800e62a:	1af6      	subs	r6, r6, r3
 800e62c:	9200      	str	r2, [sp, #0]
 800e62e:	9a06      	ldr	r2, [sp, #24]
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	9306      	str	r3, [sp, #24]
 800e634:	9b08      	ldr	r3, [sp, #32]
 800e636:	b30b      	cbz	r3, 800e67c <_dtoa_r+0x794>
 800e638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	f000 80c6 	beq.w	800e7cc <_dtoa_r+0x8e4>
 800e640:	2c00      	cmp	r4, #0
 800e642:	f000 80c0 	beq.w	800e7c6 <_dtoa_r+0x8de>
 800e646:	4629      	mov	r1, r5
 800e648:	4622      	mov	r2, r4
 800e64a:	4648      	mov	r0, r9
 800e64c:	f001 fa18 	bl	800fa80 <__pow5mult>
 800e650:	9a02      	ldr	r2, [sp, #8]
 800e652:	4601      	mov	r1, r0
 800e654:	4605      	mov	r5, r0
 800e656:	4648      	mov	r0, r9
 800e658:	f001 f96e 	bl	800f938 <__multiply>
 800e65c:	9902      	ldr	r1, [sp, #8]
 800e65e:	4680      	mov	r8, r0
 800e660:	4648      	mov	r0, r9
 800e662:	f001 f853 	bl	800f70c <_Bfree>
 800e666:	9b08      	ldr	r3, [sp, #32]
 800e668:	1b1b      	subs	r3, r3, r4
 800e66a:	9308      	str	r3, [sp, #32]
 800e66c:	f000 80b1 	beq.w	800e7d2 <_dtoa_r+0x8ea>
 800e670:	9a08      	ldr	r2, [sp, #32]
 800e672:	4641      	mov	r1, r8
 800e674:	4648      	mov	r0, r9
 800e676:	f001 fa03 	bl	800fa80 <__pow5mult>
 800e67a:	9002      	str	r0, [sp, #8]
 800e67c:	2101      	movs	r1, #1
 800e67e:	4648      	mov	r0, r9
 800e680:	f001 f944 	bl	800f90c <__i2b>
 800e684:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e686:	4604      	mov	r4, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f000 81d9 	beq.w	800ea40 <_dtoa_r+0xb58>
 800e68e:	461a      	mov	r2, r3
 800e690:	4601      	mov	r1, r0
 800e692:	4648      	mov	r0, r9
 800e694:	f001 f9f4 	bl	800fa80 <__pow5mult>
 800e698:	9b07      	ldr	r3, [sp, #28]
 800e69a:	4604      	mov	r4, r0
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	f300 809f 	bgt.w	800e7e0 <_dtoa_r+0x8f8>
 800e6a2:	9b04      	ldr	r3, [sp, #16]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f040 8097 	bne.w	800e7d8 <_dtoa_r+0x8f0>
 800e6aa:	9b05      	ldr	r3, [sp, #20]
 800e6ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f040 8093 	bne.w	800e7dc <_dtoa_r+0x8f4>
 800e6b6:	9b05      	ldr	r3, [sp, #20]
 800e6b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e6bc:	0d1b      	lsrs	r3, r3, #20
 800e6be:	051b      	lsls	r3, r3, #20
 800e6c0:	b133      	cbz	r3, 800e6d0 <_dtoa_r+0x7e8>
 800e6c2:	9b00      	ldr	r3, [sp, #0]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	9b06      	ldr	r3, [sp, #24]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	9306      	str	r3, [sp, #24]
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	9308      	str	r3, [sp, #32]
 800e6d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f000 81b9 	beq.w	800ea4c <_dtoa_r+0xb64>
 800e6da:	6923      	ldr	r3, [r4, #16]
 800e6dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6e0:	6918      	ldr	r0, [r3, #16]
 800e6e2:	f001 f8c7 	bl	800f874 <__hi0bits>
 800e6e6:	f1c0 0020 	rsb	r0, r0, #32
 800e6ea:	9b06      	ldr	r3, [sp, #24]
 800e6ec:	4418      	add	r0, r3
 800e6ee:	f010 001f 	ands.w	r0, r0, #31
 800e6f2:	f000 8082 	beq.w	800e7fa <_dtoa_r+0x912>
 800e6f6:	f1c0 0320 	rsb	r3, r0, #32
 800e6fa:	2b04      	cmp	r3, #4
 800e6fc:	dd73      	ble.n	800e7e6 <_dtoa_r+0x8fe>
 800e6fe:	f1c0 001c 	rsb	r0, r0, #28
 800e702:	9b00      	ldr	r3, [sp, #0]
 800e704:	4403      	add	r3, r0
 800e706:	4406      	add	r6, r0
 800e708:	9300      	str	r3, [sp, #0]
 800e70a:	9b06      	ldr	r3, [sp, #24]
 800e70c:	4403      	add	r3, r0
 800e70e:	9306      	str	r3, [sp, #24]
 800e710:	9b00      	ldr	r3, [sp, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	dd05      	ble.n	800e722 <_dtoa_r+0x83a>
 800e716:	461a      	mov	r2, r3
 800e718:	9902      	ldr	r1, [sp, #8]
 800e71a:	4648      	mov	r0, r9
 800e71c:	f001 fa0a 	bl	800fb34 <__lshift>
 800e720:	9002      	str	r0, [sp, #8]
 800e722:	9b06      	ldr	r3, [sp, #24]
 800e724:	2b00      	cmp	r3, #0
 800e726:	dd05      	ble.n	800e734 <_dtoa_r+0x84c>
 800e728:	4621      	mov	r1, r4
 800e72a:	461a      	mov	r2, r3
 800e72c:	4648      	mov	r0, r9
 800e72e:	f001 fa01 	bl	800fb34 <__lshift>
 800e732:	4604      	mov	r4, r0
 800e734:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e736:	2b00      	cmp	r3, #0
 800e738:	d061      	beq.n	800e7fe <_dtoa_r+0x916>
 800e73a:	4621      	mov	r1, r4
 800e73c:	9802      	ldr	r0, [sp, #8]
 800e73e:	f001 fa65 	bl	800fc0c <__mcmp>
 800e742:	2800      	cmp	r0, #0
 800e744:	da5b      	bge.n	800e7fe <_dtoa_r+0x916>
 800e746:	2300      	movs	r3, #0
 800e748:	220a      	movs	r2, #10
 800e74a:	9902      	ldr	r1, [sp, #8]
 800e74c:	4648      	mov	r0, r9
 800e74e:	f000 ffff 	bl	800f750 <__multadd>
 800e752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e754:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e758:	9002      	str	r0, [sp, #8]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	f000 8178 	beq.w	800ea50 <_dtoa_r+0xb68>
 800e760:	4629      	mov	r1, r5
 800e762:	2300      	movs	r3, #0
 800e764:	220a      	movs	r2, #10
 800e766:	4648      	mov	r0, r9
 800e768:	f000 fff2 	bl	800f750 <__multadd>
 800e76c:	f1bb 0f00 	cmp.w	fp, #0
 800e770:	4605      	mov	r5, r0
 800e772:	dc6f      	bgt.n	800e854 <_dtoa_r+0x96c>
 800e774:	9b07      	ldr	r3, [sp, #28]
 800e776:	2b02      	cmp	r3, #2
 800e778:	dc49      	bgt.n	800e80e <_dtoa_r+0x926>
 800e77a:	e06b      	b.n	800e854 <_dtoa_r+0x96c>
 800e77c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e77e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e782:	e73c      	b.n	800e5fe <_dtoa_r+0x716>
 800e784:	3fe00000 	.word	0x3fe00000
 800e788:	40240000 	.word	0x40240000
 800e78c:	9b03      	ldr	r3, [sp, #12]
 800e78e:	1e5c      	subs	r4, r3, #1
 800e790:	9b08      	ldr	r3, [sp, #32]
 800e792:	42a3      	cmp	r3, r4
 800e794:	db09      	blt.n	800e7aa <_dtoa_r+0x8c2>
 800e796:	1b1c      	subs	r4, r3, r4
 800e798:	9b03      	ldr	r3, [sp, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f6bf af30 	bge.w	800e600 <_dtoa_r+0x718>
 800e7a0:	9b00      	ldr	r3, [sp, #0]
 800e7a2:	9a03      	ldr	r2, [sp, #12]
 800e7a4:	1a9e      	subs	r6, r3, r2
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	e72b      	b.n	800e602 <_dtoa_r+0x71a>
 800e7aa:	9b08      	ldr	r3, [sp, #32]
 800e7ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e7ae:	1ae3      	subs	r3, r4, r3
 800e7b0:	9408      	str	r4, [sp, #32]
 800e7b2:	9e00      	ldr	r6, [sp, #0]
 800e7b4:	2400      	movs	r4, #0
 800e7b6:	441a      	add	r2, r3
 800e7b8:	9b03      	ldr	r3, [sp, #12]
 800e7ba:	920d      	str	r2, [sp, #52]	@ 0x34
 800e7bc:	e721      	b.n	800e602 <_dtoa_r+0x71a>
 800e7be:	9c08      	ldr	r4, [sp, #32]
 800e7c0:	9e00      	ldr	r6, [sp, #0]
 800e7c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e7c4:	e728      	b.n	800e618 <_dtoa_r+0x730>
 800e7c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e7ca:	e751      	b.n	800e670 <_dtoa_r+0x788>
 800e7cc:	9a08      	ldr	r2, [sp, #32]
 800e7ce:	9902      	ldr	r1, [sp, #8]
 800e7d0:	e750      	b.n	800e674 <_dtoa_r+0x78c>
 800e7d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e7d6:	e751      	b.n	800e67c <_dtoa_r+0x794>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	e779      	b.n	800e6d0 <_dtoa_r+0x7e8>
 800e7dc:	9b04      	ldr	r3, [sp, #16]
 800e7de:	e777      	b.n	800e6d0 <_dtoa_r+0x7e8>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	9308      	str	r3, [sp, #32]
 800e7e4:	e779      	b.n	800e6da <_dtoa_r+0x7f2>
 800e7e6:	d093      	beq.n	800e710 <_dtoa_r+0x828>
 800e7e8:	331c      	adds	r3, #28
 800e7ea:	9a00      	ldr	r2, [sp, #0]
 800e7ec:	441a      	add	r2, r3
 800e7ee:	441e      	add	r6, r3
 800e7f0:	9200      	str	r2, [sp, #0]
 800e7f2:	9a06      	ldr	r2, [sp, #24]
 800e7f4:	441a      	add	r2, r3
 800e7f6:	9206      	str	r2, [sp, #24]
 800e7f8:	e78a      	b.n	800e710 <_dtoa_r+0x828>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	e7f4      	b.n	800e7e8 <_dtoa_r+0x900>
 800e7fe:	9b03      	ldr	r3, [sp, #12]
 800e800:	46b8      	mov	r8, r7
 800e802:	2b00      	cmp	r3, #0
 800e804:	dc20      	bgt.n	800e848 <_dtoa_r+0x960>
 800e806:	469b      	mov	fp, r3
 800e808:	9b07      	ldr	r3, [sp, #28]
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	dd1e      	ble.n	800e84c <_dtoa_r+0x964>
 800e80e:	f1bb 0f00 	cmp.w	fp, #0
 800e812:	f47f adb1 	bne.w	800e378 <_dtoa_r+0x490>
 800e816:	4621      	mov	r1, r4
 800e818:	465b      	mov	r3, fp
 800e81a:	2205      	movs	r2, #5
 800e81c:	4648      	mov	r0, r9
 800e81e:	f000 ff97 	bl	800f750 <__multadd>
 800e822:	4601      	mov	r1, r0
 800e824:	4604      	mov	r4, r0
 800e826:	9802      	ldr	r0, [sp, #8]
 800e828:	f001 f9f0 	bl	800fc0c <__mcmp>
 800e82c:	2800      	cmp	r0, #0
 800e82e:	f77f ada3 	ble.w	800e378 <_dtoa_r+0x490>
 800e832:	4656      	mov	r6, sl
 800e834:	2331      	movs	r3, #49	@ 0x31
 800e836:	f108 0801 	add.w	r8, r8, #1
 800e83a:	f806 3b01 	strb.w	r3, [r6], #1
 800e83e:	e59f      	b.n	800e380 <_dtoa_r+0x498>
 800e840:	46b8      	mov	r8, r7
 800e842:	9c03      	ldr	r4, [sp, #12]
 800e844:	4625      	mov	r5, r4
 800e846:	e7f4      	b.n	800e832 <_dtoa_r+0x94a>
 800e848:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e84e:	2b00      	cmp	r3, #0
 800e850:	f000 8102 	beq.w	800ea58 <_dtoa_r+0xb70>
 800e854:	2e00      	cmp	r6, #0
 800e856:	dd05      	ble.n	800e864 <_dtoa_r+0x97c>
 800e858:	4629      	mov	r1, r5
 800e85a:	4632      	mov	r2, r6
 800e85c:	4648      	mov	r0, r9
 800e85e:	f001 f969 	bl	800fb34 <__lshift>
 800e862:	4605      	mov	r5, r0
 800e864:	9b08      	ldr	r3, [sp, #32]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d05c      	beq.n	800e924 <_dtoa_r+0xa3c>
 800e86a:	6869      	ldr	r1, [r5, #4]
 800e86c:	4648      	mov	r0, r9
 800e86e:	f000 ff0d 	bl	800f68c <_Balloc>
 800e872:	4606      	mov	r6, r0
 800e874:	b928      	cbnz	r0, 800e882 <_dtoa_r+0x99a>
 800e876:	4b83      	ldr	r3, [pc, #524]	@ (800ea84 <_dtoa_r+0xb9c>)
 800e878:	4602      	mov	r2, r0
 800e87a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e87e:	f7ff bb4a 	b.w	800df16 <_dtoa_r+0x2e>
 800e882:	692a      	ldr	r2, [r5, #16]
 800e884:	f105 010c 	add.w	r1, r5, #12
 800e888:	300c      	adds	r0, #12
 800e88a:	3202      	adds	r2, #2
 800e88c:	0092      	lsls	r2, r2, #2
 800e88e:	f7ff fa81 	bl	800dd94 <memcpy>
 800e892:	2201      	movs	r2, #1
 800e894:	4631      	mov	r1, r6
 800e896:	4648      	mov	r0, r9
 800e898:	f001 f94c 	bl	800fb34 <__lshift>
 800e89c:	f10a 0301 	add.w	r3, sl, #1
 800e8a0:	462f      	mov	r7, r5
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	9300      	str	r3, [sp, #0]
 800e8a6:	eb0a 030b 	add.w	r3, sl, fp
 800e8aa:	9308      	str	r3, [sp, #32]
 800e8ac:	9b04      	ldr	r3, [sp, #16]
 800e8ae:	f003 0301 	and.w	r3, r3, #1
 800e8b2:	9306      	str	r3, [sp, #24]
 800e8b4:	9b00      	ldr	r3, [sp, #0]
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	9802      	ldr	r0, [sp, #8]
 800e8ba:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e8be:	f7ff fa85 	bl	800ddcc <quorem>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	9003      	str	r0, [sp, #12]
 800e8c8:	3330      	adds	r3, #48	@ 0x30
 800e8ca:	9802      	ldr	r0, [sp, #8]
 800e8cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8ce:	f001 f99d 	bl	800fc0c <__mcmp>
 800e8d2:	462a      	mov	r2, r5
 800e8d4:	9004      	str	r0, [sp, #16]
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	4648      	mov	r0, r9
 800e8da:	f001 f9b3 	bl	800fc44 <__mdiff>
 800e8de:	68c2      	ldr	r2, [r0, #12]
 800e8e0:	4606      	mov	r6, r0
 800e8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8e4:	bb02      	cbnz	r2, 800e928 <_dtoa_r+0xa40>
 800e8e6:	4601      	mov	r1, r0
 800e8e8:	9802      	ldr	r0, [sp, #8]
 800e8ea:	f001 f98f 	bl	800fc0c <__mcmp>
 800e8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	4631      	mov	r1, r6
 800e8f4:	4648      	mov	r0, r9
 800e8f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e8f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8fa:	f000 ff07 	bl	800f70c <_Bfree>
 800e8fe:	9b07      	ldr	r3, [sp, #28]
 800e900:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e902:	9e00      	ldr	r6, [sp, #0]
 800e904:	ea42 0103 	orr.w	r1, r2, r3
 800e908:	9b06      	ldr	r3, [sp, #24]
 800e90a:	4319      	orrs	r1, r3
 800e90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e90e:	d10d      	bne.n	800e92c <_dtoa_r+0xa44>
 800e910:	2b39      	cmp	r3, #57	@ 0x39
 800e912:	d027      	beq.n	800e964 <_dtoa_r+0xa7c>
 800e914:	9a04      	ldr	r2, [sp, #16]
 800e916:	2a00      	cmp	r2, #0
 800e918:	dd01      	ble.n	800e91e <_dtoa_r+0xa36>
 800e91a:	9b03      	ldr	r3, [sp, #12]
 800e91c:	3331      	adds	r3, #49	@ 0x31
 800e91e:	f88b 3000 	strb.w	r3, [fp]
 800e922:	e52e      	b.n	800e382 <_dtoa_r+0x49a>
 800e924:	4628      	mov	r0, r5
 800e926:	e7b9      	b.n	800e89c <_dtoa_r+0x9b4>
 800e928:	2201      	movs	r2, #1
 800e92a:	e7e2      	b.n	800e8f2 <_dtoa_r+0xa0a>
 800e92c:	9904      	ldr	r1, [sp, #16]
 800e92e:	2900      	cmp	r1, #0
 800e930:	db04      	blt.n	800e93c <_dtoa_r+0xa54>
 800e932:	9807      	ldr	r0, [sp, #28]
 800e934:	4301      	orrs	r1, r0
 800e936:	9806      	ldr	r0, [sp, #24]
 800e938:	4301      	orrs	r1, r0
 800e93a:	d120      	bne.n	800e97e <_dtoa_r+0xa96>
 800e93c:	2a00      	cmp	r2, #0
 800e93e:	ddee      	ble.n	800e91e <_dtoa_r+0xa36>
 800e940:	2201      	movs	r2, #1
 800e942:	9902      	ldr	r1, [sp, #8]
 800e944:	4648      	mov	r0, r9
 800e946:	9300      	str	r3, [sp, #0]
 800e948:	f001 f8f4 	bl	800fb34 <__lshift>
 800e94c:	4621      	mov	r1, r4
 800e94e:	9002      	str	r0, [sp, #8]
 800e950:	f001 f95c 	bl	800fc0c <__mcmp>
 800e954:	2800      	cmp	r0, #0
 800e956:	9b00      	ldr	r3, [sp, #0]
 800e958:	dc02      	bgt.n	800e960 <_dtoa_r+0xa78>
 800e95a:	d1e0      	bne.n	800e91e <_dtoa_r+0xa36>
 800e95c:	07da      	lsls	r2, r3, #31
 800e95e:	d5de      	bpl.n	800e91e <_dtoa_r+0xa36>
 800e960:	2b39      	cmp	r3, #57	@ 0x39
 800e962:	d1da      	bne.n	800e91a <_dtoa_r+0xa32>
 800e964:	2339      	movs	r3, #57	@ 0x39
 800e966:	f88b 3000 	strb.w	r3, [fp]
 800e96a:	4633      	mov	r3, r6
 800e96c:	461e      	mov	r6, r3
 800e96e:	3b01      	subs	r3, #1
 800e970:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e974:	2a39      	cmp	r2, #57	@ 0x39
 800e976:	d04f      	beq.n	800ea18 <_dtoa_r+0xb30>
 800e978:	3201      	adds	r2, #1
 800e97a:	701a      	strb	r2, [r3, #0]
 800e97c:	e501      	b.n	800e382 <_dtoa_r+0x49a>
 800e97e:	2a00      	cmp	r2, #0
 800e980:	dd03      	ble.n	800e98a <_dtoa_r+0xaa2>
 800e982:	2b39      	cmp	r3, #57	@ 0x39
 800e984:	d0ee      	beq.n	800e964 <_dtoa_r+0xa7c>
 800e986:	3301      	adds	r3, #1
 800e988:	e7c9      	b.n	800e91e <_dtoa_r+0xa36>
 800e98a:	9a00      	ldr	r2, [sp, #0]
 800e98c:	9908      	ldr	r1, [sp, #32]
 800e98e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e992:	428a      	cmp	r2, r1
 800e994:	d029      	beq.n	800e9ea <_dtoa_r+0xb02>
 800e996:	2300      	movs	r3, #0
 800e998:	220a      	movs	r2, #10
 800e99a:	9902      	ldr	r1, [sp, #8]
 800e99c:	4648      	mov	r0, r9
 800e99e:	f000 fed7 	bl	800f750 <__multadd>
 800e9a2:	42af      	cmp	r7, r5
 800e9a4:	9002      	str	r0, [sp, #8]
 800e9a6:	f04f 0300 	mov.w	r3, #0
 800e9aa:	f04f 020a 	mov.w	r2, #10
 800e9ae:	4639      	mov	r1, r7
 800e9b0:	4648      	mov	r0, r9
 800e9b2:	d107      	bne.n	800e9c4 <_dtoa_r+0xadc>
 800e9b4:	f000 fecc 	bl	800f750 <__multadd>
 800e9b8:	4607      	mov	r7, r0
 800e9ba:	4605      	mov	r5, r0
 800e9bc:	9b00      	ldr	r3, [sp, #0]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	9300      	str	r3, [sp, #0]
 800e9c2:	e777      	b.n	800e8b4 <_dtoa_r+0x9cc>
 800e9c4:	f000 fec4 	bl	800f750 <__multadd>
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	4607      	mov	r7, r0
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	220a      	movs	r2, #10
 800e9d0:	4648      	mov	r0, r9
 800e9d2:	f000 febd 	bl	800f750 <__multadd>
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	e7f0      	b.n	800e9bc <_dtoa_r+0xad4>
 800e9da:	f1bb 0f00 	cmp.w	fp, #0
 800e9de:	f04f 0700 	mov.w	r7, #0
 800e9e2:	bfcc      	ite	gt
 800e9e4:	465e      	movgt	r6, fp
 800e9e6:	2601      	movle	r6, #1
 800e9e8:	4456      	add	r6, sl
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	9902      	ldr	r1, [sp, #8]
 800e9ee:	4648      	mov	r0, r9
 800e9f0:	9300      	str	r3, [sp, #0]
 800e9f2:	f001 f89f 	bl	800fb34 <__lshift>
 800e9f6:	4621      	mov	r1, r4
 800e9f8:	9002      	str	r0, [sp, #8]
 800e9fa:	f001 f907 	bl	800fc0c <__mcmp>
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	dcb3      	bgt.n	800e96a <_dtoa_r+0xa82>
 800ea02:	d102      	bne.n	800ea0a <_dtoa_r+0xb22>
 800ea04:	9b00      	ldr	r3, [sp, #0]
 800ea06:	07db      	lsls	r3, r3, #31
 800ea08:	d4af      	bmi.n	800e96a <_dtoa_r+0xa82>
 800ea0a:	4633      	mov	r3, r6
 800ea0c:	461e      	mov	r6, r3
 800ea0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea12:	2a30      	cmp	r2, #48	@ 0x30
 800ea14:	d0fa      	beq.n	800ea0c <_dtoa_r+0xb24>
 800ea16:	e4b4      	b.n	800e382 <_dtoa_r+0x49a>
 800ea18:	459a      	cmp	sl, r3
 800ea1a:	d1a7      	bne.n	800e96c <_dtoa_r+0xa84>
 800ea1c:	2331      	movs	r3, #49	@ 0x31
 800ea1e:	f108 0801 	add.w	r8, r8, #1
 800ea22:	f88a 3000 	strb.w	r3, [sl]
 800ea26:	e4ac      	b.n	800e382 <_dtoa_r+0x49a>
 800ea28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea2a:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ea88 <_dtoa_r+0xba0>
 800ea2e:	b11b      	cbz	r3, 800ea38 <_dtoa_r+0xb50>
 800ea30:	f10a 0308 	add.w	r3, sl, #8
 800ea34:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ea36:	6013      	str	r3, [r2, #0]
 800ea38:	4650      	mov	r0, sl
 800ea3a:	b017      	add	sp, #92	@ 0x5c
 800ea3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea40:	9b07      	ldr	r3, [sp, #28]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	f77f ae2d 	ble.w	800e6a2 <_dtoa_r+0x7ba>
 800ea48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea4a:	9308      	str	r3, [sp, #32]
 800ea4c:	2001      	movs	r0, #1
 800ea4e:	e64c      	b.n	800e6ea <_dtoa_r+0x802>
 800ea50:	f1bb 0f00 	cmp.w	fp, #0
 800ea54:	f77f aed8 	ble.w	800e808 <_dtoa_r+0x920>
 800ea58:	4656      	mov	r6, sl
 800ea5a:	4621      	mov	r1, r4
 800ea5c:	9802      	ldr	r0, [sp, #8]
 800ea5e:	f7ff f9b5 	bl	800ddcc <quorem>
 800ea62:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ea66:	f806 3b01 	strb.w	r3, [r6], #1
 800ea6a:	eba6 020a 	sub.w	r2, r6, sl
 800ea6e:	4593      	cmp	fp, r2
 800ea70:	ddb3      	ble.n	800e9da <_dtoa_r+0xaf2>
 800ea72:	2300      	movs	r3, #0
 800ea74:	220a      	movs	r2, #10
 800ea76:	9902      	ldr	r1, [sp, #8]
 800ea78:	4648      	mov	r0, r9
 800ea7a:	f000 fe69 	bl	800f750 <__multadd>
 800ea7e:	9002      	str	r0, [sp, #8]
 800ea80:	e7eb      	b.n	800ea5a <_dtoa_r+0xb72>
 800ea82:	bf00      	nop
 800ea84:	08010e93 	.word	0x08010e93
 800ea88:	08010e17 	.word	0x08010e17

0800ea8c <rshift>:
 800ea8c:	6903      	ldr	r3, [r0, #16]
 800ea8e:	114a      	asrs	r2, r1, #5
 800ea90:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea98:	f100 0414 	add.w	r4, r0, #20
 800ea9c:	dd45      	ble.n	800eb2a <rshift+0x9e>
 800ea9e:	f011 011f 	ands.w	r1, r1, #31
 800eaa2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eaa6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eaaa:	d10c      	bne.n	800eac6 <rshift+0x3a>
 800eaac:	f100 0710 	add.w	r7, r0, #16
 800eab0:	4629      	mov	r1, r5
 800eab2:	42b1      	cmp	r1, r6
 800eab4:	d334      	bcc.n	800eb20 <rshift+0x94>
 800eab6:	1a9b      	subs	r3, r3, r2
 800eab8:	1eea      	subs	r2, r5, #3
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	4296      	cmp	r6, r2
 800eabe:	bf38      	it	cc
 800eac0:	2300      	movcc	r3, #0
 800eac2:	4423      	add	r3, r4
 800eac4:	e015      	b.n	800eaf2 <rshift+0x66>
 800eac6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eaca:	f1c1 0820 	rsb	r8, r1, #32
 800eace:	f105 0e04 	add.w	lr, r5, #4
 800ead2:	46a1      	mov	r9, r4
 800ead4:	40cf      	lsrs	r7, r1
 800ead6:	4576      	cmp	r6, lr
 800ead8:	46f4      	mov	ip, lr
 800eada:	d815      	bhi.n	800eb08 <rshift+0x7c>
 800eadc:	1a9a      	subs	r2, r3, r2
 800eade:	3501      	adds	r5, #1
 800eae0:	0092      	lsls	r2, r2, #2
 800eae2:	3a04      	subs	r2, #4
 800eae4:	42ae      	cmp	r6, r5
 800eae6:	bf38      	it	cc
 800eae8:	2200      	movcc	r2, #0
 800eaea:	18a3      	adds	r3, r4, r2
 800eaec:	50a7      	str	r7, [r4, r2]
 800eaee:	b107      	cbz	r7, 800eaf2 <rshift+0x66>
 800eaf0:	3304      	adds	r3, #4
 800eaf2:	1b1a      	subs	r2, r3, r4
 800eaf4:	42a3      	cmp	r3, r4
 800eaf6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eafa:	bf08      	it	eq
 800eafc:	2300      	moveq	r3, #0
 800eafe:	6102      	str	r2, [r0, #16]
 800eb00:	bf08      	it	eq
 800eb02:	6143      	streq	r3, [r0, #20]
 800eb04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb08:	f8dc c000 	ldr.w	ip, [ip]
 800eb0c:	fa0c fc08 	lsl.w	ip, ip, r8
 800eb10:	ea4c 0707 	orr.w	r7, ip, r7
 800eb14:	f849 7b04 	str.w	r7, [r9], #4
 800eb18:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb1c:	40cf      	lsrs	r7, r1
 800eb1e:	e7da      	b.n	800ead6 <rshift+0x4a>
 800eb20:	f851 cb04 	ldr.w	ip, [r1], #4
 800eb24:	f847 cf04 	str.w	ip, [r7, #4]!
 800eb28:	e7c3      	b.n	800eab2 <rshift+0x26>
 800eb2a:	4623      	mov	r3, r4
 800eb2c:	e7e1      	b.n	800eaf2 <rshift+0x66>

0800eb2e <__hexdig_fun>:
 800eb2e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eb32:	2b09      	cmp	r3, #9
 800eb34:	d802      	bhi.n	800eb3c <__hexdig_fun+0xe>
 800eb36:	3820      	subs	r0, #32
 800eb38:	b2c0      	uxtb	r0, r0
 800eb3a:	4770      	bx	lr
 800eb3c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800eb40:	2b05      	cmp	r3, #5
 800eb42:	d801      	bhi.n	800eb48 <__hexdig_fun+0x1a>
 800eb44:	3847      	subs	r0, #71	@ 0x47
 800eb46:	e7f7      	b.n	800eb38 <__hexdig_fun+0xa>
 800eb48:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eb4c:	2b05      	cmp	r3, #5
 800eb4e:	d801      	bhi.n	800eb54 <__hexdig_fun+0x26>
 800eb50:	3827      	subs	r0, #39	@ 0x27
 800eb52:	e7f1      	b.n	800eb38 <__hexdig_fun+0xa>
 800eb54:	2000      	movs	r0, #0
 800eb56:	4770      	bx	lr

0800eb58 <__gethex>:
 800eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5c:	b085      	sub	sp, #20
 800eb5e:	468a      	mov	sl, r1
 800eb60:	4690      	mov	r8, r2
 800eb62:	9302      	str	r3, [sp, #8]
 800eb64:	680b      	ldr	r3, [r1, #0]
 800eb66:	9001      	str	r0, [sp, #4]
 800eb68:	1c9c      	adds	r4, r3, #2
 800eb6a:	46a1      	mov	r9, r4
 800eb6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eb70:	2830      	cmp	r0, #48	@ 0x30
 800eb72:	d0fa      	beq.n	800eb6a <__gethex+0x12>
 800eb74:	eba9 0303 	sub.w	r3, r9, r3
 800eb78:	f1a3 0b02 	sub.w	fp, r3, #2
 800eb7c:	f7ff ffd7 	bl	800eb2e <__hexdig_fun>
 800eb80:	4605      	mov	r5, r0
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d166      	bne.n	800ec54 <__gethex+0xfc>
 800eb86:	2201      	movs	r2, #1
 800eb88:	499e      	ldr	r1, [pc, #632]	@ (800ee04 <__gethex+0x2ac>)
 800eb8a:	4648      	mov	r0, r9
 800eb8c:	f7ff f8b0 	bl	800dcf0 <strncmp>
 800eb90:	4607      	mov	r7, r0
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d165      	bne.n	800ec62 <__gethex+0x10a>
 800eb96:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eb9a:	4626      	mov	r6, r4
 800eb9c:	f7ff ffc7 	bl	800eb2e <__hexdig_fun>
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d060      	beq.n	800ec66 <__gethex+0x10e>
 800eba4:	4623      	mov	r3, r4
 800eba6:	7818      	ldrb	r0, [r3, #0]
 800eba8:	4699      	mov	r9, r3
 800ebaa:	3301      	adds	r3, #1
 800ebac:	2830      	cmp	r0, #48	@ 0x30
 800ebae:	d0fa      	beq.n	800eba6 <__gethex+0x4e>
 800ebb0:	f7ff ffbd 	bl	800eb2e <__hexdig_fun>
 800ebb4:	fab0 f580 	clz	r5, r0
 800ebb8:	f04f 0b01 	mov.w	fp, #1
 800ebbc:	096d      	lsrs	r5, r5, #5
 800ebbe:	464a      	mov	r2, r9
 800ebc0:	4616      	mov	r6, r2
 800ebc2:	3201      	adds	r2, #1
 800ebc4:	7830      	ldrb	r0, [r6, #0]
 800ebc6:	f7ff ffb2 	bl	800eb2e <__hexdig_fun>
 800ebca:	2800      	cmp	r0, #0
 800ebcc:	d1f8      	bne.n	800ebc0 <__gethex+0x68>
 800ebce:	2201      	movs	r2, #1
 800ebd0:	498c      	ldr	r1, [pc, #560]	@ (800ee04 <__gethex+0x2ac>)
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	f7ff f88c 	bl	800dcf0 <strncmp>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d13e      	bne.n	800ec5a <__gethex+0x102>
 800ebdc:	b944      	cbnz	r4, 800ebf0 <__gethex+0x98>
 800ebde:	1c74      	adds	r4, r6, #1
 800ebe0:	4622      	mov	r2, r4
 800ebe2:	4616      	mov	r6, r2
 800ebe4:	3201      	adds	r2, #1
 800ebe6:	7830      	ldrb	r0, [r6, #0]
 800ebe8:	f7ff ffa1 	bl	800eb2e <__hexdig_fun>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d1f8      	bne.n	800ebe2 <__gethex+0x8a>
 800ebf0:	1ba4      	subs	r4, r4, r6
 800ebf2:	00a7      	lsls	r7, r4, #2
 800ebf4:	7833      	ldrb	r3, [r6, #0]
 800ebf6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ebfa:	2b50      	cmp	r3, #80	@ 0x50
 800ebfc:	d13d      	bne.n	800ec7a <__gethex+0x122>
 800ebfe:	7873      	ldrb	r3, [r6, #1]
 800ec00:	2b2b      	cmp	r3, #43	@ 0x2b
 800ec02:	d032      	beq.n	800ec6a <__gethex+0x112>
 800ec04:	2b2d      	cmp	r3, #45	@ 0x2d
 800ec06:	d033      	beq.n	800ec70 <__gethex+0x118>
 800ec08:	1c71      	adds	r1, r6, #1
 800ec0a:	2400      	movs	r4, #0
 800ec0c:	7808      	ldrb	r0, [r1, #0]
 800ec0e:	f7ff ff8e 	bl	800eb2e <__hexdig_fun>
 800ec12:	1e43      	subs	r3, r0, #1
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	2b18      	cmp	r3, #24
 800ec18:	d82f      	bhi.n	800ec7a <__gethex+0x122>
 800ec1a:	f1a0 0210 	sub.w	r2, r0, #16
 800ec1e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec22:	f7ff ff84 	bl	800eb2e <__hexdig_fun>
 800ec26:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ec2a:	230a      	movs	r3, #10
 800ec2c:	fa5f fc8c 	uxtb.w	ip, ip
 800ec30:	f1bc 0f18 	cmp.w	ip, #24
 800ec34:	d91e      	bls.n	800ec74 <__gethex+0x11c>
 800ec36:	b104      	cbz	r4, 800ec3a <__gethex+0xe2>
 800ec38:	4252      	negs	r2, r2
 800ec3a:	4417      	add	r7, r2
 800ec3c:	f8ca 1000 	str.w	r1, [sl]
 800ec40:	b1ed      	cbz	r5, 800ec7e <__gethex+0x126>
 800ec42:	f1bb 0f00 	cmp.w	fp, #0
 800ec46:	bf0c      	ite	eq
 800ec48:	2506      	moveq	r5, #6
 800ec4a:	2500      	movne	r5, #0
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	b005      	add	sp, #20
 800ec50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec54:	2500      	movs	r5, #0
 800ec56:	462c      	mov	r4, r5
 800ec58:	e7b1      	b.n	800ebbe <__gethex+0x66>
 800ec5a:	2c00      	cmp	r4, #0
 800ec5c:	d1c8      	bne.n	800ebf0 <__gethex+0x98>
 800ec5e:	4627      	mov	r7, r4
 800ec60:	e7c8      	b.n	800ebf4 <__gethex+0x9c>
 800ec62:	464e      	mov	r6, r9
 800ec64:	462f      	mov	r7, r5
 800ec66:	2501      	movs	r5, #1
 800ec68:	e7c4      	b.n	800ebf4 <__gethex+0x9c>
 800ec6a:	2400      	movs	r4, #0
 800ec6c:	1cb1      	adds	r1, r6, #2
 800ec6e:	e7cd      	b.n	800ec0c <__gethex+0xb4>
 800ec70:	2401      	movs	r4, #1
 800ec72:	e7fb      	b.n	800ec6c <__gethex+0x114>
 800ec74:	fb03 0002 	mla	r0, r3, r2, r0
 800ec78:	e7cf      	b.n	800ec1a <__gethex+0xc2>
 800ec7a:	4631      	mov	r1, r6
 800ec7c:	e7de      	b.n	800ec3c <__gethex+0xe4>
 800ec7e:	eba6 0309 	sub.w	r3, r6, r9
 800ec82:	4629      	mov	r1, r5
 800ec84:	3b01      	subs	r3, #1
 800ec86:	2b07      	cmp	r3, #7
 800ec88:	dc0a      	bgt.n	800eca0 <__gethex+0x148>
 800ec8a:	9801      	ldr	r0, [sp, #4]
 800ec8c:	f000 fcfe 	bl	800f68c <_Balloc>
 800ec90:	4604      	mov	r4, r0
 800ec92:	b940      	cbnz	r0, 800eca6 <__gethex+0x14e>
 800ec94:	4b5c      	ldr	r3, [pc, #368]	@ (800ee08 <__gethex+0x2b0>)
 800ec96:	4602      	mov	r2, r0
 800ec98:	21e4      	movs	r1, #228	@ 0xe4
 800ec9a:	485c      	ldr	r0, [pc, #368]	@ (800ee0c <__gethex+0x2b4>)
 800ec9c:	f001 fa9a 	bl	80101d4 <__assert_func>
 800eca0:	3101      	adds	r1, #1
 800eca2:	105b      	asrs	r3, r3, #1
 800eca4:	e7ef      	b.n	800ec86 <__gethex+0x12e>
 800eca6:	f100 0a14 	add.w	sl, r0, #20
 800ecaa:	2300      	movs	r3, #0
 800ecac:	4655      	mov	r5, sl
 800ecae:	469b      	mov	fp, r3
 800ecb0:	45b1      	cmp	r9, r6
 800ecb2:	d337      	bcc.n	800ed24 <__gethex+0x1cc>
 800ecb4:	f845 bb04 	str.w	fp, [r5], #4
 800ecb8:	eba5 050a 	sub.w	r5, r5, sl
 800ecbc:	4658      	mov	r0, fp
 800ecbe:	10ad      	asrs	r5, r5, #2
 800ecc0:	6125      	str	r5, [r4, #16]
 800ecc2:	016d      	lsls	r5, r5, #5
 800ecc4:	f000 fdd6 	bl	800f874 <__hi0bits>
 800ecc8:	f8d8 6000 	ldr.w	r6, [r8]
 800eccc:	1a2d      	subs	r5, r5, r0
 800ecce:	42b5      	cmp	r5, r6
 800ecd0:	dd54      	ble.n	800ed7c <__gethex+0x224>
 800ecd2:	1bad      	subs	r5, r5, r6
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	4629      	mov	r1, r5
 800ecd8:	f001 f96d 	bl	800ffb6 <__any_on>
 800ecdc:	4681      	mov	r9, r0
 800ecde:	b178      	cbz	r0, 800ed00 <__gethex+0x1a8>
 800ece0:	1e6b      	subs	r3, r5, #1
 800ece2:	f04f 0901 	mov.w	r9, #1
 800ece6:	1159      	asrs	r1, r3, #5
 800ece8:	f003 021f 	and.w	r2, r3, #31
 800ecec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ecf0:	fa09 f202 	lsl.w	r2, r9, r2
 800ecf4:	420a      	tst	r2, r1
 800ecf6:	d003      	beq.n	800ed00 <__gethex+0x1a8>
 800ecf8:	454b      	cmp	r3, r9
 800ecfa:	dc36      	bgt.n	800ed6a <__gethex+0x212>
 800ecfc:	f04f 0902 	mov.w	r9, #2
 800ed00:	442f      	add	r7, r5
 800ed02:	4629      	mov	r1, r5
 800ed04:	4620      	mov	r0, r4
 800ed06:	f7ff fec1 	bl	800ea8c <rshift>
 800ed0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed0e:	42bb      	cmp	r3, r7
 800ed10:	da42      	bge.n	800ed98 <__gethex+0x240>
 800ed12:	4621      	mov	r1, r4
 800ed14:	9801      	ldr	r0, [sp, #4]
 800ed16:	f000 fcf9 	bl	800f70c <_Bfree>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed1e:	25a3      	movs	r5, #163	@ 0xa3
 800ed20:	6013      	str	r3, [r2, #0]
 800ed22:	e793      	b.n	800ec4c <__gethex+0xf4>
 800ed24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ed28:	2a2e      	cmp	r2, #46	@ 0x2e
 800ed2a:	d012      	beq.n	800ed52 <__gethex+0x1fa>
 800ed2c:	2b20      	cmp	r3, #32
 800ed2e:	d104      	bne.n	800ed3a <__gethex+0x1e2>
 800ed30:	f845 bb04 	str.w	fp, [r5], #4
 800ed34:	f04f 0b00 	mov.w	fp, #0
 800ed38:	465b      	mov	r3, fp
 800ed3a:	7830      	ldrb	r0, [r6, #0]
 800ed3c:	9303      	str	r3, [sp, #12]
 800ed3e:	f7ff fef6 	bl	800eb2e <__hexdig_fun>
 800ed42:	9b03      	ldr	r3, [sp, #12]
 800ed44:	f000 000f 	and.w	r0, r0, #15
 800ed48:	4098      	lsls	r0, r3
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	ea4b 0b00 	orr.w	fp, fp, r0
 800ed50:	e7ae      	b.n	800ecb0 <__gethex+0x158>
 800ed52:	45b1      	cmp	r9, r6
 800ed54:	d8ea      	bhi.n	800ed2c <__gethex+0x1d4>
 800ed56:	2201      	movs	r2, #1
 800ed58:	492a      	ldr	r1, [pc, #168]	@ (800ee04 <__gethex+0x2ac>)
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	9303      	str	r3, [sp, #12]
 800ed5e:	f7fe ffc7 	bl	800dcf0 <strncmp>
 800ed62:	9b03      	ldr	r3, [sp, #12]
 800ed64:	2800      	cmp	r0, #0
 800ed66:	d1e1      	bne.n	800ed2c <__gethex+0x1d4>
 800ed68:	e7a2      	b.n	800ecb0 <__gethex+0x158>
 800ed6a:	1ea9      	subs	r1, r5, #2
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f001 f922 	bl	800ffb6 <__any_on>
 800ed72:	2800      	cmp	r0, #0
 800ed74:	d0c2      	beq.n	800ecfc <__gethex+0x1a4>
 800ed76:	f04f 0903 	mov.w	r9, #3
 800ed7a:	e7c1      	b.n	800ed00 <__gethex+0x1a8>
 800ed7c:	da09      	bge.n	800ed92 <__gethex+0x23a>
 800ed7e:	1b75      	subs	r5, r6, r5
 800ed80:	4621      	mov	r1, r4
 800ed82:	9801      	ldr	r0, [sp, #4]
 800ed84:	462a      	mov	r2, r5
 800ed86:	1b7f      	subs	r7, r7, r5
 800ed88:	f000 fed4 	bl	800fb34 <__lshift>
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	f100 0a14 	add.w	sl, r0, #20
 800ed92:	f04f 0900 	mov.w	r9, #0
 800ed96:	e7b8      	b.n	800ed0a <__gethex+0x1b2>
 800ed98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ed9c:	42bd      	cmp	r5, r7
 800ed9e:	dd6f      	ble.n	800ee80 <__gethex+0x328>
 800eda0:	1bed      	subs	r5, r5, r7
 800eda2:	42ae      	cmp	r6, r5
 800eda4:	dc34      	bgt.n	800ee10 <__gethex+0x2b8>
 800eda6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edaa:	2b02      	cmp	r3, #2
 800edac:	d022      	beq.n	800edf4 <__gethex+0x29c>
 800edae:	2b03      	cmp	r3, #3
 800edb0:	d024      	beq.n	800edfc <__gethex+0x2a4>
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d115      	bne.n	800ede2 <__gethex+0x28a>
 800edb6:	42ae      	cmp	r6, r5
 800edb8:	d113      	bne.n	800ede2 <__gethex+0x28a>
 800edba:	2e01      	cmp	r6, #1
 800edbc:	d10b      	bne.n	800edd6 <__gethex+0x27e>
 800edbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800edc2:	2562      	movs	r5, #98	@ 0x62
 800edc4:	9a02      	ldr	r2, [sp, #8]
 800edc6:	6013      	str	r3, [r2, #0]
 800edc8:	2301      	movs	r3, #1
 800edca:	6123      	str	r3, [r4, #16]
 800edcc:	f8ca 3000 	str.w	r3, [sl]
 800edd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edd2:	601c      	str	r4, [r3, #0]
 800edd4:	e73a      	b.n	800ec4c <__gethex+0xf4>
 800edd6:	1e71      	subs	r1, r6, #1
 800edd8:	4620      	mov	r0, r4
 800edda:	f001 f8ec 	bl	800ffb6 <__any_on>
 800edde:	2800      	cmp	r0, #0
 800ede0:	d1ed      	bne.n	800edbe <__gethex+0x266>
 800ede2:	4621      	mov	r1, r4
 800ede4:	9801      	ldr	r0, [sp, #4]
 800ede6:	f000 fc91 	bl	800f70c <_Bfree>
 800edea:	2300      	movs	r3, #0
 800edec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edee:	2550      	movs	r5, #80	@ 0x50
 800edf0:	6013      	str	r3, [r2, #0]
 800edf2:	e72b      	b.n	800ec4c <__gethex+0xf4>
 800edf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d1f3      	bne.n	800ede2 <__gethex+0x28a>
 800edfa:	e7e0      	b.n	800edbe <__gethex+0x266>
 800edfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d1dd      	bne.n	800edbe <__gethex+0x266>
 800ee02:	e7ee      	b.n	800ede2 <__gethex+0x28a>
 800ee04:	08010e0d 	.word	0x08010e0d
 800ee08:	08010e93 	.word	0x08010e93
 800ee0c:	08010ea4 	.word	0x08010ea4
 800ee10:	1e6f      	subs	r7, r5, #1
 800ee12:	f1b9 0f00 	cmp.w	r9, #0
 800ee16:	d130      	bne.n	800ee7a <__gethex+0x322>
 800ee18:	b127      	cbz	r7, 800ee24 <__gethex+0x2cc>
 800ee1a:	4639      	mov	r1, r7
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f001 f8ca 	bl	800ffb6 <__any_on>
 800ee22:	4681      	mov	r9, r0
 800ee24:	117a      	asrs	r2, r7, #5
 800ee26:	2301      	movs	r3, #1
 800ee28:	f007 071f 	and.w	r7, r7, #31
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ee32:	4620      	mov	r0, r4
 800ee34:	40bb      	lsls	r3, r7
 800ee36:	1b76      	subs	r6, r6, r5
 800ee38:	2502      	movs	r5, #2
 800ee3a:	4213      	tst	r3, r2
 800ee3c:	bf18      	it	ne
 800ee3e:	f049 0902 	orrne.w	r9, r9, #2
 800ee42:	f7ff fe23 	bl	800ea8c <rshift>
 800ee46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ee4a:	f1b9 0f00 	cmp.w	r9, #0
 800ee4e:	d047      	beq.n	800eee0 <__gethex+0x388>
 800ee50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	d015      	beq.n	800ee84 <__gethex+0x32c>
 800ee58:	2b03      	cmp	r3, #3
 800ee5a:	d017      	beq.n	800ee8c <__gethex+0x334>
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d109      	bne.n	800ee74 <__gethex+0x31c>
 800ee60:	f019 0f02 	tst.w	r9, #2
 800ee64:	d006      	beq.n	800ee74 <__gethex+0x31c>
 800ee66:	f8da 3000 	ldr.w	r3, [sl]
 800ee6a:	ea49 0903 	orr.w	r9, r9, r3
 800ee6e:	f019 0f01 	tst.w	r9, #1
 800ee72:	d10e      	bne.n	800ee92 <__gethex+0x33a>
 800ee74:	f045 0510 	orr.w	r5, r5, #16
 800ee78:	e032      	b.n	800eee0 <__gethex+0x388>
 800ee7a:	f04f 0901 	mov.w	r9, #1
 800ee7e:	e7d1      	b.n	800ee24 <__gethex+0x2cc>
 800ee80:	2501      	movs	r5, #1
 800ee82:	e7e2      	b.n	800ee4a <__gethex+0x2f2>
 800ee84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee86:	f1c3 0301 	rsb	r3, r3, #1
 800ee8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ee8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d0f0      	beq.n	800ee74 <__gethex+0x31c>
 800ee92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ee96:	f104 0314 	add.w	r3, r4, #20
 800ee9a:	f04f 0c00 	mov.w	ip, #0
 800ee9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eea2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eea6:	4618      	mov	r0, r3
 800eea8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeac:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800eeb0:	d01b      	beq.n	800eeea <__gethex+0x392>
 800eeb2:	3201      	adds	r2, #1
 800eeb4:	6002      	str	r2, [r0, #0]
 800eeb6:	2d02      	cmp	r5, #2
 800eeb8:	f104 0314 	add.w	r3, r4, #20
 800eebc:	d13c      	bne.n	800ef38 <__gethex+0x3e0>
 800eebe:	f8d8 2000 	ldr.w	r2, [r8]
 800eec2:	3a01      	subs	r2, #1
 800eec4:	42b2      	cmp	r2, r6
 800eec6:	d109      	bne.n	800eedc <__gethex+0x384>
 800eec8:	1171      	asrs	r1, r6, #5
 800eeca:	2201      	movs	r2, #1
 800eecc:	f006 061f 	and.w	r6, r6, #31
 800eed0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eed4:	fa02 f606 	lsl.w	r6, r2, r6
 800eed8:	421e      	tst	r6, r3
 800eeda:	d13a      	bne.n	800ef52 <__gethex+0x3fa>
 800eedc:	f045 0520 	orr.w	r5, r5, #32
 800eee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eee2:	601c      	str	r4, [r3, #0]
 800eee4:	9b02      	ldr	r3, [sp, #8]
 800eee6:	601f      	str	r7, [r3, #0]
 800eee8:	e6b0      	b.n	800ec4c <__gethex+0xf4>
 800eeea:	4299      	cmp	r1, r3
 800eeec:	f843 cc04 	str.w	ip, [r3, #-4]
 800eef0:	d8d9      	bhi.n	800eea6 <__gethex+0x34e>
 800eef2:	68a3      	ldr	r3, [r4, #8]
 800eef4:	459b      	cmp	fp, r3
 800eef6:	db17      	blt.n	800ef28 <__gethex+0x3d0>
 800eef8:	6861      	ldr	r1, [r4, #4]
 800eefa:	9801      	ldr	r0, [sp, #4]
 800eefc:	3101      	adds	r1, #1
 800eefe:	f000 fbc5 	bl	800f68c <_Balloc>
 800ef02:	4681      	mov	r9, r0
 800ef04:	b918      	cbnz	r0, 800ef0e <__gethex+0x3b6>
 800ef06:	4b1a      	ldr	r3, [pc, #104]	@ (800ef70 <__gethex+0x418>)
 800ef08:	4602      	mov	r2, r0
 800ef0a:	2184      	movs	r1, #132	@ 0x84
 800ef0c:	e6c5      	b.n	800ec9a <__gethex+0x142>
 800ef0e:	6922      	ldr	r2, [r4, #16]
 800ef10:	f104 010c 	add.w	r1, r4, #12
 800ef14:	300c      	adds	r0, #12
 800ef16:	3202      	adds	r2, #2
 800ef18:	0092      	lsls	r2, r2, #2
 800ef1a:	f7fe ff3b 	bl	800dd94 <memcpy>
 800ef1e:	4621      	mov	r1, r4
 800ef20:	464c      	mov	r4, r9
 800ef22:	9801      	ldr	r0, [sp, #4]
 800ef24:	f000 fbf2 	bl	800f70c <_Bfree>
 800ef28:	6923      	ldr	r3, [r4, #16]
 800ef2a:	1c5a      	adds	r2, r3, #1
 800ef2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef30:	6122      	str	r2, [r4, #16]
 800ef32:	2201      	movs	r2, #1
 800ef34:	615a      	str	r2, [r3, #20]
 800ef36:	e7be      	b.n	800eeb6 <__gethex+0x35e>
 800ef38:	6922      	ldr	r2, [r4, #16]
 800ef3a:	455a      	cmp	r2, fp
 800ef3c:	dd0b      	ble.n	800ef56 <__gethex+0x3fe>
 800ef3e:	2101      	movs	r1, #1
 800ef40:	4620      	mov	r0, r4
 800ef42:	f7ff fda3 	bl	800ea8c <rshift>
 800ef46:	3701      	adds	r7, #1
 800ef48:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef4c:	42bb      	cmp	r3, r7
 800ef4e:	f6ff aee0 	blt.w	800ed12 <__gethex+0x1ba>
 800ef52:	2501      	movs	r5, #1
 800ef54:	e7c2      	b.n	800eedc <__gethex+0x384>
 800ef56:	f016 061f 	ands.w	r6, r6, #31
 800ef5a:	d0fa      	beq.n	800ef52 <__gethex+0x3fa>
 800ef5c:	4453      	add	r3, sl
 800ef5e:	f1c6 0620 	rsb	r6, r6, #32
 800ef62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ef66:	f000 fc85 	bl	800f874 <__hi0bits>
 800ef6a:	42b0      	cmp	r0, r6
 800ef6c:	dbe7      	blt.n	800ef3e <__gethex+0x3e6>
 800ef6e:	e7f0      	b.n	800ef52 <__gethex+0x3fa>
 800ef70:	08010e93 	.word	0x08010e93

0800ef74 <L_shift>:
 800ef74:	f1c2 0208 	rsb	r2, r2, #8
 800ef78:	0092      	lsls	r2, r2, #2
 800ef7a:	b570      	push	{r4, r5, r6, lr}
 800ef7c:	f1c2 0620 	rsb	r6, r2, #32
 800ef80:	6843      	ldr	r3, [r0, #4]
 800ef82:	6804      	ldr	r4, [r0, #0]
 800ef84:	fa03 f506 	lsl.w	r5, r3, r6
 800ef88:	40d3      	lsrs	r3, r2
 800ef8a:	432c      	orrs	r4, r5
 800ef8c:	6004      	str	r4, [r0, #0]
 800ef8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ef92:	4288      	cmp	r0, r1
 800ef94:	d3f4      	bcc.n	800ef80 <L_shift+0xc>
 800ef96:	bd70      	pop	{r4, r5, r6, pc}

0800ef98 <__match>:
 800ef98:	6803      	ldr	r3, [r0, #0]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	b530      	push	{r4, r5, lr}
 800ef9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efa2:	b914      	cbnz	r4, 800efaa <__match+0x12>
 800efa4:	6003      	str	r3, [r0, #0]
 800efa6:	2001      	movs	r0, #1
 800efa8:	bd30      	pop	{r4, r5, pc}
 800efaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800efb2:	2d19      	cmp	r5, #25
 800efb4:	bf98      	it	ls
 800efb6:	3220      	addls	r2, #32
 800efb8:	42a2      	cmp	r2, r4
 800efba:	d0f0      	beq.n	800ef9e <__match+0x6>
 800efbc:	2000      	movs	r0, #0
 800efbe:	e7f3      	b.n	800efa8 <__match+0x10>

0800efc0 <__hexnan>:
 800efc0:	680b      	ldr	r3, [r1, #0]
 800efc2:	6801      	ldr	r1, [r0, #0]
 800efc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc8:	115e      	asrs	r6, r3, #5
 800efca:	f013 031f 	ands.w	r3, r3, #31
 800efce:	f04f 0500 	mov.w	r5, #0
 800efd2:	b087      	sub	sp, #28
 800efd4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800efd8:	4682      	mov	sl, r0
 800efda:	4690      	mov	r8, r2
 800efdc:	46ab      	mov	fp, r5
 800efde:	bf18      	it	ne
 800efe0:	3604      	addne	r6, #4
 800efe2:	9301      	str	r3, [sp, #4]
 800efe4:	9502      	str	r5, [sp, #8]
 800efe6:	1f37      	subs	r7, r6, #4
 800efe8:	f846 5c04 	str.w	r5, [r6, #-4]
 800efec:	46b9      	mov	r9, r7
 800efee:	463c      	mov	r4, r7
 800eff0:	1c4b      	adds	r3, r1, #1
 800eff2:	784a      	ldrb	r2, [r1, #1]
 800eff4:	9303      	str	r3, [sp, #12]
 800eff6:	b342      	cbz	r2, 800f04a <__hexnan+0x8a>
 800eff8:	4610      	mov	r0, r2
 800effa:	9105      	str	r1, [sp, #20]
 800effc:	9204      	str	r2, [sp, #16]
 800effe:	f7ff fd96 	bl	800eb2e <__hexdig_fun>
 800f002:	2800      	cmp	r0, #0
 800f004:	d151      	bne.n	800f0aa <__hexnan+0xea>
 800f006:	9a04      	ldr	r2, [sp, #16]
 800f008:	9905      	ldr	r1, [sp, #20]
 800f00a:	2a20      	cmp	r2, #32
 800f00c:	d818      	bhi.n	800f040 <__hexnan+0x80>
 800f00e:	9b02      	ldr	r3, [sp, #8]
 800f010:	459b      	cmp	fp, r3
 800f012:	dd13      	ble.n	800f03c <__hexnan+0x7c>
 800f014:	454c      	cmp	r4, r9
 800f016:	d206      	bcs.n	800f026 <__hexnan+0x66>
 800f018:	2d07      	cmp	r5, #7
 800f01a:	dc04      	bgt.n	800f026 <__hexnan+0x66>
 800f01c:	462a      	mov	r2, r5
 800f01e:	4649      	mov	r1, r9
 800f020:	4620      	mov	r0, r4
 800f022:	f7ff ffa7 	bl	800ef74 <L_shift>
 800f026:	4544      	cmp	r4, r8
 800f028:	d951      	bls.n	800f0ce <__hexnan+0x10e>
 800f02a:	2300      	movs	r3, #0
 800f02c:	f1a4 0904 	sub.w	r9, r4, #4
 800f030:	f8cd b008 	str.w	fp, [sp, #8]
 800f034:	f844 3c04 	str.w	r3, [r4, #-4]
 800f038:	461d      	mov	r5, r3
 800f03a:	464c      	mov	r4, r9
 800f03c:	9903      	ldr	r1, [sp, #12]
 800f03e:	e7d7      	b.n	800eff0 <__hexnan+0x30>
 800f040:	2a29      	cmp	r2, #41	@ 0x29
 800f042:	d156      	bne.n	800f0f2 <__hexnan+0x132>
 800f044:	3102      	adds	r1, #2
 800f046:	f8ca 1000 	str.w	r1, [sl]
 800f04a:	f1bb 0f00 	cmp.w	fp, #0
 800f04e:	d050      	beq.n	800f0f2 <__hexnan+0x132>
 800f050:	454c      	cmp	r4, r9
 800f052:	d206      	bcs.n	800f062 <__hexnan+0xa2>
 800f054:	2d07      	cmp	r5, #7
 800f056:	dc04      	bgt.n	800f062 <__hexnan+0xa2>
 800f058:	462a      	mov	r2, r5
 800f05a:	4649      	mov	r1, r9
 800f05c:	4620      	mov	r0, r4
 800f05e:	f7ff ff89 	bl	800ef74 <L_shift>
 800f062:	4544      	cmp	r4, r8
 800f064:	d935      	bls.n	800f0d2 <__hexnan+0x112>
 800f066:	f1a8 0204 	sub.w	r2, r8, #4
 800f06a:	4623      	mov	r3, r4
 800f06c:	f853 1b04 	ldr.w	r1, [r3], #4
 800f070:	429f      	cmp	r7, r3
 800f072:	f842 1f04 	str.w	r1, [r2, #4]!
 800f076:	d2f9      	bcs.n	800f06c <__hexnan+0xac>
 800f078:	1b3b      	subs	r3, r7, r4
 800f07a:	3e03      	subs	r6, #3
 800f07c:	3401      	adds	r4, #1
 800f07e:	2200      	movs	r2, #0
 800f080:	f023 0303 	bic.w	r3, r3, #3
 800f084:	3304      	adds	r3, #4
 800f086:	42b4      	cmp	r4, r6
 800f088:	bf88      	it	hi
 800f08a:	2304      	movhi	r3, #4
 800f08c:	4443      	add	r3, r8
 800f08e:	f843 2b04 	str.w	r2, [r3], #4
 800f092:	429f      	cmp	r7, r3
 800f094:	d2fb      	bcs.n	800f08e <__hexnan+0xce>
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	b91b      	cbnz	r3, 800f0a2 <__hexnan+0xe2>
 800f09a:	4547      	cmp	r7, r8
 800f09c:	d127      	bne.n	800f0ee <__hexnan+0x12e>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	603b      	str	r3, [r7, #0]
 800f0a2:	2005      	movs	r0, #5
 800f0a4:	b007      	add	sp, #28
 800f0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0aa:	3501      	adds	r5, #1
 800f0ac:	f10b 0b01 	add.w	fp, fp, #1
 800f0b0:	2d08      	cmp	r5, #8
 800f0b2:	dd05      	ble.n	800f0c0 <__hexnan+0x100>
 800f0b4:	4544      	cmp	r4, r8
 800f0b6:	d9c1      	bls.n	800f03c <__hexnan+0x7c>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	3c04      	subs	r4, #4
 800f0bc:	2501      	movs	r5, #1
 800f0be:	6023      	str	r3, [r4, #0]
 800f0c0:	6822      	ldr	r2, [r4, #0]
 800f0c2:	f000 000f 	and.w	r0, r0, #15
 800f0c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f0ca:	6020      	str	r0, [r4, #0]
 800f0cc:	e7b6      	b.n	800f03c <__hexnan+0x7c>
 800f0ce:	2508      	movs	r5, #8
 800f0d0:	e7b4      	b.n	800f03c <__hexnan+0x7c>
 800f0d2:	9b01      	ldr	r3, [sp, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d0de      	beq.n	800f096 <__hexnan+0xd6>
 800f0d8:	f1c3 0320 	rsb	r3, r3, #32
 800f0dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f0e0:	40da      	lsrs	r2, r3
 800f0e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f0e6:	4013      	ands	r3, r2
 800f0e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800f0ec:	e7d3      	b.n	800f096 <__hexnan+0xd6>
 800f0ee:	3f04      	subs	r7, #4
 800f0f0:	e7d1      	b.n	800f096 <__hexnan+0xd6>
 800f0f2:	2004      	movs	r0, #4
 800f0f4:	e7d6      	b.n	800f0a4 <__hexnan+0xe4>

0800f0f6 <__ssputs_r>:
 800f0f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0fa:	461f      	mov	r7, r3
 800f0fc:	688e      	ldr	r6, [r1, #8]
 800f0fe:	4682      	mov	sl, r0
 800f100:	460c      	mov	r4, r1
 800f102:	42be      	cmp	r6, r7
 800f104:	4690      	mov	r8, r2
 800f106:	680b      	ldr	r3, [r1, #0]
 800f108:	d82d      	bhi.n	800f166 <__ssputs_r+0x70>
 800f10a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f10e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f112:	d026      	beq.n	800f162 <__ssputs_r+0x6c>
 800f114:	6965      	ldr	r5, [r4, #20]
 800f116:	6909      	ldr	r1, [r1, #16]
 800f118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f11c:	eba3 0901 	sub.w	r9, r3, r1
 800f120:	1c7b      	adds	r3, r7, #1
 800f122:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f126:	444b      	add	r3, r9
 800f128:	106d      	asrs	r5, r5, #1
 800f12a:	429d      	cmp	r5, r3
 800f12c:	bf38      	it	cc
 800f12e:	461d      	movcc	r5, r3
 800f130:	0553      	lsls	r3, r2, #21
 800f132:	d527      	bpl.n	800f184 <__ssputs_r+0x8e>
 800f134:	4629      	mov	r1, r5
 800f136:	f000 f95f 	bl	800f3f8 <_malloc_r>
 800f13a:	4606      	mov	r6, r0
 800f13c:	b360      	cbz	r0, 800f198 <__ssputs_r+0xa2>
 800f13e:	464a      	mov	r2, r9
 800f140:	6921      	ldr	r1, [r4, #16]
 800f142:	f7fe fe27 	bl	800dd94 <memcpy>
 800f146:	89a3      	ldrh	r3, [r4, #12]
 800f148:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f14c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f150:	81a3      	strh	r3, [r4, #12]
 800f152:	6126      	str	r6, [r4, #16]
 800f154:	444e      	add	r6, r9
 800f156:	6165      	str	r5, [r4, #20]
 800f158:	eba5 0509 	sub.w	r5, r5, r9
 800f15c:	6026      	str	r6, [r4, #0]
 800f15e:	463e      	mov	r6, r7
 800f160:	60a5      	str	r5, [r4, #8]
 800f162:	42be      	cmp	r6, r7
 800f164:	d900      	bls.n	800f168 <__ssputs_r+0x72>
 800f166:	463e      	mov	r6, r7
 800f168:	4632      	mov	r2, r6
 800f16a:	4641      	mov	r1, r8
 800f16c:	6820      	ldr	r0, [r4, #0]
 800f16e:	f000 ffc1 	bl	80100f4 <memmove>
 800f172:	68a3      	ldr	r3, [r4, #8]
 800f174:	2000      	movs	r0, #0
 800f176:	1b9b      	subs	r3, r3, r6
 800f178:	60a3      	str	r3, [r4, #8]
 800f17a:	6823      	ldr	r3, [r4, #0]
 800f17c:	4433      	add	r3, r6
 800f17e:	6023      	str	r3, [r4, #0]
 800f180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f184:	462a      	mov	r2, r5
 800f186:	f000 ff7a 	bl	801007e <_realloc_r>
 800f18a:	4606      	mov	r6, r0
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d1e0      	bne.n	800f152 <__ssputs_r+0x5c>
 800f190:	6921      	ldr	r1, [r4, #16]
 800f192:	4650      	mov	r0, sl
 800f194:	f001 f850 	bl	8010238 <_free_r>
 800f198:	230c      	movs	r3, #12
 800f19a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f19e:	f8ca 3000 	str.w	r3, [sl]
 800f1a2:	89a3      	ldrh	r3, [r4, #12]
 800f1a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1a8:	81a3      	strh	r3, [r4, #12]
 800f1aa:	e7e9      	b.n	800f180 <__ssputs_r+0x8a>

0800f1ac <_svfiprintf_r>:
 800f1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b0:	4698      	mov	r8, r3
 800f1b2:	898b      	ldrh	r3, [r1, #12]
 800f1b4:	b09d      	sub	sp, #116	@ 0x74
 800f1b6:	4607      	mov	r7, r0
 800f1b8:	061b      	lsls	r3, r3, #24
 800f1ba:	460d      	mov	r5, r1
 800f1bc:	4614      	mov	r4, r2
 800f1be:	d510      	bpl.n	800f1e2 <_svfiprintf_r+0x36>
 800f1c0:	690b      	ldr	r3, [r1, #16]
 800f1c2:	b973      	cbnz	r3, 800f1e2 <_svfiprintf_r+0x36>
 800f1c4:	2140      	movs	r1, #64	@ 0x40
 800f1c6:	f000 f917 	bl	800f3f8 <_malloc_r>
 800f1ca:	6028      	str	r0, [r5, #0]
 800f1cc:	6128      	str	r0, [r5, #16]
 800f1ce:	b930      	cbnz	r0, 800f1de <_svfiprintf_r+0x32>
 800f1d0:	230c      	movs	r3, #12
 800f1d2:	603b      	str	r3, [r7, #0]
 800f1d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1d8:	b01d      	add	sp, #116	@ 0x74
 800f1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1de:	2340      	movs	r3, #64	@ 0x40
 800f1e0:	616b      	str	r3, [r5, #20]
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1e8:	f04f 0901 	mov.w	r9, #1
 800f1ec:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800f390 <_svfiprintf_r+0x1e4>
 800f1f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1f2:	2320      	movs	r3, #32
 800f1f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1f8:	2330      	movs	r3, #48	@ 0x30
 800f1fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f1fe:	4623      	mov	r3, r4
 800f200:	469a      	mov	sl, r3
 800f202:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f206:	b10a      	cbz	r2, 800f20c <_svfiprintf_r+0x60>
 800f208:	2a25      	cmp	r2, #37	@ 0x25
 800f20a:	d1f9      	bne.n	800f200 <_svfiprintf_r+0x54>
 800f20c:	ebba 0b04 	subs.w	fp, sl, r4
 800f210:	d00b      	beq.n	800f22a <_svfiprintf_r+0x7e>
 800f212:	465b      	mov	r3, fp
 800f214:	4622      	mov	r2, r4
 800f216:	4629      	mov	r1, r5
 800f218:	4638      	mov	r0, r7
 800f21a:	f7ff ff6c 	bl	800f0f6 <__ssputs_r>
 800f21e:	3001      	adds	r0, #1
 800f220:	f000 80a7 	beq.w	800f372 <_svfiprintf_r+0x1c6>
 800f224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f226:	445a      	add	r2, fp
 800f228:	9209      	str	r2, [sp, #36]	@ 0x24
 800f22a:	f89a 3000 	ldrb.w	r3, [sl]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	f000 809f 	beq.w	800f372 <_svfiprintf_r+0x1c6>
 800f234:	2300      	movs	r3, #0
 800f236:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f23a:	f10a 0a01 	add.w	sl, sl, #1
 800f23e:	9304      	str	r3, [sp, #16]
 800f240:	9307      	str	r3, [sp, #28]
 800f242:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f246:	931a      	str	r3, [sp, #104]	@ 0x68
 800f248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f24c:	4654      	mov	r4, sl
 800f24e:	2205      	movs	r2, #5
 800f250:	484f      	ldr	r0, [pc, #316]	@ (800f390 <_svfiprintf_r+0x1e4>)
 800f252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f256:	f7fe fd8f 	bl	800dd78 <memchr>
 800f25a:	9a04      	ldr	r2, [sp, #16]
 800f25c:	b9d8      	cbnz	r0, 800f296 <_svfiprintf_r+0xea>
 800f25e:	06d0      	lsls	r0, r2, #27
 800f260:	bf44      	itt	mi
 800f262:	2320      	movmi	r3, #32
 800f264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f268:	0711      	lsls	r1, r2, #28
 800f26a:	bf44      	itt	mi
 800f26c:	232b      	movmi	r3, #43	@ 0x2b
 800f26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f272:	f89a 3000 	ldrb.w	r3, [sl]
 800f276:	2b2a      	cmp	r3, #42	@ 0x2a
 800f278:	d015      	beq.n	800f2a6 <_svfiprintf_r+0xfa>
 800f27a:	9a07      	ldr	r2, [sp, #28]
 800f27c:	4654      	mov	r4, sl
 800f27e:	2000      	movs	r0, #0
 800f280:	f04f 0c0a 	mov.w	ip, #10
 800f284:	4621      	mov	r1, r4
 800f286:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f28a:	3b30      	subs	r3, #48	@ 0x30
 800f28c:	2b09      	cmp	r3, #9
 800f28e:	d94b      	bls.n	800f328 <_svfiprintf_r+0x17c>
 800f290:	b1b0      	cbz	r0, 800f2c0 <_svfiprintf_r+0x114>
 800f292:	9207      	str	r2, [sp, #28]
 800f294:	e014      	b.n	800f2c0 <_svfiprintf_r+0x114>
 800f296:	eba0 0308 	sub.w	r3, r0, r8
 800f29a:	46a2      	mov	sl, r4
 800f29c:	fa09 f303 	lsl.w	r3, r9, r3
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	9304      	str	r3, [sp, #16]
 800f2a4:	e7d2      	b.n	800f24c <_svfiprintf_r+0xa0>
 800f2a6:	9b03      	ldr	r3, [sp, #12]
 800f2a8:	1d19      	adds	r1, r3, #4
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	9103      	str	r1, [sp, #12]
 800f2b0:	bfbb      	ittet	lt
 800f2b2:	425b      	neglt	r3, r3
 800f2b4:	f042 0202 	orrlt.w	r2, r2, #2
 800f2b8:	9307      	strge	r3, [sp, #28]
 800f2ba:	9307      	strlt	r3, [sp, #28]
 800f2bc:	bfb8      	it	lt
 800f2be:	9204      	strlt	r2, [sp, #16]
 800f2c0:	7823      	ldrb	r3, [r4, #0]
 800f2c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2c4:	d10a      	bne.n	800f2dc <_svfiprintf_r+0x130>
 800f2c6:	7863      	ldrb	r3, [r4, #1]
 800f2c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2ca:	d132      	bne.n	800f332 <_svfiprintf_r+0x186>
 800f2cc:	9b03      	ldr	r3, [sp, #12]
 800f2ce:	3402      	adds	r4, #2
 800f2d0:	1d1a      	adds	r2, r3, #4
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2d8:	9203      	str	r2, [sp, #12]
 800f2da:	9305      	str	r3, [sp, #20]
 800f2dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f3a0 <_svfiprintf_r+0x1f4>
 800f2e0:	2203      	movs	r2, #3
 800f2e2:	7821      	ldrb	r1, [r4, #0]
 800f2e4:	4650      	mov	r0, sl
 800f2e6:	f7fe fd47 	bl	800dd78 <memchr>
 800f2ea:	b138      	cbz	r0, 800f2fc <_svfiprintf_r+0x150>
 800f2ec:	eba0 000a 	sub.w	r0, r0, sl
 800f2f0:	2240      	movs	r2, #64	@ 0x40
 800f2f2:	9b04      	ldr	r3, [sp, #16]
 800f2f4:	3401      	adds	r4, #1
 800f2f6:	4082      	lsls	r2, r0
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	9304      	str	r3, [sp, #16]
 800f2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f300:	2206      	movs	r2, #6
 800f302:	4824      	ldr	r0, [pc, #144]	@ (800f394 <_svfiprintf_r+0x1e8>)
 800f304:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f308:	f7fe fd36 	bl	800dd78 <memchr>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	d036      	beq.n	800f37e <_svfiprintf_r+0x1d2>
 800f310:	4b21      	ldr	r3, [pc, #132]	@ (800f398 <_svfiprintf_r+0x1ec>)
 800f312:	bb1b      	cbnz	r3, 800f35c <_svfiprintf_r+0x1b0>
 800f314:	9b03      	ldr	r3, [sp, #12]
 800f316:	3307      	adds	r3, #7
 800f318:	f023 0307 	bic.w	r3, r3, #7
 800f31c:	3308      	adds	r3, #8
 800f31e:	9303      	str	r3, [sp, #12]
 800f320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f322:	4433      	add	r3, r6
 800f324:	9309      	str	r3, [sp, #36]	@ 0x24
 800f326:	e76a      	b.n	800f1fe <_svfiprintf_r+0x52>
 800f328:	fb0c 3202 	mla	r2, ip, r2, r3
 800f32c:	460c      	mov	r4, r1
 800f32e:	2001      	movs	r0, #1
 800f330:	e7a8      	b.n	800f284 <_svfiprintf_r+0xd8>
 800f332:	2300      	movs	r3, #0
 800f334:	3401      	adds	r4, #1
 800f336:	f04f 0c0a 	mov.w	ip, #10
 800f33a:	4619      	mov	r1, r3
 800f33c:	9305      	str	r3, [sp, #20]
 800f33e:	4620      	mov	r0, r4
 800f340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f344:	3a30      	subs	r2, #48	@ 0x30
 800f346:	2a09      	cmp	r2, #9
 800f348:	d903      	bls.n	800f352 <_svfiprintf_r+0x1a6>
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d0c6      	beq.n	800f2dc <_svfiprintf_r+0x130>
 800f34e:	9105      	str	r1, [sp, #20]
 800f350:	e7c4      	b.n	800f2dc <_svfiprintf_r+0x130>
 800f352:	fb0c 2101 	mla	r1, ip, r1, r2
 800f356:	4604      	mov	r4, r0
 800f358:	2301      	movs	r3, #1
 800f35a:	e7f0      	b.n	800f33e <_svfiprintf_r+0x192>
 800f35c:	ab03      	add	r3, sp, #12
 800f35e:	462a      	mov	r2, r5
 800f360:	a904      	add	r1, sp, #16
 800f362:	4638      	mov	r0, r7
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	4b0d      	ldr	r3, [pc, #52]	@ (800f39c <_svfiprintf_r+0x1f0>)
 800f368:	f7fc ff52 	bl	800c210 <_printf_float>
 800f36c:	1c42      	adds	r2, r0, #1
 800f36e:	4606      	mov	r6, r0
 800f370:	d1d6      	bne.n	800f320 <_svfiprintf_r+0x174>
 800f372:	89ab      	ldrh	r3, [r5, #12]
 800f374:	065b      	lsls	r3, r3, #25
 800f376:	f53f af2d 	bmi.w	800f1d4 <_svfiprintf_r+0x28>
 800f37a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f37c:	e72c      	b.n	800f1d8 <_svfiprintf_r+0x2c>
 800f37e:	ab03      	add	r3, sp, #12
 800f380:	462a      	mov	r2, r5
 800f382:	a904      	add	r1, sp, #16
 800f384:	4638      	mov	r0, r7
 800f386:	9300      	str	r3, [sp, #0]
 800f388:	4b04      	ldr	r3, [pc, #16]	@ (800f39c <_svfiprintf_r+0x1f0>)
 800f38a:	f7fd f9dd 	bl	800c748 <_printf_i>
 800f38e:	e7ed      	b.n	800f36c <_svfiprintf_r+0x1c0>
 800f390:	08010f04 	.word	0x08010f04
 800f394:	08010f0e 	.word	0x08010f0e
 800f398:	0800c211 	.word	0x0800c211
 800f39c:	0800f0f7 	.word	0x0800f0f7
 800f3a0:	08010f0a 	.word	0x08010f0a

0800f3a4 <malloc>:
 800f3a4:	4b02      	ldr	r3, [pc, #8]	@ (800f3b0 <malloc+0xc>)
 800f3a6:	4601      	mov	r1, r0
 800f3a8:	6818      	ldr	r0, [r3, #0]
 800f3aa:	f000 b825 	b.w	800f3f8 <_malloc_r>
 800f3ae:	bf00      	nop
 800f3b0:	2000019c 	.word	0x2000019c

0800f3b4 <sbrk_aligned>:
 800f3b4:	b570      	push	{r4, r5, r6, lr}
 800f3b6:	4e0f      	ldr	r6, [pc, #60]	@ (800f3f4 <sbrk_aligned+0x40>)
 800f3b8:	460c      	mov	r4, r1
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	6831      	ldr	r1, [r6, #0]
 800f3be:	b911      	cbnz	r1, 800f3c6 <sbrk_aligned+0x12>
 800f3c0:	f000 fed6 	bl	8010170 <_sbrk_r>
 800f3c4:	6030      	str	r0, [r6, #0]
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	f000 fed1 	bl	8010170 <_sbrk_r>
 800f3ce:	1c43      	adds	r3, r0, #1
 800f3d0:	d103      	bne.n	800f3da <sbrk_aligned+0x26>
 800f3d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	bd70      	pop	{r4, r5, r6, pc}
 800f3da:	1cc4      	adds	r4, r0, #3
 800f3dc:	f024 0403 	bic.w	r4, r4, #3
 800f3e0:	42a0      	cmp	r0, r4
 800f3e2:	d0f8      	beq.n	800f3d6 <sbrk_aligned+0x22>
 800f3e4:	1a21      	subs	r1, r4, r0
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f000 fec2 	bl	8010170 <_sbrk_r>
 800f3ec:	3001      	adds	r0, #1
 800f3ee:	d1f2      	bne.n	800f3d6 <sbrk_aligned+0x22>
 800f3f0:	e7ef      	b.n	800f3d2 <sbrk_aligned+0x1e>
 800f3f2:	bf00      	nop
 800f3f4:	20000578 	.word	0x20000578

0800f3f8 <_malloc_r>:
 800f3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3fc:	1ccd      	adds	r5, r1, #3
 800f3fe:	4606      	mov	r6, r0
 800f400:	f025 0503 	bic.w	r5, r5, #3
 800f404:	3508      	adds	r5, #8
 800f406:	2d0c      	cmp	r5, #12
 800f408:	bf38      	it	cc
 800f40a:	250c      	movcc	r5, #12
 800f40c:	2d00      	cmp	r5, #0
 800f40e:	db01      	blt.n	800f414 <_malloc_r+0x1c>
 800f410:	42a9      	cmp	r1, r5
 800f412:	d904      	bls.n	800f41e <_malloc_r+0x26>
 800f414:	230c      	movs	r3, #12
 800f416:	6033      	str	r3, [r6, #0]
 800f418:	2000      	movs	r0, #0
 800f41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f41e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4f4 <_malloc_r+0xfc>
 800f422:	f000 f927 	bl	800f674 <__malloc_lock>
 800f426:	f8d8 3000 	ldr.w	r3, [r8]
 800f42a:	461c      	mov	r4, r3
 800f42c:	bb44      	cbnz	r4, 800f480 <_malloc_r+0x88>
 800f42e:	4629      	mov	r1, r5
 800f430:	4630      	mov	r0, r6
 800f432:	f7ff ffbf 	bl	800f3b4 <sbrk_aligned>
 800f436:	1c43      	adds	r3, r0, #1
 800f438:	4604      	mov	r4, r0
 800f43a:	d158      	bne.n	800f4ee <_malloc_r+0xf6>
 800f43c:	f8d8 4000 	ldr.w	r4, [r8]
 800f440:	4627      	mov	r7, r4
 800f442:	2f00      	cmp	r7, #0
 800f444:	d143      	bne.n	800f4ce <_malloc_r+0xd6>
 800f446:	2c00      	cmp	r4, #0
 800f448:	d04b      	beq.n	800f4e2 <_malloc_r+0xea>
 800f44a:	6823      	ldr	r3, [r4, #0]
 800f44c:	4639      	mov	r1, r7
 800f44e:	4630      	mov	r0, r6
 800f450:	eb04 0903 	add.w	r9, r4, r3
 800f454:	f000 fe8c 	bl	8010170 <_sbrk_r>
 800f458:	4581      	cmp	r9, r0
 800f45a:	d142      	bne.n	800f4e2 <_malloc_r+0xea>
 800f45c:	6821      	ldr	r1, [r4, #0]
 800f45e:	4630      	mov	r0, r6
 800f460:	1a6d      	subs	r5, r5, r1
 800f462:	4629      	mov	r1, r5
 800f464:	f7ff ffa6 	bl	800f3b4 <sbrk_aligned>
 800f468:	3001      	adds	r0, #1
 800f46a:	d03a      	beq.n	800f4e2 <_malloc_r+0xea>
 800f46c:	6823      	ldr	r3, [r4, #0]
 800f46e:	442b      	add	r3, r5
 800f470:	6023      	str	r3, [r4, #0]
 800f472:	f8d8 3000 	ldr.w	r3, [r8]
 800f476:	685a      	ldr	r2, [r3, #4]
 800f478:	bb62      	cbnz	r2, 800f4d4 <_malloc_r+0xdc>
 800f47a:	f8c8 7000 	str.w	r7, [r8]
 800f47e:	e00f      	b.n	800f4a0 <_malloc_r+0xa8>
 800f480:	6822      	ldr	r2, [r4, #0]
 800f482:	1b52      	subs	r2, r2, r5
 800f484:	d420      	bmi.n	800f4c8 <_malloc_r+0xd0>
 800f486:	2a0b      	cmp	r2, #11
 800f488:	d917      	bls.n	800f4ba <_malloc_r+0xc2>
 800f48a:	1961      	adds	r1, r4, r5
 800f48c:	42a3      	cmp	r3, r4
 800f48e:	6025      	str	r5, [r4, #0]
 800f490:	bf18      	it	ne
 800f492:	6059      	strne	r1, [r3, #4]
 800f494:	6863      	ldr	r3, [r4, #4]
 800f496:	bf08      	it	eq
 800f498:	f8c8 1000 	streq.w	r1, [r8]
 800f49c:	5162      	str	r2, [r4, r5]
 800f49e:	604b      	str	r3, [r1, #4]
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	f000 f8ed 	bl	800f680 <__malloc_unlock>
 800f4a6:	f104 000b 	add.w	r0, r4, #11
 800f4aa:	1d23      	adds	r3, r4, #4
 800f4ac:	f020 0007 	bic.w	r0, r0, #7
 800f4b0:	1ac2      	subs	r2, r0, r3
 800f4b2:	bf1c      	itt	ne
 800f4b4:	1a1b      	subne	r3, r3, r0
 800f4b6:	50a3      	strne	r3, [r4, r2]
 800f4b8:	e7af      	b.n	800f41a <_malloc_r+0x22>
 800f4ba:	6862      	ldr	r2, [r4, #4]
 800f4bc:	42a3      	cmp	r3, r4
 800f4be:	bf0c      	ite	eq
 800f4c0:	f8c8 2000 	streq.w	r2, [r8]
 800f4c4:	605a      	strne	r2, [r3, #4]
 800f4c6:	e7eb      	b.n	800f4a0 <_malloc_r+0xa8>
 800f4c8:	4623      	mov	r3, r4
 800f4ca:	6864      	ldr	r4, [r4, #4]
 800f4cc:	e7ae      	b.n	800f42c <_malloc_r+0x34>
 800f4ce:	463c      	mov	r4, r7
 800f4d0:	687f      	ldr	r7, [r7, #4]
 800f4d2:	e7b6      	b.n	800f442 <_malloc_r+0x4a>
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	42a3      	cmp	r3, r4
 800f4da:	d1fb      	bne.n	800f4d4 <_malloc_r+0xdc>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	6053      	str	r3, [r2, #4]
 800f4e0:	e7de      	b.n	800f4a0 <_malloc_r+0xa8>
 800f4e2:	230c      	movs	r3, #12
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	6033      	str	r3, [r6, #0]
 800f4e8:	f000 f8ca 	bl	800f680 <__malloc_unlock>
 800f4ec:	e794      	b.n	800f418 <_malloc_r+0x20>
 800f4ee:	6005      	str	r5, [r0, #0]
 800f4f0:	e7d6      	b.n	800f4a0 <_malloc_r+0xa8>
 800f4f2:	bf00      	nop
 800f4f4:	2000057c 	.word	0x2000057c

0800f4f8 <__ascii_mbtowc>:
 800f4f8:	b082      	sub	sp, #8
 800f4fa:	b901      	cbnz	r1, 800f4fe <__ascii_mbtowc+0x6>
 800f4fc:	a901      	add	r1, sp, #4
 800f4fe:	b142      	cbz	r2, 800f512 <__ascii_mbtowc+0x1a>
 800f500:	b14b      	cbz	r3, 800f516 <__ascii_mbtowc+0x1e>
 800f502:	7813      	ldrb	r3, [r2, #0]
 800f504:	600b      	str	r3, [r1, #0]
 800f506:	7812      	ldrb	r2, [r2, #0]
 800f508:	1e10      	subs	r0, r2, #0
 800f50a:	bf18      	it	ne
 800f50c:	2001      	movne	r0, #1
 800f50e:	b002      	add	sp, #8
 800f510:	4770      	bx	lr
 800f512:	4610      	mov	r0, r2
 800f514:	e7fb      	b.n	800f50e <__ascii_mbtowc+0x16>
 800f516:	f06f 0001 	mvn.w	r0, #1
 800f51a:	e7f8      	b.n	800f50e <__ascii_mbtowc+0x16>

0800f51c <__sflush_r>:
 800f51c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f524:	0716      	lsls	r6, r2, #28
 800f526:	4605      	mov	r5, r0
 800f528:	460c      	mov	r4, r1
 800f52a:	d454      	bmi.n	800f5d6 <__sflush_r+0xba>
 800f52c:	684b      	ldr	r3, [r1, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	dc02      	bgt.n	800f538 <__sflush_r+0x1c>
 800f532:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f534:	2b00      	cmp	r3, #0
 800f536:	dd48      	ble.n	800f5ca <__sflush_r+0xae>
 800f538:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f53a:	2e00      	cmp	r6, #0
 800f53c:	d045      	beq.n	800f5ca <__sflush_r+0xae>
 800f53e:	2300      	movs	r3, #0
 800f540:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f544:	682f      	ldr	r7, [r5, #0]
 800f546:	6a21      	ldr	r1, [r4, #32]
 800f548:	602b      	str	r3, [r5, #0]
 800f54a:	d030      	beq.n	800f5ae <__sflush_r+0x92>
 800f54c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f54e:	89a3      	ldrh	r3, [r4, #12]
 800f550:	0759      	lsls	r1, r3, #29
 800f552:	d505      	bpl.n	800f560 <__sflush_r+0x44>
 800f554:	6863      	ldr	r3, [r4, #4]
 800f556:	1ad2      	subs	r2, r2, r3
 800f558:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f55a:	b10b      	cbz	r3, 800f560 <__sflush_r+0x44>
 800f55c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f55e:	1ad2      	subs	r2, r2, r3
 800f560:	2300      	movs	r3, #0
 800f562:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f564:	6a21      	ldr	r1, [r4, #32]
 800f566:	4628      	mov	r0, r5
 800f568:	47b0      	blx	r6
 800f56a:	1c43      	adds	r3, r0, #1
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	d106      	bne.n	800f57e <__sflush_r+0x62>
 800f570:	6829      	ldr	r1, [r5, #0]
 800f572:	291d      	cmp	r1, #29
 800f574:	d82b      	bhi.n	800f5ce <__sflush_r+0xb2>
 800f576:	4a2a      	ldr	r2, [pc, #168]	@ (800f620 <__sflush_r+0x104>)
 800f578:	40ca      	lsrs	r2, r1
 800f57a:	07d6      	lsls	r6, r2, #31
 800f57c:	d527      	bpl.n	800f5ce <__sflush_r+0xb2>
 800f57e:	2200      	movs	r2, #0
 800f580:	04d9      	lsls	r1, r3, #19
 800f582:	6062      	str	r2, [r4, #4]
 800f584:	6922      	ldr	r2, [r4, #16]
 800f586:	6022      	str	r2, [r4, #0]
 800f588:	d504      	bpl.n	800f594 <__sflush_r+0x78>
 800f58a:	1c42      	adds	r2, r0, #1
 800f58c:	d101      	bne.n	800f592 <__sflush_r+0x76>
 800f58e:	682b      	ldr	r3, [r5, #0]
 800f590:	b903      	cbnz	r3, 800f594 <__sflush_r+0x78>
 800f592:	6560      	str	r0, [r4, #84]	@ 0x54
 800f594:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f596:	602f      	str	r7, [r5, #0]
 800f598:	b1b9      	cbz	r1, 800f5ca <__sflush_r+0xae>
 800f59a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f59e:	4299      	cmp	r1, r3
 800f5a0:	d002      	beq.n	800f5a8 <__sflush_r+0x8c>
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	f000 fe48 	bl	8010238 <_free_r>
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5ac:	e00d      	b.n	800f5ca <__sflush_r+0xae>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	47b0      	blx	r6
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	1c50      	adds	r0, r2, #1
 800f5b8:	d1c9      	bne.n	800f54e <__sflush_r+0x32>
 800f5ba:	682b      	ldr	r3, [r5, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d0c6      	beq.n	800f54e <__sflush_r+0x32>
 800f5c0:	2b1d      	cmp	r3, #29
 800f5c2:	d001      	beq.n	800f5c8 <__sflush_r+0xac>
 800f5c4:	2b16      	cmp	r3, #22
 800f5c6:	d11d      	bne.n	800f604 <__sflush_r+0xe8>
 800f5c8:	602f      	str	r7, [r5, #0]
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	e021      	b.n	800f612 <__sflush_r+0xf6>
 800f5ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5d2:	b21b      	sxth	r3, r3
 800f5d4:	e01a      	b.n	800f60c <__sflush_r+0xf0>
 800f5d6:	690f      	ldr	r7, [r1, #16]
 800f5d8:	2f00      	cmp	r7, #0
 800f5da:	d0f6      	beq.n	800f5ca <__sflush_r+0xae>
 800f5dc:	0793      	lsls	r3, r2, #30
 800f5de:	680e      	ldr	r6, [r1, #0]
 800f5e0:	600f      	str	r7, [r1, #0]
 800f5e2:	bf0c      	ite	eq
 800f5e4:	694b      	ldreq	r3, [r1, #20]
 800f5e6:	2300      	movne	r3, #0
 800f5e8:	eba6 0807 	sub.w	r8, r6, r7
 800f5ec:	608b      	str	r3, [r1, #8]
 800f5ee:	f1b8 0f00 	cmp.w	r8, #0
 800f5f2:	ddea      	ble.n	800f5ca <__sflush_r+0xae>
 800f5f4:	4643      	mov	r3, r8
 800f5f6:	463a      	mov	r2, r7
 800f5f8:	6a21      	ldr	r1, [r4, #32]
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f5fe:	47b0      	blx	r6
 800f600:	2800      	cmp	r0, #0
 800f602:	dc08      	bgt.n	800f616 <__sflush_r+0xfa>
 800f604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f60c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f610:	81a3      	strh	r3, [r4, #12]
 800f612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f616:	4407      	add	r7, r0
 800f618:	eba8 0800 	sub.w	r8, r8, r0
 800f61c:	e7e7      	b.n	800f5ee <__sflush_r+0xd2>
 800f61e:	bf00      	nop
 800f620:	20400001 	.word	0x20400001

0800f624 <_fflush_r>:
 800f624:	b538      	push	{r3, r4, r5, lr}
 800f626:	690b      	ldr	r3, [r1, #16]
 800f628:	4605      	mov	r5, r0
 800f62a:	460c      	mov	r4, r1
 800f62c:	b913      	cbnz	r3, 800f634 <_fflush_r+0x10>
 800f62e:	2500      	movs	r5, #0
 800f630:	4628      	mov	r0, r5
 800f632:	bd38      	pop	{r3, r4, r5, pc}
 800f634:	b118      	cbz	r0, 800f63e <_fflush_r+0x1a>
 800f636:	6a03      	ldr	r3, [r0, #32]
 800f638:	b90b      	cbnz	r3, 800f63e <_fflush_r+0x1a>
 800f63a:	f7fd fc95 	bl	800cf68 <__sinit>
 800f63e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d0f3      	beq.n	800f62e <_fflush_r+0xa>
 800f646:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f648:	07d0      	lsls	r0, r2, #31
 800f64a:	d404      	bmi.n	800f656 <_fflush_r+0x32>
 800f64c:	0599      	lsls	r1, r3, #22
 800f64e:	d402      	bmi.n	800f656 <_fflush_r+0x32>
 800f650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f652:	f7fe fb8a 	bl	800dd6a <__retarget_lock_acquire_recursive>
 800f656:	4628      	mov	r0, r5
 800f658:	4621      	mov	r1, r4
 800f65a:	f7ff ff5f 	bl	800f51c <__sflush_r>
 800f65e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f660:	4605      	mov	r5, r0
 800f662:	07da      	lsls	r2, r3, #31
 800f664:	d4e4      	bmi.n	800f630 <_fflush_r+0xc>
 800f666:	89a3      	ldrh	r3, [r4, #12]
 800f668:	059b      	lsls	r3, r3, #22
 800f66a:	d4e1      	bmi.n	800f630 <_fflush_r+0xc>
 800f66c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f66e:	f7fe fb7d 	bl	800dd6c <__retarget_lock_release_recursive>
 800f672:	e7dd      	b.n	800f630 <_fflush_r+0xc>

0800f674 <__malloc_lock>:
 800f674:	4801      	ldr	r0, [pc, #4]	@ (800f67c <__malloc_lock+0x8>)
 800f676:	f7fe bb78 	b.w	800dd6a <__retarget_lock_acquire_recursive>
 800f67a:	bf00      	nop
 800f67c:	20000574 	.word	0x20000574

0800f680 <__malloc_unlock>:
 800f680:	4801      	ldr	r0, [pc, #4]	@ (800f688 <__malloc_unlock+0x8>)
 800f682:	f7fe bb73 	b.w	800dd6c <__retarget_lock_release_recursive>
 800f686:	bf00      	nop
 800f688:	20000574 	.word	0x20000574

0800f68c <_Balloc>:
 800f68c:	b570      	push	{r4, r5, r6, lr}
 800f68e:	69c6      	ldr	r6, [r0, #28]
 800f690:	4604      	mov	r4, r0
 800f692:	460d      	mov	r5, r1
 800f694:	b976      	cbnz	r6, 800f6b4 <_Balloc+0x28>
 800f696:	2010      	movs	r0, #16
 800f698:	f7ff fe84 	bl	800f3a4 <malloc>
 800f69c:	4602      	mov	r2, r0
 800f69e:	61e0      	str	r0, [r4, #28]
 800f6a0:	b920      	cbnz	r0, 800f6ac <_Balloc+0x20>
 800f6a2:	4b18      	ldr	r3, [pc, #96]	@ (800f704 <_Balloc+0x78>)
 800f6a4:	216b      	movs	r1, #107	@ 0x6b
 800f6a6:	4818      	ldr	r0, [pc, #96]	@ (800f708 <_Balloc+0x7c>)
 800f6a8:	f000 fd94 	bl	80101d4 <__assert_func>
 800f6ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6b0:	6006      	str	r6, [r0, #0]
 800f6b2:	60c6      	str	r6, [r0, #12]
 800f6b4:	69e6      	ldr	r6, [r4, #28]
 800f6b6:	68f3      	ldr	r3, [r6, #12]
 800f6b8:	b183      	cbz	r3, 800f6dc <_Balloc+0x50>
 800f6ba:	69e3      	ldr	r3, [r4, #28]
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f6c2:	b9b8      	cbnz	r0, 800f6f4 <_Balloc+0x68>
 800f6c4:	2101      	movs	r1, #1
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	fa01 f605 	lsl.w	r6, r1, r5
 800f6cc:	1d72      	adds	r2, r6, #5
 800f6ce:	0092      	lsls	r2, r2, #2
 800f6d0:	f000 fd9e 	bl	8010210 <_calloc_r>
 800f6d4:	b160      	cbz	r0, 800f6f0 <_Balloc+0x64>
 800f6d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f6da:	e00e      	b.n	800f6fa <_Balloc+0x6e>
 800f6dc:	2221      	movs	r2, #33	@ 0x21
 800f6de:	2104      	movs	r1, #4
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	f000 fd95 	bl	8010210 <_calloc_r>
 800f6e6:	69e3      	ldr	r3, [r4, #28]
 800f6e8:	60f0      	str	r0, [r6, #12]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d1e4      	bne.n	800f6ba <_Balloc+0x2e>
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	bd70      	pop	{r4, r5, r6, pc}
 800f6f4:	6802      	ldr	r2, [r0, #0]
 800f6f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f700:	e7f7      	b.n	800f6f2 <_Balloc+0x66>
 800f702:	bf00      	nop
 800f704:	08010e24 	.word	0x08010e24
 800f708:	08010f15 	.word	0x08010f15

0800f70c <_Bfree>:
 800f70c:	b570      	push	{r4, r5, r6, lr}
 800f70e:	69c6      	ldr	r6, [r0, #28]
 800f710:	4605      	mov	r5, r0
 800f712:	460c      	mov	r4, r1
 800f714:	b976      	cbnz	r6, 800f734 <_Bfree+0x28>
 800f716:	2010      	movs	r0, #16
 800f718:	f7ff fe44 	bl	800f3a4 <malloc>
 800f71c:	4602      	mov	r2, r0
 800f71e:	61e8      	str	r0, [r5, #28]
 800f720:	b920      	cbnz	r0, 800f72c <_Bfree+0x20>
 800f722:	4b09      	ldr	r3, [pc, #36]	@ (800f748 <_Bfree+0x3c>)
 800f724:	218f      	movs	r1, #143	@ 0x8f
 800f726:	4809      	ldr	r0, [pc, #36]	@ (800f74c <_Bfree+0x40>)
 800f728:	f000 fd54 	bl	80101d4 <__assert_func>
 800f72c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f730:	6006      	str	r6, [r0, #0]
 800f732:	60c6      	str	r6, [r0, #12]
 800f734:	b13c      	cbz	r4, 800f746 <_Bfree+0x3a>
 800f736:	69eb      	ldr	r3, [r5, #28]
 800f738:	6862      	ldr	r2, [r4, #4]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f740:	6021      	str	r1, [r4, #0]
 800f742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f746:	bd70      	pop	{r4, r5, r6, pc}
 800f748:	08010e24 	.word	0x08010e24
 800f74c:	08010f15 	.word	0x08010f15

0800f750 <__multadd>:
 800f750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f754:	f101 0c14 	add.w	ip, r1, #20
 800f758:	4607      	mov	r7, r0
 800f75a:	460c      	mov	r4, r1
 800f75c:	461e      	mov	r6, r3
 800f75e:	690d      	ldr	r5, [r1, #16]
 800f760:	2000      	movs	r0, #0
 800f762:	f8dc 3000 	ldr.w	r3, [ip]
 800f766:	3001      	adds	r0, #1
 800f768:	b299      	uxth	r1, r3
 800f76a:	4285      	cmp	r5, r0
 800f76c:	fb02 6101 	mla	r1, r2, r1, r6
 800f770:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f774:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800f778:	b289      	uxth	r1, r1
 800f77a:	fb02 3306 	mla	r3, r2, r6, r3
 800f77e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f786:	f84c 1b04 	str.w	r1, [ip], #4
 800f78a:	dcea      	bgt.n	800f762 <__multadd+0x12>
 800f78c:	b30e      	cbz	r6, 800f7d2 <__multadd+0x82>
 800f78e:	68a3      	ldr	r3, [r4, #8]
 800f790:	42ab      	cmp	r3, r5
 800f792:	dc19      	bgt.n	800f7c8 <__multadd+0x78>
 800f794:	6861      	ldr	r1, [r4, #4]
 800f796:	4638      	mov	r0, r7
 800f798:	3101      	adds	r1, #1
 800f79a:	f7ff ff77 	bl	800f68c <_Balloc>
 800f79e:	4680      	mov	r8, r0
 800f7a0:	b928      	cbnz	r0, 800f7ae <__multadd+0x5e>
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800f7d8 <__multadd+0x88>)
 800f7a6:	21ba      	movs	r1, #186	@ 0xba
 800f7a8:	480c      	ldr	r0, [pc, #48]	@ (800f7dc <__multadd+0x8c>)
 800f7aa:	f000 fd13 	bl	80101d4 <__assert_func>
 800f7ae:	6922      	ldr	r2, [r4, #16]
 800f7b0:	f104 010c 	add.w	r1, r4, #12
 800f7b4:	300c      	adds	r0, #12
 800f7b6:	3202      	adds	r2, #2
 800f7b8:	0092      	lsls	r2, r2, #2
 800f7ba:	f7fe faeb 	bl	800dd94 <memcpy>
 800f7be:	4621      	mov	r1, r4
 800f7c0:	4644      	mov	r4, r8
 800f7c2:	4638      	mov	r0, r7
 800f7c4:	f7ff ffa2 	bl	800f70c <_Bfree>
 800f7c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f7cc:	3501      	adds	r5, #1
 800f7ce:	615e      	str	r6, [r3, #20]
 800f7d0:	6125      	str	r5, [r4, #16]
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d8:	08010e93 	.word	0x08010e93
 800f7dc:	08010f15 	.word	0x08010f15

0800f7e0 <__s2b>:
 800f7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7e4:	4615      	mov	r5, r2
 800f7e6:	461f      	mov	r7, r3
 800f7e8:	2209      	movs	r2, #9
 800f7ea:	3308      	adds	r3, #8
 800f7ec:	460c      	mov	r4, r1
 800f7ee:	4606      	mov	r6, r0
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	db09      	blt.n	800f810 <__s2b+0x30>
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	f7ff ff45 	bl	800f68c <_Balloc>
 800f802:	b940      	cbnz	r0, 800f816 <__s2b+0x36>
 800f804:	4602      	mov	r2, r0
 800f806:	4b19      	ldr	r3, [pc, #100]	@ (800f86c <__s2b+0x8c>)
 800f808:	21d3      	movs	r1, #211	@ 0xd3
 800f80a:	4819      	ldr	r0, [pc, #100]	@ (800f870 <__s2b+0x90>)
 800f80c:	f000 fce2 	bl	80101d4 <__assert_func>
 800f810:	0052      	lsls	r2, r2, #1
 800f812:	3101      	adds	r1, #1
 800f814:	e7f0      	b.n	800f7f8 <__s2b+0x18>
 800f816:	9b08      	ldr	r3, [sp, #32]
 800f818:	2d09      	cmp	r5, #9
 800f81a:	6143      	str	r3, [r0, #20]
 800f81c:	f04f 0301 	mov.w	r3, #1
 800f820:	6103      	str	r3, [r0, #16]
 800f822:	dd16      	ble.n	800f852 <__s2b+0x72>
 800f824:	f104 0909 	add.w	r9, r4, #9
 800f828:	442c      	add	r4, r5
 800f82a:	46c8      	mov	r8, r9
 800f82c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f830:	4601      	mov	r1, r0
 800f832:	220a      	movs	r2, #10
 800f834:	4630      	mov	r0, r6
 800f836:	3b30      	subs	r3, #48	@ 0x30
 800f838:	f7ff ff8a 	bl	800f750 <__multadd>
 800f83c:	45a0      	cmp	r8, r4
 800f83e:	d1f5      	bne.n	800f82c <__s2b+0x4c>
 800f840:	f1a5 0408 	sub.w	r4, r5, #8
 800f844:	444c      	add	r4, r9
 800f846:	1b2d      	subs	r5, r5, r4
 800f848:	1963      	adds	r3, r4, r5
 800f84a:	42bb      	cmp	r3, r7
 800f84c:	db04      	blt.n	800f858 <__s2b+0x78>
 800f84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f852:	340a      	adds	r4, #10
 800f854:	2509      	movs	r5, #9
 800f856:	e7f6      	b.n	800f846 <__s2b+0x66>
 800f858:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f85c:	4601      	mov	r1, r0
 800f85e:	220a      	movs	r2, #10
 800f860:	4630      	mov	r0, r6
 800f862:	3b30      	subs	r3, #48	@ 0x30
 800f864:	f7ff ff74 	bl	800f750 <__multadd>
 800f868:	e7ee      	b.n	800f848 <__s2b+0x68>
 800f86a:	bf00      	nop
 800f86c:	08010e93 	.word	0x08010e93
 800f870:	08010f15 	.word	0x08010f15

0800f874 <__hi0bits>:
 800f874:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f878:	4603      	mov	r3, r0
 800f87a:	bf36      	itet	cc
 800f87c:	0403      	lslcc	r3, r0, #16
 800f87e:	2000      	movcs	r0, #0
 800f880:	2010      	movcc	r0, #16
 800f882:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f886:	bf3c      	itt	cc
 800f888:	021b      	lslcc	r3, r3, #8
 800f88a:	3008      	addcc	r0, #8
 800f88c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f890:	bf3c      	itt	cc
 800f892:	011b      	lslcc	r3, r3, #4
 800f894:	3004      	addcc	r0, #4
 800f896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f89a:	bf3c      	itt	cc
 800f89c:	009b      	lslcc	r3, r3, #2
 800f89e:	3002      	addcc	r0, #2
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	db05      	blt.n	800f8b0 <__hi0bits+0x3c>
 800f8a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f8a8:	f100 0001 	add.w	r0, r0, #1
 800f8ac:	bf08      	it	eq
 800f8ae:	2020      	moveq	r0, #32
 800f8b0:	4770      	bx	lr

0800f8b2 <__lo0bits>:
 800f8b2:	6803      	ldr	r3, [r0, #0]
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	f013 0007 	ands.w	r0, r3, #7
 800f8ba:	d00b      	beq.n	800f8d4 <__lo0bits+0x22>
 800f8bc:	07d9      	lsls	r1, r3, #31
 800f8be:	d421      	bmi.n	800f904 <__lo0bits+0x52>
 800f8c0:	0798      	lsls	r0, r3, #30
 800f8c2:	bf47      	ittee	mi
 800f8c4:	085b      	lsrmi	r3, r3, #1
 800f8c6:	2001      	movmi	r0, #1
 800f8c8:	089b      	lsrpl	r3, r3, #2
 800f8ca:	2002      	movpl	r0, #2
 800f8cc:	bf4c      	ite	mi
 800f8ce:	6013      	strmi	r3, [r2, #0]
 800f8d0:	6013      	strpl	r3, [r2, #0]
 800f8d2:	4770      	bx	lr
 800f8d4:	b299      	uxth	r1, r3
 800f8d6:	b909      	cbnz	r1, 800f8dc <__lo0bits+0x2a>
 800f8d8:	0c1b      	lsrs	r3, r3, #16
 800f8da:	2010      	movs	r0, #16
 800f8dc:	b2d9      	uxtb	r1, r3
 800f8de:	b909      	cbnz	r1, 800f8e4 <__lo0bits+0x32>
 800f8e0:	3008      	adds	r0, #8
 800f8e2:	0a1b      	lsrs	r3, r3, #8
 800f8e4:	0719      	lsls	r1, r3, #28
 800f8e6:	bf04      	itt	eq
 800f8e8:	091b      	lsreq	r3, r3, #4
 800f8ea:	3004      	addeq	r0, #4
 800f8ec:	0799      	lsls	r1, r3, #30
 800f8ee:	bf04      	itt	eq
 800f8f0:	089b      	lsreq	r3, r3, #2
 800f8f2:	3002      	addeq	r0, #2
 800f8f4:	07d9      	lsls	r1, r3, #31
 800f8f6:	d403      	bmi.n	800f900 <__lo0bits+0x4e>
 800f8f8:	085b      	lsrs	r3, r3, #1
 800f8fa:	f100 0001 	add.w	r0, r0, #1
 800f8fe:	d003      	beq.n	800f908 <__lo0bits+0x56>
 800f900:	6013      	str	r3, [r2, #0]
 800f902:	4770      	bx	lr
 800f904:	2000      	movs	r0, #0
 800f906:	4770      	bx	lr
 800f908:	2020      	movs	r0, #32
 800f90a:	4770      	bx	lr

0800f90c <__i2b>:
 800f90c:	b510      	push	{r4, lr}
 800f90e:	460c      	mov	r4, r1
 800f910:	2101      	movs	r1, #1
 800f912:	f7ff febb 	bl	800f68c <_Balloc>
 800f916:	4602      	mov	r2, r0
 800f918:	b928      	cbnz	r0, 800f926 <__i2b+0x1a>
 800f91a:	4b05      	ldr	r3, [pc, #20]	@ (800f930 <__i2b+0x24>)
 800f91c:	f240 1145 	movw	r1, #325	@ 0x145
 800f920:	4804      	ldr	r0, [pc, #16]	@ (800f934 <__i2b+0x28>)
 800f922:	f000 fc57 	bl	80101d4 <__assert_func>
 800f926:	2301      	movs	r3, #1
 800f928:	6144      	str	r4, [r0, #20]
 800f92a:	6103      	str	r3, [r0, #16]
 800f92c:	bd10      	pop	{r4, pc}
 800f92e:	bf00      	nop
 800f930:	08010e93 	.word	0x08010e93
 800f934:	08010f15 	.word	0x08010f15

0800f938 <__multiply>:
 800f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93c:	4617      	mov	r7, r2
 800f93e:	690a      	ldr	r2, [r1, #16]
 800f940:	4689      	mov	r9, r1
 800f942:	b085      	sub	sp, #20
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	429a      	cmp	r2, r3
 800f948:	bfa2      	ittt	ge
 800f94a:	463b      	movge	r3, r7
 800f94c:	460f      	movge	r7, r1
 800f94e:	4699      	movge	r9, r3
 800f950:	693d      	ldr	r5, [r7, #16]
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f958:	6879      	ldr	r1, [r7, #4]
 800f95a:	eb05 060a 	add.w	r6, r5, sl
 800f95e:	42b3      	cmp	r3, r6
 800f960:	bfb8      	it	lt
 800f962:	3101      	addlt	r1, #1
 800f964:	f7ff fe92 	bl	800f68c <_Balloc>
 800f968:	b930      	cbnz	r0, 800f978 <__multiply+0x40>
 800f96a:	4602      	mov	r2, r0
 800f96c:	4b42      	ldr	r3, [pc, #264]	@ (800fa78 <__multiply+0x140>)
 800f96e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f972:	4842      	ldr	r0, [pc, #264]	@ (800fa7c <__multiply+0x144>)
 800f974:	f000 fc2e 	bl	80101d4 <__assert_func>
 800f978:	f100 0414 	add.w	r4, r0, #20
 800f97c:	2200      	movs	r2, #0
 800f97e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f982:	4623      	mov	r3, r4
 800f984:	4573      	cmp	r3, lr
 800f986:	d320      	bcc.n	800f9ca <__multiply+0x92>
 800f988:	f107 0814 	add.w	r8, r7, #20
 800f98c:	f109 0114 	add.w	r1, r9, #20
 800f990:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f994:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f998:	9302      	str	r3, [sp, #8]
 800f99a:	1beb      	subs	r3, r5, r7
 800f99c:	3715      	adds	r7, #21
 800f99e:	3b15      	subs	r3, #21
 800f9a0:	f023 0303 	bic.w	r3, r3, #3
 800f9a4:	3304      	adds	r3, #4
 800f9a6:	42bd      	cmp	r5, r7
 800f9a8:	bf38      	it	cc
 800f9aa:	2304      	movcc	r3, #4
 800f9ac:	9301      	str	r3, [sp, #4]
 800f9ae:	9b02      	ldr	r3, [sp, #8]
 800f9b0:	9103      	str	r1, [sp, #12]
 800f9b2:	428b      	cmp	r3, r1
 800f9b4:	d80c      	bhi.n	800f9d0 <__multiply+0x98>
 800f9b6:	2e00      	cmp	r6, #0
 800f9b8:	dd03      	ble.n	800f9c2 <__multiply+0x8a>
 800f9ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d057      	beq.n	800fa72 <__multiply+0x13a>
 800f9c2:	6106      	str	r6, [r0, #16]
 800f9c4:	b005      	add	sp, #20
 800f9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ca:	f843 2b04 	str.w	r2, [r3], #4
 800f9ce:	e7d9      	b.n	800f984 <__multiply+0x4c>
 800f9d0:	f8b1 a000 	ldrh.w	sl, [r1]
 800f9d4:	f1ba 0f00 	cmp.w	sl, #0
 800f9d8:	d021      	beq.n	800fa1e <__multiply+0xe6>
 800f9da:	46c4      	mov	ip, r8
 800f9dc:	46a1      	mov	r9, r4
 800f9de:	2700      	movs	r7, #0
 800f9e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f9e4:	f8d9 3000 	ldr.w	r3, [r9]
 800f9e8:	fa1f fb82 	uxth.w	fp, r2
 800f9ec:	4565      	cmp	r5, ip
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800f9f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800f9f8:	443b      	add	r3, r7
 800f9fa:	f8d9 7000 	ldr.w	r7, [r9]
 800f9fe:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800fa02:	fb0a 7202 	mla	r2, sl, r2, r7
 800fa06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fa10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa14:	f849 3b04 	str.w	r3, [r9], #4
 800fa18:	d8e2      	bhi.n	800f9e0 <__multiply+0xa8>
 800fa1a:	9b01      	ldr	r3, [sp, #4]
 800fa1c:	50e7      	str	r7, [r4, r3]
 800fa1e:	9b03      	ldr	r3, [sp, #12]
 800fa20:	3104      	adds	r1, #4
 800fa22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fa26:	f1b9 0f00 	cmp.w	r9, #0
 800fa2a:	d020      	beq.n	800fa6e <__multiply+0x136>
 800fa2c:	6823      	ldr	r3, [r4, #0]
 800fa2e:	4647      	mov	r7, r8
 800fa30:	46a4      	mov	ip, r4
 800fa32:	f04f 0a00 	mov.w	sl, #0
 800fa36:	f8b7 b000 	ldrh.w	fp, [r7]
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fa40:	fb09 220b 	mla	r2, r9, fp, r2
 800fa44:	4452      	add	r2, sl
 800fa46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa4a:	f84c 3b04 	str.w	r3, [ip], #4
 800fa4e:	f857 3b04 	ldr.w	r3, [r7], #4
 800fa52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa56:	f8bc 3000 	ldrh.w	r3, [ip]
 800fa5a:	42bd      	cmp	r5, r7
 800fa5c:	fb09 330a 	mla	r3, r9, sl, r3
 800fa60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fa64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa68:	d8e5      	bhi.n	800fa36 <__multiply+0xfe>
 800fa6a:	9a01      	ldr	r2, [sp, #4]
 800fa6c:	50a3      	str	r3, [r4, r2]
 800fa6e:	3404      	adds	r4, #4
 800fa70:	e79d      	b.n	800f9ae <__multiply+0x76>
 800fa72:	3e01      	subs	r6, #1
 800fa74:	e79f      	b.n	800f9b6 <__multiply+0x7e>
 800fa76:	bf00      	nop
 800fa78:	08010e93 	.word	0x08010e93
 800fa7c:	08010f15 	.word	0x08010f15

0800fa80 <__pow5mult>:
 800fa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa84:	4615      	mov	r5, r2
 800fa86:	f012 0203 	ands.w	r2, r2, #3
 800fa8a:	4607      	mov	r7, r0
 800fa8c:	460e      	mov	r6, r1
 800fa8e:	d007      	beq.n	800faa0 <__pow5mult+0x20>
 800fa90:	3a01      	subs	r2, #1
 800fa92:	4c25      	ldr	r4, [pc, #148]	@ (800fb28 <__pow5mult+0xa8>)
 800fa94:	2300      	movs	r3, #0
 800fa96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa9a:	f7ff fe59 	bl	800f750 <__multadd>
 800fa9e:	4606      	mov	r6, r0
 800faa0:	10ad      	asrs	r5, r5, #2
 800faa2:	d03d      	beq.n	800fb20 <__pow5mult+0xa0>
 800faa4:	69fc      	ldr	r4, [r7, #28]
 800faa6:	b97c      	cbnz	r4, 800fac8 <__pow5mult+0x48>
 800faa8:	2010      	movs	r0, #16
 800faaa:	f7ff fc7b 	bl	800f3a4 <malloc>
 800faae:	4602      	mov	r2, r0
 800fab0:	61f8      	str	r0, [r7, #28]
 800fab2:	b928      	cbnz	r0, 800fac0 <__pow5mult+0x40>
 800fab4:	4b1d      	ldr	r3, [pc, #116]	@ (800fb2c <__pow5mult+0xac>)
 800fab6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800faba:	481d      	ldr	r0, [pc, #116]	@ (800fb30 <__pow5mult+0xb0>)
 800fabc:	f000 fb8a 	bl	80101d4 <__assert_func>
 800fac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fac4:	6004      	str	r4, [r0, #0]
 800fac6:	60c4      	str	r4, [r0, #12]
 800fac8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800facc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fad0:	b94c      	cbnz	r4, 800fae6 <__pow5mult+0x66>
 800fad2:	f240 2171 	movw	r1, #625	@ 0x271
 800fad6:	4638      	mov	r0, r7
 800fad8:	f7ff ff18 	bl	800f90c <__i2b>
 800fadc:	2300      	movs	r3, #0
 800fade:	4604      	mov	r4, r0
 800fae0:	f8c8 0008 	str.w	r0, [r8, #8]
 800fae4:	6003      	str	r3, [r0, #0]
 800fae6:	f04f 0900 	mov.w	r9, #0
 800faea:	07eb      	lsls	r3, r5, #31
 800faec:	d50a      	bpl.n	800fb04 <__pow5mult+0x84>
 800faee:	4631      	mov	r1, r6
 800faf0:	4622      	mov	r2, r4
 800faf2:	4638      	mov	r0, r7
 800faf4:	f7ff ff20 	bl	800f938 <__multiply>
 800faf8:	4680      	mov	r8, r0
 800fafa:	4631      	mov	r1, r6
 800fafc:	4638      	mov	r0, r7
 800fafe:	4646      	mov	r6, r8
 800fb00:	f7ff fe04 	bl	800f70c <_Bfree>
 800fb04:	106d      	asrs	r5, r5, #1
 800fb06:	d00b      	beq.n	800fb20 <__pow5mult+0xa0>
 800fb08:	6820      	ldr	r0, [r4, #0]
 800fb0a:	b938      	cbnz	r0, 800fb1c <__pow5mult+0x9c>
 800fb0c:	4622      	mov	r2, r4
 800fb0e:	4621      	mov	r1, r4
 800fb10:	4638      	mov	r0, r7
 800fb12:	f7ff ff11 	bl	800f938 <__multiply>
 800fb16:	6020      	str	r0, [r4, #0]
 800fb18:	f8c0 9000 	str.w	r9, [r0]
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	e7e4      	b.n	800faea <__pow5mult+0x6a>
 800fb20:	4630      	mov	r0, r6
 800fb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb26:	bf00      	nop
 800fb28:	08011104 	.word	0x08011104
 800fb2c:	08010e24 	.word	0x08010e24
 800fb30:	08010f15 	.word	0x08010f15

0800fb34 <__lshift>:
 800fb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb38:	460c      	mov	r4, r1
 800fb3a:	4607      	mov	r7, r0
 800fb3c:	4691      	mov	r9, r2
 800fb3e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb42:	6923      	ldr	r3, [r4, #16]
 800fb44:	6849      	ldr	r1, [r1, #4]
 800fb46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb4a:	68a3      	ldr	r3, [r4, #8]
 800fb4c:	f108 0601 	add.w	r6, r8, #1
 800fb50:	42b3      	cmp	r3, r6
 800fb52:	db0b      	blt.n	800fb6c <__lshift+0x38>
 800fb54:	4638      	mov	r0, r7
 800fb56:	f7ff fd99 	bl	800f68c <_Balloc>
 800fb5a:	4605      	mov	r5, r0
 800fb5c:	b948      	cbnz	r0, 800fb72 <__lshift+0x3e>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	4b28      	ldr	r3, [pc, #160]	@ (800fc04 <__lshift+0xd0>)
 800fb62:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fb66:	4828      	ldr	r0, [pc, #160]	@ (800fc08 <__lshift+0xd4>)
 800fb68:	f000 fb34 	bl	80101d4 <__assert_func>
 800fb6c:	3101      	adds	r1, #1
 800fb6e:	005b      	lsls	r3, r3, #1
 800fb70:	e7ee      	b.n	800fb50 <__lshift+0x1c>
 800fb72:	2300      	movs	r3, #0
 800fb74:	f100 0114 	add.w	r1, r0, #20
 800fb78:	f100 0210 	add.w	r2, r0, #16
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	4553      	cmp	r3, sl
 800fb80:	db33      	blt.n	800fbea <__lshift+0xb6>
 800fb82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb86:	f104 0314 	add.w	r3, r4, #20
 800fb8a:	6920      	ldr	r0, [r4, #16]
 800fb8c:	f019 091f 	ands.w	r9, r9, #31
 800fb90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb98:	d02b      	beq.n	800fbf2 <__lshift+0xbe>
 800fb9a:	f1c9 0e20 	rsb	lr, r9, #32
 800fb9e:	468a      	mov	sl, r1
 800fba0:	2200      	movs	r2, #0
 800fba2:	6818      	ldr	r0, [r3, #0]
 800fba4:	fa00 f009 	lsl.w	r0, r0, r9
 800fba8:	4310      	orrs	r0, r2
 800fbaa:	f84a 0b04 	str.w	r0, [sl], #4
 800fbae:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbb2:	459c      	cmp	ip, r3
 800fbb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800fbb8:	d8f3      	bhi.n	800fba2 <__lshift+0x6e>
 800fbba:	ebac 0304 	sub.w	r3, ip, r4
 800fbbe:	f104 0015 	add.w	r0, r4, #21
 800fbc2:	3b15      	subs	r3, #21
 800fbc4:	f023 0303 	bic.w	r3, r3, #3
 800fbc8:	3304      	adds	r3, #4
 800fbca:	4560      	cmp	r0, ip
 800fbcc:	bf88      	it	hi
 800fbce:	2304      	movhi	r3, #4
 800fbd0:	50ca      	str	r2, [r1, r3]
 800fbd2:	b10a      	cbz	r2, 800fbd8 <__lshift+0xa4>
 800fbd4:	f108 0602 	add.w	r6, r8, #2
 800fbd8:	3e01      	subs	r6, #1
 800fbda:	4638      	mov	r0, r7
 800fbdc:	4621      	mov	r1, r4
 800fbde:	612e      	str	r6, [r5, #16]
 800fbe0:	f7ff fd94 	bl	800f70c <_Bfree>
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbea:	3301      	adds	r3, #1
 800fbec:	f842 0f04 	str.w	r0, [r2, #4]!
 800fbf0:	e7c5      	b.n	800fb7e <__lshift+0x4a>
 800fbf2:	3904      	subs	r1, #4
 800fbf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbf8:	459c      	cmp	ip, r3
 800fbfa:	f841 2f04 	str.w	r2, [r1, #4]!
 800fbfe:	d8f9      	bhi.n	800fbf4 <__lshift+0xc0>
 800fc00:	e7ea      	b.n	800fbd8 <__lshift+0xa4>
 800fc02:	bf00      	nop
 800fc04:	08010e93 	.word	0x08010e93
 800fc08:	08010f15 	.word	0x08010f15

0800fc0c <__mcmp>:
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	690a      	ldr	r2, [r1, #16]
 800fc10:	6900      	ldr	r0, [r0, #16]
 800fc12:	1a80      	subs	r0, r0, r2
 800fc14:	b530      	push	{r4, r5, lr}
 800fc16:	d10e      	bne.n	800fc36 <__mcmp+0x2a>
 800fc18:	3314      	adds	r3, #20
 800fc1a:	3114      	adds	r1, #20
 800fc1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fc20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fc24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fc2c:	4295      	cmp	r5, r2
 800fc2e:	d003      	beq.n	800fc38 <__mcmp+0x2c>
 800fc30:	d205      	bcs.n	800fc3e <__mcmp+0x32>
 800fc32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc36:	bd30      	pop	{r4, r5, pc}
 800fc38:	42a3      	cmp	r3, r4
 800fc3a:	d3f3      	bcc.n	800fc24 <__mcmp+0x18>
 800fc3c:	e7fb      	b.n	800fc36 <__mcmp+0x2a>
 800fc3e:	2001      	movs	r0, #1
 800fc40:	e7f9      	b.n	800fc36 <__mcmp+0x2a>
	...

0800fc44 <__mdiff>:
 800fc44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc48:	4689      	mov	r9, r1
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	4611      	mov	r1, r2
 800fc4e:	4614      	mov	r4, r2
 800fc50:	4648      	mov	r0, r9
 800fc52:	f7ff ffdb 	bl	800fc0c <__mcmp>
 800fc56:	1e05      	subs	r5, r0, #0
 800fc58:	d112      	bne.n	800fc80 <__mdiff+0x3c>
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	4630      	mov	r0, r6
 800fc5e:	f7ff fd15 	bl	800f68c <_Balloc>
 800fc62:	4602      	mov	r2, r0
 800fc64:	b928      	cbnz	r0, 800fc72 <__mdiff+0x2e>
 800fc66:	4b41      	ldr	r3, [pc, #260]	@ (800fd6c <__mdiff+0x128>)
 800fc68:	f240 2137 	movw	r1, #567	@ 0x237
 800fc6c:	4840      	ldr	r0, [pc, #256]	@ (800fd70 <__mdiff+0x12c>)
 800fc6e:	f000 fab1 	bl	80101d4 <__assert_func>
 800fc72:	2301      	movs	r3, #1
 800fc74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc78:	4610      	mov	r0, r2
 800fc7a:	b003      	add	sp, #12
 800fc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc80:	bfbc      	itt	lt
 800fc82:	464b      	movlt	r3, r9
 800fc84:	46a1      	movlt	r9, r4
 800fc86:	4630      	mov	r0, r6
 800fc88:	bfb8      	it	lt
 800fc8a:	2501      	movlt	r5, #1
 800fc8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fc90:	bfb4      	ite	lt
 800fc92:	461c      	movlt	r4, r3
 800fc94:	2500      	movge	r5, #0
 800fc96:	f7ff fcf9 	bl	800f68c <_Balloc>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	b918      	cbnz	r0, 800fca6 <__mdiff+0x62>
 800fc9e:	4b33      	ldr	r3, [pc, #204]	@ (800fd6c <__mdiff+0x128>)
 800fca0:	f240 2145 	movw	r1, #581	@ 0x245
 800fca4:	e7e2      	b.n	800fc6c <__mdiff+0x28>
 800fca6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fcaa:	f104 0e14 	add.w	lr, r4, #20
 800fcae:	6926      	ldr	r6, [r4, #16]
 800fcb0:	f100 0b14 	add.w	fp, r0, #20
 800fcb4:	60c5      	str	r5, [r0, #12]
 800fcb6:	f109 0514 	add.w	r5, r9, #20
 800fcba:	f109 0310 	add.w	r3, r9, #16
 800fcbe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fcc2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fcc6:	46d9      	mov	r9, fp
 800fcc8:	f04f 0c00 	mov.w	ip, #0
 800fccc:	9301      	str	r3, [sp, #4]
 800fcce:	9b01      	ldr	r3, [sp, #4]
 800fcd0:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fcd4:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fcd8:	4576      	cmp	r6, lr
 800fcda:	9301      	str	r3, [sp, #4]
 800fcdc:	fa1f f38a 	uxth.w	r3, sl
 800fce0:	4619      	mov	r1, r3
 800fce2:	b283      	uxth	r3, r0
 800fce4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800fce8:	eba1 0303 	sub.w	r3, r1, r3
 800fcec:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fcf0:	4463      	add	r3, ip
 800fcf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fcfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fd00:	f849 3b04 	str.w	r3, [r9], #4
 800fd04:	d8e3      	bhi.n	800fcce <__mdiff+0x8a>
 800fd06:	1b33      	subs	r3, r6, r4
 800fd08:	3415      	adds	r4, #21
 800fd0a:	3b15      	subs	r3, #21
 800fd0c:	f023 0303 	bic.w	r3, r3, #3
 800fd10:	3304      	adds	r3, #4
 800fd12:	42a6      	cmp	r6, r4
 800fd14:	bf38      	it	cc
 800fd16:	2304      	movcc	r3, #4
 800fd18:	441d      	add	r5, r3
 800fd1a:	445b      	add	r3, fp
 800fd1c:	462c      	mov	r4, r5
 800fd1e:	461e      	mov	r6, r3
 800fd20:	4544      	cmp	r4, r8
 800fd22:	d30e      	bcc.n	800fd42 <__mdiff+0xfe>
 800fd24:	f108 0103 	add.w	r1, r8, #3
 800fd28:	1b49      	subs	r1, r1, r5
 800fd2a:	3d03      	subs	r5, #3
 800fd2c:	f021 0103 	bic.w	r1, r1, #3
 800fd30:	45a8      	cmp	r8, r5
 800fd32:	bf38      	it	cc
 800fd34:	2100      	movcc	r1, #0
 800fd36:	440b      	add	r3, r1
 800fd38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd3c:	b199      	cbz	r1, 800fd66 <__mdiff+0x122>
 800fd3e:	6117      	str	r7, [r2, #16]
 800fd40:	e79a      	b.n	800fc78 <__mdiff+0x34>
 800fd42:	f854 1b04 	ldr.w	r1, [r4], #4
 800fd46:	46e6      	mov	lr, ip
 800fd48:	fa1f fc81 	uxth.w	ip, r1
 800fd4c:	0c08      	lsrs	r0, r1, #16
 800fd4e:	4471      	add	r1, lr
 800fd50:	44f4      	add	ip, lr
 800fd52:	b289      	uxth	r1, r1
 800fd54:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fd58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fd5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd60:	f846 1b04 	str.w	r1, [r6], #4
 800fd64:	e7dc      	b.n	800fd20 <__mdiff+0xdc>
 800fd66:	3f01      	subs	r7, #1
 800fd68:	e7e6      	b.n	800fd38 <__mdiff+0xf4>
 800fd6a:	bf00      	nop
 800fd6c:	08010e93 	.word	0x08010e93
 800fd70:	08010f15 	.word	0x08010f15

0800fd74 <__ulp>:
 800fd74:	b082      	sub	sp, #8
 800fd76:	4b11      	ldr	r3, [pc, #68]	@ (800fdbc <__ulp+0x48>)
 800fd78:	ed8d 0b00 	vstr	d0, [sp]
 800fd7c:	9a01      	ldr	r2, [sp, #4]
 800fd7e:	4013      	ands	r3, r2
 800fd80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	dc08      	bgt.n	800fd9a <__ulp+0x26>
 800fd88:	425b      	negs	r3, r3
 800fd8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fd8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fd92:	da04      	bge.n	800fd9e <__ulp+0x2a>
 800fd94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fd98:	4113      	asrs	r3, r2
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	e008      	b.n	800fdb0 <__ulp+0x3c>
 800fd9e:	f1a2 0314 	sub.w	r3, r2, #20
 800fda2:	2b1e      	cmp	r3, #30
 800fda4:	bfd6      	itet	le
 800fda6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fdaa:	2201      	movgt	r2, #1
 800fdac:	40da      	lsrle	r2, r3
 800fdae:	2300      	movs	r3, #0
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	4610      	mov	r0, r2
 800fdb4:	ec41 0b10 	vmov	d0, r0, r1
 800fdb8:	b002      	add	sp, #8
 800fdba:	4770      	bx	lr
 800fdbc:	7ff00000 	.word	0x7ff00000

0800fdc0 <__b2d>:
 800fdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc4:	6906      	ldr	r6, [r0, #16]
 800fdc6:	f100 0814 	add.w	r8, r0, #20
 800fdca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fdce:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fdd2:	1f37      	subs	r7, r6, #4
 800fdd4:	4610      	mov	r0, r2
 800fdd6:	f7ff fd4d 	bl	800f874 <__hi0bits>
 800fdda:	f1c0 0320 	rsb	r3, r0, #32
 800fdde:	280a      	cmp	r0, #10
 800fde0:	600b      	str	r3, [r1, #0]
 800fde2:	491d      	ldr	r1, [pc, #116]	@ (800fe58 <__b2d+0x98>)
 800fde4:	dc16      	bgt.n	800fe14 <__b2d+0x54>
 800fde6:	f1c0 0c0b 	rsb	ip, r0, #11
 800fdea:	45b8      	cmp	r8, r7
 800fdec:	f100 0015 	add.w	r0, r0, #21
 800fdf0:	fa22 f30c 	lsr.w	r3, r2, ip
 800fdf4:	fa02 f000 	lsl.w	r0, r2, r0
 800fdf8:	ea43 0501 	orr.w	r5, r3, r1
 800fdfc:	bf34      	ite	cc
 800fdfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fe02:	2300      	movcs	r3, #0
 800fe04:	fa23 f30c 	lsr.w	r3, r3, ip
 800fe08:	4303      	orrs	r3, r0
 800fe0a:	461c      	mov	r4, r3
 800fe0c:	ec45 4b10 	vmov	d0, r4, r5
 800fe10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe14:	45b8      	cmp	r8, r7
 800fe16:	bf3a      	itte	cc
 800fe18:	f1a6 0708 	subcc.w	r7, r6, #8
 800fe1c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fe20:	2300      	movcs	r3, #0
 800fe22:	380b      	subs	r0, #11
 800fe24:	d014      	beq.n	800fe50 <__b2d+0x90>
 800fe26:	f1c0 0120 	rsb	r1, r0, #32
 800fe2a:	4082      	lsls	r2, r0
 800fe2c:	4547      	cmp	r7, r8
 800fe2e:	fa23 f401 	lsr.w	r4, r3, r1
 800fe32:	fa03 f300 	lsl.w	r3, r3, r0
 800fe36:	ea42 0204 	orr.w	r2, r2, r4
 800fe3a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fe3e:	bf8c      	ite	hi
 800fe40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fe44:	2200      	movls	r2, #0
 800fe46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fe4a:	40ca      	lsrs	r2, r1
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	e7dc      	b.n	800fe0a <__b2d+0x4a>
 800fe50:	ea42 0501 	orr.w	r5, r2, r1
 800fe54:	e7d9      	b.n	800fe0a <__b2d+0x4a>
 800fe56:	bf00      	nop
 800fe58:	3ff00000 	.word	0x3ff00000

0800fe5c <__d2b>:
 800fe5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe60:	460f      	mov	r7, r1
 800fe62:	2101      	movs	r1, #1
 800fe64:	4616      	mov	r6, r2
 800fe66:	ec59 8b10 	vmov	r8, r9, d0
 800fe6a:	f7ff fc0f 	bl	800f68c <_Balloc>
 800fe6e:	4604      	mov	r4, r0
 800fe70:	b930      	cbnz	r0, 800fe80 <__d2b+0x24>
 800fe72:	4602      	mov	r2, r0
 800fe74:	4b23      	ldr	r3, [pc, #140]	@ (800ff04 <__d2b+0xa8>)
 800fe76:	f240 310f 	movw	r1, #783	@ 0x30f
 800fe7a:	4823      	ldr	r0, [pc, #140]	@ (800ff08 <__d2b+0xac>)
 800fe7c:	f000 f9aa 	bl	80101d4 <__assert_func>
 800fe80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fe84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe88:	b10d      	cbz	r5, 800fe8e <__d2b+0x32>
 800fe8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fe8e:	9301      	str	r3, [sp, #4]
 800fe90:	f1b8 0300 	subs.w	r3, r8, #0
 800fe94:	d023      	beq.n	800fede <__d2b+0x82>
 800fe96:	4668      	mov	r0, sp
 800fe98:	9300      	str	r3, [sp, #0]
 800fe9a:	f7ff fd0a 	bl	800f8b2 <__lo0bits>
 800fe9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fea2:	b1d0      	cbz	r0, 800feda <__d2b+0x7e>
 800fea4:	f1c0 0320 	rsb	r3, r0, #32
 800fea8:	fa02 f303 	lsl.w	r3, r2, r3
 800feac:	40c2      	lsrs	r2, r0
 800feae:	430b      	orrs	r3, r1
 800feb0:	9201      	str	r2, [sp, #4]
 800feb2:	6163      	str	r3, [r4, #20]
 800feb4:	9b01      	ldr	r3, [sp, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	61a3      	str	r3, [r4, #24]
 800feba:	bf0c      	ite	eq
 800febc:	2201      	moveq	r2, #1
 800febe:	2202      	movne	r2, #2
 800fec0:	6122      	str	r2, [r4, #16]
 800fec2:	b1a5      	cbz	r5, 800feee <__d2b+0x92>
 800fec4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fec8:	4405      	add	r5, r0
 800feca:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fece:	603d      	str	r5, [r7, #0]
 800fed0:	6030      	str	r0, [r6, #0]
 800fed2:	4620      	mov	r0, r4
 800fed4:	b003      	add	sp, #12
 800fed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feda:	6161      	str	r1, [r4, #20]
 800fedc:	e7ea      	b.n	800feb4 <__d2b+0x58>
 800fede:	a801      	add	r0, sp, #4
 800fee0:	f7ff fce7 	bl	800f8b2 <__lo0bits>
 800fee4:	9b01      	ldr	r3, [sp, #4]
 800fee6:	3020      	adds	r0, #32
 800fee8:	2201      	movs	r2, #1
 800feea:	6163      	str	r3, [r4, #20]
 800feec:	e7e8      	b.n	800fec0 <__d2b+0x64>
 800feee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fef2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fef6:	6038      	str	r0, [r7, #0]
 800fef8:	6918      	ldr	r0, [r3, #16]
 800fefa:	f7ff fcbb 	bl	800f874 <__hi0bits>
 800fefe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff02:	e7e5      	b.n	800fed0 <__d2b+0x74>
 800ff04:	08010e93 	.word	0x08010e93
 800ff08:	08010f15 	.word	0x08010f15

0800ff0c <__ratio>:
 800ff0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff10:	b085      	sub	sp, #20
 800ff12:	e9cd 1000 	strd	r1, r0, [sp]
 800ff16:	a902      	add	r1, sp, #8
 800ff18:	f7ff ff52 	bl	800fdc0 <__b2d>
 800ff1c:	a903      	add	r1, sp, #12
 800ff1e:	9800      	ldr	r0, [sp, #0]
 800ff20:	ec55 4b10 	vmov	r4, r5, d0
 800ff24:	f7ff ff4c 	bl	800fdc0 <__b2d>
 800ff28:	9b01      	ldr	r3, [sp, #4]
 800ff2a:	462f      	mov	r7, r5
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	6919      	ldr	r1, [r3, #16]
 800ff30:	9b00      	ldr	r3, [sp, #0]
 800ff32:	691b      	ldr	r3, [r3, #16]
 800ff34:	1ac9      	subs	r1, r1, r3
 800ff36:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ff3a:	ec5b ab10 	vmov	sl, fp, d0
 800ff3e:	1a9b      	subs	r3, r3, r2
 800ff40:	46d9      	mov	r9, fp
 800ff42:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	bfcd      	iteet	gt
 800ff4a:	462a      	movgt	r2, r5
 800ff4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ff50:	465a      	movle	r2, fp
 800ff52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ff56:	bfd8      	it	le
 800ff58:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ff5c:	4652      	mov	r2, sl
 800ff5e:	4639      	mov	r1, r7
 800ff60:	464b      	mov	r3, r9
 800ff62:	f7f0 fc83 	bl	800086c <__aeabi_ddiv>
 800ff66:	ec41 0b10 	vmov	d0, r0, r1
 800ff6a:	b005      	add	sp, #20
 800ff6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff70 <__copybits>:
 800ff70:	3901      	subs	r1, #1
 800ff72:	f102 0314 	add.w	r3, r2, #20
 800ff76:	1149      	asrs	r1, r1, #5
 800ff78:	b570      	push	{r4, r5, r6, lr}
 800ff7a:	3101      	adds	r1, #1
 800ff7c:	6914      	ldr	r4, [r2, #16]
 800ff7e:	1f05      	subs	r5, r0, #4
 800ff80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ff84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ff88:	42a3      	cmp	r3, r4
 800ff8a:	d30c      	bcc.n	800ffa6 <__copybits+0x36>
 800ff8c:	1aa3      	subs	r3, r4, r2
 800ff8e:	3211      	adds	r2, #17
 800ff90:	3b11      	subs	r3, #17
 800ff92:	f023 0303 	bic.w	r3, r3, #3
 800ff96:	42a2      	cmp	r2, r4
 800ff98:	bf88      	it	hi
 800ff9a:	2300      	movhi	r3, #0
 800ff9c:	4418      	add	r0, r3
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	4288      	cmp	r0, r1
 800ffa2:	d305      	bcc.n	800ffb0 <__copybits+0x40>
 800ffa4:	bd70      	pop	{r4, r5, r6, pc}
 800ffa6:	f853 6b04 	ldr.w	r6, [r3], #4
 800ffaa:	f845 6f04 	str.w	r6, [r5, #4]!
 800ffae:	e7eb      	b.n	800ff88 <__copybits+0x18>
 800ffb0:	f840 3b04 	str.w	r3, [r0], #4
 800ffb4:	e7f4      	b.n	800ffa0 <__copybits+0x30>

0800ffb6 <__any_on>:
 800ffb6:	f100 0214 	add.w	r2, r0, #20
 800ffba:	114b      	asrs	r3, r1, #5
 800ffbc:	6900      	ldr	r0, [r0, #16]
 800ffbe:	4298      	cmp	r0, r3
 800ffc0:	b510      	push	{r4, lr}
 800ffc2:	db11      	blt.n	800ffe8 <__any_on+0x32>
 800ffc4:	dd0a      	ble.n	800ffdc <__any_on+0x26>
 800ffc6:	f011 011f 	ands.w	r1, r1, #31
 800ffca:	d007      	beq.n	800ffdc <__any_on+0x26>
 800ffcc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ffd0:	fa24 f001 	lsr.w	r0, r4, r1
 800ffd4:	fa00 f101 	lsl.w	r1, r0, r1
 800ffd8:	428c      	cmp	r4, r1
 800ffda:	d10b      	bne.n	800fff4 <__any_on+0x3e>
 800ffdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	d803      	bhi.n	800ffec <__any_on+0x36>
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	bd10      	pop	{r4, pc}
 800ffe8:	4603      	mov	r3, r0
 800ffea:	e7f7      	b.n	800ffdc <__any_on+0x26>
 800ffec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fff0:	2900      	cmp	r1, #0
 800fff2:	d0f5      	beq.n	800ffe0 <__any_on+0x2a>
 800fff4:	2001      	movs	r0, #1
 800fff6:	e7f6      	b.n	800ffe6 <__any_on+0x30>

0800fff8 <__sread>:
 800fff8:	b510      	push	{r4, lr}
 800fffa:	460c      	mov	r4, r1
 800fffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010000:	f000 f8a4 	bl	801014c <_read_r>
 8010004:	2800      	cmp	r0, #0
 8010006:	bfab      	itete	ge
 8010008:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801000a:	89a3      	ldrhlt	r3, [r4, #12]
 801000c:	181b      	addge	r3, r3, r0
 801000e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010012:	bfac      	ite	ge
 8010014:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010016:	81a3      	strhlt	r3, [r4, #12]
 8010018:	bd10      	pop	{r4, pc}

0801001a <__swrite>:
 801001a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801001e:	461f      	mov	r7, r3
 8010020:	898b      	ldrh	r3, [r1, #12]
 8010022:	4605      	mov	r5, r0
 8010024:	460c      	mov	r4, r1
 8010026:	05db      	lsls	r3, r3, #23
 8010028:	4616      	mov	r6, r2
 801002a:	d505      	bpl.n	8010038 <__swrite+0x1e>
 801002c:	2302      	movs	r3, #2
 801002e:	2200      	movs	r2, #0
 8010030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010034:	f000 f878 	bl	8010128 <_lseek_r>
 8010038:	89a3      	ldrh	r3, [r4, #12]
 801003a:	4632      	mov	r2, r6
 801003c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010040:	4628      	mov	r0, r5
 8010042:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010046:	81a3      	strh	r3, [r4, #12]
 8010048:	463b      	mov	r3, r7
 801004a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801004e:	f000 b89f 	b.w	8010190 <_write_r>

08010052 <__sseek>:
 8010052:	b510      	push	{r4, lr}
 8010054:	460c      	mov	r4, r1
 8010056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801005a:	f000 f865 	bl	8010128 <_lseek_r>
 801005e:	1c43      	adds	r3, r0, #1
 8010060:	89a3      	ldrh	r3, [r4, #12]
 8010062:	bf15      	itete	ne
 8010064:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010066:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801006a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801006e:	81a3      	strheq	r3, [r4, #12]
 8010070:	bf18      	it	ne
 8010072:	81a3      	strhne	r3, [r4, #12]
 8010074:	bd10      	pop	{r4, pc}

08010076 <__sclose>:
 8010076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801007a:	f000 b89b 	b.w	80101b4 <_close_r>

0801007e <_realloc_r>:
 801007e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010082:	4607      	mov	r7, r0
 8010084:	4614      	mov	r4, r2
 8010086:	460d      	mov	r5, r1
 8010088:	b921      	cbnz	r1, 8010094 <_realloc_r+0x16>
 801008a:	4611      	mov	r1, r2
 801008c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010090:	f7ff b9b2 	b.w	800f3f8 <_malloc_r>
 8010094:	b92a      	cbnz	r2, 80100a2 <_realloc_r+0x24>
 8010096:	4625      	mov	r5, r4
 8010098:	f000 f8ce 	bl	8010238 <_free_r>
 801009c:	4628      	mov	r0, r5
 801009e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100a2:	f000 f913 	bl	80102cc <_malloc_usable_size_r>
 80100a6:	4284      	cmp	r4, r0
 80100a8:	4606      	mov	r6, r0
 80100aa:	d802      	bhi.n	80100b2 <_realloc_r+0x34>
 80100ac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80100b0:	d8f4      	bhi.n	801009c <_realloc_r+0x1e>
 80100b2:	4621      	mov	r1, r4
 80100b4:	4638      	mov	r0, r7
 80100b6:	f7ff f99f 	bl	800f3f8 <_malloc_r>
 80100ba:	4680      	mov	r8, r0
 80100bc:	b908      	cbnz	r0, 80100c2 <_realloc_r+0x44>
 80100be:	4645      	mov	r5, r8
 80100c0:	e7ec      	b.n	801009c <_realloc_r+0x1e>
 80100c2:	42b4      	cmp	r4, r6
 80100c4:	4622      	mov	r2, r4
 80100c6:	4629      	mov	r1, r5
 80100c8:	bf28      	it	cs
 80100ca:	4632      	movcs	r2, r6
 80100cc:	f7fd fe62 	bl	800dd94 <memcpy>
 80100d0:	4629      	mov	r1, r5
 80100d2:	4638      	mov	r0, r7
 80100d4:	f000 f8b0 	bl	8010238 <_free_r>
 80100d8:	e7f1      	b.n	80100be <_realloc_r+0x40>

080100da <__ascii_wctomb>:
 80100da:	4603      	mov	r3, r0
 80100dc:	4608      	mov	r0, r1
 80100de:	b141      	cbz	r1, 80100f2 <__ascii_wctomb+0x18>
 80100e0:	2aff      	cmp	r2, #255	@ 0xff
 80100e2:	d904      	bls.n	80100ee <__ascii_wctomb+0x14>
 80100e4:	228a      	movs	r2, #138	@ 0x8a
 80100e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80100ea:	601a      	str	r2, [r3, #0]
 80100ec:	4770      	bx	lr
 80100ee:	2001      	movs	r0, #1
 80100f0:	700a      	strb	r2, [r1, #0]
 80100f2:	4770      	bx	lr

080100f4 <memmove>:
 80100f4:	4288      	cmp	r0, r1
 80100f6:	b510      	push	{r4, lr}
 80100f8:	eb01 0402 	add.w	r4, r1, r2
 80100fc:	d902      	bls.n	8010104 <memmove+0x10>
 80100fe:	4284      	cmp	r4, r0
 8010100:	4623      	mov	r3, r4
 8010102:	d807      	bhi.n	8010114 <memmove+0x20>
 8010104:	1e43      	subs	r3, r0, #1
 8010106:	42a1      	cmp	r1, r4
 8010108:	d008      	beq.n	801011c <memmove+0x28>
 801010a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801010e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010112:	e7f8      	b.n	8010106 <memmove+0x12>
 8010114:	4402      	add	r2, r0
 8010116:	4601      	mov	r1, r0
 8010118:	428a      	cmp	r2, r1
 801011a:	d100      	bne.n	801011e <memmove+0x2a>
 801011c:	bd10      	pop	{r4, pc}
 801011e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010126:	e7f7      	b.n	8010118 <memmove+0x24>

08010128 <_lseek_r>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	4604      	mov	r4, r0
 801012c:	4d06      	ldr	r5, [pc, #24]	@ (8010148 <_lseek_r+0x20>)
 801012e:	4608      	mov	r0, r1
 8010130:	4611      	mov	r1, r2
 8010132:	2200      	movs	r2, #0
 8010134:	602a      	str	r2, [r5, #0]
 8010136:	461a      	mov	r2, r3
 8010138:	f7f3 fc7d 	bl	8003a36 <_lseek>
 801013c:	1c43      	adds	r3, r0, #1
 801013e:	d102      	bne.n	8010146 <_lseek_r+0x1e>
 8010140:	682b      	ldr	r3, [r5, #0]
 8010142:	b103      	cbz	r3, 8010146 <_lseek_r+0x1e>
 8010144:	6023      	str	r3, [r4, #0]
 8010146:	bd38      	pop	{r3, r4, r5, pc}
 8010148:	20000580 	.word	0x20000580

0801014c <_read_r>:
 801014c:	b538      	push	{r3, r4, r5, lr}
 801014e:	4604      	mov	r4, r0
 8010150:	4d06      	ldr	r5, [pc, #24]	@ (801016c <_read_r+0x20>)
 8010152:	4608      	mov	r0, r1
 8010154:	4611      	mov	r1, r2
 8010156:	2200      	movs	r2, #0
 8010158:	602a      	str	r2, [r5, #0]
 801015a:	461a      	mov	r2, r3
 801015c:	f7f3 fc0b 	bl	8003976 <_read>
 8010160:	1c43      	adds	r3, r0, #1
 8010162:	d102      	bne.n	801016a <_read_r+0x1e>
 8010164:	682b      	ldr	r3, [r5, #0]
 8010166:	b103      	cbz	r3, 801016a <_read_r+0x1e>
 8010168:	6023      	str	r3, [r4, #0]
 801016a:	bd38      	pop	{r3, r4, r5, pc}
 801016c:	20000580 	.word	0x20000580

08010170 <_sbrk_r>:
 8010170:	b538      	push	{r3, r4, r5, lr}
 8010172:	2300      	movs	r3, #0
 8010174:	4d05      	ldr	r5, [pc, #20]	@ (801018c <_sbrk_r+0x1c>)
 8010176:	4604      	mov	r4, r0
 8010178:	4608      	mov	r0, r1
 801017a:	602b      	str	r3, [r5, #0]
 801017c:	f7f3 fc68 	bl	8003a50 <_sbrk>
 8010180:	1c43      	adds	r3, r0, #1
 8010182:	d102      	bne.n	801018a <_sbrk_r+0x1a>
 8010184:	682b      	ldr	r3, [r5, #0]
 8010186:	b103      	cbz	r3, 801018a <_sbrk_r+0x1a>
 8010188:	6023      	str	r3, [r4, #0]
 801018a:	bd38      	pop	{r3, r4, r5, pc}
 801018c:	20000580 	.word	0x20000580

08010190 <_write_r>:
 8010190:	b538      	push	{r3, r4, r5, lr}
 8010192:	4604      	mov	r4, r0
 8010194:	4d06      	ldr	r5, [pc, #24]	@ (80101b0 <_write_r+0x20>)
 8010196:	4608      	mov	r0, r1
 8010198:	4611      	mov	r1, r2
 801019a:	2200      	movs	r2, #0
 801019c:	602a      	str	r2, [r5, #0]
 801019e:	461a      	mov	r2, r3
 80101a0:	f7f3 fc06 	bl	80039b0 <_write>
 80101a4:	1c43      	adds	r3, r0, #1
 80101a6:	d102      	bne.n	80101ae <_write_r+0x1e>
 80101a8:	682b      	ldr	r3, [r5, #0]
 80101aa:	b103      	cbz	r3, 80101ae <_write_r+0x1e>
 80101ac:	6023      	str	r3, [r4, #0]
 80101ae:	bd38      	pop	{r3, r4, r5, pc}
 80101b0:	20000580 	.word	0x20000580

080101b4 <_close_r>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	2300      	movs	r3, #0
 80101b8:	4d05      	ldr	r5, [pc, #20]	@ (80101d0 <_close_r+0x1c>)
 80101ba:	4604      	mov	r4, r0
 80101bc:	4608      	mov	r0, r1
 80101be:	602b      	str	r3, [r5, #0]
 80101c0:	f7f3 fc12 	bl	80039e8 <_close>
 80101c4:	1c43      	adds	r3, r0, #1
 80101c6:	d102      	bne.n	80101ce <_close_r+0x1a>
 80101c8:	682b      	ldr	r3, [r5, #0]
 80101ca:	b103      	cbz	r3, 80101ce <_close_r+0x1a>
 80101cc:	6023      	str	r3, [r4, #0]
 80101ce:	bd38      	pop	{r3, r4, r5, pc}
 80101d0:	20000580 	.word	0x20000580

080101d4 <__assert_func>:
 80101d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101d6:	4614      	mov	r4, r2
 80101d8:	461a      	mov	r2, r3
 80101da:	4b09      	ldr	r3, [pc, #36]	@ (8010200 <__assert_func+0x2c>)
 80101dc:	4605      	mov	r5, r0
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	68d8      	ldr	r0, [r3, #12]
 80101e2:	b14c      	cbz	r4, 80101f8 <__assert_func+0x24>
 80101e4:	4b07      	ldr	r3, [pc, #28]	@ (8010204 <__assert_func+0x30>)
 80101e6:	9100      	str	r1, [sp, #0]
 80101e8:	4907      	ldr	r1, [pc, #28]	@ (8010208 <__assert_func+0x34>)
 80101ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80101ee:	462b      	mov	r3, r5
 80101f0:	f000 f874 	bl	80102dc <fiprintf>
 80101f4:	f000 f884 	bl	8010300 <abort>
 80101f8:	4b04      	ldr	r3, [pc, #16]	@ (801020c <__assert_func+0x38>)
 80101fa:	461c      	mov	r4, r3
 80101fc:	e7f3      	b.n	80101e6 <__assert_func+0x12>
 80101fe:	bf00      	nop
 8010200:	2000019c 	.word	0x2000019c
 8010204:	08010f6e 	.word	0x08010f6e
 8010208:	08010f7b 	.word	0x08010f7b
 801020c:	08010fa9 	.word	0x08010fa9

08010210 <_calloc_r>:
 8010210:	b570      	push	{r4, r5, r6, lr}
 8010212:	fba1 5402 	umull	r5, r4, r1, r2
 8010216:	b934      	cbnz	r4, 8010226 <_calloc_r+0x16>
 8010218:	4629      	mov	r1, r5
 801021a:	f7ff f8ed 	bl	800f3f8 <_malloc_r>
 801021e:	4606      	mov	r6, r0
 8010220:	b928      	cbnz	r0, 801022e <_calloc_r+0x1e>
 8010222:	4630      	mov	r0, r6
 8010224:	bd70      	pop	{r4, r5, r6, pc}
 8010226:	220c      	movs	r2, #12
 8010228:	2600      	movs	r6, #0
 801022a:	6002      	str	r2, [r0, #0]
 801022c:	e7f9      	b.n	8010222 <_calloc_r+0x12>
 801022e:	462a      	mov	r2, r5
 8010230:	4621      	mov	r1, r4
 8010232:	f7fd fd55 	bl	800dce0 <memset>
 8010236:	e7f4      	b.n	8010222 <_calloc_r+0x12>

08010238 <_free_r>:
 8010238:	b538      	push	{r3, r4, r5, lr}
 801023a:	4605      	mov	r5, r0
 801023c:	2900      	cmp	r1, #0
 801023e:	d041      	beq.n	80102c4 <_free_r+0x8c>
 8010240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010244:	1f0c      	subs	r4, r1, #4
 8010246:	2b00      	cmp	r3, #0
 8010248:	bfb8      	it	lt
 801024a:	18e4      	addlt	r4, r4, r3
 801024c:	f7ff fa12 	bl	800f674 <__malloc_lock>
 8010250:	4a1d      	ldr	r2, [pc, #116]	@ (80102c8 <_free_r+0x90>)
 8010252:	6813      	ldr	r3, [r2, #0]
 8010254:	b933      	cbnz	r3, 8010264 <_free_r+0x2c>
 8010256:	6063      	str	r3, [r4, #4]
 8010258:	6014      	str	r4, [r2, #0]
 801025a:	4628      	mov	r0, r5
 801025c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010260:	f7ff ba0e 	b.w	800f680 <__malloc_unlock>
 8010264:	42a3      	cmp	r3, r4
 8010266:	d908      	bls.n	801027a <_free_r+0x42>
 8010268:	6820      	ldr	r0, [r4, #0]
 801026a:	1821      	adds	r1, r4, r0
 801026c:	428b      	cmp	r3, r1
 801026e:	bf01      	itttt	eq
 8010270:	6819      	ldreq	r1, [r3, #0]
 8010272:	685b      	ldreq	r3, [r3, #4]
 8010274:	1809      	addeq	r1, r1, r0
 8010276:	6021      	streq	r1, [r4, #0]
 8010278:	e7ed      	b.n	8010256 <_free_r+0x1e>
 801027a:	461a      	mov	r2, r3
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	b10b      	cbz	r3, 8010284 <_free_r+0x4c>
 8010280:	42a3      	cmp	r3, r4
 8010282:	d9fa      	bls.n	801027a <_free_r+0x42>
 8010284:	6811      	ldr	r1, [r2, #0]
 8010286:	1850      	adds	r0, r2, r1
 8010288:	42a0      	cmp	r0, r4
 801028a:	d10b      	bne.n	80102a4 <_free_r+0x6c>
 801028c:	6820      	ldr	r0, [r4, #0]
 801028e:	4401      	add	r1, r0
 8010290:	1850      	adds	r0, r2, r1
 8010292:	6011      	str	r1, [r2, #0]
 8010294:	4283      	cmp	r3, r0
 8010296:	d1e0      	bne.n	801025a <_free_r+0x22>
 8010298:	6818      	ldr	r0, [r3, #0]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	4408      	add	r0, r1
 801029e:	6053      	str	r3, [r2, #4]
 80102a0:	6010      	str	r0, [r2, #0]
 80102a2:	e7da      	b.n	801025a <_free_r+0x22>
 80102a4:	d902      	bls.n	80102ac <_free_r+0x74>
 80102a6:	230c      	movs	r3, #12
 80102a8:	602b      	str	r3, [r5, #0]
 80102aa:	e7d6      	b.n	801025a <_free_r+0x22>
 80102ac:	6820      	ldr	r0, [r4, #0]
 80102ae:	1821      	adds	r1, r4, r0
 80102b0:	428b      	cmp	r3, r1
 80102b2:	bf02      	ittt	eq
 80102b4:	6819      	ldreq	r1, [r3, #0]
 80102b6:	685b      	ldreq	r3, [r3, #4]
 80102b8:	1809      	addeq	r1, r1, r0
 80102ba:	6063      	str	r3, [r4, #4]
 80102bc:	bf08      	it	eq
 80102be:	6021      	streq	r1, [r4, #0]
 80102c0:	6054      	str	r4, [r2, #4]
 80102c2:	e7ca      	b.n	801025a <_free_r+0x22>
 80102c4:	bd38      	pop	{r3, r4, r5, pc}
 80102c6:	bf00      	nop
 80102c8:	2000057c 	.word	0x2000057c

080102cc <_malloc_usable_size_r>:
 80102cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102d0:	1f18      	subs	r0, r3, #4
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	bfbc      	itt	lt
 80102d6:	580b      	ldrlt	r3, [r1, r0]
 80102d8:	18c0      	addlt	r0, r0, r3
 80102da:	4770      	bx	lr

080102dc <fiprintf>:
 80102dc:	b40e      	push	{r1, r2, r3}
 80102de:	b503      	push	{r0, r1, lr}
 80102e0:	ab03      	add	r3, sp, #12
 80102e2:	4601      	mov	r1, r0
 80102e4:	4805      	ldr	r0, [pc, #20]	@ (80102fc <fiprintf+0x20>)
 80102e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80102ea:	6800      	ldr	r0, [r0, #0]
 80102ec:	9301      	str	r3, [sp, #4]
 80102ee:	f000 f837 	bl	8010360 <_vfiprintf_r>
 80102f2:	b002      	add	sp, #8
 80102f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80102f8:	b003      	add	sp, #12
 80102fa:	4770      	bx	lr
 80102fc:	2000019c 	.word	0x2000019c

08010300 <abort>:
 8010300:	2006      	movs	r0, #6
 8010302:	b508      	push	{r3, lr}
 8010304:	f000 fa62 	bl	80107cc <raise>
 8010308:	2001      	movs	r0, #1
 801030a:	f7f3 fb29 	bl	8003960 <_exit>

0801030e <__sfputc_r>:
 801030e:	6893      	ldr	r3, [r2, #8]
 8010310:	3b01      	subs	r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	b410      	push	{r4}
 8010316:	6093      	str	r3, [r2, #8]
 8010318:	da08      	bge.n	801032c <__sfputc_r+0x1e>
 801031a:	6994      	ldr	r4, [r2, #24]
 801031c:	42a3      	cmp	r3, r4
 801031e:	db01      	blt.n	8010324 <__sfputc_r+0x16>
 8010320:	290a      	cmp	r1, #10
 8010322:	d103      	bne.n	801032c <__sfputc_r+0x1e>
 8010324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010328:	f000 b932 	b.w	8010590 <__swbuf_r>
 801032c:	6813      	ldr	r3, [r2, #0]
 801032e:	1c58      	adds	r0, r3, #1
 8010330:	6010      	str	r0, [r2, #0]
 8010332:	4608      	mov	r0, r1
 8010334:	7019      	strb	r1, [r3, #0]
 8010336:	f85d 4b04 	ldr.w	r4, [sp], #4
 801033a:	4770      	bx	lr

0801033c <__sfputs_r>:
 801033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801033e:	4606      	mov	r6, r0
 8010340:	460f      	mov	r7, r1
 8010342:	4614      	mov	r4, r2
 8010344:	18d5      	adds	r5, r2, r3
 8010346:	42ac      	cmp	r4, r5
 8010348:	d101      	bne.n	801034e <__sfputs_r+0x12>
 801034a:	2000      	movs	r0, #0
 801034c:	e007      	b.n	801035e <__sfputs_r+0x22>
 801034e:	463a      	mov	r2, r7
 8010350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010354:	4630      	mov	r0, r6
 8010356:	f7ff ffda 	bl	801030e <__sfputc_r>
 801035a:	1c43      	adds	r3, r0, #1
 801035c:	d1f3      	bne.n	8010346 <__sfputs_r+0xa>
 801035e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010360 <_vfiprintf_r>:
 8010360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010364:	460d      	mov	r5, r1
 8010366:	b09d      	sub	sp, #116	@ 0x74
 8010368:	4614      	mov	r4, r2
 801036a:	4698      	mov	r8, r3
 801036c:	4606      	mov	r6, r0
 801036e:	b118      	cbz	r0, 8010378 <_vfiprintf_r+0x18>
 8010370:	6a03      	ldr	r3, [r0, #32]
 8010372:	b90b      	cbnz	r3, 8010378 <_vfiprintf_r+0x18>
 8010374:	f7fc fdf8 	bl	800cf68 <__sinit>
 8010378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801037a:	07d9      	lsls	r1, r3, #31
 801037c:	d405      	bmi.n	801038a <_vfiprintf_r+0x2a>
 801037e:	89ab      	ldrh	r3, [r5, #12]
 8010380:	059a      	lsls	r2, r3, #22
 8010382:	d402      	bmi.n	801038a <_vfiprintf_r+0x2a>
 8010384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010386:	f7fd fcf0 	bl	800dd6a <__retarget_lock_acquire_recursive>
 801038a:	89ab      	ldrh	r3, [r5, #12]
 801038c:	071b      	lsls	r3, r3, #28
 801038e:	d501      	bpl.n	8010394 <_vfiprintf_r+0x34>
 8010390:	692b      	ldr	r3, [r5, #16]
 8010392:	b99b      	cbnz	r3, 80103bc <_vfiprintf_r+0x5c>
 8010394:	4629      	mov	r1, r5
 8010396:	4630      	mov	r0, r6
 8010398:	f000 f938 	bl	801060c <__swsetup_r>
 801039c:	b170      	cbz	r0, 80103bc <_vfiprintf_r+0x5c>
 801039e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103a0:	07dc      	lsls	r4, r3, #31
 80103a2:	d504      	bpl.n	80103ae <_vfiprintf_r+0x4e>
 80103a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80103a8:	b01d      	add	sp, #116	@ 0x74
 80103aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ae:	89ab      	ldrh	r3, [r5, #12]
 80103b0:	0598      	lsls	r0, r3, #22
 80103b2:	d4f7      	bmi.n	80103a4 <_vfiprintf_r+0x44>
 80103b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103b6:	f7fd fcd9 	bl	800dd6c <__retarget_lock_release_recursive>
 80103ba:	e7f3      	b.n	80103a4 <_vfiprintf_r+0x44>
 80103bc:	2300      	movs	r3, #0
 80103be:	f8cd 800c 	str.w	r8, [sp, #12]
 80103c2:	f04f 0901 	mov.w	r9, #1
 80103c6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 801057c <_vfiprintf_r+0x21c>
 80103ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80103cc:	2320      	movs	r3, #32
 80103ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80103d2:	2330      	movs	r3, #48	@ 0x30
 80103d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80103d8:	4623      	mov	r3, r4
 80103da:	469a      	mov	sl, r3
 80103dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103e0:	b10a      	cbz	r2, 80103e6 <_vfiprintf_r+0x86>
 80103e2:	2a25      	cmp	r2, #37	@ 0x25
 80103e4:	d1f9      	bne.n	80103da <_vfiprintf_r+0x7a>
 80103e6:	ebba 0b04 	subs.w	fp, sl, r4
 80103ea:	d00b      	beq.n	8010404 <_vfiprintf_r+0xa4>
 80103ec:	465b      	mov	r3, fp
 80103ee:	4622      	mov	r2, r4
 80103f0:	4629      	mov	r1, r5
 80103f2:	4630      	mov	r0, r6
 80103f4:	f7ff ffa2 	bl	801033c <__sfputs_r>
 80103f8:	3001      	adds	r0, #1
 80103fa:	f000 80a7 	beq.w	801054c <_vfiprintf_r+0x1ec>
 80103fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010400:	445a      	add	r2, fp
 8010402:	9209      	str	r2, [sp, #36]	@ 0x24
 8010404:	f89a 3000 	ldrb.w	r3, [sl]
 8010408:	2b00      	cmp	r3, #0
 801040a:	f000 809f 	beq.w	801054c <_vfiprintf_r+0x1ec>
 801040e:	2300      	movs	r3, #0
 8010410:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010414:	f10a 0a01 	add.w	sl, sl, #1
 8010418:	9304      	str	r3, [sp, #16]
 801041a:	9307      	str	r3, [sp, #28]
 801041c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010420:	931a      	str	r3, [sp, #104]	@ 0x68
 8010422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010426:	4654      	mov	r4, sl
 8010428:	2205      	movs	r2, #5
 801042a:	4854      	ldr	r0, [pc, #336]	@ (801057c <_vfiprintf_r+0x21c>)
 801042c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010430:	f7fd fca2 	bl	800dd78 <memchr>
 8010434:	9a04      	ldr	r2, [sp, #16]
 8010436:	b9d8      	cbnz	r0, 8010470 <_vfiprintf_r+0x110>
 8010438:	06d1      	lsls	r1, r2, #27
 801043a:	bf44      	itt	mi
 801043c:	2320      	movmi	r3, #32
 801043e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010442:	0713      	lsls	r3, r2, #28
 8010444:	bf44      	itt	mi
 8010446:	232b      	movmi	r3, #43	@ 0x2b
 8010448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801044c:	f89a 3000 	ldrb.w	r3, [sl]
 8010450:	2b2a      	cmp	r3, #42	@ 0x2a
 8010452:	d015      	beq.n	8010480 <_vfiprintf_r+0x120>
 8010454:	9a07      	ldr	r2, [sp, #28]
 8010456:	4654      	mov	r4, sl
 8010458:	2000      	movs	r0, #0
 801045a:	f04f 0c0a 	mov.w	ip, #10
 801045e:	4621      	mov	r1, r4
 8010460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010464:	3b30      	subs	r3, #48	@ 0x30
 8010466:	2b09      	cmp	r3, #9
 8010468:	d94b      	bls.n	8010502 <_vfiprintf_r+0x1a2>
 801046a:	b1b0      	cbz	r0, 801049a <_vfiprintf_r+0x13a>
 801046c:	9207      	str	r2, [sp, #28]
 801046e:	e014      	b.n	801049a <_vfiprintf_r+0x13a>
 8010470:	eba0 0308 	sub.w	r3, r0, r8
 8010474:	46a2      	mov	sl, r4
 8010476:	fa09 f303 	lsl.w	r3, r9, r3
 801047a:	4313      	orrs	r3, r2
 801047c:	9304      	str	r3, [sp, #16]
 801047e:	e7d2      	b.n	8010426 <_vfiprintf_r+0xc6>
 8010480:	9b03      	ldr	r3, [sp, #12]
 8010482:	1d19      	adds	r1, r3, #4
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	9103      	str	r1, [sp, #12]
 801048a:	bfbb      	ittet	lt
 801048c:	425b      	neglt	r3, r3
 801048e:	f042 0202 	orrlt.w	r2, r2, #2
 8010492:	9307      	strge	r3, [sp, #28]
 8010494:	9307      	strlt	r3, [sp, #28]
 8010496:	bfb8      	it	lt
 8010498:	9204      	strlt	r2, [sp, #16]
 801049a:	7823      	ldrb	r3, [r4, #0]
 801049c:	2b2e      	cmp	r3, #46	@ 0x2e
 801049e:	d10a      	bne.n	80104b6 <_vfiprintf_r+0x156>
 80104a0:	7863      	ldrb	r3, [r4, #1]
 80104a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80104a4:	d132      	bne.n	801050c <_vfiprintf_r+0x1ac>
 80104a6:	9b03      	ldr	r3, [sp, #12]
 80104a8:	3402      	adds	r4, #2
 80104aa:	1d1a      	adds	r2, r3, #4
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80104b2:	9203      	str	r2, [sp, #12]
 80104b4:	9305      	str	r3, [sp, #20]
 80104b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801058c <_vfiprintf_r+0x22c>
 80104ba:	2203      	movs	r2, #3
 80104bc:	7821      	ldrb	r1, [r4, #0]
 80104be:	4650      	mov	r0, sl
 80104c0:	f7fd fc5a 	bl	800dd78 <memchr>
 80104c4:	b138      	cbz	r0, 80104d6 <_vfiprintf_r+0x176>
 80104c6:	eba0 000a 	sub.w	r0, r0, sl
 80104ca:	2240      	movs	r2, #64	@ 0x40
 80104cc:	9b04      	ldr	r3, [sp, #16]
 80104ce:	3401      	adds	r4, #1
 80104d0:	4082      	lsls	r2, r0
 80104d2:	4313      	orrs	r3, r2
 80104d4:	9304      	str	r3, [sp, #16]
 80104d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104da:	2206      	movs	r2, #6
 80104dc:	4828      	ldr	r0, [pc, #160]	@ (8010580 <_vfiprintf_r+0x220>)
 80104de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80104e2:	f7fd fc49 	bl	800dd78 <memchr>
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d03f      	beq.n	801056a <_vfiprintf_r+0x20a>
 80104ea:	4b26      	ldr	r3, [pc, #152]	@ (8010584 <_vfiprintf_r+0x224>)
 80104ec:	bb1b      	cbnz	r3, 8010536 <_vfiprintf_r+0x1d6>
 80104ee:	9b03      	ldr	r3, [sp, #12]
 80104f0:	3307      	adds	r3, #7
 80104f2:	f023 0307 	bic.w	r3, r3, #7
 80104f6:	3308      	adds	r3, #8
 80104f8:	9303      	str	r3, [sp, #12]
 80104fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104fc:	443b      	add	r3, r7
 80104fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010500:	e76a      	b.n	80103d8 <_vfiprintf_r+0x78>
 8010502:	fb0c 3202 	mla	r2, ip, r2, r3
 8010506:	460c      	mov	r4, r1
 8010508:	2001      	movs	r0, #1
 801050a:	e7a8      	b.n	801045e <_vfiprintf_r+0xfe>
 801050c:	2300      	movs	r3, #0
 801050e:	3401      	adds	r4, #1
 8010510:	f04f 0c0a 	mov.w	ip, #10
 8010514:	4619      	mov	r1, r3
 8010516:	9305      	str	r3, [sp, #20]
 8010518:	4620      	mov	r0, r4
 801051a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801051e:	3a30      	subs	r2, #48	@ 0x30
 8010520:	2a09      	cmp	r2, #9
 8010522:	d903      	bls.n	801052c <_vfiprintf_r+0x1cc>
 8010524:	2b00      	cmp	r3, #0
 8010526:	d0c6      	beq.n	80104b6 <_vfiprintf_r+0x156>
 8010528:	9105      	str	r1, [sp, #20]
 801052a:	e7c4      	b.n	80104b6 <_vfiprintf_r+0x156>
 801052c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010530:	4604      	mov	r4, r0
 8010532:	2301      	movs	r3, #1
 8010534:	e7f0      	b.n	8010518 <_vfiprintf_r+0x1b8>
 8010536:	ab03      	add	r3, sp, #12
 8010538:	462a      	mov	r2, r5
 801053a:	a904      	add	r1, sp, #16
 801053c:	4630      	mov	r0, r6
 801053e:	9300      	str	r3, [sp, #0]
 8010540:	4b11      	ldr	r3, [pc, #68]	@ (8010588 <_vfiprintf_r+0x228>)
 8010542:	f7fb fe65 	bl	800c210 <_printf_float>
 8010546:	4607      	mov	r7, r0
 8010548:	1c78      	adds	r0, r7, #1
 801054a:	d1d6      	bne.n	80104fa <_vfiprintf_r+0x19a>
 801054c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801054e:	07d9      	lsls	r1, r3, #31
 8010550:	d405      	bmi.n	801055e <_vfiprintf_r+0x1fe>
 8010552:	89ab      	ldrh	r3, [r5, #12]
 8010554:	059a      	lsls	r2, r3, #22
 8010556:	d402      	bmi.n	801055e <_vfiprintf_r+0x1fe>
 8010558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801055a:	f7fd fc07 	bl	800dd6c <__retarget_lock_release_recursive>
 801055e:	89ab      	ldrh	r3, [r5, #12]
 8010560:	065b      	lsls	r3, r3, #25
 8010562:	f53f af1f 	bmi.w	80103a4 <_vfiprintf_r+0x44>
 8010566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010568:	e71e      	b.n	80103a8 <_vfiprintf_r+0x48>
 801056a:	ab03      	add	r3, sp, #12
 801056c:	462a      	mov	r2, r5
 801056e:	a904      	add	r1, sp, #16
 8010570:	4630      	mov	r0, r6
 8010572:	9300      	str	r3, [sp, #0]
 8010574:	4b04      	ldr	r3, [pc, #16]	@ (8010588 <_vfiprintf_r+0x228>)
 8010576:	f7fc f8e7 	bl	800c748 <_printf_i>
 801057a:	e7e4      	b.n	8010546 <_vfiprintf_r+0x1e6>
 801057c:	08010f04 	.word	0x08010f04
 8010580:	08010f0e 	.word	0x08010f0e
 8010584:	0800c211 	.word	0x0800c211
 8010588:	0801033d 	.word	0x0801033d
 801058c:	08010f0a 	.word	0x08010f0a

08010590 <__swbuf_r>:
 8010590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010592:	460e      	mov	r6, r1
 8010594:	4614      	mov	r4, r2
 8010596:	4605      	mov	r5, r0
 8010598:	b118      	cbz	r0, 80105a2 <__swbuf_r+0x12>
 801059a:	6a03      	ldr	r3, [r0, #32]
 801059c:	b90b      	cbnz	r3, 80105a2 <__swbuf_r+0x12>
 801059e:	f7fc fce3 	bl	800cf68 <__sinit>
 80105a2:	69a3      	ldr	r3, [r4, #24]
 80105a4:	60a3      	str	r3, [r4, #8]
 80105a6:	89a3      	ldrh	r3, [r4, #12]
 80105a8:	071a      	lsls	r2, r3, #28
 80105aa:	d501      	bpl.n	80105b0 <__swbuf_r+0x20>
 80105ac:	6923      	ldr	r3, [r4, #16]
 80105ae:	b943      	cbnz	r3, 80105c2 <__swbuf_r+0x32>
 80105b0:	4621      	mov	r1, r4
 80105b2:	4628      	mov	r0, r5
 80105b4:	f000 f82a 	bl	801060c <__swsetup_r>
 80105b8:	b118      	cbz	r0, 80105c2 <__swbuf_r+0x32>
 80105ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80105be:	4638      	mov	r0, r7
 80105c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105c2:	6823      	ldr	r3, [r4, #0]
 80105c4:	b2f6      	uxtb	r6, r6
 80105c6:	6922      	ldr	r2, [r4, #16]
 80105c8:	4637      	mov	r7, r6
 80105ca:	1a98      	subs	r0, r3, r2
 80105cc:	6963      	ldr	r3, [r4, #20]
 80105ce:	4283      	cmp	r3, r0
 80105d0:	dc05      	bgt.n	80105de <__swbuf_r+0x4e>
 80105d2:	4621      	mov	r1, r4
 80105d4:	4628      	mov	r0, r5
 80105d6:	f7ff f825 	bl	800f624 <_fflush_r>
 80105da:	2800      	cmp	r0, #0
 80105dc:	d1ed      	bne.n	80105ba <__swbuf_r+0x2a>
 80105de:	68a3      	ldr	r3, [r4, #8]
 80105e0:	3b01      	subs	r3, #1
 80105e2:	60a3      	str	r3, [r4, #8]
 80105e4:	6823      	ldr	r3, [r4, #0]
 80105e6:	1c5a      	adds	r2, r3, #1
 80105e8:	6022      	str	r2, [r4, #0]
 80105ea:	701e      	strb	r6, [r3, #0]
 80105ec:	1c43      	adds	r3, r0, #1
 80105ee:	6962      	ldr	r2, [r4, #20]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d004      	beq.n	80105fe <__swbuf_r+0x6e>
 80105f4:	89a3      	ldrh	r3, [r4, #12]
 80105f6:	07db      	lsls	r3, r3, #31
 80105f8:	d5e1      	bpl.n	80105be <__swbuf_r+0x2e>
 80105fa:	2e0a      	cmp	r6, #10
 80105fc:	d1df      	bne.n	80105be <__swbuf_r+0x2e>
 80105fe:	4621      	mov	r1, r4
 8010600:	4628      	mov	r0, r5
 8010602:	f7ff f80f 	bl	800f624 <_fflush_r>
 8010606:	2800      	cmp	r0, #0
 8010608:	d0d9      	beq.n	80105be <__swbuf_r+0x2e>
 801060a:	e7d6      	b.n	80105ba <__swbuf_r+0x2a>

0801060c <__swsetup_r>:
 801060c:	b538      	push	{r3, r4, r5, lr}
 801060e:	4b29      	ldr	r3, [pc, #164]	@ (80106b4 <__swsetup_r+0xa8>)
 8010610:	4605      	mov	r5, r0
 8010612:	460c      	mov	r4, r1
 8010614:	6818      	ldr	r0, [r3, #0]
 8010616:	b118      	cbz	r0, 8010620 <__swsetup_r+0x14>
 8010618:	6a03      	ldr	r3, [r0, #32]
 801061a:	b90b      	cbnz	r3, 8010620 <__swsetup_r+0x14>
 801061c:	f7fc fca4 	bl	800cf68 <__sinit>
 8010620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010624:	0719      	lsls	r1, r3, #28
 8010626:	d422      	bmi.n	801066e <__swsetup_r+0x62>
 8010628:	06da      	lsls	r2, r3, #27
 801062a:	d407      	bmi.n	801063c <__swsetup_r+0x30>
 801062c:	2209      	movs	r2, #9
 801062e:	602a      	str	r2, [r5, #0]
 8010630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010638:	81a3      	strh	r3, [r4, #12]
 801063a:	e033      	b.n	80106a4 <__swsetup_r+0x98>
 801063c:	0758      	lsls	r0, r3, #29
 801063e:	d512      	bpl.n	8010666 <__swsetup_r+0x5a>
 8010640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010642:	b141      	cbz	r1, 8010656 <__swsetup_r+0x4a>
 8010644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010648:	4299      	cmp	r1, r3
 801064a:	d002      	beq.n	8010652 <__swsetup_r+0x46>
 801064c:	4628      	mov	r0, r5
 801064e:	f7ff fdf3 	bl	8010238 <_free_r>
 8010652:	2300      	movs	r3, #0
 8010654:	6363      	str	r3, [r4, #52]	@ 0x34
 8010656:	89a3      	ldrh	r3, [r4, #12]
 8010658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801065c:	81a3      	strh	r3, [r4, #12]
 801065e:	2300      	movs	r3, #0
 8010660:	6063      	str	r3, [r4, #4]
 8010662:	6923      	ldr	r3, [r4, #16]
 8010664:	6023      	str	r3, [r4, #0]
 8010666:	89a3      	ldrh	r3, [r4, #12]
 8010668:	f043 0308 	orr.w	r3, r3, #8
 801066c:	81a3      	strh	r3, [r4, #12]
 801066e:	6923      	ldr	r3, [r4, #16]
 8010670:	b94b      	cbnz	r3, 8010686 <__swsetup_r+0x7a>
 8010672:	89a3      	ldrh	r3, [r4, #12]
 8010674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801067c:	d003      	beq.n	8010686 <__swsetup_r+0x7a>
 801067e:	4621      	mov	r1, r4
 8010680:	4628      	mov	r0, r5
 8010682:	f000 f83e 	bl	8010702 <__smakebuf_r>
 8010686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801068a:	f013 0201 	ands.w	r2, r3, #1
 801068e:	d00a      	beq.n	80106a6 <__swsetup_r+0x9a>
 8010690:	2200      	movs	r2, #0
 8010692:	60a2      	str	r2, [r4, #8]
 8010694:	6962      	ldr	r2, [r4, #20]
 8010696:	4252      	negs	r2, r2
 8010698:	61a2      	str	r2, [r4, #24]
 801069a:	6922      	ldr	r2, [r4, #16]
 801069c:	b942      	cbnz	r2, 80106b0 <__swsetup_r+0xa4>
 801069e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80106a2:	d1c5      	bne.n	8010630 <__swsetup_r+0x24>
 80106a4:	bd38      	pop	{r3, r4, r5, pc}
 80106a6:	0799      	lsls	r1, r3, #30
 80106a8:	bf58      	it	pl
 80106aa:	6962      	ldrpl	r2, [r4, #20]
 80106ac:	60a2      	str	r2, [r4, #8]
 80106ae:	e7f4      	b.n	801069a <__swsetup_r+0x8e>
 80106b0:	2000      	movs	r0, #0
 80106b2:	e7f7      	b.n	80106a4 <__swsetup_r+0x98>
 80106b4:	2000019c 	.word	0x2000019c

080106b8 <__swhatbuf_r>:
 80106b8:	b570      	push	{r4, r5, r6, lr}
 80106ba:	460c      	mov	r4, r1
 80106bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c0:	b096      	sub	sp, #88	@ 0x58
 80106c2:	4615      	mov	r5, r2
 80106c4:	2900      	cmp	r1, #0
 80106c6:	461e      	mov	r6, r3
 80106c8:	da0c      	bge.n	80106e4 <__swhatbuf_r+0x2c>
 80106ca:	89a3      	ldrh	r3, [r4, #12]
 80106cc:	2100      	movs	r1, #0
 80106ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80106d2:	bf14      	ite	ne
 80106d4:	2340      	movne	r3, #64	@ 0x40
 80106d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80106da:	2000      	movs	r0, #0
 80106dc:	6031      	str	r1, [r6, #0]
 80106de:	602b      	str	r3, [r5, #0]
 80106e0:	b016      	add	sp, #88	@ 0x58
 80106e2:	bd70      	pop	{r4, r5, r6, pc}
 80106e4:	466a      	mov	r2, sp
 80106e6:	f000 f89d 	bl	8010824 <_fstat_r>
 80106ea:	2800      	cmp	r0, #0
 80106ec:	dbed      	blt.n	80106ca <__swhatbuf_r+0x12>
 80106ee:	9901      	ldr	r1, [sp, #4]
 80106f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80106f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80106f8:	4259      	negs	r1, r3
 80106fa:	4159      	adcs	r1, r3
 80106fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010700:	e7eb      	b.n	80106da <__swhatbuf_r+0x22>

08010702 <__smakebuf_r>:
 8010702:	898b      	ldrh	r3, [r1, #12]
 8010704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010706:	079d      	lsls	r5, r3, #30
 8010708:	4606      	mov	r6, r0
 801070a:	460c      	mov	r4, r1
 801070c:	d507      	bpl.n	801071e <__smakebuf_r+0x1c>
 801070e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010712:	6023      	str	r3, [r4, #0]
 8010714:	6123      	str	r3, [r4, #16]
 8010716:	2301      	movs	r3, #1
 8010718:	6163      	str	r3, [r4, #20]
 801071a:	b003      	add	sp, #12
 801071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801071e:	ab01      	add	r3, sp, #4
 8010720:	466a      	mov	r2, sp
 8010722:	f7ff ffc9 	bl	80106b8 <__swhatbuf_r>
 8010726:	9f00      	ldr	r7, [sp, #0]
 8010728:	4605      	mov	r5, r0
 801072a:	4630      	mov	r0, r6
 801072c:	4639      	mov	r1, r7
 801072e:	f7fe fe63 	bl	800f3f8 <_malloc_r>
 8010732:	b948      	cbnz	r0, 8010748 <__smakebuf_r+0x46>
 8010734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010738:	059a      	lsls	r2, r3, #22
 801073a:	d4ee      	bmi.n	801071a <__smakebuf_r+0x18>
 801073c:	f023 0303 	bic.w	r3, r3, #3
 8010740:	f043 0302 	orr.w	r3, r3, #2
 8010744:	81a3      	strh	r3, [r4, #12]
 8010746:	e7e2      	b.n	801070e <__smakebuf_r+0xc>
 8010748:	89a3      	ldrh	r3, [r4, #12]
 801074a:	6020      	str	r0, [r4, #0]
 801074c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010750:	81a3      	strh	r3, [r4, #12]
 8010752:	9b01      	ldr	r3, [sp, #4]
 8010754:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010758:	b15b      	cbz	r3, 8010772 <__smakebuf_r+0x70>
 801075a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801075e:	4630      	mov	r0, r6
 8010760:	f000 f83c 	bl	80107dc <_isatty_r>
 8010764:	b128      	cbz	r0, 8010772 <__smakebuf_r+0x70>
 8010766:	89a3      	ldrh	r3, [r4, #12]
 8010768:	f023 0303 	bic.w	r3, r3, #3
 801076c:	f043 0301 	orr.w	r3, r3, #1
 8010770:	81a3      	strh	r3, [r4, #12]
 8010772:	89a3      	ldrh	r3, [r4, #12]
 8010774:	431d      	orrs	r5, r3
 8010776:	81a5      	strh	r5, [r4, #12]
 8010778:	e7cf      	b.n	801071a <__smakebuf_r+0x18>

0801077a <_raise_r>:
 801077a:	291f      	cmp	r1, #31
 801077c:	b538      	push	{r3, r4, r5, lr}
 801077e:	4605      	mov	r5, r0
 8010780:	460c      	mov	r4, r1
 8010782:	d904      	bls.n	801078e <_raise_r+0x14>
 8010784:	2316      	movs	r3, #22
 8010786:	6003      	str	r3, [r0, #0]
 8010788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801078c:	bd38      	pop	{r3, r4, r5, pc}
 801078e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010790:	b112      	cbz	r2, 8010798 <_raise_r+0x1e>
 8010792:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010796:	b94b      	cbnz	r3, 80107ac <_raise_r+0x32>
 8010798:	4628      	mov	r0, r5
 801079a:	f000 f841 	bl	8010820 <_getpid_r>
 801079e:	4622      	mov	r2, r4
 80107a0:	4601      	mov	r1, r0
 80107a2:	4628      	mov	r0, r5
 80107a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107a8:	f000 b828 	b.w	80107fc <_kill_r>
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d00a      	beq.n	80107c6 <_raise_r+0x4c>
 80107b0:	1c59      	adds	r1, r3, #1
 80107b2:	d103      	bne.n	80107bc <_raise_r+0x42>
 80107b4:	2316      	movs	r3, #22
 80107b6:	6003      	str	r3, [r0, #0]
 80107b8:	2001      	movs	r0, #1
 80107ba:	e7e7      	b.n	801078c <_raise_r+0x12>
 80107bc:	2100      	movs	r1, #0
 80107be:	4620      	mov	r0, r4
 80107c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80107c4:	4798      	blx	r3
 80107c6:	2000      	movs	r0, #0
 80107c8:	e7e0      	b.n	801078c <_raise_r+0x12>
	...

080107cc <raise>:
 80107cc:	4b02      	ldr	r3, [pc, #8]	@ (80107d8 <raise+0xc>)
 80107ce:	4601      	mov	r1, r0
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	f7ff bfd2 	b.w	801077a <_raise_r>
 80107d6:	bf00      	nop
 80107d8:	2000019c 	.word	0x2000019c

080107dc <_isatty_r>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	2300      	movs	r3, #0
 80107e0:	4d05      	ldr	r5, [pc, #20]	@ (80107f8 <_isatty_r+0x1c>)
 80107e2:	4604      	mov	r4, r0
 80107e4:	4608      	mov	r0, r1
 80107e6:	602b      	str	r3, [r5, #0]
 80107e8:	f7f3 f91a 	bl	8003a20 <_isatty>
 80107ec:	1c43      	adds	r3, r0, #1
 80107ee:	d102      	bne.n	80107f6 <_isatty_r+0x1a>
 80107f0:	682b      	ldr	r3, [r5, #0]
 80107f2:	b103      	cbz	r3, 80107f6 <_isatty_r+0x1a>
 80107f4:	6023      	str	r3, [r4, #0]
 80107f6:	bd38      	pop	{r3, r4, r5, pc}
 80107f8:	20000580 	.word	0x20000580

080107fc <_kill_r>:
 80107fc:	b538      	push	{r3, r4, r5, lr}
 80107fe:	2300      	movs	r3, #0
 8010800:	4d06      	ldr	r5, [pc, #24]	@ (801081c <_kill_r+0x20>)
 8010802:	4604      	mov	r4, r0
 8010804:	4608      	mov	r0, r1
 8010806:	4611      	mov	r1, r2
 8010808:	602b      	str	r3, [r5, #0]
 801080a:	f7f3 f899 	bl	8003940 <_kill>
 801080e:	1c43      	adds	r3, r0, #1
 8010810:	d102      	bne.n	8010818 <_kill_r+0x1c>
 8010812:	682b      	ldr	r3, [r5, #0]
 8010814:	b103      	cbz	r3, 8010818 <_kill_r+0x1c>
 8010816:	6023      	str	r3, [r4, #0]
 8010818:	bd38      	pop	{r3, r4, r5, pc}
 801081a:	bf00      	nop
 801081c:	20000580 	.word	0x20000580

08010820 <_getpid_r>:
 8010820:	f7f3 b886 	b.w	8003930 <_getpid>

08010824 <_fstat_r>:
 8010824:	b538      	push	{r3, r4, r5, lr}
 8010826:	2300      	movs	r3, #0
 8010828:	4d06      	ldr	r5, [pc, #24]	@ (8010844 <_fstat_r+0x20>)
 801082a:	4604      	mov	r4, r0
 801082c:	4608      	mov	r0, r1
 801082e:	4611      	mov	r1, r2
 8010830:	602b      	str	r3, [r5, #0]
 8010832:	f7f3 f8e5 	bl	8003a00 <_fstat>
 8010836:	1c43      	adds	r3, r0, #1
 8010838:	d102      	bne.n	8010840 <_fstat_r+0x1c>
 801083a:	682b      	ldr	r3, [r5, #0]
 801083c:	b103      	cbz	r3, 8010840 <_fstat_r+0x1c>
 801083e:	6023      	str	r3, [r4, #0]
 8010840:	bd38      	pop	{r3, r4, r5, pc}
 8010842:	bf00      	nop
 8010844:	20000580 	.word	0x20000580

08010848 <_init>:
 8010848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801084a:	bf00      	nop
 801084c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801084e:	bc08      	pop	{r3}
 8010850:	469e      	mov	lr, r3
 8010852:	4770      	bx	lr

08010854 <_fini>:
 8010854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010856:	bf00      	nop
 8010858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801085a:	bc08      	pop	{r3}
 801085c:	469e      	mov	lr, r3
 801085e:	4770      	bx	lr
