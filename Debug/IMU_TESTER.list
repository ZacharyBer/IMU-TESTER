
IMU_TESTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134f4  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d40  08013748  08013748  00014748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014488  08014488  00015488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014490  08014490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014494  08014494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000000  08014498  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000434  200001ec  08014684  000161ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000620  08014684  00016620  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000161ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c770  00000000  00000000  00016222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d14  00000000  00000000  00042992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026e8  00000000  00000000  000466a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e59  00000000  00000000  00048d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b5b7  00000000  00000000  0004abe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002911b  00000000  00000000  000861a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00175500  00000000  00000000  000af2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002247bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c460  00000000  00000000  00224800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00230c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001ec 	.word	0x200001ec
 800026c:	00000000 	.word	0x00000000
 8000270:	0801372c 	.word	0x0801372c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001f0 	.word	0x200001f0
 800028c:	0801372c 	.word	0x0801372c

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9e6 	b.w	800108c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	2200      	movs	r2, #0
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d4a:	4688      	mov	r8, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	468e      	mov	lr, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d95f      	bls.n	8000e1a <__udivmoddi4+0xd6>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d68:	40b7      	lsls	r7, r6
 8000d6a:	40b4      	lsls	r4, r6
 8000d6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d70:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	0c23      	lsrs	r3, r4, #16
 8000d7e:	fbbe f1f8 	udiv	r1, lr, r8
 8000d82:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d86:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x5e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x5c>
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	f200 8154 	bhi.w	8001048 <__udivmoddi4+0x304>
 8000da0:	4601      	mov	r1, r0
 8000da2:	1a9b      	subs	r3, r3, r2
 8000da4:	b2a2      	uxth	r2, r4
 8000da6:	fbb3 f0f8 	udiv	r0, r3, r8
 8000daa:	fb08 3310 	mls	r3, r8, r0, r3
 8000dae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000db2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000db6:	4594      	cmp	ip, r2
 8000db8:	d90b      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dba:	18ba      	adds	r2, r7, r2
 8000dbc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000dc0:	bf2c      	ite	cs
 8000dc2:	2401      	movcs	r4, #1
 8000dc4:	2400      	movcc	r4, #0
 8000dc6:	4594      	cmp	ip, r2
 8000dc8:	d902      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dca:	2c00      	cmp	r4, #0
 8000dcc:	f000 813f 	beq.w	800104e <__udivmoddi4+0x30a>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba2 020c 	sub.w	r2, r2, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c5 2300 	strd	r2, r3, [r5]
 8000de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d14e      	bne.n	8000ea0 <__udivmoddi4+0x15c>
 8000e02:	4543      	cmp	r3, r8
 8000e04:	f0c0 8112 	bcc.w	800102c <__udivmoddi4+0x2e8>
 8000e08:	4282      	cmp	r2, r0
 8000e0a:	f240 810f 	bls.w	800102c <__udivmoddi4+0x2e8>
 8000e0e:	4608      	mov	r0, r1
 8000e10:	2d00      	cmp	r5, #0
 8000e12:	d0e8      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e14:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e18:	e7e5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	f000 80ac 	beq.w	8000f78 <__udivmoddi4+0x234>
 8000e20:	fab2 f682 	clz	r6, r2
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	f040 80bb 	bne.w	8000fa0 <__udivmoddi4+0x25c>
 8000e2a:	1a8b      	subs	r3, r1, r2
 8000e2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e30:	b2bc      	uxth	r4, r7
 8000e32:	2101      	movs	r1, #1
 8000e34:	0c02      	lsrs	r2, r0, #16
 8000e36:	b280      	uxth	r0, r0
 8000e38:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e40:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e44:	fb04 f20c 	mul.w	r2, r4, ip
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d90e      	bls.n	8000e6a <__udivmoddi4+0x126>
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e52:	bf2c      	ite	cs
 8000e54:	f04f 0901 	movcs.w	r9, #1
 8000e58:	f04f 0900 	movcc.w	r9, #0
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d903      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e60:	f1b9 0f00 	cmp.w	r9, #0
 8000e64:	f000 80ec 	beq.w	8001040 <__udivmoddi4+0x2fc>
 8000e68:	46c4      	mov	ip, r8
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e70:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e74:	fb04 f408 	mul.w	r4, r4, r8
 8000e78:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e7c:	4294      	cmp	r4, r2
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x154>
 8000e80:	18ba      	adds	r2, r7, r2
 8000e82:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000e86:	bf2c      	ite	cs
 8000e88:	2001      	movcs	r0, #1
 8000e8a:	2000      	movcc	r0, #0
 8000e8c:	4294      	cmp	r4, r2
 8000e8e:	d902      	bls.n	8000e96 <__udivmoddi4+0x152>
 8000e90:	2800      	cmp	r0, #0
 8000e92:	f000 80d1 	beq.w	8001038 <__udivmoddi4+0x2f4>
 8000e96:	4698      	mov	r8, r3
 8000e98:	1b12      	subs	r2, r2, r4
 8000e9a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e9e:	e79d      	b.n	8000ddc <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa08 f401 	lsl.w	r4, r8, r1
 8000eaa:	fa00 f901 	lsl.w	r9, r0, r1
 8000eae:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb2:	fa28 f806 	lsr.w	r8, r8, r6
 8000eb6:	408a      	lsls	r2, r1
 8000eb8:	431f      	orrs	r7, r3
 8000eba:	fa20 f306 	lsr.w	r3, r0, r6
 8000ebe:	0c38      	lsrs	r0, r7, #16
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	fbb8 fef0 	udiv	lr, r8, r0
 8000ecc:	fb00 881e 	mls	r8, r0, lr, r8
 8000ed0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ed4:	fb0e f80c 	mul.w	r8, lr, ip
 8000ed8:	45a0      	cmp	r8, r4
 8000eda:	d90e      	bls.n	8000efa <__udivmoddi4+0x1b6>
 8000edc:	193c      	adds	r4, r7, r4
 8000ede:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ee2:	bf2c      	ite	cs
 8000ee4:	f04f 0b01 	movcs.w	fp, #1
 8000ee8:	f04f 0b00 	movcc.w	fp, #0
 8000eec:	45a0      	cmp	r8, r4
 8000eee:	d903      	bls.n	8000ef8 <__udivmoddi4+0x1b4>
 8000ef0:	f1bb 0f00 	cmp.w	fp, #0
 8000ef4:	f000 80b8 	beq.w	8001068 <__udivmoddi4+0x324>
 8000ef8:	46d6      	mov	lr, sl
 8000efa:	eba4 0408 	sub.w	r4, r4, r8
 8000efe:	fa1f f883 	uxth.w	r8, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d90e      	bls.n	8000f34 <__udivmoddi4+0x1f0>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f1c:	bf2c      	ite	cs
 8000f1e:	f04f 0801 	movcs.w	r8, #1
 8000f22:	f04f 0800 	movcc.w	r8, #0
 8000f26:	45a4      	cmp	ip, r4
 8000f28:	d903      	bls.n	8000f32 <__udivmoddi4+0x1ee>
 8000f2a:	f1b8 0f00 	cmp.w	r8, #0
 8000f2e:	f000 809f 	beq.w	8001070 <__udivmoddi4+0x32c>
 8000f32:	4603      	mov	r3, r0
 8000f34:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f38:	eba4 040c 	sub.w	r4, r4, ip
 8000f3c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f40:	4564      	cmp	r4, ip
 8000f42:	4673      	mov	r3, lr
 8000f44:	46e0      	mov	r8, ip
 8000f46:	d302      	bcc.n	8000f4e <__udivmoddi4+0x20a>
 8000f48:	d107      	bne.n	8000f5a <__udivmoddi4+0x216>
 8000f4a:	45f1      	cmp	r9, lr
 8000f4c:	d205      	bcs.n	8000f5a <__udivmoddi4+0x216>
 8000f4e:	ebbe 0302 	subs.w	r3, lr, r2
 8000f52:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f56:	3801      	subs	r0, #1
 8000f58:	46e0      	mov	r8, ip
 8000f5a:	b15d      	cbz	r5, 8000f74 <__udivmoddi4+0x230>
 8000f5c:	ebb9 0203 	subs.w	r2, r9, r3
 8000f60:	eb64 0408 	sbc.w	r4, r4, r8
 8000f64:	fa04 f606 	lsl.w	r6, r4, r6
 8000f68:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	431e      	orrs	r6, r3
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e736      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f78:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7c:	0c01      	lsrs	r1, r0, #16
 8000f7e:	4614      	mov	r4, r2
 8000f80:	b280      	uxth	r0, r0
 8000f82:	4696      	mov	lr, r2
 8000f84:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f88:	2620      	movs	r6, #32
 8000f8a:	4690      	mov	r8, r2
 8000f8c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f90:	4610      	mov	r0, r2
 8000f92:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f96:	eba3 0308 	sub.w	r3, r3, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e74b      	b.n	8000e38 <__udivmoddi4+0xf4>
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	f1c6 0320 	rsb	r3, r6, #32
 8000fa6:	fa01 f206 	lsl.w	r2, r1, r6
 8000faa:	fa21 f803 	lsr.w	r8, r1, r3
 8000fae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fb2:	fa20 f303 	lsr.w	r3, r0, r3
 8000fb6:	b2bc      	uxth	r4, r7
 8000fb8:	40b0      	lsls	r0, r6
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	0c02      	lsrs	r2, r0, #16
 8000fbe:	0c19      	lsrs	r1, r3, #16
 8000fc0:	b280      	uxth	r0, r0
 8000fc2:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fc6:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fca:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fce:	fb09 f804 	mul.w	r8, r9, r4
 8000fd2:	4588      	cmp	r8, r1
 8000fd4:	d951      	bls.n	800107a <__udivmoddi4+0x336>
 8000fd6:	1879      	adds	r1, r7, r1
 8000fd8:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000fdc:	bf2c      	ite	cs
 8000fde:	f04f 0a01 	movcs.w	sl, #1
 8000fe2:	f04f 0a00 	movcc.w	sl, #0
 8000fe6:	4588      	cmp	r8, r1
 8000fe8:	d902      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000fea:	f1ba 0f00 	cmp.w	sl, #0
 8000fee:	d031      	beq.n	8001054 <__udivmoddi4+0x310>
 8000ff0:	eba1 0108 	sub.w	r1, r1, r8
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	fb0e 1119 	mls	r1, lr, r9, r1
 8001000:	b29b      	uxth	r3, r3
 8001002:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001006:	4543      	cmp	r3, r8
 8001008:	d235      	bcs.n	8001076 <__udivmoddi4+0x332>
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001010:	bf2c      	ite	cs
 8001012:	f04f 0a01 	movcs.w	sl, #1
 8001016:	f04f 0a00 	movcc.w	sl, #0
 800101a:	4543      	cmp	r3, r8
 800101c:	d2bb      	bcs.n	8000f96 <__udivmoddi4+0x252>
 800101e:	f1ba 0f00 	cmp.w	sl, #0
 8001022:	d1b8      	bne.n	8000f96 <__udivmoddi4+0x252>
 8001024:	f1a9 0102 	sub.w	r1, r9, #2
 8001028:	443b      	add	r3, r7
 800102a:	e7b4      	b.n	8000f96 <__udivmoddi4+0x252>
 800102c:	1a84      	subs	r4, r0, r2
 800102e:	eb68 0203 	sbc.w	r2, r8, r3
 8001032:	2001      	movs	r0, #1
 8001034:	4696      	mov	lr, r2
 8001036:	e6eb      	b.n	8000e10 <__udivmoddi4+0xcc>
 8001038:	443a      	add	r2, r7
 800103a:	f1a8 0802 	sub.w	r8, r8, #2
 800103e:	e72b      	b.n	8000e98 <__udivmoddi4+0x154>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e710      	b.n	8000e6a <__udivmoddi4+0x126>
 8001048:	3902      	subs	r1, #2
 800104a:	443b      	add	r3, r7
 800104c:	e6a9      	b.n	8000da2 <__udivmoddi4+0x5e>
 800104e:	443a      	add	r2, r7
 8001050:	3802      	subs	r0, #2
 8001052:	e6be      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8001054:	eba7 0808 	sub.w	r8, r7, r8
 8001058:	f1a9 0c02 	sub.w	ip, r9, #2
 800105c:	4441      	add	r1, r8
 800105e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001062:	fb09 f804 	mul.w	r8, r9, r4
 8001066:	e7c9      	b.n	8000ffc <__udivmoddi4+0x2b8>
 8001068:	f1ae 0e02 	sub.w	lr, lr, #2
 800106c:	443c      	add	r4, r7
 800106e:	e744      	b.n	8000efa <__udivmoddi4+0x1b6>
 8001070:	3b02      	subs	r3, #2
 8001072:	443c      	add	r4, r7
 8001074:	e75e      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8001076:	4649      	mov	r1, r9
 8001078:	e78d      	b.n	8000f96 <__udivmoddi4+0x252>
 800107a:	eba1 0108 	sub.w	r1, r1, r8
 800107e:	46cc      	mov	ip, r9
 8001080:	fbb1 f9fe 	udiv	r9, r1, lr
 8001084:	fb09 f804 	mul.w	r8, r9, r4
 8001088:	e7b8      	b.n	8000ffc <__udivmoddi4+0x2b8>
 800108a:	bf00      	nop

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80010b4 <FusionDegreesToRadians+0x24>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	3c8efa35 	.word	0x3c8efa35

080010b8 <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	105a      	asrs	r2, r3, #1
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <FusionFastInverseSqrt+0x54>)
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80010d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80010d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d8:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001110 <FusionFastInverseSqrt+0x58>
 80010dc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80010e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001114 <FusionFastInverseSqrt+0x5c>
 80010f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010f8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80010fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	5f1f1412 	.word	0x5f1f1412
 8001110:	3f36d312 	.word	0x3f36d312
 8001114:	3fd851ff 	.word	0x3fd851ff

08001118 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	eef0 6a40 	vmov.f32	s13, s0
 8001122:	eeb0 7a60 	vmov.f32	s14, s1
 8001126:	eef0 7a41 	vmov.f32	s15, s2
 800112a:	edc7 6a01 	vstr	s13, [r7, #4]
 800112e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 8001136:	edd7 7a01 	vldr	s15, [r7, #4]
 800113a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d10f      	bne.n	8001164 <FusionVectorIsZero+0x4c>
 8001144:	edd7 7a02 	vldr	s15, [r7, #8]
 8001148:	eef5 7a40 	vcmp.f32	s15, #0.0
 800114c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001150:	d108      	bne.n	8001164 <FusionVectorIsZero+0x4c>
 8001152:	edd7 7a03 	vldr	s15, [r7, #12]
 8001156:	eef5 7a40 	vcmp.f32	s15, #0.0
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	d101      	bne.n	8001164 <FusionVectorIsZero+0x4c>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <FusionVectorIsZero+0x4e>
 8001164:	2300      	movs	r3, #0
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8001178:	b480      	push	{r7}
 800117a:	b091      	sub	sp, #68	@ 0x44
 800117c:	af00      	add	r7, sp, #0
 800117e:	eeb0 5a40 	vmov.f32	s10, s0
 8001182:	eef0 5a60 	vmov.f32	s11, s1
 8001186:	eeb0 6a41 	vmov.f32	s12, s2
 800118a:	eef0 6a61 	vmov.f32	s13, s3
 800118e:	eeb0 7a42 	vmov.f32	s14, s4
 8001192:	eef0 7a62 	vmov.f32	s15, s5
 8001196:	ed87 5a07 	vstr	s10, [r7, #28]
 800119a:	edc7 5a08 	vstr	s11, [r7, #32]
 800119e:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80011a2:	edc7 6a04 	vstr	s13, [r7, #16]
 80011a6:	ed87 7a05 	vstr	s14, [r7, #20]
 80011aa:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 80011ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80011b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011b6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011ba:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80011be:	ed97 7a08 	vldr	s14, [r7, #32]
 80011c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011ca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80011ce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80011d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d6:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80011da:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 80011de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011e2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80011e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80011ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011f2:	ee06 1a90 	vmov	s13, r1
 80011f6:	ee07 2a10 	vmov	s14, r2
 80011fa:	ee07 3a90 	vmov	s15, r3
}
 80011fe:	eeb0 0a66 	vmov.f32	s0, s13
 8001202:	eef0 0a47 	vmov.f32	s1, s14
 8001206:	eeb0 1a67 	vmov.f32	s2, s15
 800120a:	3744      	adds	r7, #68	@ 0x44
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8001214:	b480      	push	{r7}
 8001216:	b091      	sub	sp, #68	@ 0x44
 8001218:	af00      	add	r7, sp, #0
 800121a:	eeb0 5a40 	vmov.f32	s10, s0
 800121e:	eef0 5a60 	vmov.f32	s11, s1
 8001222:	eeb0 6a41 	vmov.f32	s12, s2
 8001226:	eef0 6a61 	vmov.f32	s13, s3
 800122a:	eeb0 7a42 	vmov.f32	s14, s4
 800122e:	eef0 7a62 	vmov.f32	s15, s5
 8001232:	ed87 5a07 	vstr	s10, [r7, #28]
 8001236:	edc7 5a08 	vstr	s11, [r7, #32]
 800123a:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800123e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001242:	ed87 7a05 	vstr	s14, [r7, #20]
 8001246:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 800124a:	ed97 7a07 	vldr	s14, [r7, #28]
 800124e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001252:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001256:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 800125a:	ed97 7a08 	vldr	s14, [r7, #32]
 800125e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001262:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001266:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 800126a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800126e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001272:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001276:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 800127a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800127e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001282:	ca07      	ldmia	r2, {r0, r1, r2}
 8001284:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001288:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800128a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800128c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800128e:	ee06 1a90 	vmov	s13, r1
 8001292:	ee07 2a10 	vmov	s14, r2
 8001296:	ee07 3a90 	vmov	s15, r3
}
 800129a:	eeb0 0a66 	vmov.f32	s0, s13
 800129e:	eef0 0a47 	vmov.f32	s1, s14
 80012a2:	eeb0 1a67 	vmov.f32	s2, s15
 80012a6:	3744      	adds	r7, #68	@ 0x44
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	eef0 6a40 	vmov.f32	s13, s0
 80012ba:	eeb0 7a60 	vmov.f32	s14, s1
 80012be:	eef0 7a41 	vmov.f32	s15, s2
 80012c2:	edc7 6a01 	vstr	s13, [r7, #4]
 80012c6:	ed87 7a02 	vstr	s14, [r7, #8]
 80012ca:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 80012ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80012d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012da:	edd7 7a03 	vldr	s15, [r7, #12]
 80012de:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80012e2:	eeb0 0a67 	vmov.f32	s0, s15
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80012f0:	b480      	push	{r7}
 80012f2:	b08f      	sub	sp, #60	@ 0x3c
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	eef0 6a40 	vmov.f32	s13, s0
 80012fa:	eeb0 7a60 	vmov.f32	s14, s1
 80012fe:	eef0 7a41 	vmov.f32	s15, s2
 8001302:	edc7 1a04 	vstr	s3, [r7, #16]
 8001306:	edc7 6a05 	vstr	s13, [r7, #20]
 800130a:	ed87 7a06 	vstr	s14, [r7, #24]
 800130e:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 8001312:	ed97 7a05 	vldr	s14, [r7, #20]
 8001316:	edd7 7a04 	vldr	s15, [r7, #16]
 800131a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800131e:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8001322:	ed97 7a06 	vldr	s14, [r7, #24]
 8001326:	edd7 7a04 	vldr	s15, [r7, #16]
 800132a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800132e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .z = vector.axis.z * scalar,
 8001332:	ed97 7a07 	vldr	s14, [r7, #28]
 8001336:	edd7 7a04 	vldr	s15, [r7, #16]
 800133a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800133e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }};
    return result;
 8001342:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001346:	f107 0220 	add.w	r2, r7, #32
 800134a:	ca07      	ldmia	r2, {r0, r1, r2}
 800134c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001356:	ee06 1a90 	vmov	s13, r1
 800135a:	ee07 2a10 	vmov	s14, r2
 800135e:	ee07 3a90 	vmov	s15, r3
}
 8001362:	eeb0 0a66 	vmov.f32	s0, s13
 8001366:	eef0 0a47 	vmov.f32	s1, s14
 800136a:	eeb0 1a67 	vmov.f32	s2, s15
 800136e:	373c      	adds	r7, #60	@ 0x3c
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001378:	b480      	push	{r7}
 800137a:	b091      	sub	sp, #68	@ 0x44
 800137c:	af00      	add	r7, sp, #0
 800137e:	eeb0 5a40 	vmov.f32	s10, s0
 8001382:	eef0 5a60 	vmov.f32	s11, s1
 8001386:	eeb0 6a41 	vmov.f32	s12, s2
 800138a:	eef0 6a61 	vmov.f32	s13, s3
 800138e:	eeb0 7a42 	vmov.f32	s14, s4
 8001392:	eef0 7a62 	vmov.f32	s15, s5
 8001396:	ed87 5a07 	vstr	s10, [r7, #28]
 800139a:	edc7 5a08 	vstr	s11, [r7, #32]
 800139e:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80013a2:	edc7 6a04 	vstr	s13, [r7, #16]
 80013a6:	ed87 7a05 	vstr	s14, [r7, #20]
 80013aa:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 80013ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80013b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80013ba:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 80013be:	ed97 7a08 	vldr	s14, [r7, #32]
 80013c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80013ca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 80013ce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80013d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013d6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80013da:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 80013de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013e2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80013e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80013ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013f2:	ee06 1a90 	vmov	s13, r1
 80013f6:	ee07 2a10 	vmov	s14, r2
 80013fa:	ee07 3a90 	vmov	s15, r3
}
 80013fe:	eeb0 0a66 	vmov.f32	s0, s13
 8001402:	eef0 0a47 	vmov.f32	s1, s14
 8001406:	eeb0 1a67 	vmov.f32	s2, s15
 800140a:	3744      	adds	r7, #68	@ 0x44
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001414:	b480      	push	{r7}
 8001416:	b091      	sub	sp, #68	@ 0x44
 8001418:	af00      	add	r7, sp, #0
 800141a:	eeb0 5a40 	vmov.f32	s10, s0
 800141e:	eef0 5a60 	vmov.f32	s11, s1
 8001422:	eeb0 6a41 	vmov.f32	s12, s2
 8001426:	eef0 6a61 	vmov.f32	s13, s3
 800142a:	eeb0 7a42 	vmov.f32	s14, s4
 800142e:	eef0 7a62 	vmov.f32	s15, s5
 8001432:	ed87 5a07 	vstr	s10, [r7, #28]
 8001436:	edc7 5a08 	vstr	s11, [r7, #32]
 800143a:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800143e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001442:	ed87 7a05 	vstr	s14, [r7, #20]
 8001446:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800144a:	ed97 7a08 	vldr	s14, [r7, #32]
 800144e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001456:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800145a:	edd7 7a05 	vldr	s15, [r7, #20]
 800145e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001462:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001466:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = A.z * B.x - A.x * B.z,
 800146a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800146e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001476:	edd7 6a07 	vldr	s13, [r7, #28]
 800147a:	edd7 7a06 	vldr	s15, [r7, #24]
 800147e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001482:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001486:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = A.x * B.y - A.y * B.x,
 800148a:	ed97 7a07 	vldr	s14, [r7, #28]
 800148e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001492:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001496:	edd7 6a08 	vldr	s13, [r7, #32]
 800149a:	edd7 7a04 	vldr	s15, [r7, #16]
 800149e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a2:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80014a6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 80014aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014ae:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80014b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014b8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80014ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80014bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014be:	ee06 1a90 	vmov	s13, r1
 80014c2:	ee07 2a10 	vmov	s14, r2
 80014c6:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 80014ca:	eeb0 0a66 	vmov.f32	s0, s13
 80014ce:	eef0 0a47 	vmov.f32	s1, s14
 80014d2:	eeb0 1a67 	vmov.f32	s2, s15
 80014d6:	3744      	adds	r7, #68	@ 0x44
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	@ 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	eeb0 5a40 	vmov.f32	s10, s0
 80014ea:	eef0 5a60 	vmov.f32	s11, s1
 80014ee:	eeb0 6a41 	vmov.f32	s12, s2
 80014f2:	eef0 6a61 	vmov.f32	s13, s3
 80014f6:	eeb0 7a42 	vmov.f32	s14, s4
 80014fa:	eef0 7a62 	vmov.f32	s15, s5
 80014fe:	ed87 5a03 	vstr	s10, [r7, #12]
 8001502:	edc7 5a04 	vstr	s11, [r7, #16]
 8001506:	ed87 6a05 	vstr	s12, [r7, #20]
 800150a:	edc7 6a00 	vstr	s13, [r7]
 800150e:	ed87 7a01 	vstr	s14, [r7, #4]
 8001512:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 8001516:	ed97 5a00 	vldr	s10, [r7]
 800151a:	edd7 5a01 	vldr	s11, [r7, #4]
 800151e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001522:	edd7 6a03 	vldr	s13, [r7, #12]
 8001526:	ed97 7a04 	vldr	s14, [r7, #16]
 800152a:	edd7 7a05 	vldr	s15, [r7, #20]
 800152e:	eef0 1a45 	vmov.f32	s3, s10
 8001532:	eeb0 2a65 	vmov.f32	s4, s11
 8001536:	eef0 2a46 	vmov.f32	s5, s12
 800153a:	eeb0 0a66 	vmov.f32	s0, s13
 800153e:	eef0 0a47 	vmov.f32	s1, s14
 8001542:	eeb0 1a67 	vmov.f32	s2, s15
 8001546:	f7ff ff17 	bl	8001378 <FusionVectorHadamardProduct>
 800154a:	eef0 6a40 	vmov.f32	s13, s0
 800154e:	eeb0 7a60 	vmov.f32	s14, s1
 8001552:	eef0 7a41 	vmov.f32	s15, s2
 8001556:	edc7 6a07 	vstr	s13, [r7, #28]
 800155a:	ed87 7a08 	vstr	s14, [r7, #32]
 800155e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8001562:	edd7 6a07 	vldr	s13, [r7, #28]
 8001566:	ed97 7a08 	vldr	s14, [r7, #32]
 800156a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800156e:	eeb0 0a66 	vmov.f32	s0, s13
 8001572:	eef0 0a47 	vmov.f32	s1, s14
 8001576:	eeb0 1a67 	vmov.f32	s2, s15
 800157a:	f7ff fe99 	bl	80012b0 <FusionVectorSum>
 800157e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	3728      	adds	r7, #40	@ 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	eef0 6a40 	vmov.f32	s13, s0
 8001596:	eeb0 7a60 	vmov.f32	s14, s1
 800159a:	eef0 7a41 	vmov.f32	s15, s2
 800159e:	edc7 6a01 	vstr	s13, [r7, #4]
 80015a2:	ed87 7a02 	vstr	s14, [r7, #8]
 80015a6:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80015aa:	ed97 5a01 	vldr	s10, [r7, #4]
 80015ae:	edd7 5a02 	vldr	s11, [r7, #8]
 80015b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80015b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80015ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80015be:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c2:	eef0 1a45 	vmov.f32	s3, s10
 80015c6:	eeb0 2a65 	vmov.f32	s4, s11
 80015ca:	eef0 2a46 	vmov.f32	s5, s12
 80015ce:	eeb0 0a66 	vmov.f32	s0, s13
 80015d2:	eef0 0a47 	vmov.f32	s1, s14
 80015d6:	eeb0 1a67 	vmov.f32	s2, s15
 80015da:	f7ff fecd 	bl	8001378 <FusionVectorHadamardProduct>
 80015de:	eef0 6a40 	vmov.f32	s13, s0
 80015e2:	eeb0 7a60 	vmov.f32	s14, s1
 80015e6:	eef0 7a41 	vmov.f32	s15, s2
 80015ea:	edc7 6a05 	vstr	s13, [r7, #20]
 80015ee:	ed87 7a06 	vstr	s14, [r7, #24]
 80015f2:	edc7 7a07 	vstr	s15, [r7, #28]
 80015f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80015fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80015fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001602:	eeb0 0a66 	vmov.f32	s0, s13
 8001606:	eef0 0a47 	vmov.f32	s1, s14
 800160a:	eeb0 1a67 	vmov.f32	s2, s15
 800160e:	f7ff fe4f 	bl	80012b0 <FusionVectorSum>
 8001612:	eef0 7a40 	vmov.f32	s15, s0
}
 8001616:	eeb0 0a67 	vmov.f32	s0, s15
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	@ 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	eef0 6a40 	vmov.f32	s13, s0
 800162a:	eeb0 7a60 	vmov.f32	s14, s1
 800162e:	eef0 7a41 	vmov.f32	s15, s2
 8001632:	edc7 6a05 	vstr	s13, [r7, #20]
 8001636:	ed87 7a06 	vstr	s14, [r7, #24]
 800163a:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800163e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001642:	ed97 7a06 	vldr	s14, [r7, #24]
 8001646:	edd7 7a07 	vldr	s15, [r7, #28]
 800164a:	eeb0 0a66 	vmov.f32	s0, s13
 800164e:	eef0 0a47 	vmov.f32	s1, s14
 8001652:	eeb0 1a67 	vmov.f32	s2, s15
 8001656:	f7ff ff99 	bl	800158c <FusionVectorMagnitudeSquared>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	eeb0 0a67 	vmov.f32	s0, s15
 8001662:	f7ff fd29 	bl	80010b8 <FusionFastInverseSqrt>
 8001666:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800166a:	edd7 6a05 	vldr	s13, [r7, #20]
 800166e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001672:	edd7 7a07 	vldr	s15, [r7, #28]
 8001676:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 800167a:	eeb0 0a66 	vmov.f32	s0, s13
 800167e:	eef0 0a47 	vmov.f32	s1, s14
 8001682:	eeb0 1a67 	vmov.f32	s2, s15
 8001686:	f7ff fe33 	bl	80012f0 <FusionVectorMultiplyScalar>
 800168a:	eef0 6a40 	vmov.f32	s13, s0
 800168e:	eeb0 7a60 	vmov.f32	s14, s1
 8001692:	eef0 7a41 	vmov.f32	s15, s2
 8001696:	edc7 6a08 	vstr	s13, [r7, #32]
 800169a:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 800169e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 80016a2:	6a39      	ldr	r1, [r7, #32]
 80016a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a8:	ee06 1a90 	vmov	s13, r1
 80016ac:	ee07 2a10 	vmov	s14, r2
 80016b0:	ee07 3a90 	vmov	s15, r3
}
 80016b4:	eeb0 0a66 	vmov.f32	s0, s13
 80016b8:	eef0 0a47 	vmov.f32	s1, s14
 80016bc:	eeb0 1a67 	vmov.f32	s2, s15
 80016c0:	3730      	adds	r7, #48	@ 0x30
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 80016c6:	b490      	push	{r4, r7}
 80016c8:	b094      	sub	sp, #80	@ 0x50
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	eeb0 4a40 	vmov.f32	s8, s0
 80016d0:	eef0 4a60 	vmov.f32	s9, s1
 80016d4:	eeb0 5a41 	vmov.f32	s10, s2
 80016d8:	eef0 5a61 	vmov.f32	s11, s3
 80016dc:	eeb0 6a42 	vmov.f32	s12, s4
 80016e0:	eef0 6a62 	vmov.f32	s13, s5
 80016e4:	eeb0 7a43 	vmov.f32	s14, s6
 80016e8:	eef0 7a63 	vmov.f32	s15, s7
 80016ec:	ed87 4a08 	vstr	s8, [r7, #32]
 80016f0:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 80016f4:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 80016f8:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 80016fc:	ed87 6a04 	vstr	s12, [r7, #16]
 8001700:	edc7 6a05 	vstr	s13, [r7, #20]
 8001704:	ed87 7a06 	vstr	s14, [r7, #24]
 8001708:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 800170c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001710:	edd7 7a04 	vldr	s15, [r7, #16]
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001718:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 800171c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001720:	edd7 7a05 	vldr	s15, [r7, #20]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001728:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 800172c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001730:	edd7 7a06 	vldr	s15, [r7, #24]
 8001734:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001738:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 800173c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001740:	edd7 7a07 	vldr	s15, [r7, #28]
 8001744:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001748:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }};
    return result;
 800174c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001750:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001756:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800175a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800175c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800175e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001762:	ee06 0a10 	vmov	s12, r0
 8001766:	ee06 1a90 	vmov	s13, r1
 800176a:	ee07 2a10 	vmov	s14, r2
 800176e:	ee07 3a90 	vmov	s15, r3
}
 8001772:	eeb0 0a46 	vmov.f32	s0, s12
 8001776:	eef0 0a66 	vmov.f32	s1, s13
 800177a:	eeb0 1a47 	vmov.f32	s2, s14
 800177e:	eef0 1a67 	vmov.f32	s3, s15
 8001782:	3750      	adds	r7, #80	@ 0x50
 8001784:	46bd      	mov	sp, r7
 8001786:	bc90      	pop	{r4, r7}
 8001788:	4770      	bx	lr

0800178a <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 800178a:	b490      	push	{r4, r7}
 800178c:	b094      	sub	sp, #80	@ 0x50
 800178e:	af00      	add	r7, sp, #0
 8001790:	eeb0 4a40 	vmov.f32	s8, s0
 8001794:	eef0 4a60 	vmov.f32	s9, s1
 8001798:	eeb0 5a41 	vmov.f32	s10, s2
 800179c:	eef0 5a61 	vmov.f32	s11, s3
 80017a0:	eeb0 6a42 	vmov.f32	s12, s4
 80017a4:	eef0 6a62 	vmov.f32	s13, s5
 80017a8:	eeb0 7a43 	vmov.f32	s14, s6
 80017ac:	eef0 7a63 	vmov.f32	s15, s7
 80017b0:	ed87 4a08 	vstr	s8, [r7, #32]
 80017b4:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 80017b8:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 80017bc:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 80017c0:	ed87 6a04 	vstr	s12, [r7, #16]
 80017c4:	edc7 6a05 	vstr	s13, [r7, #20]
 80017c8:	ed87 7a06 	vstr	s14, [r7, #24]
 80017cc:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 80017d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80017d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017dc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80017e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ec:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80017f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80017f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017fc:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001800:	edd7 7a07 	vldr	s15, [r7, #28]
 8001804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001808:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800180c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001810:	ed97 7a08 	vldr	s14, [r7, #32]
 8001814:	edd7 7a05 	vldr	s15, [r7, #20]
 8001818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001820:	edd7 7a04 	vldr	s15, [r7, #16]
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee37 7a27 	vadd.f32	s14, s14, s15
 800182c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001830:	edd7 7a07 	vldr	s15, [r7, #28]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001840:	edd7 7a06 	vldr	s15, [r7, #24]
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800184c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001850:	ed97 7a08 	vldr	s14, [r7, #32]
 8001854:	edd7 7a06 	vldr	s15, [r7, #24]
 8001858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001860:	edd7 7a07 	vldr	s15, [r7, #28]
 8001864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001868:	ee37 7a67 	vsub.f32	s14, s14, s15
 800186c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001870:	edd7 7a04 	vldr	s15, [r7, #16]
 8001874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001878:	ee37 7a27 	vadd.f32	s14, s14, s15
 800187c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001880:	edd7 7a05 	vldr	s15, [r7, #20]
 8001884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001888:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800188c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001890:	ed97 7a08 	vldr	s14, [r7, #32]
 8001894:	edd7 7a07 	vldr	s15, [r7, #28]
 8001898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80018a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ac:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80018b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018bc:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80018c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80018cc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }};
    return result;
 80018d0:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80018d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018de:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80018e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80018e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018e6:	ee06 0a10 	vmov	s12, r0
 80018ea:	ee06 1a90 	vmov	s13, r1
 80018ee:	ee07 2a10 	vmov	s14, r2
 80018f2:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 80018f6:	eeb0 0a46 	vmov.f32	s0, s12
 80018fa:	eef0 0a66 	vmov.f32	s1, s13
 80018fe:	eeb0 1a47 	vmov.f32	s2, s14
 8001902:	eef0 1a67 	vmov.f32	s3, s15
 8001906:	3750      	adds	r7, #80	@ 0x50
 8001908:	46bd      	mov	sp, r7
 800190a:	bc90      	pop	{r4, r7}
 800190c:	4770      	bx	lr

0800190e <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 800190e:	b490      	push	{r4, r7}
 8001910:	b094      	sub	sp, #80	@ 0x50
 8001912:	af00      	add	r7, sp, #0
 8001914:	eef0 4a40 	vmov.f32	s9, s0
 8001918:	eeb0 5a60 	vmov.f32	s10, s1
 800191c:	eef0 5a41 	vmov.f32	s11, s2
 8001920:	eeb0 6a61 	vmov.f32	s12, s3
 8001924:	eef0 6a42 	vmov.f32	s13, s4
 8001928:	eeb0 7a62 	vmov.f32	s14, s5
 800192c:	eef0 7a43 	vmov.f32	s15, s6
 8001930:	edc7 4a08 	vstr	s9, [r7, #32]
 8001934:	ed87 5a09 	vstr	s10, [r7, #36]	@ 0x24
 8001938:	edc7 5a0a 	vstr	s11, [r7, #40]	@ 0x28
 800193c:	ed87 6a0b 	vstr	s12, [r7, #44]	@ 0x2c
 8001940:	edc7 6a05 	vstr	s13, [r7, #20]
 8001944:	ed87 7a06 	vstr	s14, [r7, #24]
 8001948:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 800194c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001950:	eeb1 7a67 	vneg.f32	s14, s15
 8001954:	edd7 7a05 	vldr	s15, [r7, #20]
 8001958:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001960:	edd7 7a06 	vldr	s15, [r7, #24]
 8001964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800196c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001970:	edd7 7a07 	vldr	s15, [r7, #28]
 8001974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 800197c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8001980:	ed97 7a08 	vldr	s14, [r7, #32]
 8001984:	edd7 7a05 	vldr	s15, [r7, #20]
 8001988:	ee27 7a27 	vmul.f32	s14, s14, s15
 800198c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001990:	edd7 7a07 	vldr	s15, [r7, #28]
 8001994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001998:	ee37 7a27 	vadd.f32	s14, s14, s15
 800199c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80019a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80019a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a8:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80019ac:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 80019b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80019b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019bc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80019c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019cc:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80019d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80019dc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 80019e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80019e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80019f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80019f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019fc:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001a00:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a08:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001a0c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }};
    return result;
 8001a10:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001a14:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a1e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001a20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001a22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a26:	ee06 0a10 	vmov	s12, r0
 8001a2a:	ee06 1a90 	vmov	s13, r1
 8001a2e:	ee07 2a10 	vmov	s14, r2
 8001a32:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 8001a36:	eeb0 0a46 	vmov.f32	s0, s12
 8001a3a:	eef0 0a66 	vmov.f32	s1, s13
 8001a3e:	eeb0 1a47 	vmov.f32	s2, s14
 8001a42:	eef0 1a67 	vmov.f32	s3, s15
 8001a46:	3750      	adds	r7, #80	@ 0x50
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc90      	pop	{r4, r7}
 8001a4c:	4770      	bx	lr

08001a4e <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8001a4e:	b590      	push	{r4, r7, lr}
 8001a50:	b093      	sub	sp, #76	@ 0x4c
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	eeb0 6a40 	vmov.f32	s12, s0
 8001a58:	eef0 6a60 	vmov.f32	s13, s1
 8001a5c:	eeb0 7a41 	vmov.f32	s14, s2
 8001a60:	eef0 7a61 	vmov.f32	s15, s3
 8001a64:	ed87 6a04 	vstr	s12, [r7, #16]
 8001a68:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a6c:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a70:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001a74:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a80:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a84:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a90:	edd7 6a06 	vldr	s13, [r7, #24]
 8001a94:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001aa4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab4:	f7ff fb00 	bl	80010b8 <FusionFastInverseSqrt>
 8001ab8:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 8001abc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ac0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ac8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .x = Q.x * magnitudeReciprocal,
 8001acc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ad0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ad8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = Q.y * magnitudeReciprocal,
 8001adc:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ae0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ae8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = Q.z * magnitudeReciprocal,
 8001aec:	ed97 7a07 	vldr	s14, [r7, #28]
 8001af0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001af8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 8001afc:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b0a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b12:	ee06 0a10 	vmov	s12, r0
 8001b16:	ee06 1a90 	vmov	s13, r1
 8001b1a:	ee07 2a10 	vmov	s14, r2
 8001b1e:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8001b22:	eeb0 0a46 	vmov.f32	s0, s12
 8001b26:	eef0 0a66 	vmov.f32	s1, s13
 8001b2a:	eeb0 1a47 	vmov.f32	s2, s14
 8001b2e:	eef0 1a67 	vmov.f32	s3, s15
 8001b32:	374c      	adds	r7, #76	@ 0x4c
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <FusionAhrsInitialise+0x38>)
 8001b42:	f107 0408 	add.w	r4, r7, #8
 8001b46:	461d      	mov	r5, r3
 8001b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b50:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	4619      	mov	r1, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f86e 	bl	8001c3c <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f807 	bl	8001b74 <FusionAhrsReset>
}
 8001b66:	bf00      	nop
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	08013748 	.word	0x08013748

08001b74 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm. This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8001b74:	b480      	push	{r7}
 8001b76:	b091      	sub	sp, #68	@ 0x44
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b82:	619a      	str	r2, [r3, #24]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	61da      	str	r2, [r3, #28]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	625a      	str	r2, [r3, #36]	@ 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	631a      	str	r2, [r3, #48]	@ 0x30
    ahrs->initialising = true;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001c38 <FusionAhrsReset+0xc4>)
 8001bc0:	639a      	str	r2, [r3, #56]	@ 0x38
    ahrs->angularRateRecovery = false;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	649a      	str	r2, [r3, #72]	@ 0x48
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	64da      	str	r2, [r3, #76]	@ 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	659a      	str	r2, [r3, #88]	@ 0x58
    ahrs->accelerometerIgnored = false;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	661a      	str	r2, [r3, #96]	@ 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	665a      	str	r2, [r3, #100]	@ 0x64
    ahrs->magnetometerIgnored = false;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    ahrs->magneticRecoveryTrigger = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	66da      	str	r2, [r3, #108]	@ 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	461a      	mov	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001c2a:	bf00      	nop
 8001c2c:	3744      	adds	r7, #68	@ 0x44
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	41200000 	.word	0x41200000

08001c3c <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	d007      	beq.n	8001c76 <FusionAhrsSetSettings+0x3a>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c6c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001da0 <FusionAhrsSetSettings+0x164>
 8001c70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c74:	e001      	b.n	8001c7a <FusionAhrsSetSettings+0x3e>
 8001c76:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8001da4 <FusionAhrsSetSettings+0x168>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8e:	d01b      	beq.n	8001cc8 <FusionAhrsSetSettings+0x8c>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	f7ff f9f9 	bl	8001090 <FusionDegreesToRadians>
 8001c9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca6:	f010 fb0b 	bl	80122c0 <sinf>
 8001caa:	eef0 7a40 	vmov.f32	s15, s0
 8001cae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb6:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	f010 fa51 	bl	8012164 <powf>
 8001cc2:	eef0 7a40 	vmov.f32	s15, s0
 8001cc6:	e001      	b.n	8001ccc <FusionAhrsSetSettings+0x90>
 8001cc8:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8001da4 <FusionAhrsSetSettings+0x168>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	d01b      	beq.n	8001d1a <FusionAhrsSetSettings+0xde>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cec:	f7ff f9d0 	bl	8001090 <FusionDegreesToRadians>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	f010 fae2 	bl	80122c0 <sinf>
 8001cfc:	eef0 7a40 	vmov.f32	s15, s0
 8001d00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d08:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	f010 fa28 	bl	8012164 <powf>
 8001d14:	eef0 7a40 	vmov.f32	s15, s0
 8001d18:	e001      	b.n	8001d1e <FusionAhrsSetSettings+0xe2>
 8001d1a:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8001da4 <FusionAhrsSetSettings+0x168>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	461a      	mov	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	665a      	str	r2, [r3, #100]	@ 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d003      	beq.n	8001d58 <FusionAhrsSetSettings+0x11c>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a13      	ldr	r2, [pc, #76]	@ (8001da8 <FusionAhrsSetSettings+0x16c>)
 8001d5c:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a11      	ldr	r2, [pc, #68]	@ (8001da8 <FusionAhrsSetSettings+0x16c>)
 8001d62:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d6a:	f083 0301 	eor.w	r3, r3, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d82:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001d86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d8a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001d8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	3f7ae148 	.word	0x3f7ae148
 8001da4:	7f7fffff 	.word	0x7f7fffff
 8001da8:	7f7fffff 	.word	0x7f7fffff

08001dac <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b0bf      	sub	sp, #252	@ 0xfc
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001db4:	eeb0 5a61 	vmov.f32	s10, s3
 8001db8:	eef0 5a42 	vmov.f32	s11, s4
 8001dbc:	eeb0 6a62 	vmov.f32	s12, s5
 8001dc0:	eef0 6a43 	vmov.f32	s13, s6
 8001dc4:	eeb0 7a63 	vmov.f32	s14, s7
 8001dc8:	eef0 7a44 	vmov.f32	s15, s8
 8001dcc:	edc7 4a01 	vstr	s9, [r7, #4]
 8001dd0:	ed87 0a08 	vstr	s0, [r7, #32]
 8001dd4:	edc7 0a09 	vstr	s1, [r7, #36]	@ 0x24
 8001dd8:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8001ddc:	ed87 5a05 	vstr	s10, [r7, #20]
 8001de0:	edc7 5a06 	vstr	s11, [r7, #24]
 8001de4:	ed87 6a07 	vstr	s12, [r7, #28]
 8001de8:	edc7 6a02 	vstr	s13, [r7, #8]
 8001dec:	ed87 7a03 	vstr	s14, [r7, #12]
 8001df0:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8001df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df6:	3328      	adds	r3, #40	@ 0x28
 8001df8:	f107 0214 	add.w	r2, r7, #20
 8001dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabsf(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabsf(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabsf(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 8001e02:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e06:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	dc17      	bgt.n	8001e4a <FusionAhrsUpdate+0x9e>
 8001e1a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e1e:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e24:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	dc0b      	bgt.n	8001e4a <FusionAhrsUpdate+0x9e>
 8001e32:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001e36:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	dd15      	ble.n	8001e76 <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 8001e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e4c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001e50:	3318      	adds	r3, #24
 8001e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 8001e58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e5a:	f7ff fe8b 	bl	8001b74 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 8001e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e60:	f103 0418 	add.w	r4, r3, #24
 8001e64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising) {
 8001e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d02d      	beq.n	8001edc <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8001e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e82:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e88:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8001e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 8001e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	d407      	bmi.n	8001ec4 <FusionAhrsUpdate+0x118>
 8001eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	d10b      	bne.n	8001edc <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 8001ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eca:	639a      	str	r2, [r3, #56]	@ 0x38
            ahrs->initialising = false;
 8001ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            ahrs->angularRateRecovery = false;
 8001ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8001edc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ede:	f000 faf4 	bl	80024ca <HalfGravity>
 8001ee2:	eef0 6a40 	vmov.f32	s13, s0
 8001ee6:	eeb0 7a60 	vmov.f32	s14, s1
 8001eea:	eef0 7a41 	vmov.f32	s15, s2
 8001eee:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 8001ef2:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 8001ef6:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    ahrs->accelerometerIgnored = true;
 8001f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 8001f1a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f26:	eeb0 0a66 	vmov.f32	s0, s13
 8001f2a:	eef0 0a47 	vmov.f32	s1, s14
 8001f2e:	eeb0 1a67 	vmov.f32	s2, s15
 8001f32:	f7ff f8f1 	bl	8001118 <FusionVectorIsZero>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f083 0301 	eor.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 809c 	beq.w	800207c <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 8001f44:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f48:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f50:	eeb0 0a66 	vmov.f32	s0, s13
 8001f54:	eef0 0a47 	vmov.f32	s1, s14
 8001f58:	eeb0 1a67 	vmov.f32	s2, s15
 8001f5c:	f7ff fb60 	bl	8001620 <FusionVectorNormalise>
 8001f60:	eef0 6a40 	vmov.f32	s13, s0
 8001f64:	eeb0 7a60 	vmov.f32	s14, s1
 8001f68:	eef0 7a41 	vmov.f32	s15, s2
 8001f6c:	edc7 6a28 	vstr	s13, [r7, #160]	@ 0xa0
 8001f70:	ed87 7a29 	vstr	s14, [r7, #164]	@ 0xa4
 8001f74:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
 8001f78:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8001f7a:	ed97 5a25 	vldr	s10, [r7, #148]	@ 0x94
 8001f7e:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 8001f82:	ed97 6a27 	vldr	s12, [r7, #156]	@ 0x9c
 8001f86:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 8001f8a:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8001f8e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001f92:	eef0 1a45 	vmov.f32	s3, s10
 8001f96:	eeb0 2a65 	vmov.f32	s4, s11
 8001f9a:	eef0 2a46 	vmov.f32	s5, s12
 8001f9e:	eeb0 0a66 	vmov.f32	s0, s13
 8001fa2:	eef0 0a47 	vmov.f32	s1, s14
 8001fa6:	eeb0 1a67 	vmov.f32	s2, s15
 8001faa:	f000 fc55 	bl	8002858 <Feedback>
 8001fae:	eef0 6a40 	vmov.f32	s13, s0
 8001fb2:	eeb0 7a60 	vmov.f32	s14, s1
 8001fb6:	eef0 7a41 	vmov.f32	s15, s2
 8001fba:	edc4 6a11 	vstr	s13, [r4, #68]	@ 0x44
 8001fbe:	ed84 7a12 	vstr	s14, [r4, #72]	@ 0x48
 8001fc2:	edc4 7a13 	vstr	s15, [r4, #76]	@ 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if (ahrs->initialising || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 8001fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d118      	bne.n	8002002 <FusionAhrsUpdate+0x256>
 8001fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd2:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8001fd6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001fda:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001fde:	eeb0 0a66 	vmov.f32	s0, s13
 8001fe2:	eef0 0a47 	vmov.f32	s1, s14
 8001fe6:	eeb0 1a67 	vmov.f32	s2, s15
 8001fea:	f7ff facf 	bl	800158c <FusionVectorMagnitudeSquared>
 8001fee:	eeb0 7a40 	vmov.f32	s14, s0
 8001ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	d80a      	bhi.n	8002018 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 8002002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002004:	2200      	movs	r2, #0
 8002006:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 800200a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200e:	f1a3 0209 	sub.w	r2, r3, #9
 8002012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002014:	661a      	str	r2, [r3, #96]	@ 0x60
 8002016:	e004      	b.n	8002022 <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 8002018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800201a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002020:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 8002022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002024:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800202a:	429a      	cmp	r2, r3
 800202c:	dd07      	ble.n	800203e <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800202e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002030:	2200      	movs	r2, #0
 8002032:	665a      	str	r2, [r3, #100]	@ 0x64
            ahrs->accelerometerIgnored = false;
 8002034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002036:	2200      	movs	r2, #0
 8002038:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800203c:	e004      	b.n	8002048 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800203e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	461a      	mov	r2, r3
 8002044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002046:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8002048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800204a:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800204c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	461a      	mov	r2, r3
 8002052:	2100      	movs	r1, #0
 8002054:	f000 fcb5 	bl	80029c2 <Clamp>
 8002058:	4602      	mov	r2, r0
 800205a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800205c:	661a      	str	r2, [r3, #96]	@ 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800205e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002060:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002064:	f083 0301 	eor.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800206e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002070:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002074:	3244      	adds	r2, #68	@ 0x44
 8002076:	ca07      	ldmia	r2, {r0, r1, r2}
 8002078:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	673b      	str	r3, [r7, #112]	@ 0x70
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	677b      	str	r3, [r7, #116]	@ 0x74
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	67bb      	str	r3, [r7, #120]	@ 0x78
    ahrs->magnetometerIgnored = true;
 800208e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 8002096:	edd7 6a02 	vldr	s13, [r7, #8]
 800209a:	ed97 7a03 	vldr	s14, [r7, #12]
 800209e:	edd7 7a04 	vldr	s15, [r7, #16]
 80020a2:	eeb0 0a66 	vmov.f32	s0, s13
 80020a6:	eef0 0a47 	vmov.f32	s1, s14
 80020aa:	eeb0 1a67 	vmov.f32	s2, s15
 80020ae:	f7ff f833 	bl	8001118 <FusionVectorIsZero>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f083 0301 	eor.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80d1 	beq.w	8002262 <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 80020c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80020c2:	f000 fabf 	bl	8002644 <HalfMagnetic>
 80020c6:	eef0 6a40 	vmov.f32	s13, s0
 80020ca:	eeb0 7a60 	vmov.f32	s14, s1
 80020ce:	eef0 7a41 	vmov.f32	s15, s2
 80020d2:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 80020d6:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 80020da:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 80020de:	ed97 5a02 	vldr	s10, [r7, #8]
 80020e2:	edd7 5a03 	vldr	s11, [r7, #12]
 80020e6:	ed97 6a04 	vldr	s12, [r7, #16]
 80020ea:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 80020ee:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80020f2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80020f6:	eef0 1a45 	vmov.f32	s3, s10
 80020fa:	eeb0 2a65 	vmov.f32	s4, s11
 80020fe:	eef0 2a46 	vmov.f32	s5, s12
 8002102:	eeb0 0a66 	vmov.f32	s0, s13
 8002106:	eef0 0a47 	vmov.f32	s1, s14
 800210a:	eeb0 1a67 	vmov.f32	s2, s15
 800210e:	f7ff f981 	bl	8001414 <FusionVectorCrossProduct>
 8002112:	eef0 6a40 	vmov.f32	s13, s0
 8002116:	eeb0 7a60 	vmov.f32	s14, s1
 800211a:	eef0 7a41 	vmov.f32	s15, s2
 800211e:	edc7 6a2b 	vstr	s13, [r7, #172]	@ 0xac
 8002122:	ed87 7a2c 	vstr	s14, [r7, #176]	@ 0xb0
 8002126:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
 800212a:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 800212e:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8002132:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8002136:	eeb0 0a66 	vmov.f32	s0, s13
 800213a:	eef0 0a47 	vmov.f32	s1, s14
 800213e:	eeb0 1a67 	vmov.f32	s2, s15
 8002142:	f7ff fa6d 	bl	8001620 <FusionVectorNormalise>
 8002146:	eef0 6a40 	vmov.f32	s13, s0
 800214a:	eeb0 7a60 	vmov.f32	s14, s1
 800214e:	eef0 7a41 	vmov.f32	s15, s2
 8002152:	edc7 6a2e 	vstr	s13, [r7, #184]	@ 0xb8
 8002156:	ed87 7a2f 	vstr	s14, [r7, #188]	@ 0xbc
 800215a:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
 800215e:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002160:	ed97 5a0c 	vldr	s10, [r7, #48]	@ 0x30
 8002164:	edd7 5a0d 	vldr	s11, [r7, #52]	@ 0x34
 8002168:	ed97 6a0e 	vldr	s12, [r7, #56]	@ 0x38
 800216c:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 8002170:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8002174:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8002178:	eef0 1a45 	vmov.f32	s3, s10
 800217c:	eeb0 2a65 	vmov.f32	s4, s11
 8002180:	eef0 2a46 	vmov.f32	s5, s12
 8002184:	eeb0 0a66 	vmov.f32	s0, s13
 8002188:	eef0 0a47 	vmov.f32	s1, s14
 800218c:	eeb0 1a67 	vmov.f32	s2, s15
 8002190:	f000 fb62 	bl	8002858 <Feedback>
 8002194:	eef0 6a40 	vmov.f32	s13, s0
 8002198:	eeb0 7a60 	vmov.f32	s14, s1
 800219c:	eef0 7a41 	vmov.f32	s15, s2
 80021a0:	edc4 6a14 	vstr	s13, [r4, #80]	@ 0x50
 80021a4:	ed84 7a15 	vstr	s14, [r4, #84]	@ 0x54
 80021a8:	edc4 7a16 	vstr	s15, [r4, #88]	@ 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if (ahrs->initialising || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 80021ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d118      	bne.n	80021e8 <FusionAhrsUpdate+0x43c>
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 80021bc:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80021c0:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80021c4:	eeb0 0a66 	vmov.f32	s0, s13
 80021c8:	eef0 0a47 	vmov.f32	s1, s14
 80021cc:	eeb0 1a67 	vmov.f32	s2, s15
 80021d0:	f7ff f9dc 	bl	800158c <FusionVectorMagnitudeSquared>
 80021d4:	eeb0 7a40 	vmov.f32	s14, s0
 80021d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021da:	edd3 7a04 	vldr	s15, [r3, #16]
 80021de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	d80a      	bhi.n	80021fe <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 80021e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 80021f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f4:	f1a3 0209 	sub.w	r2, r3, #9
 80021f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fa:	66da      	str	r2, [r3, #108]	@ 0x6c
 80021fc:	e004      	b.n	8002208 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 80021fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002206:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 8002208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800220c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002210:	429a      	cmp	r2, r3
 8002212:	dd07      	ble.n	8002224 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 8002214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002216:	2200      	movs	r2, #0
 8002218:	671a      	str	r2, [r3, #112]	@ 0x70
            ahrs->magnetometerIgnored = false;
 800221a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8002222:	e004      	b.n	800222e <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8002224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	461a      	mov	r2, r3
 800222a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222c:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800222e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002230:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8002232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	461a      	mov	r2, r3
 8002238:	2100      	movs	r1, #0
 800223a:	f000 fbc2 	bl	80029c2 <Clamp>
 800223e:	4602      	mov	r2, r0
 8002240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002242:	66da      	str	r2, [r3, #108]	@ 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 8002244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002246:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800224a:	f083 0301 	eor.w	r3, r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8002254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002256:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800225a:	3250      	adds	r2, #80	@ 0x50
 800225c:	ca07      	ldmia	r2, {r0, r1, r2}
 800225e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 8002262:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002266:	f7fe ff13 	bl	8001090 <FusionDegreesToRadians>
 800226a:	eeb0 6a40 	vmov.f32	s12, s0
 800226e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002272:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002276:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800227a:	eef0 1a46 	vmov.f32	s3, s12
 800227e:	eeb0 0a66 	vmov.f32	s0, s13
 8002282:	eef0 0a47 	vmov.f32	s1, s14
 8002286:	eeb0 1a67 	vmov.f32	s2, s15
 800228a:	f7ff f831 	bl	80012f0 <FusionVectorMultiplyScalar>
 800228e:	eef0 6a40 	vmov.f32	s13, s0
 8002292:	eeb0 7a60 	vmov.f32	s14, s1
 8002296:	eef0 7a41 	vmov.f32	s15, s2
 800229a:	edc7 6a16 	vstr	s13, [r7, #88]	@ 0x58
 800229e:	ed87 7a17 	vstr	s14, [r7, #92]	@ 0x5c
 80022a2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 80022a6:	ed97 5a1c 	vldr	s10, [r7, #112]	@ 0x70
 80022aa:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 80022ae:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 80022b2:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 80022b6:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 80022ba:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80022be:	eef0 1a45 	vmov.f32	s3, s10
 80022c2:	eeb0 2a65 	vmov.f32	s4, s11
 80022c6:	eef0 2a46 	vmov.f32	s5, s12
 80022ca:	eeb0 0a66 	vmov.f32	s0, s13
 80022ce:	eef0 0a47 	vmov.f32	s1, s14
 80022d2:	eeb0 1a67 	vmov.f32	s2, s15
 80022d6:	f7fe ff4f 	bl	8001178 <FusionVectorAdd>
 80022da:	eef0 6a40 	vmov.f32	s13, s0
 80022de:	eeb0 7a60 	vmov.f32	s14, s1
 80022e2:	eef0 7a41 	vmov.f32	s15, s2
 80022e6:	edc7 6a31 	vstr	s13, [r7, #196]	@ 0xc4
 80022ea:	ed87 7a32 	vstr	s14, [r7, #200]	@ 0xc8
 80022ee:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc
 80022f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f4:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 80022f8:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80022fc:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 8002300:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 8002304:	eef0 1a46 	vmov.f32	s3, s12
 8002308:	eeb0 0a66 	vmov.f32	s0, s13
 800230c:	eef0 0a47 	vmov.f32	s1, s14
 8002310:	eeb0 1a67 	vmov.f32	s2, s15
 8002314:	f7fe ffec 	bl	80012f0 <FusionVectorMultiplyScalar>
 8002318:	eef0 6a40 	vmov.f32	s13, s0
 800231c:	eeb0 7a60 	vmov.f32	s14, s1
 8002320:	eef0 7a41 	vmov.f32	s15, s2
 8002324:	edc7 6a34 	vstr	s13, [r7, #208]	@ 0xd0
 8002328:	ed87 7a35 	vstr	s14, [r7, #212]	@ 0xd4
 800232c:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
 8002330:	ed97 5a34 	vldr	s10, [r7, #208]	@ 0xd0
 8002334:	edd7 5a35 	vldr	s11, [r7, #212]	@ 0xd4
 8002338:	ed97 6a36 	vldr	s12, [r7, #216]	@ 0xd8
 800233c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8002340:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002344:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002348:	eef0 1a45 	vmov.f32	s3, s10
 800234c:	eeb0 2a65 	vmov.f32	s4, s11
 8002350:	eef0 2a46 	vmov.f32	s5, s12
 8002354:	eeb0 0a66 	vmov.f32	s0, s13
 8002358:	eef0 0a47 	vmov.f32	s1, s14
 800235c:	eeb0 1a67 	vmov.f32	s2, s15
 8002360:	f7fe ff0a 	bl	8001178 <FusionVectorAdd>
 8002364:	eef0 6a40 	vmov.f32	s13, s0
 8002368:	eeb0 7a60 	vmov.f32	s14, s1
 800236c:	eef0 7a41 	vmov.f32	s15, s2
 8002370:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 8002374:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 8002378:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800237c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002380:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002384:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002388:	edd7 1a01 	vldr	s3, [r7, #4]
 800238c:	eeb0 0a66 	vmov.f32	s0, s13
 8002390:	eef0 0a47 	vmov.f32	s1, s14
 8002394:	eeb0 1a67 	vmov.f32	s2, s15
 8002398:	f7fe ffaa 	bl	80012f0 <FusionVectorMultiplyScalar>
 800239c:	eef0 6a40 	vmov.f32	s13, s0
 80023a0:	eeb0 7a60 	vmov.f32	s14, s1
 80023a4:	eef0 7a41 	vmov.f32	s15, s2
 80023a8:	edc7 6a37 	vstr	s13, [r7, #220]	@ 0xdc
 80023ac:	ed87 7a38 	vstr	s14, [r7, #224]	@ 0xe0
 80023b0:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
 80023b4:	edd7 4a37 	vldr	s9, [r7, #220]	@ 0xdc
 80023b8:	ed97 5a38 	vldr	s10, [r7, #224]	@ 0xe0
 80023bc:	edd7 5a39 	vldr	s11, [r7, #228]	@ 0xe4
 80023c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c2:	ed93 6a06 	vldr	s12, [r3, #24]
 80023c6:	edd3 6a07 	vldr	s13, [r3, #28]
 80023ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80023ce:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80023d2:	eeb0 2a64 	vmov.f32	s4, s9
 80023d6:	eef0 2a45 	vmov.f32	s5, s10
 80023da:	eeb0 3a65 	vmov.f32	s6, s11
 80023de:	eeb0 0a46 	vmov.f32	s0, s12
 80023e2:	eef0 0a66 	vmov.f32	s1, s13
 80023e6:	eeb0 1a47 	vmov.f32	s2, s14
 80023ea:	eef0 1a67 	vmov.f32	s3, s15
 80023ee:	f7ff fa8e 	bl	800190e <FusionQuaternionMultiplyVector>
 80023f2:	eeb0 6a40 	vmov.f32	s12, s0
 80023f6:	eef0 6a60 	vmov.f32	s13, s1
 80023fa:	eeb0 7a41 	vmov.f32	s14, s2
 80023fe:	eef0 7a61 	vmov.f32	s15, s3
 8002402:	ed87 6a3a 	vstr	s12, [r7, #232]	@ 0xe8
 8002406:	edc7 6a3b 	vstr	s13, [r7, #236]	@ 0xec
 800240a:	ed87 7a3c 	vstr	s14, [r7, #240]	@ 0xf0
 800240e:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
 8002412:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8002414:	ed97 4a3a 	vldr	s8, [r7, #232]	@ 0xe8
 8002418:	edd7 4a3b 	vldr	s9, [r7, #236]	@ 0xec
 800241c:	ed97 5a3c 	vldr	s10, [r7, #240]	@ 0xf0
 8002420:	edd7 5a3d 	vldr	s11, [r7, #244]	@ 0xf4
 8002424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002426:	ed93 6a06 	vldr	s12, [r3, #24]
 800242a:	edd3 6a07 	vldr	s13, [r3, #28]
 800242e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002432:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002436:	eeb0 2a44 	vmov.f32	s4, s8
 800243a:	eef0 2a64 	vmov.f32	s5, s9
 800243e:	eeb0 3a45 	vmov.f32	s6, s10
 8002442:	eef0 3a65 	vmov.f32	s7, s11
 8002446:	eeb0 0a46 	vmov.f32	s0, s12
 800244a:	eef0 0a66 	vmov.f32	s1, s13
 800244e:	eeb0 1a47 	vmov.f32	s2, s14
 8002452:	eef0 1a67 	vmov.f32	s3, s15
 8002456:	f7ff f936 	bl	80016c6 <FusionQuaternionAdd>
 800245a:	eeb0 6a40 	vmov.f32	s12, s0
 800245e:	eef0 6a60 	vmov.f32	s13, s1
 8002462:	eeb0 7a41 	vmov.f32	s14, s2
 8002466:	eef0 7a61 	vmov.f32	s15, s3
 800246a:	ed84 6a06 	vstr	s12, [r4, #24]
 800246e:	edc4 6a07 	vstr	s13, [r4, #28]
 8002472:	ed84 7a08 	vstr	s14, [r4, #32]
 8002476:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800247a:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 800247c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247e:	ed93 6a06 	vldr	s12, [r3, #24]
 8002482:	edd3 6a07 	vldr	s13, [r3, #28]
 8002486:	ed93 7a08 	vldr	s14, [r3, #32]
 800248a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800248e:	eeb0 0a46 	vmov.f32	s0, s12
 8002492:	eef0 0a66 	vmov.f32	s1, s13
 8002496:	eeb0 1a47 	vmov.f32	s2, s14
 800249a:	eef0 1a67 	vmov.f32	s3, s15
 800249e:	f7ff fad6 	bl	8001a4e <FusionQuaternionNormalise>
 80024a2:	eeb0 6a40 	vmov.f32	s12, s0
 80024a6:	eef0 6a60 	vmov.f32	s13, s1
 80024aa:	eeb0 7a41 	vmov.f32	s14, s2
 80024ae:	eef0 7a61 	vmov.f32	s15, s3
 80024b2:	ed84 6a06 	vstr	s12, [r4, #24]
 80024b6:	edc4 6a07 	vstr	s13, [r4, #28]
 80024ba:	ed84 7a08 	vstr	s14, [r4, #32]
 80024be:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
#undef Q
}
 80024c2:	bf00      	nop
 80024c4:	37fc      	adds	r7, #252	@ 0xfc
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}

080024ca <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 80024ca:	b480      	push	{r7}
 80024cc:	b093      	sub	sp, #76	@ 0x4c
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	dc02      	bgt.n	80024e0 <HalfGravity+0x16>
 80024da:	2b00      	cmp	r3, #0
 80024dc:	da03      	bge.n	80024e6 <HalfGravity+0x1c>
 80024de:	e094      	b.n	800260a <HalfGravity+0x140>
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d048      	beq.n	8002576 <HalfGravity+0xac>
 80024e4:	e091      	b.n	800260a <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	ed93 7a07 	vldr	s14, [r3, #28]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80024f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	edd3 6a06 	vldr	s13, [r3, #24]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800250a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	ed93 7a08 	vldr	s14, [r3, #32]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800251a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	edd3 6a06 	vldr	s13, [r3, #24]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	edd3 7a07 	vldr	s15, [r3, #28]
 800252a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002532:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	ed93 7a06 	vldr	s14, [r3, #24]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800254a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800255a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800255e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002562:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8002566:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800256a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800256e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002570:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002574:	e052      	b.n	800261c <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	ed93 7a06 	vldr	s14, [r3, #24]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	edd3 6a07 	vldr	s13, [r3, #28]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800259a:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	ed93 7a08 	vldr	s14, [r3, #32]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80025aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	edd3 6a06 	vldr	s13, [r3, #24]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80025ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c2:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 80025c6:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	ed93 7a06 	vldr	s14, [r3, #24]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80025de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80025ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80025f6:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 80025fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80025fe:	f107 0218 	add.w	r2, r7, #24
 8002602:	ca07      	ldmia	r2, {r0, r1, r2}
 8002604:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002608:	e008      	b.n	800261c <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	643b      	str	r3, [r7, #64]	@ 0x40
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	647b      	str	r3, [r7, #68]	@ 0x44
#undef Q
}
 800261c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800261e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002622:	ee06 1a90 	vmov	s13, r1
 8002626:	ee07 2a10 	vmov	s14, r2
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eeb0 0a66 	vmov.f32	s0, s13
 8002632:	eef0 0a47 	vmov.f32	s1, s14
 8002636:	eeb0 1a67 	vmov.f32	s2, s15
 800263a:	374c      	adds	r7, #76	@ 0x4c
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002644:	b480      	push	{r7}
 8002646:	b097      	sub	sp, #92	@ 0x5c
 8002648:	af00      	add	r7, sp, #0
 800264a:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b02      	cmp	r3, #2
 8002652:	f000 809a 	beq.w	800278a <HalfMagnetic+0x146>
 8002656:	2b02      	cmp	r3, #2
 8002658:	f300 80e1 	bgt.w	800281e <HalfMagnetic+0x1da>
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HalfMagnetic+0x22>
 8002660:	2b01      	cmp	r3, #1
 8002662:	d048      	beq.n	80026f6 <HalfMagnetic+0xb2>
 8002664:	e0db      	b.n	800281e <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	ed93 7a07 	vldr	s14, [r3, #28]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	edd3 6a06 	vldr	s13, [r3, #24]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002686:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800268a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	ed93 7a06 	vldr	s14, [r3, #24]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	edd3 7a06 	vldr	s15, [r3, #24]
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80026a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	edd3 6a08 	vldr	s13, [r3, #32]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80026b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b6:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80026ba:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	ed93 7a08 	vldr	s14, [r3, #32]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80026ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	edd3 6a06 	vldr	s13, [r3, #24]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80026da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026de:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80026e2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 80026e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80026ea:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80026ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80026f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026f4:	e09c      	b.n	8002830 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	ed93 7a06 	vldr	s14, [r3, #24]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8002702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002706:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800270a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	edd3 6a07 	vldr	s13, [r3, #28]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	edd3 7a07 	vldr	s15, [r3, #28]
 800271a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002722:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	ed93 7a06 	vldr	s14, [r3, #24]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	edd3 6a07 	vldr	s13, [r3, #28]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002746:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800274a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	ed93 7a07 	vldr	s14, [r3, #28]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800275a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	edd3 6a06 	vldr	s13, [r3, #24]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	edd3 7a08 	vldr	s15, [r3, #32]
 800276a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002772:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002776:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800277a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800277e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002782:	ca07      	ldmia	r2, {r0, r1, r2}
 8002784:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002788:	e052      	b.n	8002830 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	edd3 7a08 	vldr	s15, [r3, #32]
 8002796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	edd3 6a06 	vldr	s13, [r3, #24]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ae:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 80027b2:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	edd3 7a06 	vldr	s15, [r3, #24]
 80027c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80027ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	edd3 6a08 	vldr	s13, [r3, #32]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80027da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027de:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80027e2:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	ed93 7a06 	vldr	s14, [r3, #24]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80027f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	edd3 6a08 	vldr	s13, [r3, #32]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002806:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800280a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 800280e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002812:	f107 021c 	add.w	r2, r7, #28
 8002816:	ca07      	ldmia	r2, {r0, r1, r2}
 8002818:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800281c:	e008      	b.n	8002830 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	653b      	str	r3, [r7, #80]	@ 0x50
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	657b      	str	r3, [r7, #84]	@ 0x54
#undef Q
}
 8002830:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002832:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002836:	ee06 1a90 	vmov	s13, r1
 800283a:	ee07 2a10 	vmov	s14, r2
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eeb0 0a66 	vmov.f32	s0, s13
 8002846:	eef0 0a47 	vmov.f32	s1, s14
 800284a:	eeb0 1a67 	vmov.f32	s2, s15
 800284e:	375c      	adds	r7, #92	@ 0x5c
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b090      	sub	sp, #64	@ 0x40
 800285c:	af00      	add	r7, sp, #0
 800285e:	eeb0 5a40 	vmov.f32	s10, s0
 8002862:	eef0 5a60 	vmov.f32	s11, s1
 8002866:	eeb0 6a41 	vmov.f32	s12, s2
 800286a:	eef0 6a61 	vmov.f32	s13, s3
 800286e:	eeb0 7a42 	vmov.f32	s14, s4
 8002872:	eef0 7a62 	vmov.f32	s15, s5
 8002876:	ed87 5a07 	vstr	s10, [r7, #28]
 800287a:	edc7 5a08 	vstr	s11, [r7, #32]
 800287e:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8002882:	edc7 6a04 	vstr	s13, [r7, #16]
 8002886:	ed87 7a05 	vstr	s14, [r7, #20]
 800288a:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 800288e:	ed97 5a04 	vldr	s10, [r7, #16]
 8002892:	edd7 5a05 	vldr	s11, [r7, #20]
 8002896:	ed97 6a06 	vldr	s12, [r7, #24]
 800289a:	edd7 6a07 	vldr	s13, [r7, #28]
 800289e:	ed97 7a08 	vldr	s14, [r7, #32]
 80028a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80028a6:	eef0 1a45 	vmov.f32	s3, s10
 80028aa:	eeb0 2a65 	vmov.f32	s4, s11
 80028ae:	eef0 2a46 	vmov.f32	s5, s12
 80028b2:	eeb0 0a66 	vmov.f32	s0, s13
 80028b6:	eef0 0a47 	vmov.f32	s1, s14
 80028ba:	eeb0 1a67 	vmov.f32	s2, s15
 80028be:	f7fe fe0f 	bl	80014e0 <FusionVectorDotProduct>
 80028c2:	eef0 7a40 	vmov.f32	s15, s0
 80028c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	d540      	bpl.n	8002952 <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 80028d0:	ed97 5a04 	vldr	s10, [r7, #16]
 80028d4:	edd7 5a05 	vldr	s11, [r7, #20]
 80028d8:	ed97 6a06 	vldr	s12, [r7, #24]
 80028dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80028e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80028e4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80028e8:	eef0 1a45 	vmov.f32	s3, s10
 80028ec:	eeb0 2a65 	vmov.f32	s4, s11
 80028f0:	eef0 2a46 	vmov.f32	s5, s12
 80028f4:	eeb0 0a66 	vmov.f32	s0, s13
 80028f8:	eef0 0a47 	vmov.f32	s1, s14
 80028fc:	eeb0 1a67 	vmov.f32	s2, s15
 8002900:	f7fe fd88 	bl	8001414 <FusionVectorCrossProduct>
 8002904:	eef0 6a40 	vmov.f32	s13, s0
 8002908:	eeb0 7a60 	vmov.f32	s14, s1
 800290c:	eef0 7a41 	vmov.f32	s15, s2
 8002910:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8002914:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8002918:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 800291c:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8002920:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002924:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002928:	eeb0 0a66 	vmov.f32	s0, s13
 800292c:	eef0 0a47 	vmov.f32	s1, s14
 8002930:	eeb0 1a67 	vmov.f32	s2, s15
 8002934:	f7fe fe74 	bl	8001620 <FusionVectorNormalise>
 8002938:	eef0 6a40 	vmov.f32	s13, s0
 800293c:	eeb0 7a60 	vmov.f32	s14, s1
 8002940:	eef0 7a41 	vmov.f32	s15, s2
 8002944:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8002948:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 800294c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8002950:	e025      	b.n	800299e <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 8002952:	ed97 5a04 	vldr	s10, [r7, #16]
 8002956:	edd7 5a05 	vldr	s11, [r7, #20]
 800295a:	ed97 6a06 	vldr	s12, [r7, #24]
 800295e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002962:	ed97 7a08 	vldr	s14, [r7, #32]
 8002966:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800296a:	eef0 1a45 	vmov.f32	s3, s10
 800296e:	eeb0 2a65 	vmov.f32	s4, s11
 8002972:	eef0 2a46 	vmov.f32	s5, s12
 8002976:	eeb0 0a66 	vmov.f32	s0, s13
 800297a:	eef0 0a47 	vmov.f32	s1, s14
 800297e:	eeb0 1a67 	vmov.f32	s2, s15
 8002982:	f7fe fd47 	bl	8001414 <FusionVectorCrossProduct>
 8002986:	eef0 6a40 	vmov.f32	s13, s0
 800298a:	eeb0 7a60 	vmov.f32	s14, s1
 800298e:	eef0 7a41 	vmov.f32	s15, s2
 8002992:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8002996:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 800299a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
}
 800299e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a4:	ee06 1a90 	vmov	s13, r1
 80029a8:	ee07 2a10 	vmov	s14, r2
 80029ac:	ee07 3a90 	vmov	s15, r3
 80029b0:	eeb0 0a66 	vmov.f32	s0, s13
 80029b4:	eef0 0a47 	vmov.f32	s1, s14
 80029b8:	eeb0 1a67 	vmov.f32	s2, s15
 80029bc:	3740      	adds	r7, #64	@ 0x40
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
    if (value < min) {
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	da01      	bge.n	80029da <Clamp+0x18>
        return min;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	e006      	b.n	80029e8 <Clamp+0x26>
    }
    if (value > max) {
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	dd01      	ble.n	80029e6 <Clamp+0x24>
        return max;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	e000      	b.n	80029e8 <Clamp+0x26>
    }
    return value;
 80029e6:	68fb      	ldr	r3, [r7, #12]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	@ 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	61f8      	str	r0, [r7, #28]
 80029fc:	eeb0 5a40 	vmov.f32	s10, s0
 8002a00:	eef0 5a60 	vmov.f32	s11, s1
 8002a04:	eeb0 6a41 	vmov.f32	s12, s2
 8002a08:	eef0 6a61 	vmov.f32	s13, s3
 8002a0c:	eeb0 7a42 	vmov.f32	s14, s4
 8002a10:	eef0 7a62 	vmov.f32	s15, s5
 8002a14:	ed87 3a00 	vstr	s6, [r7]
 8002a18:	ed87 5a04 	vstr	s10, [r7, #16]
 8002a1c:	edc7 5a05 	vstr	s11, [r7, #20]
 8002a20:	ed87 6a06 	vstr	s12, [r7, #24]
 8002a24:	edc7 6a01 	vstr	s13, [r7, #4]
 8002a28:	ed87 7a02 	vstr	s14, [r7, #8]
 8002a2c:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a42:	ed97 3a09 	vldr	s6, [r7, #36]	@ 0x24
 8002a46:	edd7 3a0a 	vldr	s7, [r7, #40]	@ 0x28
 8002a4a:	ed97 4a0b 	vldr	s8, [r7, #44]	@ 0x2c
 8002a4e:	ed97 5a01 	vldr	s10, [r7, #4]
 8002a52:	edd7 5a02 	vldr	s11, [r7, #8]
 8002a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a5a:	edd7 6a04 	vldr	s13, [r7, #16]
 8002a5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a62:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a66:	edd7 4a00 	vldr	s9, [r7]
 8002a6a:	eef0 1a45 	vmov.f32	s3, s10
 8002a6e:	eeb0 2a65 	vmov.f32	s4, s11
 8002a72:	eef0 2a46 	vmov.f32	s5, s12
 8002a76:	eeb0 0a66 	vmov.f32	s0, s13
 8002a7a:	eef0 0a47 	vmov.f32	s1, s14
 8002a7e:	eeb0 1a67 	vmov.f32	s2, s15
 8002a82:	69f8      	ldr	r0, [r7, #28]
 8002a84:	f7ff f992 	bl	8001dac <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising) {
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 8002a92:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8002aa4 <FusionAhrsUpdateNoMagnetometer+0xb0>
 8002a96:	69f8      	ldr	r0, [r7, #28]
 8002a98:	f000 fa3f 	bl	8002f1a <FusionAhrsSetHeading>
    }
}
 8002a9c:	bf00      	nop
 8002a9e:	3730      	adds	r7, #48	@ 0x30
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	00000000 	.word	0x00000000

08002aa8 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002aa8:	b490      	push	{r4, r7}
 8002aaa:	b08a      	sub	sp, #40	@ 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f107 0418 	add.w	r4, r7, #24
 8002ab6:	3318      	adds	r3, #24
 8002ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002abe:	69b8      	ldr	r0, [r7, #24]
 8002ac0:	69f9      	ldr	r1, [r7, #28]
 8002ac2:	6a3a      	ldr	r2, [r7, #32]
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	ee06 0a10 	vmov	s12, r0
 8002aca:	ee06 1a90 	vmov	s13, r1
 8002ace:	ee07 2a10 	vmov	s14, r2
 8002ad2:	ee07 3a90 	vmov	s15, r3
}
 8002ad6:	eeb0 0a46 	vmov.f32	s0, s12
 8002ada:	eef0 0a66 	vmov.f32	s1, s13
 8002ade:	eeb0 1a47 	vmov.f32	s2, s14
 8002ae2:	eef0 1a67 	vmov.f32	s3, s15
 8002ae6:	3728      	adds	r7, #40	@ 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc90      	pop	{r4, r7}
 8002aec:	4770      	bx	lr

08002aee <FusionAhrsGetGravity>:
/**
 * @brief Returns the direction of gravity in the sensor coordinate frame.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity in the sensor coordinate frame.
 */
FusionVector FusionAhrsGetGravity(const FusionAhrs *const ahrs) {
 8002aee:	b480      	push	{r7}
 8002af0:	b08d      	sub	sp, #52	@ 0x34
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    const FusionVector gravity = {.axis = {
            .x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector gravity = {.axis = {
 8002b1e:	edc7 7a06 	vstr	s15, [r7, #24]
            .y = 2.0f * (Q.y * Q.z + Q.w * Q.x),
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b46:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector gravity = {.axis = {
 8002b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            .z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b62:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector gravity = {.axis = {
 8002b7e:	edc7 7a08 	vstr	s15, [r7, #32]
    }}; // third column of transposed rotation matrix
    return gravity;
 8002b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b86:	f107 0218 	add.w	r2, r7, #24
 8002b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b96:	ee06 1a90 	vmov	s13, r1
 8002b9a:	ee07 2a10 	vmov	s14, r2
 8002b9e:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8002ba2:	eeb0 0a66 	vmov.f32	s0, s13
 8002ba6:	eef0 0a47 	vmov.f32	s1, s14
 8002baa:	eeb0 1a67 	vmov.f32	s2, s15
 8002bae:	3734      	adds	r7, #52	@ 0x34
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <FusionAhrsGetLinearAcceleration>:
 * @brief Returns the linear acceleration measurement equal to the accelerometer
 * measurement with gravity removed.
 * @param ahrs AHRS algorithm structure.
 * @return Linear acceleration measurement in g.
 */
FusionVector FusionAhrsGetLinearAcceleration(const FusionAhrs *const ahrs) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b092      	sub	sp, #72	@ 0x48
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6178      	str	r0, [r7, #20]
    switch (ahrs->settings.convention) {
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	dc02      	bgt.n	8002bce <FusionAhrsGetLinearAcceleration+0x16>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da03      	bge.n	8002bd4 <FusionAhrsGetLinearAcceleration+0x1c>
 8002bcc:	e070      	b.n	8002cb0 <FusionAhrsGetLinearAcceleration+0xf8>
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d037      	beq.n	8002c42 <FusionAhrsGetLinearAcceleration+0x8a>
 8002bd2:	e06d      	b.n	8002cb0 <FusionAhrsGetLinearAcceleration+0xf8>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            return FusionVectorSubtract(ahrs->accelerometer, FusionAhrsGetGravity(ahrs));
 8002bd4:	6978      	ldr	r0, [r7, #20]
 8002bd6:	f7ff ff8a 	bl	8002aee <FusionAhrsGetGravity>
 8002bda:	eef0 6a40 	vmov.f32	s13, s0
 8002bde:	eeb0 7a60 	vmov.f32	s14, s1
 8002be2:	eef0 7a41 	vmov.f32	s15, s2
 8002be6:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 8002bea:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 8002bee:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
 8002bf2:	ed97 5a0c 	vldr	s10, [r7, #48]	@ 0x30
 8002bf6:	edd7 5a0d 	vldr	s11, [r7, #52]	@ 0x34
 8002bfa:	ed97 6a0e 	vldr	s12, [r7, #56]	@ 0x38
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002c04:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002c08:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002c0c:	eef0 1a45 	vmov.f32	s3, s10
 8002c10:	eeb0 2a65 	vmov.f32	s4, s11
 8002c14:	eef0 2a46 	vmov.f32	s5, s12
 8002c18:	eeb0 0a66 	vmov.f32	s0, s13
 8002c1c:	eef0 0a47 	vmov.f32	s1, s14
 8002c20:	eeb0 1a67 	vmov.f32	s2, s15
 8002c24:	f7fe faf6 	bl	8001214 <FusionVectorSubtract>
 8002c28:	eef0 6a40 	vmov.f32	s13, s0
 8002c2c:	eeb0 7a60 	vmov.f32	s14, s1
 8002c30:	eef0 7a41 	vmov.f32	s15, s2
 8002c34:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8002c38:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8002c3c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8002c40:	e03f      	b.n	8002cc2 <FusionAhrsGetLinearAcceleration+0x10a>
        }
        case FusionConventionNed: {
            return FusionVectorAdd(ahrs->accelerometer, FusionAhrsGetGravity(ahrs));
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff53 	bl	8002aee <FusionAhrsGetGravity>
 8002c48:	eef0 6a40 	vmov.f32	s13, s0
 8002c4c:	eeb0 7a60 	vmov.f32	s14, s1
 8002c50:	eef0 7a41 	vmov.f32	s15, s2
 8002c54:	edc7 6a0f 	vstr	s13, [r7, #60]	@ 0x3c
 8002c58:	ed87 7a10 	vstr	s14, [r7, #64]	@ 0x40
 8002c5c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8002c60:	ed97 5a0f 	vldr	s10, [r7, #60]	@ 0x3c
 8002c64:	edd7 5a10 	vldr	s11, [r7, #64]	@ 0x40
 8002c68:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002c72:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002c76:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002c7a:	eef0 1a45 	vmov.f32	s3, s10
 8002c7e:	eeb0 2a65 	vmov.f32	s4, s11
 8002c82:	eef0 2a46 	vmov.f32	s5, s12
 8002c86:	eeb0 0a66 	vmov.f32	s0, s13
 8002c8a:	eef0 0a47 	vmov.f32	s1, s14
 8002c8e:	eeb0 1a67 	vmov.f32	s2, s15
 8002c92:	f7fe fa71 	bl	8001178 <FusionVectorAdd>
 8002c96:	eef0 6a40 	vmov.f32	s13, s0
 8002c9a:	eeb0 7a60 	vmov.f32	s14, s1
 8002c9e:	eef0 7a41 	vmov.f32	s15, s2
 8002ca2:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8002ca6:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8002caa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8002cae:	e008      	b.n	8002cc2 <FusionAhrsGetLinearAcceleration+0x10a>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 8002cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc8:	ee06 1a90 	vmov	s13, r1
 8002ccc:	ee07 2a10 	vmov	s14, r2
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eeb0 0a66 	vmov.f32	s0, s13
 8002cd8:	eef0 0a47 	vmov.f32	s1, s14
 8002cdc:	eeb0 1a67 	vmov.f32	s2, s15
 8002ce0:	3748      	adds	r7, #72	@ 0x48
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <FusionAhrsGetEarthAcceleration>:
 * @brief Returns the Earth acceleration measurement equal to accelerometer
 * measurement in the Earth coordinate frame with gravity removed.
 * @param ahrs AHRS algorithm structure.
 * @return Earth acceleration measurement in g.
 */
FusionVector FusionAhrsGetEarthAcceleration(const FusionAhrs *const ahrs) {
 8002ce6:	b480      	push	{r7}
 8002ce8:	b095      	sub	sp, #84	@ 0x54
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
#define A ahrs->accelerometer.axis

    // Calculate accelerometer measurement in the Earth coordinate frame
    const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	ed93 7a06 	vldr	s14, [r3, #24]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfe:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    const float qwqx = Q.w * Q.x;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d12:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    const float qwqy = Q.w * Q.y;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d26:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    const float qwqz = Q.w * Q.z;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    const float qxqy = Q.x * Q.y;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    const float qxqz = Q.x * Q.z;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d62:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    const float qyqz = Q.y * Q.z;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	ed93 7a08 	vldr	s14, [r3, #32]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d76:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    FusionVector accelerometer = {.axis = {
            .x = 2.0f * ((qwqw - 0.5f + Q.x * Q.x) * A.x + (qxqy - qwqz) * A.y + (qxqz + qwqy) * A.z),
 8002d7a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002d7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d82:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	edd3 6a07 	vldr	s13, [r3, #28]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da4:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002da8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002dac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbe:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002dc2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002dc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    FusionVector accelerometer = {.axis = {
 8002ddc:	edc7 7a07 	vstr	s15, [r7, #28]
            .y = 2.0f * ((qxqy + qwqz) * A.x + (qwqw - 0.5f + Q.y * Q.y) * A.y + (qyqz - qwqx) * A.z),
 8002de0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002de4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002dfa:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002dfe:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	ed93 6a08 	vldr	s12, [r3, #32]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e0e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e12:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e24:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8002e28:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002e2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
    FusionVector accelerometer = {.axis = {
 8002e42:	edc7 7a08 	vstr	s15, [r7, #32]
            .z = 2.0f * ((qxqz - qwqy) * A.x + (qyqz + qwqx) * A.y + (qwqw - 0.5f + Q.z * Q.z) * A.z),
 8002e46:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002e4a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002e4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e5c:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8002e60:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002e64:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e76:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002e7a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002e7e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002e8e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e92:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea4:	ee77 7aa7 	vadd.f32	s15, s15, s15
    FusionVector accelerometer = {.axis = {
 8002ea8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }}; // rotation matrix multiplied with the accelerometer

    // Remove gravity from accelerometer measurement
    switch (ahrs->settings.convention) {
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	dc02      	bgt.n	8002eba <FusionAhrsGetEarthAcceleration+0x1d4>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	da03      	bge.n	8002ec0 <FusionAhrsGetEarthAcceleration+0x1da>
 8002eb8:	e014      	b.n	8002ee4 <FusionAhrsGetEarthAcceleration+0x1fe>
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d009      	beq.n	8002ed2 <FusionAhrsGetEarthAcceleration+0x1ec>
 8002ebe:	e011      	b.n	8002ee4 <FusionAhrsGetEarthAcceleration+0x1fe>
        case FusionConventionNwu:
        case FusionConventionEnu:
            accelerometer.axis.z -= 1.0f;
 8002ec0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ec4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ecc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002ed0:	e008      	b.n	8002ee4 <FusionAhrsGetEarthAcceleration+0x1fe>
        case FusionConventionNed:
            accelerometer.axis.z += 1.0f;
 8002ed2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002eda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ede:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002ee2:	bf00      	nop
    }
    return accelerometer;
 8002ee4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ee8:	f107 021c 	add.w	r2, r7, #28
 8002eec:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	ee06 1a90 	vmov	s13, r1
 8002efc:	ee07 2a10 	vmov	s14, r2
 8002f00:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef A
}
 8002f04:	eeb0 0a66 	vmov.f32	s0, s13
 8002f08:	eef0 0a47 	vmov.f32	s1, s14
 8002f0c:	eeb0 1a67 	vmov.f32	s2, s15
 8002f10:	3754      	adds	r7, #84	@ 0x54
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <FusionAhrsSetHeading>:
 * algorithm. This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002f1a:	b590      	push	{r4, r7, lr}
 8002f1c:	b089      	sub	sp, #36	@ 0x24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002f32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	edd3 6a07 	vldr	s13, [r3, #28]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f46:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002f5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f76:	eef0 0a67 	vmov.f32	s1, s15
 8002f7a:	eeb0 0a46 	vmov.f32	s0, s12
 8002f7e:	f00f f8ef 	bl	8012160 <atan2f>
 8002f82:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002f86:	ed97 0a00 	vldr	s0, [r7]
 8002f8a:	f7fe f881 	bl	8001090 <FusionDegreesToRadians>
 8002f8e:	eeb0 7a40 	vmov.f32	s14, s0
 8002f92:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fa2:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002fa6:	ed97 0a06 	vldr	s0, [r7, #24]
 8002faa:	f00f f93d 	bl	8012228 <cosf>
 8002fae:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002fb2:	edc7 7a02 	vstr	s15, [r7, #8]
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002fc2:	ed97 0a06 	vldr	s0, [r7, #24]
 8002fc6:	f00f f97b 	bl	80122c0 <sinf>
 8002fca:	eef0 7a40 	vmov.f32	s15, s0
 8002fce:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002fd2:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002fd6:	687c      	ldr	r4, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	ed93 4a06 	vldr	s8, [r3, #24]
 8002fde:	edd3 4a07 	vldr	s9, [r3, #28]
 8002fe2:	ed93 5a08 	vldr	s10, [r3, #32]
 8002fe6:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 8002fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fee:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ff2:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ffa:	eeb0 2a44 	vmov.f32	s4, s8
 8002ffe:	eef0 2a64 	vmov.f32	s5, s9
 8003002:	eeb0 3a45 	vmov.f32	s6, s10
 8003006:	eef0 3a65 	vmov.f32	s7, s11
 800300a:	eeb0 0a46 	vmov.f32	s0, s12
 800300e:	eef0 0a66 	vmov.f32	s1, s13
 8003012:	eeb0 1a47 	vmov.f32	s2, s14
 8003016:	eef0 1a67 	vmov.f32	s3, s15
 800301a:	f7fe fbb6 	bl	800178a <FusionQuaternionMultiply>
 800301e:	eeb0 6a40 	vmov.f32	s12, s0
 8003022:	eef0 6a60 	vmov.f32	s13, s1
 8003026:	eeb0 7a41 	vmov.f32	s14, s2
 800302a:	eef0 7a61 	vmov.f32	s15, s3
 800302e:	ed84 6a06 	vstr	s12, [r4, #24]
 8003032:	edc4 6a07 	vstr	s13, [r4, #28]
 8003036:	ed84 7a08 	vstr	s14, [r4, #32]
 800303a:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
#undef Q
}
 800303e:	bf00      	nop
 8003040:	3724      	adds	r7, #36	@ 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd90      	pop	{r4, r7, pc}

08003046 <ADXL362_CS_Low>:

/**
 * @brief  Assert chip select (active low)
 */
static void ADXL362_CS_Low(adxl362_ctx_t *ctx)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_RESET);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6858      	ldr	r0, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	891b      	ldrh	r3, [r3, #8]
 8003056:	2200      	movs	r2, #0
 8003058:	4619      	mov	r1, r3
 800305a:	f003 fa1d 	bl	8006498 <HAL_GPIO_WritePin>
  /* Delay for CS setup time (tCSS min 5ns, using ~2us for safety) */
  for (volatile int i = 0; i < 32; i++);  // ~2us delay
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	e002      	b.n	800306a <ADXL362_CS_Low+0x24>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3301      	adds	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b1f      	cmp	r3, #31
 800306e:	ddf9      	ble.n	8003064 <ADXL362_CS_Low+0x1e>
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <ADXL362_CS_High>:

/**
 * @brief  Deassert chip select
 */
static void ADXL362_CS_High(adxl362_ctx_t *ctx)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Delay for CS hold time (tCSH min 10ns, using ~2us for safety) */
  for (volatile int i = 0; i < 32; i++);  // ~2us delay
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	e002      	b.n	800308e <ADXL362_CS_High+0x14>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b1f      	cmp	r3, #31
 8003092:	ddf9      	ble.n	8003088 <ADXL362_CS_High+0xe>
  HAL_GPIO_WritePin(ctx->cs_port, ctx->cs_pin, GPIO_PIN_SET);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6858      	ldr	r0, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	891b      	ldrh	r3, [r3, #8]
 800309c:	2201      	movs	r2, #1
 800309e:	4619      	mov	r1, r3
 80030a0:	f003 f9fa 	bl	8006498 <HAL_GPIO_WritePin>
  /* Additional delay between transactions */
  for (volatile int i = 0; i < 32; i++);  // ~2us delay after CS goes high
 80030a4:	2300      	movs	r3, #0
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	e002      	b.n	80030b0 <ADXL362_CS_High+0x36>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3301      	adds	r3, #1
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b1f      	cmp	r3, #31
 80030b4:	ddf9      	ble.n	80030aa <ADXL362_CS_High+0x30>
}
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <ADXL362_ReadRegs>:

/**
 * @brief  Read multiple registers from ADXL362
 */
static void ADXL362_ReadRegs(adxl362_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t len)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b099      	sub	sp, #100	@ 0x64
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	461a      	mov	r2, r3
 80030cc:	460b      	mov	r3, r1
 80030ce:	72fb      	strb	r3, [r7, #11]
 80030d0:	4613      	mov	r3, r2
 80030d2:	72bb      	strb	r3, [r7, #10]
  /* ADXL362 requires continuous SPI transaction */
  /* Allocate buffer for command (2 bytes) + data (len bytes) */
  uint8_t tx_buf[32] = {0};  // Max buffer size (sufficient for typical reads)
 80030d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80030d8:	2220      	movs	r2, #32
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f00c fa5f 	bl	800f5a0 <memset>
  uint8_t rx_buf[32] = {0};
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	2220      	movs	r2, #32
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f00c fa58 	bl	800f5a0 <memset>

  if (len > 30) return;  // Safety check: ensure we don't overflow buffer
 80030f0:	7abb      	ldrb	r3, [r7, #10]
 80030f2:	2b1e      	cmp	r3, #30
 80030f4:	d834      	bhi.n	8003160 <ADXL362_ReadRegs+0xa0>

  tx_buf[0] = ADXL362_READ_REG;
 80030f6:	230b      	movs	r3, #11
 80030f8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  tx_buf[1] = reg;
 80030fc:	7afb      	ldrb	r3, [r7, #11]
 80030fe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  /* Rest of tx_buf is already zeroed (dummy bytes to clock out data) */

  ADXL362_CS_Low(ctx);
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff ff9f 	bl	8003046 <ADXL362_CS_Low>
  HAL_SPI_TransmitReceive(ctx->hspi, tx_buf, rx_buf, 2 + len, 100);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	7abb      	ldrb	r3, [r7, #10]
 800310e:	b29b      	uxth	r3, r3
 8003110:	3302      	adds	r3, #2
 8003112:	b29b      	uxth	r3, r3
 8003114:	f107 0214 	add.w	r2, r7, #20
 8003118:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800311c:	2464      	movs	r4, #100	@ 0x64
 800311e:	9400      	str	r4, [sp, #0]
 8003120:	f008 fd50 	bl	800bbc4 <HAL_SPI_TransmitReceive>
  ADXL362_CS_High(ctx);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7ff ffa8 	bl	800307a <ADXL362_CS_High>

  /* Copy received data (skip first 2 bytes which are command echo) */
  for (uint8_t i = 0; i < len; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8003130:	e010      	b.n	8003154 <ADXL362_ReadRegs+0x94>
  {
    data[i] = rx_buf[2 + i];
 8003132:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003136:	1c9a      	adds	r2, r3, #2
 8003138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	440b      	add	r3, r1
 8003140:	3258      	adds	r2, #88	@ 0x58
 8003142:	443a      	add	r2, r7
 8003144:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8003148:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < len; i++)
 800314a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800314e:	3301      	adds	r3, #1
 8003150:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8003154:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8003158:	7abb      	ldrb	r3, [r7, #10]
 800315a:	429a      	cmp	r2, r3
 800315c:	d3e9      	bcc.n	8003132 <ADXL362_ReadRegs+0x72>
 800315e:	e000      	b.n	8003162 <ADXL362_ReadRegs+0xa2>
  if (len > 30) return;  // Safety check: ensure we don't overflow buffer
 8003160:	bf00      	nop
  }
}
 8003162:	375c      	adds	r7, #92	@ 0x5c
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}

08003168 <ADXL362_ReadData>:
 * @brief  Read acceleration data from ADXL362 (full 12-bit resolution)
 * @param  accel_raw: Array to store X, Y, Z values [3]
 * @note   ADXL362 12-bit data is positioned in upper bits [15:4] of 16-bit registers
 */
void ADXL362_ReadData(adxl362_ctx_t *ctx, int16_t *accel_raw)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint8_t data[6];

  /* Read 6 bytes starting from XDATA_L: X_L, X_H, Y_L, Y_H, Z_L, Z_H */
  ADXL362_ReadRegs(ctx, ADXL362_REG_XDATA_L, data, 6);
 8003172:	f107 020c 	add.w	r2, r7, #12
 8003176:	2306      	movs	r3, #6
 8003178:	210e      	movs	r1, #14
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ffa0 	bl	80030c0 <ADXL362_ReadRegs>

  /* Combine bytes - note: byte order may be implementation-specific
   * for this particular SPI configuration */
  int16_t x_raw = (int16_t)((data[0] << 8) | data[1]);
 8003180:	7b3b      	ldrb	r3, [r7, #12]
 8003182:	b21b      	sxth	r3, r3
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	b21a      	sxth	r2, r3
 8003188:	7b7b      	ldrb	r3, [r7, #13]
 800318a:	b21b      	sxth	r3, r3
 800318c:	4313      	orrs	r3, r2
 800318e:	82fb      	strh	r3, [r7, #22]
  int16_t y_raw = (int16_t)((data[2] << 8) | data[3]);
 8003190:	7bbb      	ldrb	r3, [r7, #14]
 8003192:	b21b      	sxth	r3, r3
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	b21a      	sxth	r2, r3
 8003198:	7bfb      	ldrb	r3, [r7, #15]
 800319a:	b21b      	sxth	r3, r3
 800319c:	4313      	orrs	r3, r2
 800319e:	82bb      	strh	r3, [r7, #20]
  int16_t z_raw = (int16_t)((data[4] << 8) | data[5]);
 80031a0:	7c3b      	ldrb	r3, [r7, #16]
 80031a2:	b21b      	sxth	r3, r3
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	b21a      	sxth	r2, r3
 80031a8:	7c7b      	ldrb	r3, [r7, #17]
 80031aa:	b21b      	sxth	r3, r3
 80031ac:	4313      	orrs	r3, r2
 80031ae:	827b      	strh	r3, [r7, #18]

  /* ADXL362 places 12-bit data in bits [15:4] with LSBs in [3:0]
   * Shift right by 4 to extract the meaningful 12-bit value
   * This aligns the scale with 1 mg/LSB sensitivity */
  accel_raw[0] = x_raw >> 4;
 80031b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80031b4:	111b      	asrs	r3, r3, #4
 80031b6:	b21a      	sxth	r2, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	801a      	strh	r2, [r3, #0]
  accel_raw[1] = y_raw >> 4;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	3302      	adds	r3, #2
 80031c0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80031c4:	1112      	asrs	r2, r2, #4
 80031c6:	b212      	sxth	r2, r2
 80031c8:	801a      	strh	r2, [r3, #0]
  accel_raw[2] = z_raw >> 4;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	3304      	adds	r3, #4
 80031ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80031d2:	1112      	asrs	r2, r2, #4
 80031d4:	b212      	sxth	r2, r2
 80031d6:	801a      	strh	r2, [r3, #0]
}
 80031d8:	bf00      	nop
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <ADXL362_RawToMg>:

/**
 * @brief  Convert raw value to millig (mg)
 */
float ADXL362_RawToMg(int16_t raw_value, uint8_t range)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	460a      	mov	r2, r1
 80031ea:	80fb      	strh	r3, [r7, #6]
 80031ec:	4613      	mov	r3, r2
 80031ee:	717b      	strb	r3, [r7, #5]
  float sensitivity;

  switch (range)
 80031f0:	797b      	ldrb	r3, [r7, #5]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d00e      	beq.n	8003214 <ADXL362_RawToMg+0x34>
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	dc10      	bgt.n	800321c <ADXL362_RawToMg+0x3c>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <ADXL362_RawToMg+0x24>
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d004      	beq.n	800320c <ADXL362_RawToMg+0x2c>
 8003202:	e00b      	b.n	800321c <ADXL362_RawToMg+0x3c>
  {
    case ADXL362_RANGE_2G:
      sensitivity = ADXL362_2G_SENSITIVITY;
 8003204:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003208:	60fb      	str	r3, [r7, #12]
      break;
 800320a:	e00b      	b.n	8003224 <ADXL362_RawToMg+0x44>
    case ADXL362_RANGE_4G:
      sensitivity = ADXL362_4G_SENSITIVITY;
 800320c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003210:	60fb      	str	r3, [r7, #12]
      break;
 8003212:	e007      	b.n	8003224 <ADXL362_RawToMg+0x44>
    case ADXL362_RANGE_8G:
      sensitivity = ADXL362_8G_SENSITIVITY;
 8003214:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8003218:	60fb      	str	r3, [r7, #12]
      break;
 800321a:	e003      	b.n	8003224 <ADXL362_RawToMg+0x44>
    default:
      sensitivity = ADXL362_2G_SENSITIVITY;
 800321c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003220:	60fb      	str	r3, [r7, #12]
      break;
 8003222:	bf00      	nop
  }

  return (float)raw_value * sensitivity;
 8003224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003228:	ee07 3a90 	vmov	s15, r3
 800322c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003230:	edd7 7a03 	vldr	s15, [r7, #12]
 8003234:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003238:	eeb0 0a67 	vmov.f32	s0, s15
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <lsm6dsox_read_reg>:
  *
  */
int32_t __weak lsm6dsox_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8003246:	b590      	push	{r4, r7, lr}
 8003248:	b087      	sub	sp, #28
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	461a      	mov	r2, r3
 8003252:	460b      	mov	r3, r1
 8003254:	72fb      	strb	r3, [r7, #11]
 8003256:	4613      	mov	r3, r2
 8003258:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <lsm6dsox_read_reg+0x20>
  {
    return -1;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003264:	e009      	b.n	800327a <lsm6dsox_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685c      	ldr	r4, [r3, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68d8      	ldr	r0, [r3, #12]
 800326e:	893b      	ldrh	r3, [r7, #8]
 8003270:	7af9      	ldrb	r1, [r7, #11]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	47a0      	blx	r4
 8003276:	6178      	str	r0, [r7, #20]

  return ret;
 8003278:	697b      	ldr	r3, [r7, #20]
}
 800327a:	4618      	mov	r0, r3
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	bd90      	pop	{r4, r7, pc}

08003282 <lsm6dsox_write_reg>:
  *
  */
int32_t __weak lsm6dsox_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8003282:	b590      	push	{r4, r7, lr}
 8003284:	b087      	sub	sp, #28
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	461a      	mov	r2, r3
 800328e:	460b      	mov	r3, r1
 8003290:	72fb      	strb	r3, [r7, #11]
 8003292:	4613      	mov	r3, r2
 8003294:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <lsm6dsox_write_reg+0x20>
  {
    return -1;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032a0:	e009      	b.n	80032b6 <lsm6dsox_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681c      	ldr	r4, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	68d8      	ldr	r0, [r3, #12]
 80032aa:	893b      	ldrh	r3, [r7, #8]
 80032ac:	7af9      	ldrb	r1, [r7, #11]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	47a0      	blx	r4
 80032b2:	6178      	str	r0, [r7, #20]

  return ret;
 80032b4:	697b      	ldr	r3, [r7, #20]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd90      	pop	{r4, r7, pc}
	...

080032c0 <lsm6dsox_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lsm6dsox_from_fs4_to_mg(int16_t lsb)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 80032ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032d6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80032ec <lsm6dsox_from_fs4_to_mg+0x2c>
 80032da:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80032de:	eeb0 0a67 	vmov.f32	s0, s15
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	3df9db23 	.word	0x3df9db23

080032f0 <lsm6dsox_from_fs2000_to_mdps>:
{
  return ((float_t)lsb) * 35.0f;
}

float_t lsm6dsox_from_fs2000_to_mdps(int16_t lsb)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 70.0f;
 80032fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003306:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800331c <lsm6dsox_from_fs2000_to_mdps+0x2c>
 800330a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800330e:	eeb0 0a67 	vmov.f32	s0, s15
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	428c0000 	.word	0x428c0000

08003320 <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800332c:	f107 0208 	add.w	r2, r7, #8
 8003330:	2301      	movs	r3, #1
 8003332:	2110      	movs	r1, #16
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff86 	bl	8003246 <lsm6dsox_read_reg>
 800333a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <lsm6dsox_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	b2da      	uxtb	r2, r3
 800334a:	7a3b      	ldrb	r3, [r7, #8]
 800334c:	f362 0383 	bfi	r3, r2, #2, #2
 8003350:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003352:	f107 0208 	add.w	r2, r7, #8
 8003356:	2301      	movs	r3, #1
 8003358:	2110      	movs	r1, #16
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ff91 	bl	8003282 <lsm6dsox_write_reg>
 8003360:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <lsm6dsox_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t val)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_xl_t odr_xl =  val;
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fcb1 	bl	8003cea <lsm6dsox_fsm_enable_get>
 8003388:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f040 80c4 	bne.w	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003392:	7d3b      	ldrb	r3, [r7, #20]
 8003394:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003398:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800339a:	7d3b      	ldrb	r3, [r7, #20]
 800339c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033a0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80033a2:	4313      	orrs	r3, r2
 80033a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80033a6:	7d3b      	ldrb	r3, [r7, #20]
 80033a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80033ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80033ae:	4313      	orrs	r3, r2
 80033b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80033b2:	7d3b      	ldrb	r3, [r7, #20]
 80033b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80033ba:	4313      	orrs	r3, r2
 80033bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80033be:	7d3b      	ldrb	r3, [r7, #20]
 80033c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80033c6:	4313      	orrs	r3, r2
 80033c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80033ca:	7d3b      	ldrb	r3, [r7, #20]
 80033cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80033d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80033d2:	4313      	orrs	r3, r2
 80033d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80033d6:	7d3b      	ldrb	r3, [r7, #20]
 80033d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80033dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80033de:	4313      	orrs	r3, r2
 80033e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80033e2:	7d3b      	ldrb	r3, [r7, #20]
 80033e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80033e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80033ee:	7d7b      	ldrb	r3, [r7, #21]
 80033f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80033f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80033f6:	4313      	orrs	r3, r2
 80033f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80033fa:	7d7b      	ldrb	r3, [r7, #21]
 80033fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003400:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003402:	4313      	orrs	r3, r2
 8003404:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003406:	7d7b      	ldrb	r3, [r7, #21]
 8003408:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800340c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800340e:	4313      	orrs	r3, r2
 8003410:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003412:	7d7b      	ldrb	r3, [r7, #21]
 8003414:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003418:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800341a:	4313      	orrs	r3, r2
 800341c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800341e:	7d7b      	ldrb	r3, [r7, #21]
 8003420:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003424:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003426:	4313      	orrs	r3, r2
 8003428:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800342a:	7d7b      	ldrb	r3, [r7, #21]
 800342c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003430:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003432:	4313      	orrs	r3, r2
 8003434:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003436:	7d7b      	ldrb	r3, [r7, #21]
 8003438:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800343c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800343e:	4313      	orrs	r3, r2
 8003440:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003442:	7d7b      	ldrb	r3, [r7, #21]
 8003444:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003448:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800344a:	4313      	orrs	r3, r2
 800344c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800344e:	2b01      	cmp	r3, #1
 8003450:	d163      	bne.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8003452:	f107 0313 	add.w	r3, r7, #19
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fc67 	bl	8003d2c <lsm6dsox_fsm_data_rate_get>
 800345e:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d159      	bne.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b03      	cmp	r3, #3
 800346a:	d853      	bhi.n	8003514 <lsm6dsox_xl_data_rate_set+0x1a8>
 800346c:	a201      	add	r2, pc, #4	@ (adr r2, 8003474 <lsm6dsox_xl_data_rate_set+0x108>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	08003485 	.word	0x08003485
 8003478:	08003497 	.word	0x08003497
 800347c:	080034b5 	.word	0x080034b5
 8003480:	080034df 	.word	0x080034df
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <lsm6dsox_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 800348a:	2301      	movs	r3, #1
 800348c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800348e:	e044      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	77fb      	strb	r3, [r7, #31]
            break;
 8003494:	e041      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <lsm6dsox_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 800349c:	2302      	movs	r3, #2
 800349e:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80034a0:	e03b      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d102      	bne.n	80034ae <lsm6dsox_xl_data_rate_set+0x142>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 80034a8:	2302      	movs	r3, #2
 80034aa:	77fb      	strb	r3, [r7, #31]
            break;
 80034ac:	e035      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	77fb      	strb	r3, [r7, #31]
            break;
 80034b2:	e032      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <lsm6dsox_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80034ba:	2303      	movs	r3, #3
 80034bc:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80034be:	e02c      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <lsm6dsox_xl_data_rate_set+0x160>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80034c6:	2303      	movs	r3, #3
 80034c8:	77fb      	strb	r3, [r7, #31]
            break;
 80034ca:	e026      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d102      	bne.n	80034d8 <lsm6dsox_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80034d2:	2303      	movs	r3, #3
 80034d4:	77fb      	strb	r3, [r7, #31]
            break;
 80034d6:	e020      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	77fb      	strb	r3, [r7, #31]
            break;
 80034dc:	e01d      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <lsm6dsox_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80034e4:	2304      	movs	r3, #4
 80034e6:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80034e8:	e017      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d102      	bne.n	80034f6 <lsm6dsox_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80034f0:	2304      	movs	r3, #4
 80034f2:	77fb      	strb	r3, [r7, #31]
            break;
 80034f4:	e011      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d102      	bne.n	8003502 <lsm6dsox_xl_data_rate_set+0x196>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80034fc:	2304      	movs	r3, #4
 80034fe:	77fb      	strb	r3, [r7, #31]
            break;
 8003500:	e00b      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d102      	bne.n	800350e <lsm6dsox_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003508:	2304      	movs	r3, #4
 800350a:	77fb      	strb	r3, [r7, #31]
            break;
 800350c:	e005      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	77fb      	strb	r3, [r7, #31]
            break;
 8003512:	e002      	b.n	800351a <lsm6dsox_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	77fb      	strb	r3, [r7, #31]
            break;
 8003518:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 800351a:	7c3b      	ldrb	r3, [r7, #16]
 800351c:	f023 0308 	bic.w	r3, r3, #8
 8003520:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d16e      	bne.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
  {
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8003528:	f107 0310 	add.w	r3, r7, #16
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fc94 	bl	8003e5c <lsm6dsox_embedded_sens_get>

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8003534:	7c3b      	ldrb	r3, [r7, #16]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d062      	beq.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8003540:	f107 030f 	add.w	r3, r7, #15
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fc3c 	bl	8003dc4 <lsm6dsox_mlc_data_rate_get>
 800354c:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d158      	bne.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
      {
        switch (mlc_odr)
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d852      	bhi.n	8003600 <lsm6dsox_xl_data_rate_set+0x294>
 800355a:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <lsm6dsox_xl_data_rate_set+0x1f4>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	08003571 	.word	0x08003571
 8003564:	08003583 	.word	0x08003583
 8003568:	080035a1 	.word	0x080035a1
 800356c:	080035cb 	.word	0x080035cb
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d102      	bne.n	800357c <lsm6dsox_xl_data_rate_set+0x210>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 8003576:	2301      	movs	r3, #1
 8003578:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800357a:	e044      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	77fb      	strb	r3, [r7, #31]
            break;
 8003580:	e041      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <lsm6dsox_xl_data_rate_set+0x222>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003588:	2302      	movs	r3, #2
 800358a:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800358c:	e03b      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d102      	bne.n	800359a <lsm6dsox_xl_data_rate_set+0x22e>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003594:	2302      	movs	r3, #2
 8003596:	77fb      	strb	r3, [r7, #31]
            break;
 8003598:	e035      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	77fb      	strb	r3, [r7, #31]
            break;
 800359e:	e032      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d102      	bne.n	80035ac <lsm6dsox_xl_data_rate_set+0x240>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80035a6:	2303      	movs	r3, #3
 80035a8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80035aa:	e02c      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d102      	bne.n	80035b8 <lsm6dsox_xl_data_rate_set+0x24c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80035b2:	2303      	movs	r3, #3
 80035b4:	77fb      	strb	r3, [r7, #31]
            break;
 80035b6:	e026      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d102      	bne.n	80035c4 <lsm6dsox_xl_data_rate_set+0x258>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 80035be:	2303      	movs	r3, #3
 80035c0:	77fb      	strb	r3, [r7, #31]
            break;
 80035c2:	e020      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	77fb      	strb	r3, [r7, #31]
            break;
 80035c8:	e01d      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d102      	bne.n	80035d6 <lsm6dsox_xl_data_rate_set+0x26a>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80035d0:	2304      	movs	r3, #4
 80035d2:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 80035d4:	e017      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d102      	bne.n	80035e2 <lsm6dsox_xl_data_rate_set+0x276>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80035dc:	2304      	movs	r3, #4
 80035de:	77fb      	strb	r3, [r7, #31]
            break;
 80035e0:	e011      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d102      	bne.n	80035ee <lsm6dsox_xl_data_rate_set+0x282>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80035e8:	2304      	movs	r3, #4
 80035ea:	77fb      	strb	r3, [r7, #31]
            break;
 80035ec:	e00b      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d102      	bne.n	80035fa <lsm6dsox_xl_data_rate_set+0x28e>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80035f4:	2304      	movs	r3, #4
 80035f6:	77fb      	strb	r3, [r7, #31]
            break;
 80035f8:	e005      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>
              odr_xl = val;
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	77fb      	strb	r3, [r7, #31]
            break;
 80035fe:	e002      	b.n	8003606 <lsm6dsox_xl_data_rate_set+0x29a>

          default:
            odr_xl = val;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	77fb      	strb	r3, [r7, #31]
            break;
 8003604:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <lsm6dsox_xl_data_rate_set+0x2b0>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800360c:	f107 020c 	add.w	r2, r7, #12
 8003610:	2301      	movs	r3, #1
 8003612:	2110      	movs	r1, #16
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fe16 	bl	8003246 <lsm6dsox_read_reg>
 800361a:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <lsm6dsox_xl_data_rate_set+0x2d6>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8003622:	7ffb      	ldrb	r3, [r7, #31]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	b2da      	uxtb	r2, r3
 800362a:	7b3b      	ldrb	r3, [r7, #12]
 800362c:	f362 1307 	bfi	r3, r2, #4, #4
 8003630:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003632:	f107 020c 	add.w	r2, r7, #12
 8003636:	2301      	movs	r3, #1
 8003638:	2110      	movs	r1, #16
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fe21 	bl	8003282 <lsm6dsox_write_reg>
 8003640:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8003642:	69bb      	ldr	r3, [r7, #24]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8003658:	f107 0208 	add.w	r2, r7, #8
 800365c:	2301      	movs	r3, #1
 800365e:	2111      	movs	r1, #17
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fdf0 	bl	8003246 <lsm6dsox_read_reg>
 8003666:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10f      	bne.n	800368e <lsm6dsox_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	b2da      	uxtb	r2, r3
 8003676:	7a3b      	ldrb	r3, [r7, #8]
 8003678:	f362 0343 	bfi	r3, r2, #1, #3
 800367c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800367e:	f107 0208 	add.w	r2, r7, #8
 8003682:	2301      	movs	r3, #1
 8003684:	2111      	movs	r1, #17
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fdfb 	bl	8003282 <lsm6dsox_write_reg>
 800368c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <lsm6dsox_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t val)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_g_t odr_gy =  val;
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	4619      	mov	r1, r3
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fb1b 	bl	8003cea <lsm6dsox_fsm_enable_get>
 80036b4:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f040 80c4 	bne.w	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80036be:	7d3b      	ldrb	r3, [r7, #20]
 80036c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80036c6:	7d3b      	ldrb	r3, [r7, #20]
 80036c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80036cc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80036ce:	4313      	orrs	r3, r2
 80036d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80036d2:	7d3b      	ldrb	r3, [r7, #20]
 80036d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80036d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80036da:	4313      	orrs	r3, r2
 80036dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80036de:	7d3b      	ldrb	r3, [r7, #20]
 80036e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80036e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80036e6:	4313      	orrs	r3, r2
 80036e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80036ea:	7d3b      	ldrb	r3, [r7, #20]
 80036ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80036f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80036f2:	4313      	orrs	r3, r2
 80036f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80036f6:	7d3b      	ldrb	r3, [r7, #20]
 80036f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80036fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80036fe:	4313      	orrs	r3, r2
 8003700:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003702:	7d3b      	ldrb	r3, [r7, #20]
 8003704:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003708:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800370a:	4313      	orrs	r3, r2
 800370c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800370e:	7d3b      	ldrb	r3, [r7, #20]
 8003710:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003714:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003716:	4313      	orrs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800371a:	7d7b      	ldrb	r3, [r7, #21]
 800371c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003720:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003722:	4313      	orrs	r3, r2
 8003724:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003726:	7d7b      	ldrb	r3, [r7, #21]
 8003728:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800372c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800372e:	4313      	orrs	r3, r2
 8003730:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003732:	7d7b      	ldrb	r3, [r7, #21]
 8003734:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003738:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800373a:	4313      	orrs	r3, r2
 800373c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800373e:	7d7b      	ldrb	r3, [r7, #21]
 8003740:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003744:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003746:	4313      	orrs	r3, r2
 8003748:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800374a:	7d7b      	ldrb	r3, [r7, #21]
 800374c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003750:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003752:	4313      	orrs	r3, r2
 8003754:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003756:	7d7b      	ldrb	r3, [r7, #21]
 8003758:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800375c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800375e:	4313      	orrs	r3, r2
 8003760:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003762:	7d7b      	ldrb	r3, [r7, #21]
 8003764:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003768:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800376a:	4313      	orrs	r3, r2
 800376c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800376e:	7d7b      	ldrb	r3, [r7, #21]
 8003770:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003774:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003776:	4313      	orrs	r3, r2
 8003778:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800377a:	2b01      	cmp	r3, #1
 800377c:	d163      	bne.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 800377e:	f107 0313 	add.w	r3, r7, #19
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fad1 	bl	8003d2c <lsm6dsox_fsm_data_rate_get>
 800378a:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d159      	bne.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d853      	bhi.n	8003840 <lsm6dsox_gy_data_rate_set+0x1a8>
 8003798:	a201      	add	r2, pc, #4	@ (adr r2, 80037a0 <lsm6dsox_gy_data_rate_set+0x108>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	080037c3 	.word	0x080037c3
 80037a8:	080037e1 	.word	0x080037e1
 80037ac:	0800380b 	.word	0x0800380b
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <lsm6dsox_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 80037b6:	2301      	movs	r3, #1
 80037b8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80037ba:	e044      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	77fb      	strb	r3, [r7, #31]
            break;
 80037c0:	e041      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <lsm6dsox_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80037c8:	2302      	movs	r3, #2
 80037ca:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80037cc:	e03b      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d102      	bne.n	80037da <lsm6dsox_gy_data_rate_set+0x142>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80037d4:	2302      	movs	r3, #2
 80037d6:	77fb      	strb	r3, [r7, #31]
            break;
 80037d8:	e035      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	77fb      	strb	r3, [r7, #31]
            break;
 80037de:	e032      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <lsm6dsox_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80037e6:	2303      	movs	r3, #3
 80037e8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80037ea:	e02c      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d102      	bne.n	80037f8 <lsm6dsox_gy_data_rate_set+0x160>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80037f2:	2303      	movs	r3, #3
 80037f4:	77fb      	strb	r3, [r7, #31]
            break;
 80037f6:	e026      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d102      	bne.n	8003804 <lsm6dsox_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80037fe:	2303      	movs	r3, #3
 8003800:	77fb      	strb	r3, [r7, #31]
            break;
 8003802:	e020      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	77fb      	strb	r3, [r7, #31]
            break;
 8003808:	e01d      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <lsm6dsox_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003810:	2304      	movs	r3, #4
 8003812:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8003814:	e017      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d102      	bne.n	8003822 <lsm6dsox_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800381c:	2304      	movs	r3, #4
 800381e:	77fb      	strb	r3, [r7, #31]
            break;
 8003820:	e011      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d102      	bne.n	800382e <lsm6dsox_gy_data_rate_set+0x196>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003828:	2304      	movs	r3, #4
 800382a:	77fb      	strb	r3, [r7, #31]
            break;
 800382c:	e00b      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	2b03      	cmp	r3, #3
 8003832:	d102      	bne.n	800383a <lsm6dsox_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003834:	2304      	movs	r3, #4
 8003836:	77fb      	strb	r3, [r7, #31]
            break;
 8003838:	e005      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	77fb      	strb	r3, [r7, #31]
            break;
 800383e:	e002      	b.n	8003846 <lsm6dsox_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	77fb      	strb	r3, [r7, #31]
            break;
 8003844:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8003846:	7c3b      	ldrb	r3, [r7, #16]
 8003848:	f023 0308 	bic.w	r3, r3, #8
 800384c:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d170      	bne.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
  {
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 8003854:	f107 0310 	add.w	r3, r7, #16
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fafe 	bl	8003e5c <lsm6dsox_embedded_sens_get>
 8003860:	61b8      	str	r0, [r7, #24]

    if (emb_sens.mlc == PROPERTY_ENABLE)
 8003862:	7c3b      	ldrb	r3, [r7, #16]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d063      	beq.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 800386e:	f107 030f 	add.w	r3, r7, #15
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 faa5 	bl	8003dc4 <lsm6dsox_mlc_data_rate_get>
 800387a:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d159      	bne.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d853      	bhi.n	8003930 <lsm6dsox_gy_data_rate_set+0x298>
 8003888:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <lsm6dsox_gy_data_rate_set+0x1f8>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038a1 	.word	0x080038a1
 8003894:	080038b3 	.word	0x080038b3
 8003898:	080038d1 	.word	0x080038d1
 800389c:	080038fb 	.word	0x080038fb
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <lsm6dsox_gy_data_rate_set+0x214>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 80038a6:	2301      	movs	r3, #1
 80038a8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80038aa:	e044      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	77fb      	strb	r3, [r7, #31]
            break;
 80038b0:	e041      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <lsm6dsox_gy_data_rate_set+0x226>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80038b8:	2302      	movs	r3, #2
 80038ba:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80038bc:	e03b      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d102      	bne.n	80038ca <lsm6dsox_gy_data_rate_set+0x232>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80038c4:	2302      	movs	r3, #2
 80038c6:	77fb      	strb	r3, [r7, #31]
            break;
 80038c8:	e035      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	77fb      	strb	r3, [r7, #31]
            break;
 80038ce:	e032      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <lsm6dsox_gy_data_rate_set+0x244>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80038d6:	2303      	movs	r3, #3
 80038d8:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80038da:	e02c      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d102      	bne.n	80038e8 <lsm6dsox_gy_data_rate_set+0x250>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80038e2:	2303      	movs	r3, #3
 80038e4:	77fb      	strb	r3, [r7, #31]
            break;
 80038e6:	e026      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d102      	bne.n	80038f4 <lsm6dsox_gy_data_rate_set+0x25c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80038ee:	2303      	movs	r3, #3
 80038f0:	77fb      	strb	r3, [r7, #31]
            break;
 80038f2:	e020      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	77fb      	strb	r3, [r7, #31]
            break;
 80038f8:	e01d      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <lsm6dsox_gy_data_rate_set+0x26e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003900:	2304      	movs	r3, #4
 8003902:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8003904:	e017      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d102      	bne.n	8003912 <lsm6dsox_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800390c:	2304      	movs	r3, #4
 800390e:	77fb      	strb	r3, [r7, #31]
            break;
 8003910:	e011      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d102      	bne.n	800391e <lsm6dsox_gy_data_rate_set+0x286>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003918:	2304      	movs	r3, #4
 800391a:	77fb      	strb	r3, [r7, #31]
            break;
 800391c:	e00b      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d102      	bne.n	800392a <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003924:	2304      	movs	r3, #4
 8003926:	77fb      	strb	r3, [r7, #31]
            break;
 8003928:	e005      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>
              odr_gy = val;
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	77fb      	strb	r3, [r7, #31]
            break;
 800392e:	e002      	b.n	8003936 <lsm6dsox_gy_data_rate_set+0x29e>

          default:
            odr_gy = val;
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	77fb      	strb	r3, [r7, #31]
            break;
 8003934:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d107      	bne.n	800394c <lsm6dsox_gy_data_rate_set+0x2b4>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800393c:	f107 020c 	add.w	r2, r7, #12
 8003940:	2301      	movs	r3, #1
 8003942:	2111      	movs	r1, #17
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fc7e 	bl	8003246 <lsm6dsox_read_reg>
 800394a:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <lsm6dsox_gy_data_rate_set+0x2da>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8003952:	7ffb      	ldrb	r3, [r7, #31]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	b2da      	uxtb	r2, r3
 800395a:	7b3b      	ldrb	r3, [r7, #12]
 800395c:	f362 1307 	bfi	r3, r2, #4, #4
 8003960:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8003962:	f107 020c 	add.w	r2, r7, #12
 8003966:	2301      	movs	r3, #1
 8003968:	2111      	movs	r1, #17
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff fc89 	bl	8003282 <lsm6dsox_write_reg>
 8003970:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8003972:	69bb      	ldr	r3, [r7, #24]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <lsm6dsox_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003988:	f107 0208 	add.w	r2, r7, #8
 800398c:	2301      	movs	r3, #1
 800398e:	2112      	movs	r1, #18
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff fc58 	bl	8003246 <lsm6dsox_read_reg>
 8003996:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <lsm6dsox_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	7a3b      	ldrb	r3, [r7, #8]
 80039a8:	f362 1386 	bfi	r3, r2, #6, #1
 80039ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 80039ae:	f107 0208 	add.w	r2, r7, #8
 80039b2:	2301      	movs	r3, #1
 80039b4:	2112      	movs	r1, #18
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fc63 	bl	8003282 <lsm6dsox_write_reg>
 80039bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <lsm6dsox_xl_power_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_power_mode_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_xl_hm_mode_t val)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl5_c_t ctrl5_c;
  lsm6dsox_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *) &ctrl5_c, 1);
 80039d4:	f107 0210 	add.w	r2, r7, #16
 80039d8:	2301      	movs	r3, #1
 80039da:	2114      	movs	r1, #20
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff fc32 	bl	8003246 <lsm6dsox_read_reg>
 80039e2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d110      	bne.n	8003a0c <lsm6dsox_xl_power_mode_set+0x44>
  {
    ctrl5_c.xl_ulp_en = ((uint8_t)val & 0x02U) >> 1;
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	7c3b      	ldrb	r3, [r7, #16]
 80039f6:	f362 13c7 	bfi	r3, r2, #7, #1
 80039fa:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL5_C, (uint8_t *) &ctrl5_c, 1);
 80039fc:	f107 0210 	add.w	r2, r7, #16
 8003a00:	2301      	movs	r3, #1
 8003a02:	2114      	movs	r1, #20
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff fc3c 	bl	8003282 <lsm6dsox_write_reg>
 8003a0a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d107      	bne.n	8003a22 <lsm6dsox_xl_power_mode_set+0x5a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL6_C, (uint8_t *) &ctrl6_c, 1);
 8003a12:	f107 020c 	add.w	r2, r7, #12
 8003a16:	2301      	movs	r3, #1
 8003a18:	2115      	movs	r1, #21
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fc13 	bl	8003246 <lsm6dsox_read_reg>
 8003a20:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10f      	bne.n	8003a48 <lsm6dsox_xl_power_mode_set+0x80>
  {
    ctrl6_c.xl_hm_mode = (uint8_t)val & 0x01U;
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	7b3b      	ldrb	r3, [r7, #12]
 8003a32:	f362 1304 	bfi	r3, r2, #4, #1
 8003a36:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL6_C, (uint8_t *) &ctrl6_c, 1);
 8003a38:	f107 020c 	add.w	r2, r7, #12
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	2115      	movs	r1, #21
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fc1e 	bl	8003282 <lsm6dsox_write_reg>
 8003a46:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003a48:	697b      	ldr	r3, [r7, #20]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <lsm6dsox_gy_power_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_power_mode_set(const stmdev_ctx_t *ctx,
                                   lsm6dsox_g_hm_mode_t val)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl7_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL7_G, (uint8_t *)&reg, 1);
 8003a5e:	f107 0208 	add.w	r2, r7, #8
 8003a62:	2301      	movs	r3, #1
 8003a64:	2116      	movs	r1, #22
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fbed 	bl	8003246 <lsm6dsox_read_reg>
 8003a6c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10f      	bne.n	8003a94 <lsm6dsox_gy_power_mode_set+0x42>
  {
    reg.g_hm_mode = (uint8_t)val;
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	7a3b      	ldrb	r3, [r7, #8]
 8003a7e:	f362 13c7 	bfi	r3, r2, #7, #1
 8003a82:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL7_G, (uint8_t *)&reg, 1);
 8003a84:	f107 0208 	add.w	r2, r7, #8
 8003a88:	2301      	movs	r3, #1
 8003a8a:	2116      	movs	r1, #22
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff fbf8 	bl	8003282 <lsm6dsox_write_reg>
 8003a92:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a94:	68fb      	ldr	r3, [r7, #12]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <lsm6dsox_status_reg_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_status_reg_get(const stmdev_ctx_t *ctx,
                                lsm6dsox_status_reg_t *val)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *) val, 1);
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	211e      	movs	r1, #30
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fbc9 	bl	8003246 <lsm6dsox_read_reg>
 8003ab4:	60f8      	str	r0, [r7, #12]

  return ret;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <lsm6dsox_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 8003aca:	f107 020c 	add.w	r2, r7, #12
 8003ace:	2306      	movs	r3, #6
 8003ad0:	2122      	movs	r1, #34	@ 0x22
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fbb7 	bl	8003246 <lsm6dsox_read_reg>
 8003ad8:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <lsm6dsox_angular_rate_raw_get+0x24>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	e036      	b.n	8003b52 <lsm6dsox_angular_rate_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 8003ae4:	7b7b      	ldrb	r3, [r7, #13]
 8003ae6:	b21a      	sxth	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	7b3a      	ldrb	r2, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	b21a      	sxth	r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	3302      	adds	r3, #2
 8003b0a:	b212      	sxth	r2, r2
 8003b0c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	3302      	adds	r3, #2
 8003b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	7bba      	ldrb	r2, [r7, #14]
 8003b1e:	4413      	add	r3, r2
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	3302      	adds	r3, #2
 8003b26:	b212      	sxth	r2, r2
 8003b28:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003b2a:	7c7a      	ldrb	r2, [r7, #17]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	b212      	sxth	r2, r2
 8003b32:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	3304      	adds	r3, #4
 8003b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	7c3a      	ldrb	r2, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	b212      	sxth	r2, r2
 8003b4e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003b50:	697b      	ldr	r3, [r7, #20]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <lsm6dsox_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 8003b64:	f107 020c 	add.w	r2, r7, #12
 8003b68:	2306      	movs	r3, #6
 8003b6a:	2128      	movs	r1, #40	@ 0x28
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff fb6a 	bl	8003246 <lsm6dsox_read_reg>
 8003b72:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <lsm6dsox_acceleration_raw_get+0x24>
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	e036      	b.n	8003bec <lsm6dsox_acceleration_raw_get+0x92>

  val[0] = (int16_t)buff[1];
 8003b7e:	7b7b      	ldrb	r3, [r7, #13]
 8003b80:	b21a      	sxth	r2, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	7b3a      	ldrb	r2, [r7, #12]
 8003b94:	4413      	add	r3, r2
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	b21a      	sxth	r2, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	3302      	adds	r3, #2
 8003ba4:	b212      	sxth	r2, r2
 8003ba6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	3302      	adds	r3, #2
 8003bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	7bba      	ldrb	r2, [r7, #14]
 8003bb8:	4413      	add	r3, r2
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	b212      	sxth	r2, r2
 8003bc2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003bc4:	7c7a      	ldrb	r2, [r7, #17]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	b212      	sxth	r2, r2
 8003bcc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	7c3a      	ldrb	r2, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	3304      	adds	r3, #4
 8003be6:	b212      	sxth	r2, r2
 8003be8:	801a      	strh	r2, [r3, #0]

  return ret;
 8003bea:	697b      	ldr	r3, [r7, #20]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(const stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8003c00:	f107 0208 	add.w	r2, r7, #8
 8003c04:	2301      	movs	r3, #1
 8003c06:	2101      	movs	r1, #1
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff fb1c 	bl	8003246 <lsm6dsox_read_reg>
 8003c0e:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <lsm6dsox_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	7a3b      	ldrb	r3, [r7, #8]
 8003c20:	f362 1387 	bfi	r3, r2, #6, #2
 8003c24:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8003c26:	f107 0208 	add.w	r2, r7, #8
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff fb27 	bl	8003282 <lsm6dsox_write_reg>
 8003c34:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&reg, 1);
  }

  return ret;
 8003c36:	68fb      	ldr	r3, [r7, #12]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	210f      	movs	r1, #15
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff faf8 	bl	8003246 <lsm6dsox_read_reg>
 8003c56:	60f8      	str	r0, [r7, #12]

  return ret;
 8003c58:	68fb      	ldr	r3, [r7, #12]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <lsm6dsox_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003c6e:	f107 0208 	add.w	r2, r7, #8
 8003c72:	2301      	movs	r3, #1
 8003c74:	2112      	movs	r1, #18
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff fae5 	bl	8003246 <lsm6dsox_read_reg>
 8003c7c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10f      	bne.n	8003ca4 <lsm6dsox_reset_set+0x42>
  {
    reg.sw_reset = val;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	7a3b      	ldrb	r3, [r7, #8]
 8003c8e:	f362 0300 	bfi	r3, r2, #0, #1
 8003c92:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003c94:	f107 0208 	add.w	r2, r7, #8
 8003c98:	2301      	movs	r3, #1
 8003c9a:	2112      	movs	r1, #18
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff faf0 	bl	8003282 <lsm6dsox_write_reg>
 8003ca2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <lsm6dsox_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003cb8:	f107 0208 	add.w	r2, r7, #8
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	2112      	movs	r1, #18
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fac0 	bl	8003246 <lsm6dsox_read_reg>
 8003cc6:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <lsm6dsox_reset_get+0x24>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	e007      	b.n	8003ce2 <lsm6dsox_reset_get+0x34>

  *val = reg.sw_reset;
 8003cd2:	7a3b      	ldrb	r3, [r7, #8]
 8003cd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	701a      	strb	r2, [r3, #0]

  return ret;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(const stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff7c 	bl	8003bf4 <lsm6dsox_mem_bank_set>
 8003cfc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 8003d04:	2302      	movs	r3, #2
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	2146      	movs	r1, #70	@ 0x46
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff fa9b 	bl	8003246 <lsm6dsox_read_reg>
 8003d10:	60f8      	str	r0, [r7, #12]
                            2);
  }

  ret += lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003d12:	2100      	movs	r1, #0
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff6d 	bl	8003bf4 <lsm6dsox_mem_bank_set>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  return ret;
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003d36:	2102      	movs	r1, #2
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ff5b 	bl	8003bf4 <lsm6dsox_mem_bank_set>
 8003d3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d107      	bne.n	8003d56 <lsm6dsox_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 8003d46:	f107 0208 	add.w	r2, r7, #8
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	215f      	movs	r1, #95	@ 0x5f
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fa79 	bl	8003246 <lsm6dsox_read_reg>
 8003d54:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d125      	bne.n	8003da8 <lsm6dsox_fsm_data_rate_get+0x7c>
  {
    switch (reg.fsm_odr)
 8003d5c:	7a3b      	ldrb	r3, [r7, #8]
 8003d5e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d81b      	bhi.n	8003da0 <lsm6dsox_fsm_data_rate_get+0x74>
 8003d68:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <lsm6dsox_fsm_data_rate_get+0x44>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d89 	.word	0x08003d89
 8003d78:	08003d91 	.word	0x08003d91
 8003d7c:	08003d99 	.word	0x08003d99
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	701a      	strb	r2, [r3, #0]
        break;
 8003d86:	e00f      	b.n	8003da8 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
        break;
 8003d8e:	e00b      	b.n	8003da8 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2202      	movs	r2, #2
 8003d94:	701a      	strb	r2, [r3, #0]
        break;
 8003d96:	e007      	b.n	8003da8 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	701a      	strb	r2, [r3, #0]
        break;
 8003d9e:	e003      	b.n	8003da8 <lsm6dsox_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
        break;
 8003da6:	bf00      	nop
    }
  }

  ret += lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003da8:	2100      	movs	r1, #0
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ff22 	bl	8003bf4 <lsm6dsox_mem_bank_set>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  return ret;
 8003db8:	68fb      	ldr	r3, [r7, #12]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop

08003dc4 <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003dce:	2102      	movs	r1, #2
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff0f 	bl	8003bf4 <lsm6dsox_mem_bank_set>
 8003dd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d107      	bne.n	8003dee <lsm6dsox_mlc_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 8003dde:	f107 0208 	add.w	r2, r7, #8
 8003de2:	2301      	movs	r3, #1
 8003de4:	2160      	movs	r1, #96	@ 0x60
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff fa2d 	bl	8003246 <lsm6dsox_read_reg>
 8003dec:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d125      	bne.n	8003e40 <lsm6dsox_mlc_data_rate_get+0x7c>
  {
    switch (reg.mlc_odr)
 8003df4:	7a3b      	ldrb	r3, [r7, #8]
 8003df6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d81b      	bhi.n	8003e38 <lsm6dsox_mlc_data_rate_get+0x74>
 8003e00:	a201      	add	r2, pc, #4	@ (adr r2, 8003e08 <lsm6dsox_mlc_data_rate_get+0x44>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e19 	.word	0x08003e19
 8003e0c:	08003e21 	.word	0x08003e21
 8003e10:	08003e29 	.word	0x08003e29
 8003e14:	08003e31 	.word	0x08003e31
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
        break;
 8003e1e:	e00f      	b.n	8003e40 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]
        break;
 8003e26:	e00b      	b.n	8003e40 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	701a      	strb	r2, [r3, #0]
        break;
 8003e2e:	e007      	b.n	8003e40 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2203      	movs	r2, #3
 8003e34:	701a      	strb	r2, [r3, #0]
        break;
 8003e36:	e003      	b.n	8003e40 <lsm6dsox_mlc_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
        break;
 8003e3e:	bf00      	nop
    }
  }

  ret += lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003e40:	2100      	movs	r1, #0
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fed6 	bl	8003bf4 <lsm6dsox_mem_bank_set>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

  return ret;
 8003e50:	68fb      	ldr	r3, [r7, #12]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop

08003e5c <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(const stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003e66:	2102      	movs	r1, #2
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff fec3 	bl	8003bf4 <lsm6dsox_mem_bank_set>
 8003e6e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <lsm6dsox_embedded_sens_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 8003e76:	f107 0210 	add.w	r2, r7, #16
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff f9e1 	bl	8003246 <lsm6dsox_read_reg>
 8003e84:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d107      	bne.n	8003e9c <lsm6dsox_embedded_sens_get+0x40>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8003e8c:	f107 020c 	add.w	r2, r7, #12
 8003e90:	2301      	movs	r3, #1
 8003e92:	2105      	movs	r1, #5
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff f9d6 	bl	8003246 <lsm6dsox_read_reg>
 8003e9a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d135      	bne.n	8003f0e <lsm6dsox_embedded_sens_get+0xb2>
  {
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8003ea2:	7b3b      	ldrb	r3, [r7, #12]
 8003ea4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ea8:	b2d9      	uxtb	r1, r3
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	7813      	ldrb	r3, [r2, #0]
 8003eae:	f361 03c3 	bfi	r3, r1, #3, #1
 8003eb2:	7013      	strb	r3, [r2, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8003eb4:	7b3b      	ldrb	r3, [r7, #12]
 8003eb6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003eba:	b2d9      	uxtb	r1, r3
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	7813      	ldrb	r3, [r2, #0]
 8003ec0:	f361 1304 	bfi	r3, r1, #4, #1
 8003ec4:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8003ec6:	7c3b      	ldrb	r3, [r7, #16]
 8003ec8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ecc:	b2d9      	uxtb	r1, r3
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	7813      	ldrb	r3, [r2, #0]
 8003ed2:	f361 0341 	bfi	r3, r1, #1, #1
 8003ed6:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 8003ed8:	7c3b      	ldrb	r3, [r7, #16]
 8003eda:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003ede:	b2d9      	uxtb	r1, r3
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	7813      	ldrb	r3, [r2, #0]
 8003ee4:	f361 0382 	bfi	r3, r1, #2, #1
 8003ee8:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8003eea:	7c3b      	ldrb	r3, [r7, #16]
 8003eec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ef0:	b2d9      	uxtb	r1, r3
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	7813      	ldrb	r3, [r2, #0]
 8003ef6:	f361 0300 	bfi	r3, r1, #0, #1
 8003efa:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 8003efc:	7b3b      	ldrb	r3, [r7, #12]
 8003efe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003f02:	b2d9      	uxtb	r1, r3
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	7813      	ldrb	r3, [r2, #0]
 8003f08:	f361 1345 	bfi	r3, r1, #5, #1
 8003f0c:	7013      	strb	r3, [r2, #0]
  }

  ret += lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003f0e:	2100      	movs	r1, #0
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fe6f 	bl	8003bf4 <lsm6dsox_mem_bank_set>
 8003f16:	4602      	mov	r2, r0
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]

  return ret;
 8003f1e:	697b      	ldr	r3, [r7, #20]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8003f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f36:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003f4c <FusionRadiansToDegrees+0x24>
 8003f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	42652ee0 	.word	0x42652ee0

08003f50 <FusionAsin>:
static inline float FusionAsin(const float value) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8003f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f5e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6a:	d802      	bhi.n	8003f72 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8003f6c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003fa0 <FusionAsin+0x50>
 8003f70:	e011      	b.n	8003f96 <FusionAsin+0x46>
    if (value >= 1.0f) {
 8003f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	db02      	blt.n	8003f8a <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8003f84:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8003fa4 <FusionAsin+0x54>
 8003f88:	e005      	b.n	8003f96 <FusionAsin+0x46>
    return asinf(value);
 8003f8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f8e:	f00e f8bb 	bl	8012108 <asinf>
 8003f92:	eef0 7a40 	vmov.f32	s15, s0
}
 8003f96:	eeb0 0a67 	vmov.f32	s0, s15
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	bfc90fdb 	.word	0xbfc90fdb
 8003fa4:	3fc90fdb 	.word	0x3fc90fdb

08003fa8 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b090      	sub	sp, #64	@ 0x40
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	eeb0 6a40 	vmov.f32	s12, s0
 8003fb2:	eef0 6a60 	vmov.f32	s13, s1
 8003fb6:	eeb0 7a41 	vmov.f32	s14, s2
 8003fba:	eef0 7a61 	vmov.f32	s15, s3
 8003fbe:	ed87 6a04 	vstr	s12, [r7, #16]
 8003fc2:	edc7 6a05 	vstr	s13, [r7, #20]
 8003fc6:	ed87 7a06 	vstr	s14, [r7, #24]
 8003fca:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 8003fce:	ed97 7a06 	vldr	s14, [r7, #24]
 8003fd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fe2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 8003fe6:	ed97 7a04 	vldr	s14, [r7, #16]
 8003fea:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ff2:	edd7 6a06 	vldr	s13, [r7, #24]
 8003ff6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ffa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ffe:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004002:	ed97 7a05 	vldr	s14, [r7, #20]
 8004006:	edd7 7a05 	vldr	s15, [r7, #20]
 800400a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004016:	eef0 0a67 	vmov.f32	s1, s15
 800401a:	eeb0 0a66 	vmov.f32	s0, s13
 800401e:	f00e f89f 	bl	8012160 <atan2f>
 8004022:	eef0 7a40 	vmov.f32	s15, s0
 8004026:	eeb0 0a67 	vmov.f32	s0, s15
 800402a:	f7ff ff7d 	bl	8003f28 <FusionRadiansToDegrees>
 800402e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8004032:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8004036:	ed97 7a04 	vldr	s14, [r7, #16]
 800403a:	edd7 7a06 	vldr	s15, [r7, #24]
 800403e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004042:	edd7 6a07 	vldr	s13, [r7, #28]
 8004046:	edd7 7a05 	vldr	s15, [r7, #20]
 800404a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800404e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004052:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004056:	eeb0 0a67 	vmov.f32	s0, s15
 800405a:	f7ff ff79 	bl	8003f50 <FusionAsin>
 800405e:	eef0 7a40 	vmov.f32	s15, s0
 8004062:	eeb0 0a67 	vmov.f32	s0, s15
 8004066:	f7ff ff5f 	bl	8003f28 <FusionRadiansToDegrees>
 800406a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800406e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 8004072:	ed97 7a04 	vldr	s14, [r7, #16]
 8004076:	edd7 7a07 	vldr	s15, [r7, #28]
 800407a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800407e:	edd7 6a05 	vldr	s13, [r7, #20]
 8004082:	edd7 7a06 	vldr	s15, [r7, #24]
 8004086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800408a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800408e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004092:	edd7 7a07 	vldr	s15, [r7, #28]
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800409e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040a2:	eef0 0a67 	vmov.f32	s1, s15
 80040a6:	eeb0 0a66 	vmov.f32	s0, s13
 80040aa:	f00e f859 	bl	8012160 <atan2f>
 80040ae:	eef0 7a40 	vmov.f32	s15, s0
 80040b2:	eeb0 0a67 	vmov.f32	s0, s15
 80040b6:	f7ff ff37 	bl	8003f28 <FusionRadiansToDegrees>
 80040ba:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80040be:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    }};
    return euler;
 80040c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80040c6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80040ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80040cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80040d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d6:	ee06 1a90 	vmov	s13, r1
 80040da:	ee07 2a10 	vmov	s14, r2
 80040de:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80040e2:	eeb0 0a66 	vmov.f32	s0, s13
 80040e6:	eef0 0a47 	vmov.f32	s1, s14
 80040ea:	eeb0 1a67 	vmov.f32	s2, s15
 80040ee:	3740      	adds	r7, #64	@ 0x40
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <platform_write>:
 * @param  bufp: Pointer to data buffer
 * @param  len: Number of bytes to write
 * @retval 0 on success, -1 on error
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	@ 0x28
 80040f8:	af04      	add	r7, sp, #16
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	461a      	mov	r2, r3
 8004100:	460b      	mov	r3, r1
 8004102:	72fb      	strb	r3, [r7, #11]
 8004104:	4613      	mov	r3, r2
 8004106:	813b      	strh	r3, [r7, #8]
  uint8_t device_addr = (uint8_t)(uintptr_t)handle;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	75fb      	strb	r3, [r7, #23]

  if (HAL_I2C_Mem_Write(&hi2c2, device_addr, reg, I2C_MEMADD_SIZE_8BIT,
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	b299      	uxth	r1, r3
 8004110:	7afb      	ldrb	r3, [r7, #11]
 8004112:	b29a      	uxth	r2, r3
 8004114:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004118:	9302      	str	r3, [sp, #8]
 800411a:	893b      	ldrh	r3, [r7, #8]
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	2301      	movs	r3, #1
 8004124:	4806      	ldr	r0, [pc, #24]	@ (8004140 <platform_write+0x4c>)
 8004126:	f002 fa6b 	bl	8006600 <HAL_I2C_Mem_Write>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <platform_write+0x42>
                        (uint8_t*)bufp, len, 1000) != HAL_OK)
  {
    return -1;
 8004130:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004134:	e000      	b.n	8004138 <platform_write+0x44>
  }
  return 0;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000208 	.word	0x20000208

08004144 <platform_read>:
 * @param  bufp: Pointer to data buffer
 * @param  len: Number of bytes to read
 * @retval 0 on success, -1 on error
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	@ 0x28
 8004148:	af04      	add	r7, sp, #16
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	461a      	mov	r2, r3
 8004150:	460b      	mov	r3, r1
 8004152:	72fb      	strb	r3, [r7, #11]
 8004154:	4613      	mov	r3, r2
 8004156:	813b      	strh	r3, [r7, #8]
  uint8_t device_addr = (uint8_t)(uintptr_t)handle;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	75fb      	strb	r3, [r7, #23]

  if (HAL_I2C_Mem_Read(&hi2c2, device_addr, reg, I2C_MEMADD_SIZE_8BIT,
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	b299      	uxth	r1, r3
 8004160:	7afb      	ldrb	r3, [r7, #11]
 8004162:	b29a      	uxth	r2, r3
 8004164:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004168:	9302      	str	r3, [sp, #8]
 800416a:	893b      	ldrh	r3, [r7, #8]
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	2301      	movs	r3, #1
 8004174:	4806      	ldr	r0, [pc, #24]	@ (8004190 <platform_read+0x4c>)
 8004176:	f002 fb57 	bl	8006828 <HAL_I2C_Mem_Read>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <platform_read+0x42>
                       bufp, len, 1000) != HAL_OK)
  {
    return -1;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004184:	e000      	b.n	8004188 <platform_read+0x44>
  }
  return 0;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000208 	.word	0x20000208

08004194 <LSM6DSOX_Init>:
/**
 * @brief  Initialize LSM6DSOX 6-axis IMU (Accelerometer + Gyroscope)
 * @retval 1 if initialization successful, 0 if device not found or error
 */
static uint8_t LSM6DSOX_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
  uint8_t whoamI = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	71fb      	strb	r3, [r7, #7]

  /* Initialize sensor context */
  lsm6dsox_ctx.write_reg = platform_write;
 800419e:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 80041a0:	4a24      	ldr	r2, [pc, #144]	@ (8004234 <LSM6DSOX_Init+0xa0>)
 80041a2:	601a      	str	r2, [r3, #0]
  lsm6dsox_ctx.read_reg = platform_read;
 80041a4:	4b22      	ldr	r3, [pc, #136]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 80041a6:	4a24      	ldr	r2, [pc, #144]	@ (8004238 <LSM6DSOX_Init+0xa4>)
 80041a8:	605a      	str	r2, [r3, #4]
  lsm6dsox_ctx.mdelay = HAL_Delay;
 80041aa:	4b21      	ldr	r3, [pc, #132]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 80041ac:	4a23      	ldr	r2, [pc, #140]	@ (800423c <LSM6DSOX_Init+0xa8>)
 80041ae:	609a      	str	r2, [r3, #8]
  lsm6dsox_ctx.handle = (void*)(uintptr_t)LSM6DSOX_I2C_ADDR;
 80041b0:	4b1f      	ldr	r3, [pc, #124]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 80041b2:	22d4      	movs	r2, #212	@ 0xd4
 80041b4:	60da      	str	r2, [r3, #12]

  /* Check device ID */
  if (lsm6dsox_device_id_get(&lsm6dsox_ctx, &whoamI) != 0)
 80041b6:	1dfb      	adds	r3, r7, #7
 80041b8:	4619      	mov	r1, r3
 80041ba:	481d      	ldr	r0, [pc, #116]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 80041bc:	f7ff fd40 	bl	8003c40 <lsm6dsox_device_id_get>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <LSM6DSOX_Init+0x36>
  {
    return 0;  // Communication error
 80041c6:	2300      	movs	r3, #0
 80041c8:	e02d      	b.n	8004226 <LSM6DSOX_Init+0x92>
  }

  if (whoamI != LSM6DSOX_ID)
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	2b6c      	cmp	r3, #108	@ 0x6c
 80041ce:	d001      	beq.n	80041d4 <LSM6DSOX_Init+0x40>
  {
    return 0;  // Device not found
 80041d0:	2300      	movs	r3, #0
 80041d2:	e028      	b.n	8004226 <LSM6DSOX_Init+0x92>
  }

  /* Reset device */
  lsm6dsox_reset_set(&lsm6dsox_ctx, PROPERTY_ENABLE);
 80041d4:	2101      	movs	r1, #1
 80041d6:	4816      	ldr	r0, [pc, #88]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 80041d8:	f7ff fd43 	bl	8003c62 <lsm6dsox_reset_set>
  uint8_t rst;
  do {
    lsm6dsox_reset_get(&lsm6dsox_ctx, &rst);
 80041dc:	1dbb      	adds	r3, r7, #6
 80041de:	4619      	mov	r1, r3
 80041e0:	4813      	ldr	r0, [pc, #76]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 80041e2:	f7ff fd64 	bl	8003cae <lsm6dsox_reset_get>
  } while (rst);
 80041e6:	79bb      	ldrb	r3, [r7, #6]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f7      	bne.n	80041dc <LSM6DSOX_Init+0x48>

  /* Enable Block Data Update */
  lsm6dsox_block_data_update_set(&lsm6dsox_ctx, PROPERTY_ENABLE);
 80041ec:	2101      	movs	r1, #1
 80041ee:	4810      	ldr	r0, [pc, #64]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 80041f0:	f7ff fbc4 	bl	800397c <lsm6dsox_block_data_update_set>
  lsm6dsox_gy_data_rate_set(&lsm6dsox_ctx, LSM6DSOX_GY_ODR_52Hz);
  lsm6dsox_xl_power_mode_set(&lsm6dsox_ctx, LSM6DSOX_LOW_NORMAL_POWER_MD);
  lsm6dsox_gy_power_mode_set(&lsm6dsox_ctx, LSM6DSOX_GY_NORMAL);
#elif (IMU_PERFORMANCE_MODE == 2)
  /* Mode 2: High Performance - 6.667 kHz ODR, high performance mode */
  lsm6dsox_xl_data_rate_set(&lsm6dsox_ctx, LSM6DSOX_XL_ODR_6667Hz);
 80041f4:	210a      	movs	r1, #10
 80041f6:	480e      	ldr	r0, [pc, #56]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 80041f8:	f7ff f8b8 	bl	800336c <lsm6dsox_xl_data_rate_set>
  lsm6dsox_gy_data_rate_set(&lsm6dsox_ctx, LSM6DSOX_GY_ODR_6667Hz);
 80041fc:	210a      	movs	r1, #10
 80041fe:	480c      	ldr	r0, [pc, #48]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 8004200:	f7ff fa4a 	bl	8003698 <lsm6dsox_gy_data_rate_set>
  lsm6dsox_xl_power_mode_set(&lsm6dsox_ctx, LSM6DSOX_HIGH_PERFORMANCE_MD);
 8004204:	2100      	movs	r1, #0
 8004206:	480a      	ldr	r0, [pc, #40]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 8004208:	f7ff fbde 	bl	80039c8 <lsm6dsox_xl_power_mode_set>
  lsm6dsox_gy_power_mode_set(&lsm6dsox_ctx, LSM6DSOX_GY_HIGH_PERFORMANCE);
 800420c:	2100      	movs	r1, #0
 800420e:	4808      	ldr	r0, [pc, #32]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 8004210:	f7ff fc1f 	bl	8003a52 <lsm6dsox_gy_power_mode_set>
#endif

  /* Set full-scale ranges */
  lsm6dsox_xl_full_scale_set(&lsm6dsox_ctx, LSM6DSOX_4g);
 8004214:	2102      	movs	r1, #2
 8004216:	4806      	ldr	r0, [pc, #24]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 8004218:	f7ff f882 	bl	8003320 <lsm6dsox_xl_full_scale_set>
  lsm6dsox_gy_full_scale_set(&lsm6dsox_ctx, LSM6DSOX_2000dps);
 800421c:	2106      	movs	r1, #6
 800421e:	4804      	ldr	r0, [pc, #16]	@ (8004230 <LSM6DSOX_Init+0x9c>)
 8004220:	f7ff fa14 	bl	800364c <lsm6dsox_gy_full_scale_set>

  return 1;  // Initialization successful
 8004224:	2301      	movs	r3, #1
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	200003d0 	.word	0x200003d0
 8004234:	080040f5 	.word	0x080040f5
 8004238:	08004145 	.word	0x08004145
 800423c:	08005c59 	.word	0x08005c59

08004240 <LSM6DSOX_ReadData>:
#if ENABLE_LSM6DSOX
/**
 * @brief  Read data from LSM6DSOX (Accelerometer + Gyroscope)
 */
static void LSM6DSOX_ReadData(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  lsm6dsox_status_reg_t status;

  /* Check if new data is available */
  lsm6dsox_status_reg_get(&lsm6dsox_ctx, &status);
 8004246:	1d3b      	adds	r3, r7, #4
 8004248:	4619      	mov	r1, r3
 800424a:	480d      	ldr	r0, [pc, #52]	@ (8004280 <LSM6DSOX_ReadData+0x40>)
 800424c:	f7ff fc27 	bl	8003a9e <lsm6dsox_status_reg_get>

  if (status.xlda || status.gda)
 8004250:	793b      	ldrb	r3, [r7, #4]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <LSM6DSOX_ReadData+0x28>
 800425c:	793b      	ldrb	r3, [r7, #4]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <LSM6DSOX_ReadData+0x38>
  {
    /* Read accelerometer and gyroscope data (6 bytes each) */
    lsm6dsox_acceleration_raw_get(&lsm6dsox_ctx, lsm6dsox_accel_raw);
 8004268:	4906      	ldr	r1, [pc, #24]	@ (8004284 <LSM6DSOX_ReadData+0x44>)
 800426a:	4805      	ldr	r0, [pc, #20]	@ (8004280 <LSM6DSOX_ReadData+0x40>)
 800426c:	f7ff fc75 	bl	8003b5a <lsm6dsox_acceleration_raw_get>
    lsm6dsox_angular_rate_raw_get(&lsm6dsox_ctx, lsm6dsox_gyro_raw);
 8004270:	4905      	ldr	r1, [pc, #20]	@ (8004288 <LSM6DSOX_ReadData+0x48>)
 8004272:	4803      	ldr	r0, [pc, #12]	@ (8004280 <LSM6DSOX_ReadData+0x40>)
 8004274:	f7ff fc24 	bl	8003ac0 <lsm6dsox_angular_rate_raw_get>
  }
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	200003d0 	.word	0x200003d0
 8004284:	200003f0 	.word	0x200003f0
 8004288:	200003f8 	.word	0x200003f8

0800428c <LSM6DSOX_FusionInit>:
#if ENABLE_LSM6DSOX_FUSION
/**
 * @brief  Initialize Fusion library for LSM6DSOX sensor fusion
 */
static void LSM6DSOX_FusionInit(void)
{
 800428c:	b5b0      	push	{r4, r5, r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
  /* Initialize AHRS algorithm */
  FusionAhrsInitialise(&lsm6dsox_fusion);
 8004292:	480d      	ldr	r0, [pc, #52]	@ (80042c8 <LSM6DSOX_FusionInit+0x3c>)
 8004294:	f7fd fc50 	bl	8001b38 <FusionAhrsInitialise>

  /* Configure AHRS settings */
  FusionAhrsSettings settings = {
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <LSM6DSOX_FusionInit+0x40>)
 800429a:	463c      	mov	r4, r7
 800429c:	461d      	mov	r5, r3
 800429e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80042a6:	e884 0003 	stmia.w	r4, {r0, r1}
    .accelerationRejection = 10.0f,               // Acceleration rejection threshold in degrees
    .magneticRejection = 0.0f,                    // No magnetometer available
    .recoveryTriggerPeriod = 5,                   // Recovery trigger period in seconds
  };

  FusionAhrsSetSettings(&lsm6dsox_fusion, &settings);
 80042aa:	463b      	mov	r3, r7
 80042ac:	4619      	mov	r1, r3
 80042ae:	4806      	ldr	r0, [pc, #24]	@ (80042c8 <LSM6DSOX_FusionInit+0x3c>)
 80042b0:	f7fd fcc4 	bl	8001c3c <FusionAhrsSetSettings>

  /* Initialize timestamp */
  lsm6dsox_last_timestamp = Get_Microseconds();
 80042b4:	f000 f92c 	bl	8004510 <Get_Microseconds>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4a05      	ldr	r2, [pc, #20]	@ (80042d0 <LSM6DSOX_FusionInit+0x44>)
 80042bc:	6013      	str	r3, [r2, #0]
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bdb0      	pop	{r4, r5, r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000400 	.word	0x20000400
 80042cc:	08013760 	.word	0x08013760
 80042d0:	200004b4 	.word	0x200004b4

080042d4 <LSM6DSOX_FusionUpdate>:

/**
 * @brief  Update Fusion algorithm with LSM6DSOX sensor data
 */
static void LSM6DSOX_FusionUpdate(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08e      	sub	sp, #56	@ 0x38
 80042d8:	af00      	add	r7, sp, #0
  /* Get current timestamp and calculate delta time */
  uint32_t current_timestamp = Get_Microseconds();
 80042da:	f000 f919 	bl	8004510 <Get_Microseconds>
 80042de:	6378      	str	r0, [r7, #52]	@ 0x34
  float delta_time = (float)(current_timestamp - lsm6dsox_last_timestamp) / 1000000.0f;  // Convert microseconds to seconds
 80042e0:	4b7a      	ldr	r3, [pc, #488]	@ (80044cc <LSM6DSOX_FusionUpdate+0x1f8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	ee07 3a90 	vmov	s15, r3
 80042ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042f0:	eddf 6a77 	vldr	s13, [pc, #476]	@ 80044d0 <LSM6DSOX_FusionUpdate+0x1fc>
 80042f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042f8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
  lsm6dsox_last_timestamp = current_timestamp;
 80042fc:	4a73      	ldr	r2, [pc, #460]	@ (80044cc <LSM6DSOX_FusionUpdate+0x1f8>)
 80042fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004300:	6013      	str	r3, [r2, #0]

  /* Convert sensor data from mg/mdps to g/dps (Fusion library expects these units) */
  float accel_x_g = lsm6dsox_from_fs4_to_mg(lsm6dsox_accel_raw[0]) / 1000.0f;
 8004302:	4b74      	ldr	r3, [pc, #464]	@ (80044d4 <LSM6DSOX_FusionUpdate+0x200>)
 8004304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe ffd9 	bl	80032c0 <lsm6dsox_from_fs4_to_mg>
 800430e:	eeb0 7a40 	vmov.f32	s14, s0
 8004312:	eddf 6a71 	vldr	s13, [pc, #452]	@ 80044d8 <LSM6DSOX_FusionUpdate+0x204>
 8004316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800431a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  float accel_y_g = lsm6dsox_from_fs4_to_mg(lsm6dsox_accel_raw[1]) / 1000.0f;
 800431e:	4b6d      	ldr	r3, [pc, #436]	@ (80044d4 <LSM6DSOX_FusionUpdate+0x200>)
 8004320:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe ffcb 	bl	80032c0 <lsm6dsox_from_fs4_to_mg>
 800432a:	eeb0 7a40 	vmov.f32	s14, s0
 800432e:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 80044d8 <LSM6DSOX_FusionUpdate+0x204>
 8004332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004336:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float accel_z_g = lsm6dsox_from_fs4_to_mg(lsm6dsox_accel_raw[2]) / 1000.0f;
 800433a:	4b66      	ldr	r3, [pc, #408]	@ (80044d4 <LSM6DSOX_FusionUpdate+0x200>)
 800433c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe ffbd 	bl	80032c0 <lsm6dsox_from_fs4_to_mg>
 8004346:	eeb0 7a40 	vmov.f32	s14, s0
 800434a:	eddf 6a63 	vldr	s13, [pc, #396]	@ 80044d8 <LSM6DSOX_FusionUpdate+0x204>
 800434e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004352:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

  float gyro_x_dps = lsm6dsox_from_fs2000_to_mdps(lsm6dsox_gyro_raw[0]) / 1000.0f;
 8004356:	4b61      	ldr	r3, [pc, #388]	@ (80044dc <LSM6DSOX_FusionUpdate+0x208>)
 8004358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe ffc7 	bl	80032f0 <lsm6dsox_from_fs2000_to_mdps>
 8004362:	eeb0 7a40 	vmov.f32	s14, s0
 8004366:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 80044d8 <LSM6DSOX_FusionUpdate+0x204>
 800436a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800436e:	edc7 7a08 	vstr	s15, [r7, #32]
  float gyro_y_dps = lsm6dsox_from_fs2000_to_mdps(lsm6dsox_gyro_raw[1]) / 1000.0f;
 8004372:	4b5a      	ldr	r3, [pc, #360]	@ (80044dc <LSM6DSOX_FusionUpdate+0x208>)
 8004374:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fe ffb9 	bl	80032f0 <lsm6dsox_from_fs2000_to_mdps>
 800437e:	eeb0 7a40 	vmov.f32	s14, s0
 8004382:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80044d8 <LSM6DSOX_FusionUpdate+0x204>
 8004386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
  float gyro_z_dps = lsm6dsox_from_fs2000_to_mdps(lsm6dsox_gyro_raw[2]) / 1000.0f;
 800438e:	4b53      	ldr	r3, [pc, #332]	@ (80044dc <LSM6DSOX_FusionUpdate+0x208>)
 8004390:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004394:	4618      	mov	r0, r3
 8004396:	f7fe ffab 	bl	80032f0 <lsm6dsox_from_fs2000_to_mdps>
 800439a:	eeb0 7a40 	vmov.f32	s14, s0
 800439e:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80044d8 <LSM6DSOX_FusionUpdate+0x204>
 80043a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043a6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Create FusionVector structures for sensor data */
  FusionVector gyroscope = {
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	617b      	str	r3, [r7, #20]
    .axis.x = gyro_x_dps,
    .axis.y = gyro_y_dps,
    .axis.z = gyro_z_dps
  };

  FusionVector accelerometer = {
 80043b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	60bb      	str	r3, [r7, #8]
    .axis.y = accel_y_g,
    .axis.z = accel_z_g
  };

  /* Update AHRS algorithm (no magnetometer) */
  FusionAhrsUpdateNoMagnetometer(&lsm6dsox_fusion, gyroscope, accelerometer, delta_time);
 80043c2:	ed97 5a00 	vldr	s10, [r7]
 80043c6:	edd7 5a01 	vldr	s11, [r7, #4]
 80043ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ce:	edd7 6a03 	vldr	s13, [r7, #12]
 80043d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80043d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80043da:	ed97 3a0c 	vldr	s6, [r7, #48]	@ 0x30
 80043de:	eef0 1a45 	vmov.f32	s3, s10
 80043e2:	eeb0 2a65 	vmov.f32	s4, s11
 80043e6:	eef0 2a46 	vmov.f32	s5, s12
 80043ea:	eeb0 0a66 	vmov.f32	s0, s13
 80043ee:	eef0 0a47 	vmov.f32	s1, s14
 80043f2:	eeb0 1a67 	vmov.f32	s2, s15
 80043f6:	483a      	ldr	r0, [pc, #232]	@ (80044e0 <LSM6DSOX_FusionUpdate+0x20c>)
 80043f8:	f7fe fafc 	bl	80029f4 <FusionAhrsUpdateNoMagnetometer>

  /* Retrieve fusion outputs */
  lsm6dsox_quat = FusionAhrsGetQuaternion(&lsm6dsox_fusion);
 80043fc:	4838      	ldr	r0, [pc, #224]	@ (80044e0 <LSM6DSOX_FusionUpdate+0x20c>)
 80043fe:	f7fe fb53 	bl	8002aa8 <FusionAhrsGetQuaternion>
 8004402:	eeb0 6a40 	vmov.f32	s12, s0
 8004406:	eef0 6a60 	vmov.f32	s13, s1
 800440a:	eeb0 7a41 	vmov.f32	s14, s2
 800440e:	eef0 7a61 	vmov.f32	s15, s3
 8004412:	4b34      	ldr	r3, [pc, #208]	@ (80044e4 <LSM6DSOX_FusionUpdate+0x210>)
 8004414:	ed83 6a00 	vstr	s12, [r3]
 8004418:	edc3 6a01 	vstr	s13, [r3, #4]
 800441c:	ed83 7a02 	vstr	s14, [r3, #8]
 8004420:	edc3 7a03 	vstr	s15, [r3, #12]
  lsm6dsox_euler = FusionQuaternionToEuler(lsm6dsox_quat);
 8004424:	4b2f      	ldr	r3, [pc, #188]	@ (80044e4 <LSM6DSOX_FusionUpdate+0x210>)
 8004426:	ed93 6a00 	vldr	s12, [r3]
 800442a:	edd3 6a01 	vldr	s13, [r3, #4]
 800442e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004432:	edd3 7a03 	vldr	s15, [r3, #12]
 8004436:	eeb0 0a46 	vmov.f32	s0, s12
 800443a:	eef0 0a66 	vmov.f32	s1, s13
 800443e:	eeb0 1a47 	vmov.f32	s2, s14
 8004442:	eef0 1a67 	vmov.f32	s3, s15
 8004446:	f7ff fdaf 	bl	8003fa8 <FusionQuaternionToEuler>
 800444a:	eef0 6a40 	vmov.f32	s13, s0
 800444e:	eeb0 7a60 	vmov.f32	s14, s1
 8004452:	eef0 7a41 	vmov.f32	s15, s2
 8004456:	4b24      	ldr	r3, [pc, #144]	@ (80044e8 <LSM6DSOX_FusionUpdate+0x214>)
 8004458:	edc3 6a00 	vstr	s13, [r3]
 800445c:	ed83 7a01 	vstr	s14, [r3, #4]
 8004460:	edc3 7a02 	vstr	s15, [r3, #8]
  lsm6dsox_linear_accel = FusionAhrsGetLinearAcceleration(&lsm6dsox_fusion);
 8004464:	481e      	ldr	r0, [pc, #120]	@ (80044e0 <LSM6DSOX_FusionUpdate+0x20c>)
 8004466:	f7fe fba7 	bl	8002bb8 <FusionAhrsGetLinearAcceleration>
 800446a:	eef0 6a40 	vmov.f32	s13, s0
 800446e:	eeb0 7a60 	vmov.f32	s14, s1
 8004472:	eef0 7a41 	vmov.f32	s15, s2
 8004476:	4b1d      	ldr	r3, [pc, #116]	@ (80044ec <LSM6DSOX_FusionUpdate+0x218>)
 8004478:	edc3 6a00 	vstr	s13, [r3]
 800447c:	ed83 7a01 	vstr	s14, [r3, #4]
 8004480:	edc3 7a02 	vstr	s15, [r3, #8]
  lsm6dsox_earth_accel = FusionAhrsGetEarthAcceleration(&lsm6dsox_fusion);
 8004484:	4816      	ldr	r0, [pc, #88]	@ (80044e0 <LSM6DSOX_FusionUpdate+0x20c>)
 8004486:	f7fe fc2e 	bl	8002ce6 <FusionAhrsGetEarthAcceleration>
 800448a:	eef0 6a40 	vmov.f32	s13, s0
 800448e:	eeb0 7a60 	vmov.f32	s14, s1
 8004492:	eef0 7a41 	vmov.f32	s15, s2
 8004496:	4b16      	ldr	r3, [pc, #88]	@ (80044f0 <LSM6DSOX_FusionUpdate+0x21c>)
 8004498:	edc3 6a00 	vstr	s13, [r3]
 800449c:	ed83 7a01 	vstr	s14, [r3, #4]
 80044a0:	edc3 7a02 	vstr	s15, [r3, #8]
  lsm6dsox_gravity = FusionAhrsGetGravity(&lsm6dsox_fusion);
 80044a4:	480e      	ldr	r0, [pc, #56]	@ (80044e0 <LSM6DSOX_FusionUpdate+0x20c>)
 80044a6:	f7fe fb22 	bl	8002aee <FusionAhrsGetGravity>
 80044aa:	eef0 6a40 	vmov.f32	s13, s0
 80044ae:	eeb0 7a60 	vmov.f32	s14, s1
 80044b2:	eef0 7a41 	vmov.f32	s15, s2
 80044b6:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <LSM6DSOX_FusionUpdate+0x220>)
 80044b8:	edc3 6a00 	vstr	s13, [r3]
 80044bc:	ed83 7a01 	vstr	s14, [r3, #4]
 80044c0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80044c4:	bf00      	nop
 80044c6:	3738      	adds	r7, #56	@ 0x38
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	200004b4 	.word	0x200004b4
 80044d0:	49742400 	.word	0x49742400
 80044d4:	200003f0 	.word	0x200003f0
 80044d8:	447a0000 	.word	0x447a0000
 80044dc:	200003f8 	.word	0x200003f8
 80044e0:	20000400 	.word	0x20000400
 80044e4:	20000474 	.word	0x20000474
 80044e8:	20000484 	.word	0x20000484
 80044ec:	20000490 	.word	0x20000490
 80044f0:	2000049c 	.word	0x2000049c
 80044f4:	200004a8 	.word	0x200004a8

080044f8 <ADXL362_ReadDataWrapper>:

/**
 * @brief  Read data from ADXL362 (Accelerometer via SPI)
 */
static void ADXL362_ReadDataWrapper(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* ADXL362 sampling rate depends on IMU_PERFORMANCE_MODE:
   * Mode 0: Wakeup mode (6 Hz, ultralow noise)
   * Mode 1: Measurement mode (100 Hz, normal noise) */
  /* Using full 12-bit resolution from 16-bit registers */
  ADXL362_ReadData(&adxl362_ctx, adxl362_accel_raw);
 80044fc:	4902      	ldr	r1, [pc, #8]	@ (8004508 <ADXL362_ReadDataWrapper+0x10>)
 80044fe:	4803      	ldr	r0, [pc, #12]	@ (800450c <ADXL362_ReadDataWrapper+0x14>)
 8004500:	f7fe fe32 	bl	8003168 <ADXL362_ReadData>
}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	200004b8 	.word	0x200004b8
 800450c:	200003e4 	.word	0x200003e4

08004510 <Get_Microseconds>:
/**
 * @brief  Get microsecond timestamp from TIM2
 * @retval Current timestamp in microseconds
 */
static uint32_t Get_Microseconds(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  return __HAL_TIM_GET_COUNTER(&htim2);
 8004514:	4b03      	ldr	r3, [pc, #12]	@ (8004524 <Get_Microseconds+0x14>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	200002ec 	.word	0x200002ec

08004528 <tx_com>:
 * @brief  Transmit data via UART (USART1 at 1Mbit)
 * @param  tx_buffer: Pointer to data buffer
 * @param  len: Number of bytes to transmit
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart1, tx_buffer, len, HAL_MAX_DELAY);
 8004534:	887a      	ldrh	r2, [r7, #2]
 8004536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4803      	ldr	r0, [pc, #12]	@ (800454c <tx_com+0x24>)
 800453e:	f008 fccd 	bl	800cedc <HAL_UART_Transmit>
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000338 	.word	0x20000338

08004550 <I2C_Scan>:

/**
 * @brief  Scan I2C bus for devices and print results
 */
static void I2C_Scan(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b0a2      	sub	sp, #136	@ 0x88
 8004554:	af00      	add	r7, sp, #0
  char buffer[128];
  uint8_t devices_found = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

  snprintf(buffer, sizeof(buffer), "\r\n=== I2C Bus Scan ===\r\n");
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	4a68      	ldr	r2, [pc, #416]	@ (8004700 <I2C_Scan+0x1b0>)
 8004560:	2180      	movs	r1, #128	@ 0x80
 8004562:	4618      	mov	r0, r3
 8004564:	f00a f87e 	bl	800e664 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	4618      	mov	r0, r3
 800456c:	f7fb fe90 	bl	8000290 <strlen>
 8004570:	4603      	mov	r3, r0
 8004572:	b29a      	uxth	r2, r3
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff ffd5 	bl	8004528 <tx_com>

  snprintf(buffer, sizeof(buffer), "Scanning I2C2 (0x08 to 0x77)...\r\n");
 800457e:	1d3b      	adds	r3, r7, #4
 8004580:	4a60      	ldr	r2, [pc, #384]	@ (8004704 <I2C_Scan+0x1b4>)
 8004582:	2180      	movs	r1, #128	@ 0x80
 8004584:	4618      	mov	r0, r3
 8004586:	f00a f86d 	bl	800e664 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 800458a:	1d3b      	adds	r3, r7, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f7fb fe7f 	bl	8000290 <strlen>
 8004592:	4603      	mov	r3, r0
 8004594:	b29a      	uxth	r2, r3
 8004596:	1d3b      	adds	r3, r7, #4
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff ffc4 	bl	8004528 <tx_com>

  for (uint8_t addr = 0x08; addr <= 0x77; addr++)
 80045a0:	2308      	movs	r3, #8
 80045a2:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80045a6:	e069      	b.n	800467c <I2C_Scan+0x12c>
  {
    /* Try to communicate with device at this address */
    if (HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 1, 10) == HAL_OK)
 80045a8:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	b299      	uxth	r1, r3
 80045b2:	230a      	movs	r3, #10
 80045b4:	2201      	movs	r2, #1
 80045b6:	4854      	ldr	r0, [pc, #336]	@ (8004708 <I2C_Scan+0x1b8>)
 80045b8:	f002 fa50 	bl	8006a5c <HAL_I2C_IsDeviceReady>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d157      	bne.n	8004672 <I2C_Scan+0x122>
    {
      snprintf(buffer, sizeof(buffer), "  Found device at 0x%02X", addr);
 80045c2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80045c6:	1d38      	adds	r0, r7, #4
 80045c8:	4a50      	ldr	r2, [pc, #320]	@ (800470c <I2C_Scan+0x1bc>)
 80045ca:	2180      	movs	r1, #128	@ 0x80
 80045cc:	f00a f84a 	bl	800e664 <sniprintf>
      tx_com((uint8_t*)buffer, strlen(buffer));
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fb fe5c 	bl	8000290 <strlen>
 80045d8:	4603      	mov	r3, r0
 80045da:	b29a      	uxth	r2, r3
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ffa1 	bl	8004528 <tx_com>

      /* Identify known devices */
      if (addr == 0x6B)
 80045e6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80045ea:	2b6b      	cmp	r3, #107	@ 0x6b
 80045ec:	d106      	bne.n	80045fc <I2C_Scan+0xac>
      {
        snprintf(buffer, sizeof(buffer), " (LSM6DSV - 6-axis IMU)\r\n");
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	4a47      	ldr	r2, [pc, #284]	@ (8004710 <I2C_Scan+0x1c0>)
 80045f2:	2180      	movs	r1, #128	@ 0x80
 80045f4:	4618      	mov	r0, r3
 80045f6:	f00a f835 	bl	800e664 <sniprintf>
 80045fa:	e02a      	b.n	8004652 <I2C_Scan+0x102>
      }
      else if (addr == 0x19)
 80045fc:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8004600:	2b19      	cmp	r3, #25
 8004602:	d106      	bne.n	8004612 <I2C_Scan+0xc2>
      {
        snprintf(buffer, sizeof(buffer), " (LIS2DW12 - 3-axis Accel)\r\n");
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	4a43      	ldr	r2, [pc, #268]	@ (8004714 <I2C_Scan+0x1c4>)
 8004608:	2180      	movs	r1, #128	@ 0x80
 800460a:	4618      	mov	r0, r3
 800460c:	f00a f82a 	bl	800e664 <sniprintf>
 8004610:	e01f      	b.n	8004652 <I2C_Scan+0x102>
      }
      else if (addr == 0x6A || addr == 0x6C)
 8004612:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8004616:	2b6a      	cmp	r3, #106	@ 0x6a
 8004618:	d003      	beq.n	8004622 <I2C_Scan+0xd2>
 800461a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800461e:	2b6c      	cmp	r3, #108	@ 0x6c
 8004620:	d106      	bne.n	8004630 <I2C_Scan+0xe0>
      {
        snprintf(buffer, sizeof(buffer), " (LSM6DSV/LSM6DSOX - 6-axis IMU)\r\n");
 8004622:	1d3b      	adds	r3, r7, #4
 8004624:	4a3c      	ldr	r2, [pc, #240]	@ (8004718 <I2C_Scan+0x1c8>)
 8004626:	2180      	movs	r1, #128	@ 0x80
 8004628:	4618      	mov	r0, r3
 800462a:	f00a f81b 	bl	800e664 <sniprintf>
 800462e:	e010      	b.n	8004652 <I2C_Scan+0x102>
      }
      else if (addr == 0x18)
 8004630:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8004634:	2b18      	cmp	r3, #24
 8004636:	d106      	bne.n	8004646 <I2C_Scan+0xf6>
      {
        snprintf(buffer, sizeof(buffer), " (Possible LIS2DW12 alternate)\r\n");
 8004638:	1d3b      	adds	r3, r7, #4
 800463a:	4a38      	ldr	r2, [pc, #224]	@ (800471c <I2C_Scan+0x1cc>)
 800463c:	2180      	movs	r1, #128	@ 0x80
 800463e:	4618      	mov	r0, r3
 8004640:	f00a f810 	bl	800e664 <sniprintf>
 8004644:	e005      	b.n	8004652 <I2C_Scan+0x102>
      }
      else
      {
        snprintf(buffer, sizeof(buffer), " (Unknown device)\r\n");
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	4a35      	ldr	r2, [pc, #212]	@ (8004720 <I2C_Scan+0x1d0>)
 800464a:	2180      	movs	r1, #128	@ 0x80
 800464c:	4618      	mov	r0, r3
 800464e:	f00a f809 	bl	800e664 <sniprintf>
      }
      tx_com((uint8_t*)buffer, strlen(buffer));
 8004652:	1d3b      	adds	r3, r7, #4
 8004654:	4618      	mov	r0, r3
 8004656:	f7fb fe1b 	bl	8000290 <strlen>
 800465a:	4603      	mov	r3, r0
 800465c:	b29a      	uxth	r2, r3
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff ff60 	bl	8004528 <tx_com>
      devices_found++;
 8004668:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800466c:	3301      	adds	r3, #1
 800466e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  for (uint8_t addr = 0x08; addr <= 0x77; addr++)
 8004672:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8004676:	3301      	adds	r3, #1
 8004678:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800467c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8004680:	2b77      	cmp	r3, #119	@ 0x77
 8004682:	d991      	bls.n	80045a8 <I2C_Scan+0x58>
    }
  }

  if (devices_found == 0)
 8004684:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004688:	2b00      	cmp	r3, #0
 800468a:	d111      	bne.n	80046b0 <I2C_Scan+0x160>
  {
    snprintf(buffer, sizeof(buffer), "  No I2C devices found!\r\n");
 800468c:	1d3b      	adds	r3, r7, #4
 800468e:	4a25      	ldr	r2, [pc, #148]	@ (8004724 <I2C_Scan+0x1d4>)
 8004690:	2180      	movs	r1, #128	@ 0x80
 8004692:	4618      	mov	r0, r3
 8004694:	f009 ffe6 	bl	800e664 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8004698:	1d3b      	adds	r3, r7, #4
 800469a:	4618      	mov	r0, r3
 800469c:	f7fb fdf8 	bl	8000290 <strlen>
 80046a0:	4603      	mov	r3, r0
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	1d3b      	adds	r3, r7, #4
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff3d 	bl	8004528 <tx_com>
 80046ae:	e011      	b.n	80046d4 <I2C_Scan+0x184>
  }
  else
  {
    snprintf(buffer, sizeof(buffer), "\r\nTotal devices found: %d\r\n", devices_found);
 80046b0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80046b4:	1d38      	adds	r0, r7, #4
 80046b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004728 <I2C_Scan+0x1d8>)
 80046b8:	2180      	movs	r1, #128	@ 0x80
 80046ba:	f009 ffd3 	bl	800e664 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fb fde5 	bl	8000290 <strlen>
 80046c6:	4603      	mov	r3, r0
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	1d3b      	adds	r3, r7, #4
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff2a 	bl	8004528 <tx_com>
  }

  snprintf(buffer, sizeof(buffer), "===================\r\n\r\n");
 80046d4:	1d3b      	adds	r3, r7, #4
 80046d6:	4a15      	ldr	r2, [pc, #84]	@ (800472c <I2C_Scan+0x1dc>)
 80046d8:	2180      	movs	r1, #128	@ 0x80
 80046da:	4618      	mov	r0, r3
 80046dc:	f009 ffc2 	bl	800e664 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb fdd4 	bl	8000290 <strlen>
 80046e8:	4603      	mov	r3, r0
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	1d3b      	adds	r3, r7, #4
 80046ee:	4611      	mov	r1, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff19 	bl	8004528 <tx_com>
}
 80046f6:	bf00      	nop
 80046f8:	3788      	adds	r7, #136	@ 0x88
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	08013778 	.word	0x08013778
 8004704:	08013794 	.word	0x08013794
 8004708:	20000208 	.word	0x20000208
 800470c:	080137b8 	.word	0x080137b8
 8004710:	080137d4 	.word	0x080137d4
 8004714:	080137f0 	.word	0x080137f0
 8004718:	08013810 	.word	0x08013810
 800471c:	08013834 	.word	0x08013834
 8004720:	08013858 	.word	0x08013858
 8004724:	0801386c 	.word	0x0801386c
 8004728:	08013888 	.word	0x08013888
 800472c:	080138a4 	.word	0x080138a4

08004730 <Print_IMU_Data>:
/**
 * @brief  Print IMU data with timestamp in selected format
 * @note   Each IMU outputs its own line with format: IMU_ID,timestamp,data...
 */
static void Print_IMU_Data(void)
{
 8004730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004734:	b0da      	sub	sp, #360	@ 0x168
 8004736:	af0c      	add	r7, sp, #48	@ 0x30
  char buffer[256];
  uint32_t timestamp = Get_Microseconds();
 8004738:	f7ff feea 	bl	8004510 <Get_Microseconds>
 800473c:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  }
#endif

#if ENABLE_LSM6DSOX
  /* LSM6DSOX output: LSM6DSOX,timestamp,ax,ay,az,gx,gy,gz */
  if (imu_status.lsm6dsox_present)
 8004740:	4bc3      	ldr	r3, [pc, #780]	@ (8004a50 <Print_IMU_Data+0x320>)
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8178 	beq.w	8004a3a <Print_IMU_Data+0x30a>
  {
    float lsmox_ax = lsm6dsox_from_fs4_to_mg(lsm6dsox_accel_raw[0]);
 800474a:	4bc2      	ldr	r3, [pc, #776]	@ (8004a54 <Print_IMU_Data+0x324>)
 800474c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fdb5 	bl	80032c0 <lsm6dsox_from_fs4_to_mg>
 8004756:	ed87 0a4c 	vstr	s0, [r7, #304]	@ 0x130
    float lsmox_ay = lsm6dsox_from_fs4_to_mg(lsm6dsox_accel_raw[1]);
 800475a:	4bbe      	ldr	r3, [pc, #760]	@ (8004a54 <Print_IMU_Data+0x324>)
 800475c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe fdad 	bl	80032c0 <lsm6dsox_from_fs4_to_mg>
 8004766:	ed87 0a4b 	vstr	s0, [r7, #300]	@ 0x12c
    float lsmox_az = lsm6dsox_from_fs4_to_mg(lsm6dsox_accel_raw[2]);
 800476a:	4bba      	ldr	r3, [pc, #744]	@ (8004a54 <Print_IMU_Data+0x324>)
 800476c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	f7fe fda5 	bl	80032c0 <lsm6dsox_from_fs4_to_mg>
 8004776:	ed87 0a4a 	vstr	s0, [r7, #296]	@ 0x128
    float lsmox_gx = lsm6dsox_from_fs2000_to_mdps(lsm6dsox_gyro_raw[0]);
 800477a:	4bb7      	ldr	r3, [pc, #732]	@ (8004a58 <Print_IMU_Data+0x328>)
 800477c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004780:	4618      	mov	r0, r3
 8004782:	f7fe fdb5 	bl	80032f0 <lsm6dsox_from_fs2000_to_mdps>
 8004786:	ed87 0a49 	vstr	s0, [r7, #292]	@ 0x124
    float lsmox_gy = lsm6dsox_from_fs2000_to_mdps(lsm6dsox_gyro_raw[1]);
 800478a:	4bb3      	ldr	r3, [pc, #716]	@ (8004a58 <Print_IMU_Data+0x328>)
 800478c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe fdad 	bl	80032f0 <lsm6dsox_from_fs2000_to_mdps>
 8004796:	ed87 0a48 	vstr	s0, [r7, #288]	@ 0x120
    float lsmox_gz = lsm6dsox_from_fs2000_to_mdps(lsm6dsox_gyro_raw[2]);
 800479a:	4baf      	ldr	r3, [pc, #700]	@ (8004a58 <Print_IMU_Data+0x328>)
 800479c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe fda5 	bl	80032f0 <lsm6dsox_from_fs2000_to_mdps>
 80047a6:	ed87 0a47 	vstr	s0, [r7, #284]	@ 0x11c

    snprintf(buffer, sizeof(buffer),
 80047aa:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80047ae:	f7fb fedb 	bl	8000568 <__aeabi_f2d>
 80047b2:	4604      	mov	r4, r0
 80047b4:	460d      	mov	r5, r1
 80047b6:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80047ba:	f7fb fed5 	bl	8000568 <__aeabi_f2d>
 80047be:	4680      	mov	r8, r0
 80047c0:	4689      	mov	r9, r1
 80047c2:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80047c6:	f7fb fecf 	bl	8000568 <__aeabi_f2d>
 80047ca:	4682      	mov	sl, r0
 80047cc:	468b      	mov	fp, r1
 80047ce:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80047d2:	f7fb fec9 	bl	8000568 <__aeabi_f2d>
 80047d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80047da:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80047de:	f7fb fec3 	bl	8000568 <__aeabi_f2d>
 80047e2:	e9c7 0100 	strd	r0, r1, [r7]
 80047e6:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80047ea:	f7fb febd 	bl	8000568 <__aeabi_f2d>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	f107 0010 	add.w	r0, r7, #16
 80047f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80047fa:	ed97 7b00 	vldr	d7, [r7]
 80047fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004802:	ed97 7b02 	vldr	d7, [r7, #8]
 8004806:	ed8d 7b06 	vstr	d7, [sp, #24]
 800480a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800480e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004812:	e9cd 4500 	strd	r4, r5, [sp]
 8004816:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800481a:	4a90      	ldr	r2, [pc, #576]	@ (8004a5c <Print_IMU_Data+0x32c>)
 800481c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004820:	f009 ff20 	bl	800e664 <sniprintf>
             "LSM6DSOX,%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n",
             timestamp, lsmox_ax, lsmox_ay, lsmox_az, lsmox_gx, lsmox_gy, lsmox_gz);
    tx_com((uint8_t*)buffer, strlen(buffer));
 8004824:	f107 0310 	add.w	r3, r7, #16
 8004828:	4618      	mov	r0, r3
 800482a:	f7fb fd31 	bl	8000290 <strlen>
 800482e:	4603      	mov	r3, r0
 8004830:	b29a      	uxth	r2, r3
 8004832:	f107 0310 	add.w	r3, r7, #16
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff fe75 	bl	8004528 <tx_com>

#if ENABLE_LSM6DSOX_FUSION
    /* LSM6DSOX_FUSION_QUAT output: LSM6DSOX_FUSION_QUAT,timestamp,qw,qx,qy,qz */
    snprintf(buffer, sizeof(buffer),
             "LSM6DSOX_FUSION_QUAT,%lu,%.4f,%.4f,%.4f,%.4f\r\n",
             timestamp, lsm6dsox_quat.element.w, lsm6dsox_quat.element.x,
 800483e:	4b88      	ldr	r3, [pc, #544]	@ (8004a60 <Print_IMU_Data+0x330>)
 8004840:	681b      	ldr	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer),
 8004842:	4618      	mov	r0, r3
 8004844:	f7fb fe90 	bl	8000568 <__aeabi_f2d>
 8004848:	4604      	mov	r4, r0
 800484a:	460d      	mov	r5, r1
             timestamp, lsm6dsox_quat.element.w, lsm6dsox_quat.element.x,
 800484c:	4b84      	ldr	r3, [pc, #528]	@ (8004a60 <Print_IMU_Data+0x330>)
 800484e:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer),
 8004850:	4618      	mov	r0, r3
 8004852:	f7fb fe89 	bl	8000568 <__aeabi_f2d>
 8004856:	4680      	mov	r8, r0
 8004858:	4689      	mov	r9, r1
             lsm6dsox_quat.element.y, lsm6dsox_quat.element.z);
 800485a:	4b81      	ldr	r3, [pc, #516]	@ (8004a60 <Print_IMU_Data+0x330>)
 800485c:	689b      	ldr	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer),
 800485e:	4618      	mov	r0, r3
 8004860:	f7fb fe82 	bl	8000568 <__aeabi_f2d>
 8004864:	4682      	mov	sl, r0
 8004866:	468b      	mov	fp, r1
             lsm6dsox_quat.element.y, lsm6dsox_quat.element.z);
 8004868:	4b7d      	ldr	r3, [pc, #500]	@ (8004a60 <Print_IMU_Data+0x330>)
 800486a:	68db      	ldr	r3, [r3, #12]
    snprintf(buffer, sizeof(buffer),
 800486c:	4618      	mov	r0, r3
 800486e:	f7fb fe7b 	bl	8000568 <__aeabi_f2d>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	f107 0010 	add.w	r0, r7, #16
 800487a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800487e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004882:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004886:	e9cd 4500 	strd	r4, r5, [sp]
 800488a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800488e:	4a75      	ldr	r2, [pc, #468]	@ (8004a64 <Print_IMU_Data+0x334>)
 8004890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004894:	f009 fee6 	bl	800e664 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8004898:	f107 0310 	add.w	r3, r7, #16
 800489c:	4618      	mov	r0, r3
 800489e:	f7fb fcf7 	bl	8000290 <strlen>
 80048a2:	4603      	mov	r3, r0
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	f107 0310 	add.w	r3, r7, #16
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fe3b 	bl	8004528 <tx_com>

    /* LSM6DSOX_FUSION_EULER output: LSM6DSOX_FUSION_EULER,timestamp,roll,pitch,yaw */
    snprintf(buffer, sizeof(buffer),
             "LSM6DSOX_FUSION_EULER,%lu,%.2f,%.2f,%.2f\r\n",
             timestamp, lsm6dsox_euler.angle.roll, lsm6dsox_euler.angle.pitch, lsm6dsox_euler.angle.yaw);
 80048b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004a68 <Print_IMU_Data+0x338>)
 80048b4:	681b      	ldr	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer),
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fb fe56 	bl	8000568 <__aeabi_f2d>
 80048bc:	4604      	mov	r4, r0
 80048be:	460d      	mov	r5, r1
             timestamp, lsm6dsox_euler.angle.roll, lsm6dsox_euler.angle.pitch, lsm6dsox_euler.angle.yaw);
 80048c0:	4b69      	ldr	r3, [pc, #420]	@ (8004a68 <Print_IMU_Data+0x338>)
 80048c2:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer),
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fb fe4f 	bl	8000568 <__aeabi_f2d>
 80048ca:	4680      	mov	r8, r0
 80048cc:	4689      	mov	r9, r1
             timestamp, lsm6dsox_euler.angle.roll, lsm6dsox_euler.angle.pitch, lsm6dsox_euler.angle.yaw);
 80048ce:	4b66      	ldr	r3, [pc, #408]	@ (8004a68 <Print_IMU_Data+0x338>)
 80048d0:	689b      	ldr	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer),
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fb fe48 	bl	8000568 <__aeabi_f2d>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	f107 0010 	add.w	r0, r7, #16
 80048e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048e4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80048e8:	e9cd 4500 	strd	r4, r5, [sp]
 80048ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80048f0:	4a5e      	ldr	r2, [pc, #376]	@ (8004a6c <Print_IMU_Data+0x33c>)
 80048f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048f6:	f009 feb5 	bl	800e664 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 80048fa:	f107 0310 	add.w	r3, r7, #16
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fb fcc6 	bl	8000290 <strlen>
 8004904:	4603      	mov	r3, r0
 8004906:	b29a      	uxth	r2, r3
 8004908:	f107 0310 	add.w	r3, r7, #16
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fe0a 	bl	8004528 <tx_com>

    /* LSM6DSOX_FUSION_LINACC output: LSM6DSOX_FUSION_LINACC,timestamp,x,y,z (g) */
    snprintf(buffer, sizeof(buffer),
             "LSM6DSOX_FUSION_LINACC,%lu,%.4f,%.4f,%.4f\r\n",
             timestamp, lsm6dsox_linear_accel.axis.x, lsm6dsox_linear_accel.axis.y, lsm6dsox_linear_accel.axis.z);
 8004914:	4b56      	ldr	r3, [pc, #344]	@ (8004a70 <Print_IMU_Data+0x340>)
 8004916:	681b      	ldr	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer),
 8004918:	4618      	mov	r0, r3
 800491a:	f7fb fe25 	bl	8000568 <__aeabi_f2d>
 800491e:	4604      	mov	r4, r0
 8004920:	460d      	mov	r5, r1
             timestamp, lsm6dsox_linear_accel.axis.x, lsm6dsox_linear_accel.axis.y, lsm6dsox_linear_accel.axis.z);
 8004922:	4b53      	ldr	r3, [pc, #332]	@ (8004a70 <Print_IMU_Data+0x340>)
 8004924:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer),
 8004926:	4618      	mov	r0, r3
 8004928:	f7fb fe1e 	bl	8000568 <__aeabi_f2d>
 800492c:	4680      	mov	r8, r0
 800492e:	4689      	mov	r9, r1
             timestamp, lsm6dsox_linear_accel.axis.x, lsm6dsox_linear_accel.axis.y, lsm6dsox_linear_accel.axis.z);
 8004930:	4b4f      	ldr	r3, [pc, #316]	@ (8004a70 <Print_IMU_Data+0x340>)
 8004932:	689b      	ldr	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer),
 8004934:	4618      	mov	r0, r3
 8004936:	f7fb fe17 	bl	8000568 <__aeabi_f2d>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	f107 0010 	add.w	r0, r7, #16
 8004942:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004946:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800494a:	e9cd 4500 	strd	r4, r5, [sp]
 800494e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004952:	4a48      	ldr	r2, [pc, #288]	@ (8004a74 <Print_IMU_Data+0x344>)
 8004954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004958:	f009 fe84 	bl	800e664 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 800495c:	f107 0310 	add.w	r3, r7, #16
 8004960:	4618      	mov	r0, r3
 8004962:	f7fb fc95 	bl	8000290 <strlen>
 8004966:	4603      	mov	r3, r0
 8004968:	b29a      	uxth	r2, r3
 800496a:	f107 0310 	add.w	r3, r7, #16
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fdd9 	bl	8004528 <tx_com>

    /* LSM6DSOX_FUSION_EARTHACC output: LSM6DSOX_FUSION_EARTHACC,timestamp,x,y,z (g) */
    snprintf(buffer, sizeof(buffer),
             "LSM6DSOX_FUSION_EARTHACC,%lu,%.4f,%.4f,%.4f\r\n",
             timestamp, lsm6dsox_earth_accel.axis.x, lsm6dsox_earth_accel.axis.y, lsm6dsox_earth_accel.axis.z);
 8004976:	4b40      	ldr	r3, [pc, #256]	@ (8004a78 <Print_IMU_Data+0x348>)
 8004978:	681b      	ldr	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer),
 800497a:	4618      	mov	r0, r3
 800497c:	f7fb fdf4 	bl	8000568 <__aeabi_f2d>
 8004980:	4604      	mov	r4, r0
 8004982:	460d      	mov	r5, r1
             timestamp, lsm6dsox_earth_accel.axis.x, lsm6dsox_earth_accel.axis.y, lsm6dsox_earth_accel.axis.z);
 8004984:	4b3c      	ldr	r3, [pc, #240]	@ (8004a78 <Print_IMU_Data+0x348>)
 8004986:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer),
 8004988:	4618      	mov	r0, r3
 800498a:	f7fb fded 	bl	8000568 <__aeabi_f2d>
 800498e:	4680      	mov	r8, r0
 8004990:	4689      	mov	r9, r1
             timestamp, lsm6dsox_earth_accel.axis.x, lsm6dsox_earth_accel.axis.y, lsm6dsox_earth_accel.axis.z);
 8004992:	4b39      	ldr	r3, [pc, #228]	@ (8004a78 <Print_IMU_Data+0x348>)
 8004994:	689b      	ldr	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer),
 8004996:	4618      	mov	r0, r3
 8004998:	f7fb fde6 	bl	8000568 <__aeabi_f2d>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	f107 0010 	add.w	r0, r7, #16
 80049a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80049ac:	e9cd 4500 	strd	r4, r5, [sp]
 80049b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80049b4:	4a31      	ldr	r2, [pc, #196]	@ (8004a7c <Print_IMU_Data+0x34c>)
 80049b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80049ba:	f009 fe53 	bl	800e664 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 80049be:	f107 0310 	add.w	r3, r7, #16
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fb fc64 	bl	8000290 <strlen>
 80049c8:	4603      	mov	r3, r0
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	f107 0310 	add.w	r3, r7, #16
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fda8 	bl	8004528 <tx_com>

    /* LSM6DSOX_FUSION_GRAVITY output: LSM6DSOX_FUSION_GRAVITY,timestamp,x,y,z (g) */
    snprintf(buffer, sizeof(buffer),
             "LSM6DSOX_FUSION_GRAVITY,%lu,%.4f,%.4f,%.4f\r\n",
             timestamp, lsm6dsox_gravity.axis.x, lsm6dsox_gravity.axis.y, lsm6dsox_gravity.axis.z);
 80049d8:	4b29      	ldr	r3, [pc, #164]	@ (8004a80 <Print_IMU_Data+0x350>)
 80049da:	681b      	ldr	r3, [r3, #0]
    snprintf(buffer, sizeof(buffer),
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fdc3 	bl	8000568 <__aeabi_f2d>
 80049e2:	4604      	mov	r4, r0
 80049e4:	460d      	mov	r5, r1
             timestamp, lsm6dsox_gravity.axis.x, lsm6dsox_gravity.axis.y, lsm6dsox_gravity.axis.z);
 80049e6:	4b26      	ldr	r3, [pc, #152]	@ (8004a80 <Print_IMU_Data+0x350>)
 80049e8:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, sizeof(buffer),
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fb fdbc 	bl	8000568 <__aeabi_f2d>
 80049f0:	4680      	mov	r8, r0
 80049f2:	4689      	mov	r9, r1
             timestamp, lsm6dsox_gravity.axis.x, lsm6dsox_gravity.axis.y, lsm6dsox_gravity.axis.z);
 80049f4:	4b22      	ldr	r3, [pc, #136]	@ (8004a80 <Print_IMU_Data+0x350>)
 80049f6:	689b      	ldr	r3, [r3, #8]
    snprintf(buffer, sizeof(buffer),
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fb fdb5 	bl	8000568 <__aeabi_f2d>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	f107 0010 	add.w	r0, r7, #16
 8004a06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a0a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004a0e:	e9cd 4500 	strd	r4, r5, [sp]
 8004a12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004a16:	4a1b      	ldr	r2, [pc, #108]	@ (8004a84 <Print_IMU_Data+0x354>)
 8004a18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a1c:	f009 fe22 	bl	800e664 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8004a20:	f107 0310 	add.w	r3, r7, #16
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fb fc33 	bl	8000290 <strlen>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	f107 0310 	add.w	r3, r7, #16
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fd77 	bl	8004528 <tx_com>
    tx_com((uint8_t*)buffer, strlen(buffer));
  }
#endif

  /* ADXL362 output: ADXL362,timestamp,ax,ay,az */
  if (imu_status.adxl362_present)
 8004a3a:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <Print_IMU_Data+0x320>)
 8004a3c:	78db      	ldrb	r3, [r3, #3]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d068      	beq.n	8004b14 <Print_IMU_Data+0x3e4>
  {
    float adxl_ax = ADXL362_RawToMg(adxl362_accel_raw[0], ADXL362_RANGE_2G);
 8004a42:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <Print_IMU_Data+0x358>)
 8004a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	e01e      	b.n	8004a8c <Print_IMU_Data+0x35c>
 8004a4e:	bf00      	nop
 8004a50:	200003cc 	.word	0x200003cc
 8004a54:	200003f0 	.word	0x200003f0
 8004a58:	200003f8 	.word	0x200003f8
 8004a5c:	080138bc 	.word	0x080138bc
 8004a60:	20000474 	.word	0x20000474
 8004a64:	080138ec 	.word	0x080138ec
 8004a68:	20000484 	.word	0x20000484
 8004a6c:	0801391c 	.word	0x0801391c
 8004a70:	20000490 	.word	0x20000490
 8004a74:	08013948 	.word	0x08013948
 8004a78:	2000049c 	.word	0x2000049c
 8004a7c:	08013974 	.word	0x08013974
 8004a80:	200004a8 	.word	0x200004a8
 8004a84:	080139a4 	.word	0x080139a4
 8004a88:	200004b8 	.word	0x200004b8
 8004a8c:	f7fe fba8 	bl	80031e0 <ADXL362_RawToMg>
 8004a90:	ed87 0a46 	vstr	s0, [r7, #280]	@ 0x118
    float adxl_ay = ADXL362_RawToMg(adxl362_accel_raw[1], ADXL362_RANGE_2G);
 8004a94:	4b22      	ldr	r3, [pc, #136]	@ (8004b20 <Print_IMU_Data+0x3f0>)
 8004a96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe fb9f 	bl	80031e0 <ADXL362_RawToMg>
 8004aa2:	ed87 0a45 	vstr	s0, [r7, #276]	@ 0x114
    float adxl_az = ADXL362_RawToMg(adxl362_accel_raw[2], ADXL362_RANGE_2G);
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b20 <Print_IMU_Data+0x3f0>)
 8004aa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fb96 	bl	80031e0 <ADXL362_RawToMg>
 8004ab4:	ed87 0a44 	vstr	s0, [r7, #272]	@ 0x110

    snprintf(buffer, sizeof(buffer),
 8004ab8:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8004abc:	f7fb fd54 	bl	8000568 <__aeabi_f2d>
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	460d      	mov	r5, r1
 8004ac4:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8004ac8:	f7fb fd4e 	bl	8000568 <__aeabi_f2d>
 8004acc:	4680      	mov	r8, r0
 8004ace:	4689      	mov	r9, r1
 8004ad0:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8004ad4:	f7fb fd48 	bl	8000568 <__aeabi_f2d>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	f107 0010 	add.w	r0, r7, #16
 8004ae0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ae4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004ae8:	e9cd 4500 	strd	r4, r5, [sp]
 8004aec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004af0:	4a0c      	ldr	r2, [pc, #48]	@ (8004b24 <Print_IMU_Data+0x3f4>)
 8004af2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004af6:	f009 fdb5 	bl	800e664 <sniprintf>
             "ADXL362,%lu,%.2f,%.2f,%.2f\r\n",
             timestamp, adxl_ax, adxl_ay, adxl_az);
    tx_com((uint8_t*)buffer, strlen(buffer));
 8004afa:	f107 0310 	add.w	r3, r7, #16
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fb fbc6 	bl	8000290 <strlen>
 8004b04:	4603      	mov	r3, r0
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	f107 0310 	add.w	r3, r7, #16
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fd0a 	bl	8004528 <tx_com>
             timestamp, adxl_ax, adxl_ay, adxl_az);
    tx_com((uint8_t*)buffer, strlen(buffer));
  }

#endif
}
 8004b14:	bf00      	nop
 8004b16:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b20:	200004b8 	.word	0x200004b8
 8004b24:	080139d4 	.word	0x080139d4

08004b28 <__io_putchar>:
 * @note   This enables printf() to work via USART1 at 1Mbit
 */
#ifdef __GNUC__
/* For GCC/G++ compiler */
int __io_putchar(int ch)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004b30:	1d39      	adds	r1, r7, #4
 8004b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b36:	2201      	movs	r2, #1
 8004b38:	4803      	ldr	r0, [pc, #12]	@ (8004b48 <__io_putchar+0x20>)
 8004b3a:	f008 f9cf 	bl	800cedc <HAL_UART_Transmit>
  return ch;
 8004b3e:	687b      	ldr	r3, [r7, #4]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000338 	.word	0x20000338

08004b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b0c0      	sub	sp, #256	@ 0x100
 8004b50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b52:	f000 ffbb 	bl	8005acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8004b56:	f000 f97c 	bl	8004e52 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8004b5a:	f000 f933 	bl	8004dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b5e:	f000 fae7 	bl	8005130 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8004b62:	f000 f9c5 	bl	8004ef0 <MX_ICACHE_Init>
  MX_I2C2_Init();
 8004b66:	f000 f983 	bl	8004e70 <MX_I2C2_Init>
  MX_TIM2_Init();
 8004b6a:	f000 fa45 	bl	8004ff8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8004b6e:	f000 f9d3 	bl	8004f18 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004b72:	f000 fa8f 	bl	8005094 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Set ADXL362 CS pin HIGH (idle state) - must be done after GPIO init */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8004b76:	2201      	movs	r2, #1
 8004b78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004b7c:	4884      	ldr	r0, [pc, #528]	@ (8004d90 <main+0x244>)
 8004b7e:	f001 fc8b 	bl	8006498 <HAL_GPIO_WritePin>

  /* Wait for ADXL362 to power up (datasheet: max 6ms settling time) */
  HAL_Delay(50);
 8004b82:	2032      	movs	r0, #50	@ 0x32
 8004b84:	f001 f868 	bl	8005c58 <HAL_Delay>

  /* Start the microsecond timer */
  HAL_TIM_Base_Start(&htim2);
 8004b88:	4882      	ldr	r0, [pc, #520]	@ (8004d94 <main+0x248>)
 8004b8a:	f007 fcfd 	bl	800c588 <HAL_TIM_Base_Start>

  /* USART1 already initialized at 1Mbit via MX_USART1_UART_Init() */

  /* Wait for peripherals to stabilize */
  HAL_Delay(100);
 8004b8e:	2064      	movs	r0, #100	@ 0x64
 8004b90:	f001 f862 	bl	8005c58 <HAL_Delay>

  /* Scan I2C bus for connected devices */
  I2C_Scan();
 8004b94:	f7ff fcdc 	bl	8004550 <I2C_Scan>
  char buffer[256];

#if ENABLE_LSM6DSV
  imu_status.lsm6dsv_present = LSM6DSV_Init();
#else
  imu_status.lsm6dsv_present = 0;
 8004b98:	4b7f      	ldr	r3, [pc, #508]	@ (8004d98 <main+0x24c>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]
#endif

#if ENABLE_LSM6DSOX
  imu_status.lsm6dsox_present = LSM6DSOX_Init();
 8004b9e:	f7ff faf9 	bl	8004194 <LSM6DSOX_Init>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b7c      	ldr	r3, [pc, #496]	@ (8004d98 <main+0x24c>)
 8004ba8:	705a      	strb	r2, [r3, #1]
#if ENABLE_LSM6DSOX_FUSION
  if (imu_status.lsm6dsox_present)
 8004baa:	4b7b      	ldr	r3, [pc, #492]	@ (8004d98 <main+0x24c>)
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <main+0x6a>
  {
    LSM6DSOX_FusionInit();
 8004bb2:	f7ff fb6b 	bl	800428c <LSM6DSOX_FusionInit>
#endif

#if ENABLE_LIS2DW12
  imu_status.lis2dw12_present = LIS2DW12_Init();
#else
  imu_status.lis2dw12_present = 0;
 8004bb6:	4b78      	ldr	r3, [pc, #480]	@ (8004d98 <main+0x24c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	709a      	strb	r2, [r3, #2]
    snprintf(buffer, sizeof(buffer), "ADXL362 device ID check FAILED - no communication\r\n");
    tx_com((uint8_t*)buffer, strlen(buffer));
    imu_status.adxl362_present = 0;
  }
#else
  imu_status.adxl362_present = 0;
 8004bbc:	4b76      	ldr	r3, [pc, #472]	@ (8004d98 <main+0x24c>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	70da      	strb	r2, [r3, #3]
#endif

  /* Print detected IMU status */
  snprintf(buffer, sizeof(buffer), "\r\n=== IMU Detection Results ===\r\n");
 8004bc2:	463b      	mov	r3, r7
 8004bc4:	4a75      	ldr	r2, [pc, #468]	@ (8004d9c <main+0x250>)
 8004bc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f009 fd4a 	bl	800e664 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fb fb5c 	bl	8000290 <strlen>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	463b      	mov	r3, r7
 8004bde:	4611      	mov	r1, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fca1 	bl	8004528 <tx_com>

  snprintf(buffer, sizeof(buffer), "LSM6DSV (6-axis I2C):    %s\r\n",
           imu_status.lsm6dsv_present ? "DETECTED" : "NOT FOUND");
 8004be6:	4b6c      	ldr	r3, [pc, #432]	@ (8004d98 <main+0x24c>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
  snprintf(buffer, sizeof(buffer), "LSM6DSV (6-axis I2C):    %s\r\n",
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <main+0xa6>
 8004bee:	4b6c      	ldr	r3, [pc, #432]	@ (8004da0 <main+0x254>)
 8004bf0:	e000      	b.n	8004bf4 <main+0xa8>
 8004bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8004da4 <main+0x258>)
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	4a6c      	ldr	r2, [pc, #432]	@ (8004da8 <main+0x25c>)
 8004bf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004bfc:	f009 fd32 	bl	800e664 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8004c00:	463b      	mov	r3, r7
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fb fb44 	bl	8000290 <strlen>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fc89 	bl	8004528 <tx_com>

  snprintf(buffer, sizeof(buffer), "LSM6DSOX (6-axis I2C):   %s\r\n",
           imu_status.lsm6dsox_present ? "DETECTED" : "NOT FOUND");
 8004c16:	4b60      	ldr	r3, [pc, #384]	@ (8004d98 <main+0x24c>)
 8004c18:	785b      	ldrb	r3, [r3, #1]
  snprintf(buffer, sizeof(buffer), "LSM6DSOX (6-axis I2C):   %s\r\n",
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <main+0xd6>
 8004c1e:	4b60      	ldr	r3, [pc, #384]	@ (8004da0 <main+0x254>)
 8004c20:	e000      	b.n	8004c24 <main+0xd8>
 8004c22:	4b60      	ldr	r3, [pc, #384]	@ (8004da4 <main+0x258>)
 8004c24:	4638      	mov	r0, r7
 8004c26:	4a61      	ldr	r2, [pc, #388]	@ (8004dac <main+0x260>)
 8004c28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c2c:	f009 fd1a 	bl	800e664 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8004c30:	463b      	mov	r3, r7
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fb fb2c 	bl	8000290 <strlen>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fc71 	bl	8004528 <tx_com>

  snprintf(buffer, sizeof(buffer), "LIS2DW12 (3-axis I2C):   %s\r\n",
           imu_status.lis2dw12_present ? "DETECTED" : "NOT FOUND");
 8004c46:	4b54      	ldr	r3, [pc, #336]	@ (8004d98 <main+0x24c>)
 8004c48:	789b      	ldrb	r3, [r3, #2]
  snprintf(buffer, sizeof(buffer), "LIS2DW12 (3-axis I2C):   %s\r\n",
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <main+0x106>
 8004c4e:	4b54      	ldr	r3, [pc, #336]	@ (8004da0 <main+0x254>)
 8004c50:	e000      	b.n	8004c54 <main+0x108>
 8004c52:	4b54      	ldr	r3, [pc, #336]	@ (8004da4 <main+0x258>)
 8004c54:	4638      	mov	r0, r7
 8004c56:	4a56      	ldr	r2, [pc, #344]	@ (8004db0 <main+0x264>)
 8004c58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c5c:	f009 fd02 	bl	800e664 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8004c60:	463b      	mov	r3, r7
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fb fb14 	bl	8000290 <strlen>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	463b      	mov	r3, r7
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fc59 	bl	8004528 <tx_com>

  snprintf(buffer, sizeof(buffer), "ADXL362 (3-axis SPI):    %s\r\n",
           imu_status.adxl362_present ? "DETECTED" : "NOT FOUND");
 8004c76:	4b48      	ldr	r3, [pc, #288]	@ (8004d98 <main+0x24c>)
 8004c78:	78db      	ldrb	r3, [r3, #3]
  snprintf(buffer, sizeof(buffer), "ADXL362 (3-axis SPI):    %s\r\n",
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <main+0x136>
 8004c7e:	4b48      	ldr	r3, [pc, #288]	@ (8004da0 <main+0x254>)
 8004c80:	e000      	b.n	8004c84 <main+0x138>
 8004c82:	4b48      	ldr	r3, [pc, #288]	@ (8004da4 <main+0x258>)
 8004c84:	4638      	mov	r0, r7
 8004c86:	4a4b      	ldr	r2, [pc, #300]	@ (8004db4 <main+0x268>)
 8004c88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c8c:	f009 fcea 	bl	800e664 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8004c90:	463b      	mov	r3, r7
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fb fafc 	bl	8000290 <strlen>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	463b      	mov	r3, r7
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fc41 	bl	8004528 <tx_com>

  snprintf(buffer, sizeof(buffer), "==============================\r\n\r\n");
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	4a43      	ldr	r2, [pc, #268]	@ (8004db8 <main+0x26c>)
 8004caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f009 fcd8 	bl	800e664 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8004cb4:	463b      	mov	r3, r7
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb faea 	bl	8000290 <strlen>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	463b      	mov	r3, r7
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff fc2f 	bl	8004528 <tx_com>

  /* Check if at least one IMU is present */
  if (!imu_status.lsm6dsv_present && !imu_status.lsm6dsox_present && !imu_status.lis2dw12_present && !imu_status.adxl362_present)
 8004cca:	4b33      	ldr	r3, [pc, #204]	@ (8004d98 <main+0x24c>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d11d      	bne.n	8004d0e <main+0x1c2>
 8004cd2:	4b31      	ldr	r3, [pc, #196]	@ (8004d98 <main+0x24c>)
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d119      	bne.n	8004d0e <main+0x1c2>
 8004cda:	4b2f      	ldr	r3, [pc, #188]	@ (8004d98 <main+0x24c>)
 8004cdc:	789b      	ldrb	r3, [r3, #2]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d115      	bne.n	8004d0e <main+0x1c2>
 8004ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8004d98 <main+0x24c>)
 8004ce4:	78db      	ldrb	r3, [r3, #3]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d111      	bne.n	8004d0e <main+0x1c2>
  {
    snprintf(buffer, sizeof(buffer), "ERROR: No IMUs detected! Check connections.\r\n");
 8004cea:	463b      	mov	r3, r7
 8004cec:	4a33      	ldr	r2, [pc, #204]	@ (8004dbc <main+0x270>)
 8004cee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f009 fcb6 	bl	800e664 <sniprintf>
    tx_com((uint8_t*)buffer, strlen(buffer));
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fb fac8 	bl	8000290 <strlen>
 8004d00:	4603      	mov	r3, r0
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	463b      	mov	r3, r7
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fc0d 	bl	8004528 <tx_com>
  }

  /* Print CSV header or startup message */
#if (OUTPUT_FORMAT == 0)
  snprintf(buffer, sizeof(buffer), "Starting data acquisition (CSV format)...\r\n\r\n");
 8004d0e:	463b      	mov	r3, r7
 8004d10:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <main+0x274>)
 8004d12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d16:	4618      	mov	r0, r3
 8004d18:	f009 fca4 	bl	800e664 <sniprintf>
  tx_com((uint8_t*)buffer, strlen(buffer));
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fab6 	bl	8000290 <strlen>
 8004d24:	4603      	mov	r3, r0
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	463b      	mov	r3, r7
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fbfb 	bl	8004528 <tx_com>
#endif

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8004d32:	2000      	movs	r0, #0
 8004d34:	f000 fd9a 	bl	800586c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f000 fd97 	bl	800586c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004d3e:	2002      	movs	r0, #2
 8004d40:	f000 fd94 	bl	800586c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8004d44:	2101      	movs	r1, #1
 8004d46:	2000      	movs	r0, #0
 8004d48:	f000 fe20 	bl	800598c <BSP_PB_Init>
#endif
    }
#endif

#if ENABLE_LSM6DSOX
    if (imu_status.lsm6dsox_present)
 8004d4c:	4b12      	ldr	r3, [pc, #72]	@ (8004d98 <main+0x24c>)
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <main+0x210>
    {
      LSM6DSOX_ReadData();
 8004d54:	f7ff fa74 	bl	8004240 <LSM6DSOX_ReadData>
#if ENABLE_LSM6DSOX_FUSION
      LSM6DSOX_FusionUpdate();
 8004d58:	f7ff fabc 	bl	80042d4 <LSM6DSOX_FusionUpdate>
    {
      LIS2DW12_ReadData();
    }
#endif

    if (imu_status.adxl362_present)
 8004d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d98 <main+0x24c>)
 8004d5e:	78db      	ldrb	r3, [r3, #3]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <main+0x21c>
    {
      ADXL362_ReadDataWrapper();
 8004d64:	f7ff fbc8 	bl	80044f8 <ADXL362_ReadDataWrapper>
    }

    /* Print the timestamped data (only outputs data from detected IMUs) */
    if (imu_status.lsm6dsv_present || imu_status.lsm6dsox_present || imu_status.lis2dw12_present || imu_status.adxl362_present)
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <main+0x24c>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <main+0x23c>
 8004d70:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <main+0x24c>)
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d107      	bne.n	8004d88 <main+0x23c>
 8004d78:	4b07      	ldr	r3, [pc, #28]	@ (8004d98 <main+0x24c>)
 8004d7a:	789b      	ldrb	r3, [r3, #2]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d103      	bne.n	8004d88 <main+0x23c>
 8004d80:	4b05      	ldr	r3, [pc, #20]	@ (8004d98 <main+0x24c>)
 8004d82:	78db      	ldrb	r3, [r3, #3]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0e1      	beq.n	8004d4c <main+0x200>
    {
      Print_IMU_Data();
 8004d88:	f7ff fcd2 	bl	8004730 <Print_IMU_Data>
    if (imu_status.lsm6dsox_present)
 8004d8c:	e7de      	b.n	8004d4c <main+0x200>
 8004d8e:	bf00      	nop
 8004d90:	42021000 	.word	0x42021000
 8004d94:	200002ec 	.word	0x200002ec
 8004d98:	200003cc 	.word	0x200003cc
 8004d9c:	080139f4 	.word	0x080139f4
 8004da0:	08013a18 	.word	0x08013a18
 8004da4:	08013a24 	.word	0x08013a24
 8004da8:	08013a30 	.word	0x08013a30
 8004dac:	08013a50 	.word	0x08013a50
 8004db0:	08013a70 	.word	0x08013a70
 8004db4:	08013a90 	.word	0x08013a90
 8004db8:	08013ab0 	.word	0x08013ab0
 8004dbc:	08013ad4 	.word	0x08013ad4
 8004dc0:	08013b04 	.word	0x08013b04

08004dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b09e      	sub	sp, #120	@ 0x78
 8004dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dca:	f107 0318 	add.w	r3, r7, #24
 8004dce:	2260      	movs	r2, #96	@ 0x60
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f00a fbe4 	bl	800f5a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004dd8:	463b      	mov	r3, r7
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	609a      	str	r2, [r3, #8]
 8004de2:	60da      	str	r2, [r3, #12]
 8004de4:	611a      	str	r2, [r3, #16]
 8004de6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8004de8:	2000      	movs	r0, #0
 8004dea:	f002 fac7 	bl	800737c <HAL_PWREx_ControlVoltageScaling>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004df4:	f000 fa5c 	bl	80052b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e02:	2310      	movs	r3, #16
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e0a:	f107 0318 	add.w	r3, r7, #24
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f002 fbb0 	bl	8007574 <HAL_RCC_OscConfig>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8004e1a:	f000 fa49 	bl	80052b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e1e:	231f      	movs	r3, #31
 8004e20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004e22:	2301      	movs	r3, #1
 8004e24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004e36:	463b      	mov	r3, r7
 8004e38:	2101      	movs	r1, #1
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f003 fa76 	bl	800832c <HAL_RCC_ClockConfig>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004e46:	f000 fa33 	bl	80052b0 <Error_Handler>
  }
}
 8004e4a:	bf00      	nop
 8004e4c:	3778      	adds	r7, #120	@ 0x78
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004e56:	f002 fb7d 	bl	8007554 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8004e5a:	2002      	movs	r0, #2
 8004e5c:	f002 fb1a 	bl	8007494 <HAL_PWREx_ConfigSupply>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8004e66:	f000 fa23 	bl	80052b0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004e74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004e76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee8 <MX_I2C2_Init+0x78>)
 8004e78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 8004e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004eec <MX_I2C2_Init+0x7c>)
 8004e7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004e80:	4b18      	ldr	r3, [pc, #96]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e86:	4b17      	ldr	r3, [pc, #92]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e8c:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004e92:	4b14      	ldr	r3, [pc, #80]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e98:	4b12      	ldr	r3, [pc, #72]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e9e:	4b11      	ldr	r3, [pc, #68]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004eaa:	480e      	ldr	r0, [pc, #56]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004eac:	f001 fb0c 	bl	80064c8 <HAL_I2C_Init>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004eb6:	f000 f9fb 	bl	80052b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4809      	ldr	r0, [pc, #36]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004ebe:	f002 f995 	bl	80071ec <HAL_I2CEx_ConfigAnalogFilter>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004ec8:	f000 f9f2 	bl	80052b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4805      	ldr	r0, [pc, #20]	@ (8004ee4 <MX_I2C2_Init+0x74>)
 8004ed0:	f002 f9d7 	bl	8007282 <HAL_I2CEx_ConfigDigitalFilter>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004eda:	f000 f9e9 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000208 	.word	0x20000208
 8004ee8:	40005800 	.word	0x40005800
 8004eec:	0010061a 	.word	0x0010061a

08004ef0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f002 fa11 	bl	800731c <HAL_ICACHE_ConfigAssociativityMode>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8004f00:	f000 f9d6 	bl	80052b0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8004f04:	f002 fa2a 	bl	800735c <HAL_ICACHE_Enable>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8004f0e:	f000 f9cf 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8004f1e:	1d3b      	adds	r3, r7, #4
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004f28:	4b31      	ldr	r3, [pc, #196]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f2a:	4a32      	ldr	r2, [pc, #200]	@ (8004ff4 <MX_SPI1_Init+0xdc>)
 8004f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f2e:	4b30      	ldr	r3, [pc, #192]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f30:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f36:	4b2e      	ldr	r3, [pc, #184]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f3e:	2207      	movs	r2, #7
 8004f40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f42:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f48:	4b29      	ldr	r3, [pc, #164]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f4e:	4b28      	ldr	r3, [pc, #160]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f50:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004f54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004f56:	4b26      	ldr	r3, [pc, #152]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f58:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004f5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f64:	4b22      	ldr	r3, [pc, #136]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f6a:	4b21      	ldr	r3, [pc, #132]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8004f70:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f72:	2207      	movs	r2, #7
 8004f74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004f76:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 8004f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004f84:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004f8a:	4b19      	ldr	r3, [pc, #100]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004f90:	4b17      	ldr	r3, [pc, #92]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004f96:	4b16      	ldr	r3, [pc, #88]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004f9c:	4b14      	ldr	r3, [pc, #80]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004fa2:	4b13      	ldr	r3, [pc, #76]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8004fae:	4b10      	ldr	r3, [pc, #64]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004fb4:	480e      	ldr	r0, [pc, #56]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004fb6:	f006 fcef 	bl	800b998 <HAL_SPI_Init>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8004fc0:	f000 f976 	bl	80052b0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8004fc8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004fcc:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8004fd2:	1d3b      	adds	r3, r7, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4806      	ldr	r0, [pc, #24]	@ (8004ff0 <MX_SPI1_Init+0xd8>)
 8004fd8:	f007 fa3d 	bl	800c456 <HAL_SPIEx_SetConfigAutonomousMode>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8004fe2:	f000 f965 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	2000025c 	.word	0x2000025c
 8004ff4:	40013000 	.word	0x40013000

08004ff8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ffe:	f107 0310 	add.w	r3, r7, #16
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	605a      	str	r2, [r3, #4]
 8005008:	609a      	str	r2, [r3, #8]
 800500a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	605a      	str	r2, [r3, #4]
 8005014:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005016:	4b1e      	ldr	r3, [pc, #120]	@ (8005090 <MX_TIM2_Init+0x98>)
 8005018:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800501c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 800501e:	4b1c      	ldr	r3, [pc, #112]	@ (8005090 <MX_TIM2_Init+0x98>)
 8005020:	220f      	movs	r2, #15
 8005022:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005024:	4b1a      	ldr	r3, [pc, #104]	@ (8005090 <MX_TIM2_Init+0x98>)
 8005026:	2200      	movs	r2, #0
 8005028:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800502a:	4b19      	ldr	r3, [pc, #100]	@ (8005090 <MX_TIM2_Init+0x98>)
 800502c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005030:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005032:	4b17      	ldr	r3, [pc, #92]	@ (8005090 <MX_TIM2_Init+0x98>)
 8005034:	2200      	movs	r2, #0
 8005036:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005038:	4b15      	ldr	r3, [pc, #84]	@ (8005090 <MX_TIM2_Init+0x98>)
 800503a:	2280      	movs	r2, #128	@ 0x80
 800503c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800503e:	4814      	ldr	r0, [pc, #80]	@ (8005090 <MX_TIM2_Init+0x98>)
 8005040:	f007 fa4a 	bl	800c4d8 <HAL_TIM_Base_Init>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800504a:	f000 f931 	bl	80052b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800504e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005052:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005054:	f107 0310 	add.w	r3, r7, #16
 8005058:	4619      	mov	r1, r3
 800505a:	480d      	ldr	r0, [pc, #52]	@ (8005090 <MX_TIM2_Init+0x98>)
 800505c:	f007 fb2c 	bl	800c6b8 <HAL_TIM_ConfigClockSource>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005066:	f000 f923 	bl	80052b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4806      	ldr	r0, [pc, #24]	@ (8005090 <MX_TIM2_Init+0x98>)
 8005078:	f007 fe1e 	bl	800ccb8 <HAL_TIMEx_MasterConfigSynchronization>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005082:	f000 f915 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005086:	bf00      	nop
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	200002ec 	.word	0x200002ec

08005094 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005098:	4b22      	ldr	r3, [pc, #136]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 800509a:	4a23      	ldr	r2, [pc, #140]	@ (8005128 <MX_USART1_UART_Init+0x94>)
 800509c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 800509e:	4b21      	ldr	r3, [pc, #132]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050a0:	4a22      	ldr	r2, [pc, #136]	@ (800512c <MX_USART1_UART_Init+0x98>)
 80050a2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80050b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80050b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050b8:	220c      	movs	r2, #12
 80050ba:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050bc:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050be:	2200      	movs	r2, #0
 80050c0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80050c2:	4b18      	ldr	r3, [pc, #96]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050c8:	4b16      	ldr	r3, [pc, #88]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80050ce:	4b15      	ldr	r3, [pc, #84]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050d4:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80050da:	4812      	ldr	r0, [pc, #72]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050dc:	f007 feae 	bl	800ce3c <HAL_UART_Init>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80050e6:	f000 f8e3 	bl	80052b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050ea:	2100      	movs	r1, #0
 80050ec:	480d      	ldr	r0, [pc, #52]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 80050ee:	f008 fb89 	bl	800d804 <HAL_UARTEx_SetTxFifoThreshold>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80050f8:	f000 f8da 	bl	80052b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050fc:	2100      	movs	r1, #0
 80050fe:	4809      	ldr	r0, [pc, #36]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 8005100:	f008 fbbe 	bl	800d880 <HAL_UARTEx_SetRxFifoThreshold>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800510a:	f000 f8d1 	bl	80052b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800510e:	4805      	ldr	r0, [pc, #20]	@ (8005124 <MX_USART1_UART_Init+0x90>)
 8005110:	f008 fb3f 	bl	800d792 <HAL_UARTEx_DisableFifoMode>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800511a:	f000 f8c9 	bl	80052b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000338 	.word	0x20000338
 8005128:	40013800 	.word	0x40013800
 800512c:	000f4240 	.word	0x000f4240

08005130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	@ 0x28
 8005134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005136:	f107 0314 	add.w	r3, r7, #20
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	605a      	str	r2, [r3, #4]
 8005140:	609a      	str	r2, [r3, #8]
 8005142:	60da      	str	r2, [r3, #12]
 8005144:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005146:	4b55      	ldr	r3, [pc, #340]	@ (800529c <MX_GPIO_Init+0x16c>)
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800514c:	4a53      	ldr	r2, [pc, #332]	@ (800529c <MX_GPIO_Init+0x16c>)
 800514e:	f043 0304 	orr.w	r3, r3, #4
 8005152:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005156:	4b51      	ldr	r3, [pc, #324]	@ (800529c <MX_GPIO_Init+0x16c>)
 8005158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005164:	4b4d      	ldr	r3, [pc, #308]	@ (800529c <MX_GPIO_Init+0x16c>)
 8005166:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800516a:	4a4c      	ldr	r2, [pc, #304]	@ (800529c <MX_GPIO_Init+0x16c>)
 800516c:	f043 0310 	orr.w	r3, r3, #16
 8005170:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005174:	4b49      	ldr	r3, [pc, #292]	@ (800529c <MX_GPIO_Init+0x16c>)
 8005176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005182:	4b46      	ldr	r3, [pc, #280]	@ (800529c <MX_GPIO_Init+0x16c>)
 8005184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005188:	4a44      	ldr	r2, [pc, #272]	@ (800529c <MX_GPIO_Init+0x16c>)
 800518a:	f043 0302 	orr.w	r3, r3, #2
 800518e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005192:	4b42      	ldr	r3, [pc, #264]	@ (800529c <MX_GPIO_Init+0x16c>)
 8005194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a0:	4b3e      	ldr	r3, [pc, #248]	@ (800529c <MX_GPIO_Init+0x16c>)
 80051a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051a6:	4a3d      	ldr	r2, [pc, #244]	@ (800529c <MX_GPIO_Init+0x16c>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80051b0:	4b3a      	ldr	r3, [pc, #232]	@ (800529c <MX_GPIO_Init+0x16c>)
 80051b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	607b      	str	r3, [r7, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80051be:	2200      	movs	r2, #0
 80051c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051c4:	4836      	ldr	r0, [pc, #216]	@ (80052a0 <MX_GPIO_Init+0x170>)
 80051c6:	f001 f967 	bl	8006498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 80051ca:	2200      	movs	r2, #0
 80051cc:	2120      	movs	r1, #32
 80051ce:	4835      	ldr	r0, [pc, #212]	@ (80052a4 <MX_GPIO_Init+0x174>)
 80051d0:	f001 f962 	bl	8006498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80051d4:	2304      	movs	r3, #4
 80051d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051d8:	2303      	movs	r3, #3
 80051da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80051e0:	f107 0314 	add.w	r3, r7, #20
 80051e4:	4619      	mov	r1, r3
 80051e6:	4830      	ldr	r0, [pc, #192]	@ (80052a8 <MX_GPIO_Init+0x178>)
 80051e8:	f000 ff76 	bl	80060d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80051ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051f2:	2301      	movs	r3, #1
 80051f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051fa:	2300      	movs	r3, #0
 80051fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80051fe:	f107 0314 	add.w	r3, r7, #20
 8005202:	4619      	mov	r1, r3
 8005204:	4826      	ldr	r0, [pc, #152]	@ (80052a0 <MX_GPIO_Init+0x170>)
 8005206:	f000 ff67 	bl	80060d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800520a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800520e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005210:	2300      	movs	r3, #0
 8005212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005214:	2300      	movs	r3, #0
 8005216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8005218:	f107 0314 	add.w	r3, r7, #20
 800521c:	4619      	mov	r1, r3
 800521e:	4821      	ldr	r0, [pc, #132]	@ (80052a4 <MX_GPIO_Init+0x174>)
 8005220:	f000 ff5a 	bl	80060d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005224:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800522a:	2303      	movs	r3, #3
 800522c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005232:	f107 0314 	add.w	r3, r7, #20
 8005236:	4619      	mov	r1, r3
 8005238:	481a      	ldr	r0, [pc, #104]	@ (80052a4 <MX_GPIO_Init+0x174>)
 800523a:	f000 ff4d 	bl	80060d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800523e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005244:	2302      	movs	r3, #2
 8005246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800524c:	2300      	movs	r3, #0
 800524e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005250:	f107 0314 	add.w	r3, r7, #20
 8005254:	4619      	mov	r1, r3
 8005256:	4815      	ldr	r0, [pc, #84]	@ (80052ac <MX_GPIO_Init+0x17c>)
 8005258:	f000 ff3e 	bl	80060d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800525c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005262:	2303      	movs	r3, #3
 8005264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800526a:	f107 0314 	add.w	r3, r7, #20
 800526e:	4619      	mov	r1, r3
 8005270:	480e      	ldr	r0, [pc, #56]	@ (80052ac <MX_GPIO_Init+0x17c>)
 8005272:	f000 ff31 	bl	80060d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8005276:	2320      	movs	r3, #32
 8005278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800527a:	2301      	movs	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005282:	2300      	movs	r3, #0
 8005284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8005286:	f107 0314 	add.w	r3, r7, #20
 800528a:	4619      	mov	r1, r3
 800528c:	4805      	ldr	r0, [pc, #20]	@ (80052a4 <MX_GPIO_Init+0x174>)
 800528e:	f000 ff23 	bl	80060d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8005292:	bf00      	nop
 8005294:	3728      	adds	r7, #40	@ 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	46020c00 	.word	0x46020c00
 80052a0:	42021000 	.word	0x42021000
 80052a4:	42020400 	.word	0x42020400
 80052a8:	42020800 	.word	0x42020800
 80052ac:	42020000 	.word	0x42020000

080052b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052b4:	b672      	cpsid	i
}
 80052b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052b8:	bf00      	nop
 80052ba:	e7fd      	b.n	80052b8 <Error_Handler+0x8>

080052bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80052c2:	4b0a      	ldr	r3, [pc, #40]	@ (80052ec <HAL_MspInit+0x30>)
 80052c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c8:	4a08      	ldr	r2, [pc, #32]	@ (80052ec <HAL_MspInit+0x30>)
 80052ca:	f043 0304 	orr.w	r3, r3, #4
 80052ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_MspInit+0x30>)
 80052d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	46020c00 	.word	0x46020c00

080052f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b0c0      	sub	sp, #256	@ 0x100
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005308:	f107 0310 	add.w	r3, r7, #16
 800530c:	22d8      	movs	r2, #216	@ 0xd8
 800530e:	2100      	movs	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f00a f945 	bl	800f5a0 <memset>
  if(hi2c->Instance==I2C2)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a27      	ldr	r2, [pc, #156]	@ (80053b8 <HAL_I2C_MspInit+0xc8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d146      	bne.n	80053ae <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005320:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800532c:	2300      	movs	r3, #0
 800532e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005332:	f107 0310 	add.w	r3, r7, #16
 8005336:	4618      	mov	r0, r3
 8005338:	f003 fbcc 	bl	8008ad4 <HAL_RCCEx_PeriphCLKConfig>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8005342:	f7ff ffb5 	bl	80052b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005346:	4b1d      	ldr	r3, [pc, #116]	@ (80053bc <HAL_I2C_MspInit+0xcc>)
 8005348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800534c:	4a1b      	ldr	r2, [pc, #108]	@ (80053bc <HAL_I2C_MspInit+0xcc>)
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005356:	4b19      	ldr	r3, [pc, #100]	@ (80053bc <HAL_I2C_MspInit+0xcc>)
 8005358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005364:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005368:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800536c:	2312      	movs	r3, #18
 800536e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005372:	2300      	movs	r3, #0
 8005374:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005378:	2300      	movs	r3, #0
 800537a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800537e:	2304      	movs	r3, #4
 8005380:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005384:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005388:	4619      	mov	r1, r3
 800538a:	480d      	ldr	r0, [pc, #52]	@ (80053c0 <HAL_I2C_MspInit+0xd0>)
 800538c:	f000 fea4 	bl	80060d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005390:	4b0a      	ldr	r3, [pc, #40]	@ (80053bc <HAL_I2C_MspInit+0xcc>)
 8005392:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005396:	4a09      	ldr	r2, [pc, #36]	@ (80053bc <HAL_I2C_MspInit+0xcc>)
 8005398:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800539c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80053a0:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <HAL_I2C_MspInit+0xcc>)
 80053a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80053ae:	bf00      	nop
 80053b0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40005800 	.word	0x40005800
 80053bc:	46020c00 	.word	0x46020c00
 80053c0:	42020400 	.word	0x42020400

080053c4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b0c0      	sub	sp, #256	@ 0x100
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053cc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	609a      	str	r2, [r3, #8]
 80053d8:	60da      	str	r2, [r3, #12]
 80053da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	22d8      	movs	r2, #216	@ 0xd8
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f00a f8db 	bl	800f5a0 <memset>
  if(hspi->Instance==SPI1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a28      	ldr	r2, [pc, #160]	@ (8005490 <HAL_SPI_MspInit+0xcc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d147      	bne.n	8005484 <HAL_SPI_MspInit+0xc0>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80053f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80053f8:	f04f 0300 	mov.w	r3, #0
 80053fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8005400:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005404:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005408:	f107 0310 	add.w	r3, r7, #16
 800540c:	4618      	mov	r0, r3
 800540e:	f003 fb61 	bl	8008ad4 <HAL_RCCEx_PeriphCLKConfig>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8005418:	f7ff ff4a 	bl	80052b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800541c:	4b1d      	ldr	r3, [pc, #116]	@ (8005494 <HAL_SPI_MspInit+0xd0>)
 800541e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005422:	4a1c      	ldr	r2, [pc, #112]	@ (8005494 <HAL_SPI_MspInit+0xd0>)
 8005424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005428:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800542c:	4b19      	ldr	r3, [pc, #100]	@ (8005494 <HAL_SPI_MspInit+0xd0>)
 800542e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005432:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800543a:	4b16      	ldr	r3, [pc, #88]	@ (8005494 <HAL_SPI_MspInit+0xd0>)
 800543c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005440:	4a14      	ldr	r2, [pc, #80]	@ (8005494 <HAL_SPI_MspInit+0xd0>)
 8005442:	f043 0310 	orr.w	r3, r3, #16
 8005446:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800544a:	4b12      	ldr	r3, [pc, #72]	@ (8005494 <HAL_SPI_MspInit+0xd0>)
 800544c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005458:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800545c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005460:	2302      	movs	r3, #2
 8005462:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005466:	2300      	movs	r3, #0
 8005468:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800546c:	2300      	movs	r3, #0
 800546e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005472:	2305      	movs	r3, #5
 8005474:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005478:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800547c:	4619      	mov	r1, r3
 800547e:	4806      	ldr	r0, [pc, #24]	@ (8005498 <HAL_SPI_MspInit+0xd4>)
 8005480:	f000 fe2a 	bl	80060d8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005484:	bf00      	nop
 8005486:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40013000 	.word	0x40013000
 8005494:	46020c00 	.word	0x46020c00
 8005498:	42021000 	.word	0x42021000

0800549c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ac:	d10e      	bne.n	80054cc <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054ae:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <HAL_TIM_Base_MspInit+0x3c>)
 80054b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054b4:	4a08      	ldr	r2, [pc, #32]	@ (80054d8 <HAL_TIM_Base_MspInit+0x3c>)
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80054be:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <HAL_TIM_Base_MspInit+0x3c>)
 80054c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	46020c00 	.word	0x46020c00

080054dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b0c0      	sub	sp, #256	@ 0x100
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	60da      	str	r2, [r3, #12]
 80054f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054f4:	f107 0310 	add.w	r3, r7, #16
 80054f8:	22d8      	movs	r2, #216	@ 0xd8
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f00a f84f 	bl	800f5a0 <memset>
  if(huart->Instance==USART1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a27      	ldr	r2, [pc, #156]	@ (80055a4 <HAL_UART_MspInit+0xc8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d145      	bne.n	8005598 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800550c:	f04f 0201 	mov.w	r2, #1
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005518:	2300      	movs	r3, #0
 800551a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800551c:	f107 0310 	add.w	r3, r7, #16
 8005520:	4618      	mov	r0, r3
 8005522:	f003 fad7 	bl	8008ad4 <HAL_RCCEx_PeriphCLKConfig>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800552c:	f7ff fec0 	bl	80052b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005530:	4b1d      	ldr	r3, [pc, #116]	@ (80055a8 <HAL_UART_MspInit+0xcc>)
 8005532:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005536:	4a1c      	ldr	r2, [pc, #112]	@ (80055a8 <HAL_UART_MspInit+0xcc>)
 8005538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800553c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8005540:	4b19      	ldr	r3, [pc, #100]	@ (80055a8 <HAL_UART_MspInit+0xcc>)
 8005542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800554e:	4b16      	ldr	r3, [pc, #88]	@ (80055a8 <HAL_UART_MspInit+0xcc>)
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005554:	4a14      	ldr	r2, [pc, #80]	@ (80055a8 <HAL_UART_MspInit+0xcc>)
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800555e:	4b12      	ldr	r3, [pc, #72]	@ (80055a8 <HAL_UART_MspInit+0xcc>)
 8005560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800556c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005570:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005574:	2302      	movs	r3, #2
 8005576:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557a:	2300      	movs	r3, #0
 800557c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005580:	2300      	movs	r3, #0
 8005582:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005586:	2307      	movs	r3, #7
 8005588:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005590:	4619      	mov	r1, r3
 8005592:	4806      	ldr	r0, [pc, #24]	@ (80055ac <HAL_UART_MspInit+0xd0>)
 8005594:	f000 fda0 	bl	80060d8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005598:	bf00      	nop
 800559a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40013800 	.word	0x40013800
 80055a8:	46020c00 	.word	0x46020c00
 80055ac:	42020000 	.word	0x42020000

080055b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80055b4:	bf00      	nop
 80055b6:	e7fd      	b.n	80055b4 <NMI_Handler+0x4>

080055b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055bc:	bf00      	nop
 80055be:	e7fd      	b.n	80055bc <HardFault_Handler+0x4>

080055c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055c4:	bf00      	nop
 80055c6:	e7fd      	b.n	80055c4 <MemManage_Handler+0x4>

080055c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055cc:	bf00      	nop
 80055ce:	e7fd      	b.n	80055cc <BusFault_Handler+0x4>

080055d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055d4:	bf00      	nop
 80055d6:	e7fd      	b.n	80055d4 <UsageFault_Handler+0x4>

080055d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055dc:	bf00      	nop
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055e6:	b480      	push	{r7}
 80055e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055ea:	bf00      	nop
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055f8:	bf00      	nop
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005606:	f000 fb07 	bl	8005c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	bd80      	pop	{r7, pc}

0800560e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8005612:	2000      	movs	r0, #0
 8005614:	f000 fa32 	bl	8005a7c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8005618:	bf00      	nop
 800561a:	bd80      	pop	{r7, pc}

0800561c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  return 1;
 8005620:	2301      	movs	r3, #1
}
 8005622:	4618      	mov	r0, r3
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <_kill>:

int _kill(int pid, int sig)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005636:	f009 ffcd 	bl	800f5d4 <__errno>
 800563a:	4603      	mov	r3, r0
 800563c:	2216      	movs	r2, #22
 800563e:	601a      	str	r2, [r3, #0]
  return -1;
 8005640:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <_exit>:

void _exit (int status)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005654:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ffe7 	bl	800562c <_kill>
  while (1) {}    /* Make sure we hang here */
 800565e:	bf00      	nop
 8005660:	e7fd      	b.n	800565e <_exit+0x12>

08005662 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e00a      	b.n	800568a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005674:	f3af 8000 	nop.w
 8005678:	4601      	mov	r1, r0
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	60ba      	str	r2, [r7, #8]
 8005680:	b2ca      	uxtb	r2, r1
 8005682:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3301      	adds	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	dbf0      	blt.n	8005674 <_read+0x12>
  }

  return len;
 8005692:	687b      	ldr	r3, [r7, #4]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	e009      	b.n	80056c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	60ba      	str	r2, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fa36 	bl	8004b28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	3301      	adds	r3, #1
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	dbf1      	blt.n	80056ae <_write+0x12>
  }
  return len;
 80056ca:	687b      	ldr	r3, [r7, #4]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <_close>:

int _close(int file)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80056fc:	605a      	str	r2, [r3, #4]
  return 0;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <_isatty>:

int _isatty(int file)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005714:	2301      	movs	r3, #1
}
 8005716:	4618      	mov	r0, r3
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005744:	4a14      	ldr	r2, [pc, #80]	@ (8005798 <_sbrk+0x5c>)
 8005746:	4b15      	ldr	r3, [pc, #84]	@ (800579c <_sbrk+0x60>)
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005750:	4b13      	ldr	r3, [pc, #76]	@ (80057a0 <_sbrk+0x64>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005758:	4b11      	ldr	r3, [pc, #68]	@ (80057a0 <_sbrk+0x64>)
 800575a:	4a12      	ldr	r2, [pc, #72]	@ (80057a4 <_sbrk+0x68>)
 800575c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800575e:	4b10      	ldr	r3, [pc, #64]	@ (80057a0 <_sbrk+0x64>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	429a      	cmp	r2, r3
 800576a:	d207      	bcs.n	800577c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800576c:	f009 ff32 	bl	800f5d4 <__errno>
 8005770:	4603      	mov	r3, r0
 8005772:	220c      	movs	r2, #12
 8005774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800577a:	e009      	b.n	8005790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800577c:	4b08      	ldr	r3, [pc, #32]	@ (80057a0 <_sbrk+0x64>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005782:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <_sbrk+0x64>)
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	4a05      	ldr	r2, [pc, #20]	@ (80057a0 <_sbrk+0x64>)
 800578c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800578e:	68fb      	ldr	r3, [r7, #12]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20270000 	.word	0x20270000
 800579c:	00000400 	.word	0x00000400
 80057a0:	200004c0 	.word	0x200004c0
 80057a4:	20000620 	.word	0x20000620

080057a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80057ac:	4b18      	ldr	r3, [pc, #96]	@ (8005810 <SystemInit+0x68>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b2:	4a17      	ldr	r2, [pc, #92]	@ (8005810 <SystemInit+0x68>)
 80057b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80057b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80057bc:	4b15      	ldr	r3, [pc, #84]	@ (8005814 <SystemInit+0x6c>)
 80057be:	2201      	movs	r2, #1
 80057c0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80057c2:	4b14      	ldr	r3, [pc, #80]	@ (8005814 <SystemInit+0x6c>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80057c8:	4b12      	ldr	r3, [pc, #72]	@ (8005814 <SystemInit+0x6c>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80057ce:	4b11      	ldr	r3, [pc, #68]	@ (8005814 <SystemInit+0x6c>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80057d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005814 <SystemInit+0x6c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005814 <SystemInit+0x6c>)
 80057da:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80057de:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80057e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80057e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005814 <SystemInit+0x6c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80057ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005814 <SystemInit+0x6c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a09      	ldr	r2, [pc, #36]	@ (8005814 <SystemInit+0x6c>)
 80057f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80057f6:	4b07      	ldr	r3, [pc, #28]	@ (8005814 <SystemInit+0x6c>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057fc:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <SystemInit+0x68>)
 80057fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005802:	609a      	str	r2, [r3, #8]
  #endif
}
 8005804:	bf00      	nop
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	e000ed00 	.word	0xe000ed00
 8005814:	46020c00 	.word	0x46020c00

08005818 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8005818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005850 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800581c:	f7ff ffc4 	bl	80057a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005820:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005822:	e003      	b.n	800582c <LoopCopyDataInit>

08005824 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005826:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005828:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800582a:	3104      	adds	r1, #4

0800582c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800582c:	480a      	ldr	r0, [pc, #40]	@ (8005858 <LoopForever+0xa>)
	ldr	r3, =_edata
 800582e:	4b0b      	ldr	r3, [pc, #44]	@ (800585c <LoopForever+0xe>)
	adds	r2, r0, r1
 8005830:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005832:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005834:	d3f6      	bcc.n	8005824 <CopyDataInit>
	ldr	r2, =_sbss
 8005836:	4a0a      	ldr	r2, [pc, #40]	@ (8005860 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005838:	e002      	b.n	8005840 <LoopFillZerobss>

0800583a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800583a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800583c:	f842 3b04 	str.w	r3, [r2], #4

08005840 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005840:	4b08      	ldr	r3, [pc, #32]	@ (8005864 <LoopForever+0x16>)
	cmp	r2, r3
 8005842:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005844:	d3f9      	bcc.n	800583a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005846:	f009 fecb 	bl	800f5e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800584a:	f7ff f97f 	bl	8004b4c <main>

0800584e <LoopForever>:

LoopForever:
    b LoopForever
 800584e:	e7fe      	b.n	800584e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8005850:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8005854:	08014498 	.word	0x08014498
	ldr	r0, =_sdata
 8005858:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800585c:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8005860:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8005864:	20000620 	.word	0x20000620

08005868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005868:	e7fe      	b.n	8005868 <ADC1_2_IRQHandler>
	...

0800586c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08e      	sub	sp, #56	@ 0x38
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005876:	2300      	movs	r3, #0
 8005878:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d009      	beq.n	8005898 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d006      	beq.n	8005898 <BSP_LED_Init+0x2c>
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d003      	beq.n	8005898 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005890:	f06f 0301 	mvn.w	r3, #1
 8005894:	637b      	str	r3, [r7, #52]	@ 0x34
 8005896:	e06e      	b.n	8005976 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d10f      	bne.n	80058be <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 800589e:	4b38      	ldr	r3, [pc, #224]	@ (8005980 <BSP_LED_Init+0x114>)
 80058a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058a4:	4a36      	ldr	r2, [pc, #216]	@ (8005980 <BSP_LED_Init+0x114>)
 80058a6:	f043 0302 	orr.w	r3, r3, #2
 80058aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80058ae:	4b34      	ldr	r3, [pc, #208]	@ (8005980 <BSP_LED_Init+0x114>)
 80058b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	e046      	b.n	800594c <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10f      	bne.n	80058e4 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80058c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005980 <BSP_LED_Init+0x114>)
 80058c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005980 <BSP_LED_Init+0x114>)
 80058cc:	f043 0304 	orr.w	r3, r3, #4
 80058d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80058d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005980 <BSP_LED_Init+0x114>)
 80058d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	e033      	b.n	800594c <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058e4:	4b26      	ldr	r3, [pc, #152]	@ (8005980 <BSP_LED_Init+0x114>)
 80058e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d110      	bne.n	8005914 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80058f2:	4b23      	ldr	r3, [pc, #140]	@ (8005980 <BSP_LED_Init+0x114>)
 80058f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058f8:	4a21      	ldr	r2, [pc, #132]	@ (8005980 <BSP_LED_Init+0x114>)
 80058fa:	f043 0304 	orr.w	r3, r3, #4
 80058fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005902:	4b1f      	ldr	r3, [pc, #124]	@ (8005980 <BSP_LED_Init+0x114>)
 8005904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8005910:	2301      	movs	r3, #1
 8005912:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8005914:	f001 fe0e 	bl	8007534 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8005918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591a:	2b01      	cmp	r3, #1
 800591c:	d107      	bne.n	800592e <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800591e:	4b18      	ldr	r3, [pc, #96]	@ (8005980 <BSP_LED_Init+0x114>)
 8005920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005924:	4a16      	ldr	r2, [pc, #88]	@ (8005980 <BSP_LED_Init+0x114>)
 8005926:	f023 0304 	bic.w	r3, r3, #4
 800592a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 800592e:	4b14      	ldr	r3, [pc, #80]	@ (8005980 <BSP_LED_Init+0x114>)
 8005930:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005934:	4a12      	ldr	r2, [pc, #72]	@ (8005980 <BSP_LED_Init+0x114>)
 8005936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800593a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800593e:	4b10      	ldr	r3, [pc, #64]	@ (8005980 <BSP_LED_Init+0x114>)
 8005940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	4a0d      	ldr	r2, [pc, #52]	@ (8005984 <BSP_LED_Init+0x118>)
 8005950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005954:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005956:	2301      	movs	r3, #1
 8005958:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800595a:	2300      	movs	r3, #0
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800595e:	2303      	movs	r3, #3
 8005960:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	4a08      	ldr	r2, [pc, #32]	@ (8005988 <BSP_LED_Init+0x11c>)
 8005966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596a:	f107 021c 	add.w	r2, r7, #28
 800596e:	4611      	mov	r1, r2
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fbb1 	bl	80060d8 <HAL_GPIO_Init>
  }

  return ret;
 8005976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005978:	4618      	mov	r0, r3
 800597a:	3738      	adds	r7, #56	@ 0x38
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	46020c00 	.word	0x46020c00
 8005984:	08013b8c 	.word	0x08013b8c
 8005988:	20000004 	.word	0x20000004

0800598c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	460a      	mov	r2, r1
 8005996:	71fb      	strb	r3, [r7, #7]
 8005998:	4613      	mov	r3, r2
 800599a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800599c:	4b30      	ldr	r3, [pc, #192]	@ (8005a60 <BSP_PB_Init+0xd4>)
 800599e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005a60 <BSP_PB_Init+0xd4>)
 80059a4:	f043 0304 	orr.w	r3, r3, #4
 80059a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80059ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005a60 <BSP_PB_Init+0xd4>)
 80059ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80059ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059be:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80059c0:	2302      	movs	r3, #2
 80059c2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80059c4:	2302      	movs	r3, #2
 80059c6:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80059c8:	79bb      	ldrb	r3, [r7, #6]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10c      	bne.n	80059e8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	4a23      	ldr	r2, [pc, #140]	@ (8005a64 <BSP_PB_Init+0xd8>)
 80059d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059da:	f107 020c 	add.w	r2, r7, #12
 80059de:	4611      	mov	r1, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fb79 	bl	80060d8 <HAL_GPIO_Init>
 80059e6:	e036      	b.n	8005a56 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80059e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005a68 <BSP_PB_Init+0xdc>)
 80059ea:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005a64 <BSP_PB_Init+0xd8>)
 80059f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f4:	f107 020c 	add.w	r2, r7, #12
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fb6c 	bl	80060d8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8005a00:	79fa      	ldrb	r2, [r7, #7]
 8005a02:	4613      	mov	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4a18      	ldr	r2, [pc, #96]	@ (8005a6c <BSP_PB_Init+0xe0>)
 8005a0c:	441a      	add	r2, r3
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	4917      	ldr	r1, [pc, #92]	@ (8005a70 <BSP_PB_Init+0xe4>)
 8005a12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 fb01 	bl	8006020 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8005a1e:	79fa      	ldrb	r2, [r7, #7]
 8005a20:	4613      	mov	r3, r2
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4a10      	ldr	r2, [pc, #64]	@ (8005a6c <BSP_PB_Init+0xe0>)
 8005a2a:	1898      	adds	r0, r3, r2
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	4a11      	ldr	r2, [pc, #68]	@ (8005a74 <BSP_PB_Init+0xe8>)
 8005a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a34:	461a      	mov	r2, r3
 8005a36:	2100      	movs	r1, #0
 8005a38:	f000 fac6 	bl	8005fc8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8005a3c:	2018      	movs	r0, #24
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	4a0d      	ldr	r2, [pc, #52]	@ (8005a78 <BSP_PB_Init+0xec>)
 8005a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a46:	2200      	movs	r2, #0
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f000 f9e1 	bl	8005e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8005a4e:	2318      	movs	r3, #24
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f9f7 	bl	8005e44 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3720      	adds	r7, #32
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	46020c00 	.word	0x46020c00
 8005a64:	20000010 	.word	0x20000010
 8005a68:	10110000 	.word	0x10110000
 8005a6c:	200004c4 	.word	0x200004c4
 8005a70:	08013b94 	.word	0x08013b94
 8005a74:	20000014 	.word	0x20000014
 8005a78:	20000018 	.word	0x20000018

08005a7c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	4603      	mov	r3, r0
 8005a84:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8005a86:	79fa      	ldrb	r2, [r7, #7]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4a04      	ldr	r2, [pc, #16]	@ (8005aa4 <BSP_PB_IRQHandler+0x28>)
 8005a92:	4413      	add	r3, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fad7 	bl	8006048 <HAL_EXTI_IRQHandler>
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200004c4 	.word	0x200004c4

08005aa8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f7ff fff0 	bl	8005aa8 <BSP_PB_Callback>
}
 8005ac8:	bf00      	nop
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ad0:	4b12      	ldr	r3, [pc, #72]	@ (8005b1c <HAL_Init+0x50>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a11      	ldr	r2, [pc, #68]	@ (8005b1c <HAL_Init+0x50>)
 8005ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005adc:	2003      	movs	r0, #3
 8005ade:	f000 f98c 	bl	8005dfa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005ae2:	f002 fe15 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <HAL_Init+0x54>)
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	490c      	ldr	r1, [pc, #48]	@ (8005b24 <HAL_Init+0x58>)
 8005af2:	5ccb      	ldrb	r3, [r1, r3]
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
 8005af8:	4a0b      	ldr	r2, [pc, #44]	@ (8005b28 <HAL_Init+0x5c>)
 8005afa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005afc:	2004      	movs	r0, #4
 8005afe:	f000 f9d1 	bl	8005ea4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b02:	200f      	movs	r0, #15
 8005b04:	f000 f812 	bl	8005b2c <HAL_InitTick>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e002      	b.n	8005b18 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005b12:	f7ff fbd3 	bl	80052bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40022000 	.word	0x40022000
 8005b20:	46020c00 	.word	0x46020c00
 8005b24:	08013b34 	.word	0x08013b34
 8005b28:	20000000 	.word	0x20000000

08005b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8005b38:	4b33      	ldr	r3, [pc, #204]	@ (8005c08 <HAL_InitTick+0xdc>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e05c      	b.n	8005bfe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8005b44:	4b31      	ldr	r3, [pc, #196]	@ (8005c0c <HAL_InitTick+0xe0>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d10c      	bne.n	8005b6a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8005b50:	4b2f      	ldr	r3, [pc, #188]	@ (8005c10 <HAL_InitTick+0xe4>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	4b2c      	ldr	r3, [pc, #176]	@ (8005c08 <HAL_InitTick+0xdc>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e037      	b.n	8005bda <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8005b6a:	f000 f9f3 	bl	8005f54 <HAL_SYSTICK_GetCLKSourceConfig>
 8005b6e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d023      	beq.n	8005bbe <HAL_InitTick+0x92>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d82d      	bhi.n	8005bd8 <HAL_InitTick+0xac>
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_InitTick+0x5e>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d00d      	beq.n	8005ba4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8005b88:	e026      	b.n	8005bd8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8005b8a:	4b21      	ldr	r3, [pc, #132]	@ (8005c10 <HAL_InitTick+0xe4>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005c08 <HAL_InitTick+0xdc>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	4619      	mov	r1, r3
 8005b94:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8005b98:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba0:	60fb      	str	r3, [r7, #12]
        break;
 8005ba2:	e01a      	b.n	8005bda <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005ba4:	4b18      	ldr	r3, [pc, #96]	@ (8005c08 <HAL_InitTick+0xdc>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bb2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8005bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bba:	60fb      	str	r3, [r7, #12]
        break;
 8005bbc:	e00d      	b.n	8005bda <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8005bbe:	4b12      	ldr	r3, [pc, #72]	@ (8005c08 <HAL_InitTick+0xdc>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bcc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	60fb      	str	r3, [r7, #12]
        break;
 8005bd6:	e000      	b.n	8005bda <HAL_InitTick+0xae>
        break;
 8005bd8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f940 	bl	8005e60 <HAL_SYSTICK_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e009      	b.n	8005bfe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bea:	2200      	movs	r2, #0
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bf2:	f000 f90d 	bl	8005e10 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8005bf6:	4a07      	ldr	r2, [pc, #28]	@ (8005c14 <HAL_InitTick+0xe8>)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000020 	.word	0x20000020
 8005c0c:	e000e010 	.word	0xe000e010
 8005c10:	20000000 	.word	0x20000000
 8005c14:	2000001c 	.word	0x2000001c

08005c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c1c:	4b06      	ldr	r3, [pc, #24]	@ (8005c38 <HAL_IncTick+0x20>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <HAL_IncTick+0x24>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4413      	add	r3, r2
 8005c28:	4a04      	ldr	r2, [pc, #16]	@ (8005c3c <HAL_IncTick+0x24>)
 8005c2a:	6013      	str	r3, [r2, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000020 	.word	0x20000020
 8005c3c:	200004d0 	.word	0x200004d0

08005c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return uwTick;
 8005c44:	4b03      	ldr	r3, [pc, #12]	@ (8005c54 <HAL_GetTick+0x14>)
 8005c46:	681b      	ldr	r3, [r3, #0]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	200004d0 	.word	0x200004d0

08005c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c60:	f7ff ffee 	bl	8005c40 <HAL_GetTick>
 8005c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c70:	d005      	beq.n	8005c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c72:	4b0a      	ldr	r3, [pc, #40]	@ (8005c9c <HAL_Delay+0x44>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c7e:	bf00      	nop
 8005c80:	f7ff ffde 	bl	8005c40 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d8f7      	bhi.n	8005c80 <HAL_Delay+0x28>
  {
  }
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000020 	.word	0x20000020

08005ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cd2:	4a04      	ldr	r2, [pc, #16]	@ (8005ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	60d3      	str	r3, [r2, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	e000ed00 	.word	0xe000ed00

08005ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cec:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <__NVIC_GetPriorityGrouping+0x18>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	f003 0307 	and.w	r3, r3, #7
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	e000ed00 	.word	0xe000ed00

08005d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	db0b      	blt.n	8005d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	f003 021f 	and.w	r2, r3, #31
 8005d1c:	4907      	ldr	r1, [pc, #28]	@ (8005d3c <__NVIC_EnableIRQ+0x38>)
 8005d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	2001      	movs	r0, #1
 8005d26:	fa00 f202 	lsl.w	r2, r0, r2
 8005d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	e000e100 	.word	0xe000e100

08005d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	6039      	str	r1, [r7, #0]
 8005d4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	db0a      	blt.n	8005d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	490c      	ldr	r1, [pc, #48]	@ (8005d8c <__NVIC_SetPriority+0x4c>)
 8005d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d5e:	0112      	lsls	r2, r2, #4
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	440b      	add	r3, r1
 8005d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d68:	e00a      	b.n	8005d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	4908      	ldr	r1, [pc, #32]	@ (8005d90 <__NVIC_SetPriority+0x50>)
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	3b04      	subs	r3, #4
 8005d78:	0112      	lsls	r2, r2, #4
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	761a      	strb	r2, [r3, #24]
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	e000e100 	.word	0xe000e100
 8005d90:	e000ed00 	.word	0xe000ed00

08005d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	@ 0x24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f1c3 0307 	rsb	r3, r3, #7
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	bf28      	it	cs
 8005db2:	2304      	movcs	r3, #4
 8005db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	3304      	adds	r3, #4
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	d902      	bls.n	8005dc4 <NVIC_EncodePriority+0x30>
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3b03      	subs	r3, #3
 8005dc2:	e000      	b.n	8005dc6 <NVIC_EncodePriority+0x32>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43da      	mvns	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ddc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	43d9      	mvns	r1, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dec:	4313      	orrs	r3, r2
         );
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3724      	adds	r7, #36	@ 0x24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff ff4c 	bl	8005ca0 <__NVIC_SetPriorityGrouping>
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e1e:	f7ff ff63 	bl	8005ce8 <__NVIC_GetPriorityGrouping>
 8005e22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	6978      	ldr	r0, [r7, #20]
 8005e2a:	f7ff ffb3 	bl	8005d94 <NVIC_EncodePriority>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff ff82 	bl	8005d40 <__NVIC_SetPriority>
}
 8005e3c:	bf00      	nop
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff ff56 	bl	8005d04 <__NVIC_EnableIRQ>
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e70:	d301      	bcc.n	8005e76 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005e72:	2301      	movs	r3, #1
 8005e74:	e00d      	b.n	8005e92 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005e76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ea0 <HAL_SYSTICK_Config+0x40>)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8005e7e:	4b08      	ldr	r3, [pc, #32]	@ (8005ea0 <HAL_SYSTICK_Config+0x40>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005e84:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <HAL_SYSTICK_Config+0x40>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a05      	ldr	r2, [pc, #20]	@ (8005ea0 <HAL_SYSTICK_Config+0x40>)
 8005e8a:	f043 0303 	orr.w	r3, r3, #3
 8005e8e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	e000e010 	.word	0xe000e010

08005ea4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d844      	bhi.n	8005f3c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005edb 	.word	0x08005edb
 8005ebc:	08005ef9 	.word	0x08005ef9
 8005ec0:	08005f1b 	.word	0x08005f1b
 8005ec4:	08005f3d 	.word	0x08005f3d
 8005ec8:	08005ecd 	.word	0x08005ecd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8005f4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8005f4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005ed2:	f043 0304 	orr.w	r3, r3, #4
 8005ed6:	6013      	str	r3, [r2, #0]
      break;
 8005ed8:	e031      	b.n	8005f3e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005eda:	4b1c      	ldr	r3, [pc, #112]	@ (8005f4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a1b      	ldr	r2, [pc, #108]	@ (8005f4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005ee0:	f023 0304 	bic.w	r3, r3, #4
 8005ee4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8005ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eec:	4a18      	ldr	r2, [pc, #96]	@ (8005f50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005eee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005ef6:	e022      	b.n	8005f3e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005ef8:	4b14      	ldr	r3, [pc, #80]	@ (8005f4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a13      	ldr	r2, [pc, #76]	@ (8005f4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005efe:	f023 0304 	bic.w	r3, r3, #4
 8005f02:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8005f04:	4b12      	ldr	r3, [pc, #72]	@ (8005f50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f0a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005f0e:	4a10      	ldr	r2, [pc, #64]	@ (8005f50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005f14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005f18:	e011      	b.n	8005f3e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8005f4c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005f20:	f023 0304 	bic.w	r3, r3, #4
 8005f24:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8005f26:	4b0a      	ldr	r3, [pc, #40]	@ (8005f50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f2c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005f30:	4a07      	ldr	r2, [pc, #28]	@ (8005f50 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005f32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005f3a:	e000      	b.n	8005f3e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005f3c:	bf00      	nop
  }
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	e000e010 	.word	0xe000e010
 8005f50:	46020c00 	.word	0x46020c00

08005f54 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005f5a:	4b19      	ldr	r3, [pc, #100]	@ (8005fc0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005f66:	2304      	movs	r3, #4
 8005f68:	607b      	str	r3, [r7, #4]
 8005f6a:	e021      	b.n	8005fb0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8005f6c:	4b15      	ldr	r3, [pc, #84]	@ (8005fc4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8005f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f72:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005f76:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f7e:	d011      	beq.n	8005fa4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f86:	d810      	bhi.n	8005faa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d004      	beq.n	8005f98 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f94:	d003      	beq.n	8005f9e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005f96:	e008      	b.n	8005faa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	607b      	str	r3, [r7, #4]
        break;
 8005f9c:	e008      	b.n	8005fb0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	607b      	str	r3, [r7, #4]
        break;
 8005fa2:	e005      	b.n	8005fb0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	607b      	str	r3, [r7, #4]
        break;
 8005fa8:	e002      	b.n	8005fb0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]
        break;
 8005fae:	bf00      	nop
    }
  }
  return systick_source;
 8005fb0:	687b      	ldr	r3, [r7, #4]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	e000e010 	.word	0xe000e010
 8005fc4:	46020c00 	.word	0x46020c00

08005fc8 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d011      	beq.n	8006004 <HAL_EXTI_RegisterCallback+0x3c>
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	dc13      	bgt.n	800600c <HAL_EXTI_RegisterCallback+0x44>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <HAL_EXTI_RegisterCallback+0x26>
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d007      	beq.n	8005ffc <HAL_EXTI_RegisterCallback+0x34>
 8005fec:	e00e      	b.n	800600c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	609a      	str	r2, [r3, #8]
      break;
 8005ffa:	e00a      	b.n	8006012 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	605a      	str	r2, [r3, #4]
      break;
 8006002:	e006      	b.n	8006012 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	609a      	str	r2, [r3, #8]
      break;
 800600a:	e002      	b.n	8006012 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	75fb      	strb	r3, [r7, #23]
      break;
 8006010:	bf00      	nop
  }

  return status;
 8006012:	7dfb      	ldrb	r3, [r7, #23]
}
 8006014:	4618      	mov	r0, r3
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e003      	b.n	800603c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800603a:	2300      	movs	r3, #0
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	2201      	movs	r2, #1
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	4b17      	ldr	r3, [pc, #92]	@ (80060d0 <HAL_EXTI_IRQHandler+0x88>)
 8006072:	4413      	add	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4013      	ands	r3, r2
 800607e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <HAL_EXTI_IRQHandler+0x8c>)
 80060a0:	4413      	add	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4013      	ands	r3, r2
 80060ac:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	4798      	blx	r3
    }
  }
}
 80060c8:	bf00      	nop
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	4602200c 	.word	0x4602200c
 80060d4:	46022010 	.word	0x46022010

080060d8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80060d8:	b480      	push	{r7}
 80060da:	b089      	sub	sp, #36	@ 0x24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80060ea:	e1c2      	b.n	8006472 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	2101      	movs	r1, #1
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	4013      	ands	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 81b2 	beq.w	800646c <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a55      	ldr	r2, [pc, #340]	@ (8006260 <HAL_GPIO_Init+0x188>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d15d      	bne.n	80061cc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8006116:	2201      	movs	r2, #1
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	43db      	mvns	r3, r3
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	4013      	ands	r3, r2
 8006124:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f003 0201 	and.w	r2, r3, #1
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	4313      	orrs	r3, r2
 8006138:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69fa      	ldr	r2, [r7, #28]
 800613e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8006140:	4a48      	ldr	r2, [pc, #288]	@ (8006264 <HAL_GPIO_Init+0x18c>)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006148:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800614a:	4a46      	ldr	r2, [pc, #280]	@ (8006264 <HAL_GPIO_Init+0x18c>)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4413      	add	r3, r2
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	08da      	lsrs	r2, r3, #3
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	3208      	adds	r2, #8
 800615e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006162:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	220f      	movs	r2, #15
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	4013      	ands	r3, r2
 8006178:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	220b      	movs	r2, #11
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	4313      	orrs	r3, r2
 800618c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	08da      	lsrs	r2, r3, #3
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	3208      	adds	r2, #8
 8006196:	69f9      	ldr	r1, [r7, #28]
 8006198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	2203      	movs	r2, #3
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	43db      	mvns	r3, r3
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	4013      	ands	r3, r2
 80061b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	2202      	movs	r2, #2
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e067      	b.n	800629c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d003      	beq.n	80061dc <HAL_GPIO_Init+0x104>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2b12      	cmp	r3, #18
 80061da:	d145      	bne.n	8006268 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	08da      	lsrs	r2, r3, #3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3208      	adds	r2, #8
 80061e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	220f      	movs	r2, #15
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	43db      	mvns	r3, r3
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	4013      	ands	r3, r2
 80061fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 020f 	and.w	r2, r3, #15
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	4313      	orrs	r3, r2
 8006218:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	08da      	lsrs	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3208      	adds	r2, #8
 8006222:	69f9      	ldr	r1, [r7, #28]
 8006224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	2203      	movs	r2, #3
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	43db      	mvns	r3, r3
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	4013      	ands	r3, r2
 800623e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 0203 	and.w	r2, r3, #3
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	4313      	orrs	r3, r2
 8006254:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	e01e      	b.n	800629c <HAL_GPIO_Init+0x1c4>
 800625e:	bf00      	nop
 8006260:	46020000 	.word	0x46020000
 8006264:	08013b98 	.word	0x08013b98
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	2203      	movs	r2, #3
 8006274:	fa02 f303 	lsl.w	r3, r2, r3
 8006278:	43db      	mvns	r3, r3
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	4013      	ands	r3, r2
 800627e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f003 0203 	and.w	r2, r3, #3
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	4313      	orrs	r3, r2
 8006294:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d00b      	beq.n	80062bc <HAL_GPIO_Init+0x1e4>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d007      	beq.n	80062bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062b0:	2b11      	cmp	r3, #17
 80062b2:	d003      	beq.n	80062bc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b12      	cmp	r3, #18
 80062ba:	d130      	bne.n	800631e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	2203      	movs	r2, #3
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	43db      	mvns	r3, r3
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	4013      	ands	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80062f2:	2201      	movs	r2, #1
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	43db      	mvns	r3, r3
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	4013      	ands	r3, r2
 8006300:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	091b      	lsrs	r3, r3, #4
 8006308:	f003 0201 	and.w	r2, r3, #1
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	4313      	orrs	r3, r2
 8006316:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b03      	cmp	r3, #3
 8006324:	d107      	bne.n	8006336 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800632a:	2b03      	cmp	r3, #3
 800632c:	d11b      	bne.n	8006366 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d017      	beq.n	8006366 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	2203      	movs	r2, #3
 8006342:	fa02 f303 	lsl.w	r3, r2, r3
 8006346:	43db      	mvns	r3, r3
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	4013      	ands	r3, r2
 800634c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	fa02 f303 	lsl.w	r3, r2, r3
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	4313      	orrs	r3, r2
 800635e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d07c      	beq.n	800646c <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006372:	4a47      	ldr	r2, [pc, #284]	@ (8006490 <HAL_GPIO_Init+0x3b8>)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	089b      	lsrs	r3, r3, #2
 8006378:	3318      	adds	r3, #24
 800637a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800637e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	220f      	movs	r2, #15
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	43db      	mvns	r3, r3
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	4013      	ands	r3, r2
 8006394:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0a9a      	lsrs	r2, r3, #10
 800639a:	4b3e      	ldr	r3, [pc, #248]	@ (8006494 <HAL_GPIO_Init+0x3bc>)
 800639c:	4013      	ands	r3, r2
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	f002 0203 	and.w	r2, r2, #3
 80063a4:	00d2      	lsls	r2, r2, #3
 80063a6:	4093      	lsls	r3, r2
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80063ae:	4938      	ldr	r1, [pc, #224]	@ (8006490 <HAL_GPIO_Init+0x3b8>)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	089b      	lsrs	r3, r3, #2
 80063b4:	3318      	adds	r3, #24
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80063bc:	4b34      	ldr	r3, [pc, #208]	@ (8006490 <HAL_GPIO_Init+0x3b8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	43db      	mvns	r3, r3
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	4013      	ands	r3, r2
 80063ca:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80063e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006490 <HAL_GPIO_Init+0x3b8>)
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80063e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006490 <HAL_GPIO_Init+0x3b8>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	43db      	mvns	r3, r3
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	4013      	ands	r3, r2
 80063f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800640a:	4a21      	ldr	r2, [pc, #132]	@ (8006490 <HAL_GPIO_Init+0x3b8>)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006410:	4b1f      	ldr	r3, [pc, #124]	@ (8006490 <HAL_GPIO_Init+0x3b8>)
 8006412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006416:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	43db      	mvns	r3, r3
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	4013      	ands	r3, r2
 8006420:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8006436:	4a16      	ldr	r2, [pc, #88]	@ (8006490 <HAL_GPIO_Init+0x3b8>)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800643e:	4b14      	ldr	r3, [pc, #80]	@ (8006490 <HAL_GPIO_Init+0x3b8>)
 8006440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006444:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	43db      	mvns	r3, r3
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	4013      	ands	r3, r2
 800644e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8006464:	4a0a      	ldr	r2, [pc, #40]	@ (8006490 <HAL_GPIO_Init+0x3b8>)
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	3301      	adds	r3, #1
 8006470:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	f47f ae35 	bne.w	80060ec <HAL_GPIO_Init+0x14>
  }
}
 8006482:	bf00      	nop
 8006484:	bf00      	nop
 8006486:	3724      	adds	r7, #36	@ 0x24
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	46022000 	.word	0x46022000
 8006494:	002f7f7f 	.word	0x002f7f7f

08006498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	807b      	strh	r3, [r7, #2]
 80064a4:	4613      	mov	r3, r2
 80064a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064a8:	787b      	ldrb	r3, [r7, #1]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064ae:	887a      	ldrh	r2, [r7, #2]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80064b4:	e002      	b.n	80064bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80064b6:	887a      	ldrh	r2, [r7, #2]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e08d      	b.n	80065f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fe fefe 	bl	80052f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2224      	movs	r2, #36	@ 0x24
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006518:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006528:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d107      	bne.n	8006542 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800653e:	609a      	str	r2, [r3, #8]
 8006540:	e006      	b.n	8006550 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800654e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d108      	bne.n	800656a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006566:	605a      	str	r2, [r3, #4]
 8006568:	e007      	b.n	800657a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006578:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800658c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800659c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	69d9      	ldr	r1, [r3, #28]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	4608      	mov	r0, r1
 800660a:	4611      	mov	r1, r2
 800660c:	461a      	mov	r2, r3
 800660e:	4603      	mov	r3, r0
 8006610:	817b      	strh	r3, [r7, #10]
 8006612:	460b      	mov	r3, r1
 8006614:	813b      	strh	r3, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b20      	cmp	r3, #32
 8006624:	f040 80f9 	bne.w	800681a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_I2C_Mem_Write+0x34>
 800662e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800663a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e0ed      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_I2C_Mem_Write+0x4e>
 800664a:	2302      	movs	r3, #2
 800664c:	e0e6      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006656:	f7ff faf3 	bl	8005c40 <HAL_GetTick>
 800665a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2319      	movs	r3, #25
 8006662:	2201      	movs	r2, #1
 8006664:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fbc9 	bl	8006e00 <I2C_WaitOnFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0d1      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2221      	movs	r2, #33	@ 0x21
 800667c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2240      	movs	r2, #64	@ 0x40
 8006684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a3a      	ldr	r2, [r7, #32]
 8006692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006698:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066a0:	88f8      	ldrh	r0, [r7, #6]
 80066a2:	893a      	ldrh	r2, [r7, #8]
 80066a4:	8979      	ldrh	r1, [r7, #10]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	4603      	mov	r3, r0
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fad9 	bl	8006c68 <I2C_RequestMemoryWrite>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0a9      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2bff      	cmp	r3, #255	@ 0xff
 80066d0:	d90e      	bls.n	80066f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	22ff      	movs	r2, #255	@ 0xff
 80066d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	8979      	ldrh	r1, [r7, #10]
 80066e0:	2300      	movs	r3, #0
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 fd4d 	bl	8007188 <I2C_TransferConfig>
 80066ee:	e00f      	b.n	8006710 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	8979      	ldrh	r1, [r7, #10]
 8006702:	2300      	movs	r3, #0
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 fd3c 	bl	8007188 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fbcc 	bl	8006eb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e07b      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d034      	beq.n	80067c8 <HAL_I2C_Mem_Write+0x1c8>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	d130      	bne.n	80067c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	2200      	movs	r2, #0
 800676e:	2180      	movs	r1, #128	@ 0x80
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fb45 	bl	8006e00 <I2C_WaitOnFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e04d      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	2bff      	cmp	r3, #255	@ 0xff
 8006788:	d90e      	bls.n	80067a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	22ff      	movs	r2, #255	@ 0xff
 800678e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006794:	b2da      	uxtb	r2, r3
 8006796:	8979      	ldrh	r1, [r7, #10]
 8006798:	2300      	movs	r3, #0
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fcf1 	bl	8007188 <I2C_TransferConfig>
 80067a6:	e00f      	b.n	80067c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	8979      	ldrh	r1, [r7, #10]
 80067ba:	2300      	movs	r3, #0
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fce0 	bl	8007188 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d19e      	bne.n	8006710 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fbb2 	bl	8006f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e01a      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2220      	movs	r2, #32
 80067ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6859      	ldr	r1, [r3, #4]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006824 <HAL_I2C_Mem_Write+0x224>)
 80067fa:	400b      	ands	r3, r1
 80067fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e000      	b.n	800681c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800681a:	2302      	movs	r3, #2
  }
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	fe00e800 	.word	0xfe00e800

08006828 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	4608      	mov	r0, r1
 8006832:	4611      	mov	r1, r2
 8006834:	461a      	mov	r2, r3
 8006836:	4603      	mov	r3, r0
 8006838:	817b      	strh	r3, [r7, #10]
 800683a:	460b      	mov	r3, r1
 800683c:	813b      	strh	r3, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b20      	cmp	r3, #32
 800684c:	f040 80fd 	bne.w	8006a4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_I2C_Mem_Read+0x34>
 8006856:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d105      	bne.n	8006868 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006862:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0f1      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_I2C_Mem_Read+0x4e>
 8006872:	2302      	movs	r3, #2
 8006874:	e0ea      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800687e:	f7ff f9df 	bl	8005c40 <HAL_GetTick>
 8006882:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2319      	movs	r3, #25
 800688a:	2201      	movs	r2, #1
 800688c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fab5 	bl	8006e00 <I2C_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0d5      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2222      	movs	r2, #34	@ 0x22
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2240      	movs	r2, #64	@ 0x40
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a3a      	ldr	r2, [r7, #32]
 80068ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80068c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068c8:	88f8      	ldrh	r0, [r7, #6]
 80068ca:	893a      	ldrh	r2, [r7, #8]
 80068cc:	8979      	ldrh	r1, [r7, #10]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	4603      	mov	r3, r0
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 fa19 	bl	8006d10 <I2C_RequestMemoryRead>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0ad      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2bff      	cmp	r3, #255	@ 0xff
 80068f8:	d90e      	bls.n	8006918 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	22ff      	movs	r2, #255	@ 0xff
 80068fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006904:	b2da      	uxtb	r2, r3
 8006906:	8979      	ldrh	r1, [r7, #10]
 8006908:	4b52      	ldr	r3, [pc, #328]	@ (8006a54 <HAL_I2C_Mem_Read+0x22c>)
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fc39 	bl	8007188 <I2C_TransferConfig>
 8006916:	e00f      	b.n	8006938 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006926:	b2da      	uxtb	r2, r3
 8006928:	8979      	ldrh	r1, [r7, #10]
 800692a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a54 <HAL_I2C_Mem_Read+0x22c>)
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fc28 	bl	8007188 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693e:	2200      	movs	r2, #0
 8006940:	2104      	movs	r1, #4
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fa5c 	bl	8006e00 <I2C_WaitOnFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e07c      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d034      	beq.n	80069f8 <HAL_I2C_Mem_Read+0x1d0>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006992:	2b00      	cmp	r3, #0
 8006994:	d130      	bne.n	80069f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699c:	2200      	movs	r2, #0
 800699e:	2180      	movs	r1, #128	@ 0x80
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 fa2d 	bl	8006e00 <I2C_WaitOnFlagUntilTimeout>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e04d      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2bff      	cmp	r3, #255	@ 0xff
 80069b8:	d90e      	bls.n	80069d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	22ff      	movs	r2, #255	@ 0xff
 80069be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	8979      	ldrh	r1, [r7, #10]
 80069c8:	2300      	movs	r3, #0
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fbd9 	bl	8007188 <I2C_TransferConfig>
 80069d6:	e00f      	b.n	80069f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	8979      	ldrh	r1, [r7, #10]
 80069ea:	2300      	movs	r3, #0
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 fbc8 	bl	8007188 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d19a      	bne.n	8006938 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 fa9a 	bl	8006f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e01a      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6859      	ldr	r1, [r3, #4]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <HAL_I2C_Mem_Read+0x230>)
 8006a2a:	400b      	ands	r3, r1
 8006a2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	e000      	b.n	8006a4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006a4a:	2302      	movs	r3, #2
  }
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	80002400 	.word	0x80002400
 8006a58:	fe00e800 	.word	0xfe00e800

08006a5c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08a      	sub	sp, #40	@ 0x28
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	607a      	str	r2, [r7, #4]
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	f040 80ed 	bne.w	8006c5c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a90:	d101      	bne.n	8006a96 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8006a92:	2302      	movs	r3, #2
 8006a94:	e0e3      	b.n	8006c5e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_I2C_IsDeviceReady+0x48>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e0dc      	b.n	8006c5e <HAL_I2C_IsDeviceReady+0x202>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2224      	movs	r2, #36	@ 0x24
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d107      	bne.n	8006ad2 <HAL_I2C_IsDeviceReady+0x76>
 8006ac2:	897b      	ldrh	r3, [r7, #10]
 8006ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ac8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006acc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006ad0:	e006      	b.n	8006ae0 <HAL_I2C_IsDeviceReady+0x84>
 8006ad2:	897b      	ldrh	r3, [r7, #10]
 8006ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ad8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006adc:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006ae6:	f7ff f8ab 	bl	8005c40 <HAL_GetTick>
 8006aea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	bf0c      	ite	eq
 8006afa:	2301      	moveq	r3, #1
 8006afc:	2300      	movne	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	bf0c      	ite	eq
 8006b10:	2301      	moveq	r3, #1
 8006b12:	2300      	movne	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006b18:	e034      	b.n	8006b84 <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b20:	d01a      	beq.n	8006b58 <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b22:	f7ff f88d 	bl	8005c40 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d302      	bcc.n	8006b38 <HAL_I2C_IsDeviceReady+0xdc>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10f      	bne.n	8006b58 <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e082      	b.n	8006c5e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	bf0c      	ite	eq
 8006b66:	2301      	moveq	r3, #1
 8006b68:	2300      	movne	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b10      	cmp	r3, #16
 8006b7a:	bf0c      	ite	eq
 8006b7c:	2301      	moveq	r3, #1
 8006b7e:	2300      	movne	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006b84:	7fbb      	ldrb	r3, [r7, #30]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <HAL_I2C_IsDeviceReady+0x134>
 8006b8a:	7f7b      	ldrb	r3, [r7, #29]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0c4      	beq.n	8006b1a <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b10      	cmp	r3, #16
 8006b9c:	d027      	beq.n	8006bee <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2120      	movs	r1, #32
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f929 	bl	8006e00 <I2C_WaitOnFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d107      	bne.n	8006bcc <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	645a      	str	r2, [r3, #68]	@ 0x44
 8006bca:	e026      	b.n	8006c1a <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e023      	b.n	8006c1a <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	e037      	b.n	8006c5e <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2120      	movs	r1, #32
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f8fd 	bl	8006e00 <I2C_WaitOnFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e003      	b.n	8006c1a <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2220      	movs	r2, #32
 8006c18:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d904      	bls.n	8006c32 <HAL_I2C_IsDeviceReady+0x1d6>
 8006c28:	7ffb      	ldrb	r3, [r7, #31]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	f63f af3f 	bhi.w	8006aba <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c48:	f043 0220 	orr.w	r2, r3, #32
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
  }
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af02      	add	r7, sp, #8
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	4608      	mov	r0, r1
 8006c72:	4611      	mov	r1, r2
 8006c74:	461a      	mov	r2, r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	817b      	strh	r3, [r7, #10]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	813b      	strh	r3, [r7, #8]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	8979      	ldrh	r1, [r7, #10]
 8006c88:	4b20      	ldr	r3, [pc, #128]	@ (8006d0c <I2C_RequestMemoryWrite+0xa4>)
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fa79 	bl	8007188 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	69b9      	ldr	r1, [r7, #24]
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f909 	bl	8006eb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e02c      	b.n	8006d04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d105      	bne.n	8006cbc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cb0:	893b      	ldrh	r3, [r7, #8]
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cba:	e015      	b.n	8006ce8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cbc:	893b      	ldrh	r3, [r7, #8]
 8006cbe:	0a1b      	lsrs	r3, r3, #8
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	69b9      	ldr	r1, [r7, #24]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 f8ef 	bl	8006eb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e012      	b.n	8006d04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cde:	893b      	ldrh	r3, [r7, #8]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2180      	movs	r1, #128	@ 0x80
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 f884 	bl	8006e00 <I2C_WaitOnFlagUntilTimeout>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	80002000 	.word	0x80002000

08006d10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	4608      	mov	r0, r1
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	817b      	strh	r3, [r7, #10]
 8006d22:	460b      	mov	r3, r1
 8006d24:	813b      	strh	r3, [r7, #8]
 8006d26:	4613      	mov	r3, r2
 8006d28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d2a:	88fb      	ldrh	r3, [r7, #6]
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	8979      	ldrh	r1, [r7, #10]
 8006d30:	4b20      	ldr	r3, [pc, #128]	@ (8006db4 <I2C_RequestMemoryRead+0xa4>)
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	2300      	movs	r3, #0
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fa26 	bl	8007188 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	69b9      	ldr	r1, [r7, #24]
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f8b6 	bl	8006eb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e02c      	b.n	8006daa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d50:	88fb      	ldrh	r3, [r7, #6]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d105      	bne.n	8006d62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d56:	893b      	ldrh	r3, [r7, #8]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d60:	e015      	b.n	8006d8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d62:	893b      	ldrh	r3, [r7, #8]
 8006d64:	0a1b      	lsrs	r3, r3, #8
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	69b9      	ldr	r1, [r7, #24]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f89c 	bl	8006eb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e012      	b.n	8006daa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d84:	893b      	ldrh	r3, [r7, #8]
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2200      	movs	r2, #0
 8006d96:	2140      	movs	r1, #64	@ 0x40
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f831 	bl	8006e00 <I2C_WaitOnFlagUntilTimeout>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	80002000 	.word	0x80002000

08006db8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d103      	bne.n	8006dd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d007      	beq.n	8006df4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	619a      	str	r2, [r3, #24]
  }
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e10:	e03b      	b.n	8006e8a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 f8d6 	bl	8006fc8 <I2C_IsErrorOccurred>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e041      	b.n	8006eaa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e2c:	d02d      	beq.n	8006e8a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2e:	f7fe ff07 	bl	8005c40 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d302      	bcc.n	8006e44 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d122      	bne.n	8006e8a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	bf0c      	ite	eq
 8006e54:	2301      	moveq	r3, #1
 8006e56:	2300      	movne	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	79fb      	ldrb	r3, [r7, #7]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d113      	bne.n	8006e8a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e66:	f043 0220 	orr.w	r2, r3, #32
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e00f      	b.n	8006eaa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699a      	ldr	r2, [r3, #24]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4013      	ands	r3, r2
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	bf0c      	ite	eq
 8006e9a:	2301      	moveq	r3, #1
 8006e9c:	2300      	movne	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d0b4      	beq.n	8006e12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ebe:	e033      	b.n	8006f28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	68b9      	ldr	r1, [r7, #8]
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f87f 	bl	8006fc8 <I2C_IsErrorOccurred>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e031      	b.n	8006f38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eda:	d025      	beq.n	8006f28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006edc:	f7fe feb0 	bl	8005c40 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d302      	bcc.n	8006ef2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d11a      	bne.n	8006f28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d013      	beq.n	8006f28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f04:	f043 0220 	orr.w	r2, r3, #32
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e007      	b.n	8006f38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d1c4      	bne.n	8006ec0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f4c:	e02f      	b.n	8006fae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	68b9      	ldr	r1, [r7, #8]
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 f838 	bl	8006fc8 <I2C_IsErrorOccurred>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e02d      	b.n	8006fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f62:	f7fe fe6d 	bl	8005c40 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d302      	bcc.n	8006f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d11a      	bne.n	8006fae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d013      	beq.n	8006fae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8a:	f043 0220 	orr.w	r2, r3, #32
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e007      	b.n	8006fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d1c8      	bne.n	8006f4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	@ 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	f003 0310 	and.w	r3, r3, #16
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d068      	beq.n	80070c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2210      	movs	r2, #16
 8006ffa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ffc:	e049      	b.n	8007092 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007004:	d045      	beq.n	8007092 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007006:	f7fe fe1b 	bl	8005c40 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	429a      	cmp	r2, r3
 8007014:	d302      	bcc.n	800701c <I2C_IsErrorOccurred+0x54>
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d13a      	bne.n	8007092 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007026:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800702e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800703a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800703e:	d121      	bne.n	8007084 <I2C_IsErrorOccurred+0xbc>
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007046:	d01d      	beq.n	8007084 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007048:	7cfb      	ldrb	r3, [r7, #19]
 800704a:	2b20      	cmp	r3, #32
 800704c:	d01a      	beq.n	8007084 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800705c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800705e:	f7fe fdef 	bl	8005c40 <HAL_GetTick>
 8007062:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007064:	e00e      	b.n	8007084 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007066:	f7fe fdeb 	bl	8005c40 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b19      	cmp	r3, #25
 8007072:	d907      	bls.n	8007084 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	f043 0320 	orr.w	r3, r3, #32
 800707a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007082:	e006      	b.n	8007092 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b20      	cmp	r3, #32
 8007090:	d1e9      	bne.n	8007066 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b20      	cmp	r3, #32
 800709e:	d003      	beq.n	80070a8 <I2C_IsErrorOccurred+0xe0>
 80070a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0aa      	beq.n	8006ffe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80070a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d103      	bne.n	80070b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2220      	movs	r2, #32
 80070b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	f043 0304 	orr.w	r3, r3, #4
 80070be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00b      	beq.n	80070f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	f043 0308 	orr.w	r3, r3, #8
 8007100:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800710a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00b      	beq.n	8007134 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	f043 0302 	orr.w	r3, r3, #2
 8007122:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800712c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01c      	beq.n	8007176 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff fe3b 	bl	8006db8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6859      	ldr	r1, [r3, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <I2C_IsErrorOccurred+0x1bc>)
 800714e:	400b      	ands	r3, r1
 8007150:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	431a      	orrs	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2220      	movs	r2, #32
 8007162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007176:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	@ 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	fe00e800 	.word	0xfe00e800

08007188 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	607b      	str	r3, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	817b      	strh	r3, [r7, #10]
 8007196:	4613      	mov	r3, r2
 8007198:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800719a:	897b      	ldrh	r3, [r7, #10]
 800719c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071a0:	7a7b      	ldrb	r3, [r7, #9]
 80071a2:	041b      	lsls	r3, r3, #16
 80071a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071a8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071b6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	0d5b      	lsrs	r3, r3, #21
 80071c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80071c6:	4b08      	ldr	r3, [pc, #32]	@ (80071e8 <I2C_TransferConfig+0x60>)
 80071c8:	430b      	orrs	r3, r1
 80071ca:	43db      	mvns	r3, r3
 80071cc:	ea02 0103 	and.w	r1, r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	03ff63ff 	.word	0x03ff63ff

080071ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d138      	bne.n	8007274 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800720c:	2302      	movs	r3, #2
 800720e:	e032      	b.n	8007276 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2224      	movs	r2, #36	@ 0x24
 800721c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0201 	bic.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800723e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6819      	ldr	r1, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0201 	orr.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	e000      	b.n	8007276 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007274:	2302      	movs	r3, #2
  }
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007282:	b480      	push	{r7}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b20      	cmp	r3, #32
 8007296:	d139      	bne.n	800730c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e033      	b.n	800730e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2224      	movs	r2, #36	@ 0x24
 80072b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0201 	bic.w	r2, r2, #1
 80072c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80072d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	e000      	b.n	800730e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800730c:	2302      	movs	r3, #2
  }
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
	...

0800731c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8007328:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	73fb      	strb	r3, [r7, #15]
 8007338:	e007      	b.n	800734a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800733a:	4b07      	ldr	r3, [pc, #28]	@ (8007358 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f023 0204 	bic.w	r2, r3, #4
 8007342:	4905      	ldr	r1, [pc, #20]	@ (8007358 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4313      	orrs	r3, r2
 8007348:	600b      	str	r3, [r1, #0]
  }

  return status;
 800734a:	7bfb      	ldrb	r3, [r7, #15]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	40030400 	.word	0x40030400

0800735c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007360:	4b05      	ldr	r3, [pc, #20]	@ (8007378 <HAL_ICACHE_Enable+0x1c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a04      	ldr	r2, [pc, #16]	@ (8007378 <HAL_ICACHE_Enable+0x1c>)
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40030400 	.word	0x40030400

0800737c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007384:	4b39      	ldr	r3, [pc, #228]	@ (800746c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007388:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800738c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	429a      	cmp	r2, r3
 8007394:	d10b      	bne.n	80073ae <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800739c:	d905      	bls.n	80073aa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800739e:	4b33      	ldr	r3, [pc, #204]	@ (800746c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	4a32      	ldr	r2, [pc, #200]	@ (800746c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073a8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e057      	b.n	800745e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b4:	d90a      	bls.n	80073cc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80073b6:	4b2d      	ldr	r3, [pc, #180]	@ (800746c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	4a2a      	ldr	r2, [pc, #168]	@ (800746c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073c8:	60d3      	str	r3, [r2, #12]
 80073ca:	e007      	b.n	80073dc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80073cc:	4b27      	ldr	r3, [pc, #156]	@ (800746c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80073d4:	4925      	ldr	r1, [pc, #148]	@ (800746c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80073dc:	4b24      	ldr	r3, [pc, #144]	@ (8007470 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a24      	ldr	r2, [pc, #144]	@ (8007474 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	099b      	lsrs	r3, r3, #6
 80073e8:	2232      	movs	r2, #50	@ 0x32
 80073ea:	fb02 f303 	mul.w	r3, r2, r3
 80073ee:	4a21      	ldr	r2, [pc, #132]	@ (8007474 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80073f0:	fba2 2303 	umull	r2, r3, r2, r3
 80073f4:	099b      	lsrs	r3, r3, #6
 80073f6:	3301      	adds	r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80073fa:	e002      	b.n	8007402 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3b01      	subs	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007402:	4b1a      	ldr	r3, [pc, #104]	@ (800746c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <HAL_PWREx_ControlVoltageScaling+0x98>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1f3      	bne.n	80073fc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d01b      	beq.n	8007452 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800741a:	4b15      	ldr	r3, [pc, #84]	@ (8007470 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a15      	ldr	r2, [pc, #84]	@ (8007474 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007420:	fba2 2303 	umull	r2, r3, r2, r3
 8007424:	099b      	lsrs	r3, r3, #6
 8007426:	2232      	movs	r2, #50	@ 0x32
 8007428:	fb02 f303 	mul.w	r3, r2, r3
 800742c:	4a11      	ldr	r2, [pc, #68]	@ (8007474 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800742e:	fba2 2303 	umull	r2, r3, r2, r3
 8007432:	099b      	lsrs	r3, r3, #6
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007438:	e002      	b.n	8007440 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3b01      	subs	r3, #1
 800743e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007440:	4b0a      	ldr	r3, [pc, #40]	@ (800746c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007444:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1f3      	bne.n	800743a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e000      	b.n	800745e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	46020800 	.word	0x46020800
 8007470:	20000000 	.word	0x20000000
 8007474:	10624dd3 	.word	0x10624dd3

08007478 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800747c:	4b04      	ldr	r3, [pc, #16]	@ (8007490 <HAL_PWREx_GetVoltageRange+0x18>)
 800747e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007480:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007484:	4618      	mov	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	46020800 	.word	0x46020800

08007494 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800749c:	4b22      	ldr	r3, [pc, #136]	@ (8007528 <HAL_PWREx_ConfigSupply+0x94>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a22      	ldr	r2, [pc, #136]	@ (800752c <HAL_PWREx_ConfigSupply+0x98>)
 80074a2:	fba2 2303 	umull	r2, r3, r2, r3
 80074a6:	099b      	lsrs	r3, r3, #6
 80074a8:	2232      	movs	r2, #50	@ 0x32
 80074aa:	fb02 f303 	mul.w	r3, r2, r3
 80074ae:	4a1f      	ldr	r2, [pc, #124]	@ (800752c <HAL_PWREx_ConfigSupply+0x98>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	099b      	lsrs	r3, r3, #6
 80074b6:	3301      	adds	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d113      	bne.n	80074e8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80074c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007530 <HAL_PWREx_ConfigSupply+0x9c>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007530 <HAL_PWREx_ConfigSupply+0x9c>)
 80074c6:	f023 0302 	bic.w	r3, r3, #2
 80074ca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80074cc:	e002      	b.n	80074d4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80074d4:	4b16      	ldr	r3, [pc, #88]	@ (8007530 <HAL_PWREx_ConfigSupply+0x9c>)
 80074d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d116      	bne.n	800750e <HAL_PWREx_ConfigSupply+0x7a>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f3      	bne.n	80074ce <HAL_PWREx_ConfigSupply+0x3a>
 80074e6:	e012      	b.n	800750e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80074e8:	4b11      	ldr	r3, [pc, #68]	@ (8007530 <HAL_PWREx_ConfigSupply+0x9c>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	4a10      	ldr	r2, [pc, #64]	@ (8007530 <HAL_PWREx_ConfigSupply+0x9c>)
 80074ee:	f043 0302 	orr.w	r3, r3, #2
 80074f2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80074f4:	e002      	b.n	80074fc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80074fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007530 <HAL_PWREx_ConfigSupply+0x9c>)
 80074fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <HAL_PWREx_ConfigSupply+0x7a>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f3      	bne.n	80074f6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e000      	b.n	800751a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20000000 	.word	0x20000000
 800752c:	10624dd3 	.word	0x10624dd3
 8007530:	46020800 	.word	0x46020800

08007534 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007538:	4b05      	ldr	r3, [pc, #20]	@ (8007550 <HAL_PWREx_EnableVddIO2+0x1c>)
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	4a04      	ldr	r2, [pc, #16]	@ (8007550 <HAL_PWREx_EnableVddIO2+0x1c>)
 800753e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007542:	6113      	str	r3, [r2, #16]
}
 8007544:	bf00      	nop
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	46020800 	.word	0x46020800

08007554 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8007558:	4b05      	ldr	r3, [pc, #20]	@ (8007570 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800755a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755c:	4a04      	ldr	r2, [pc, #16]	@ (8007570 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8007564:	bf00      	nop
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	46020800 	.word	0x46020800

08007574 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08e      	sub	sp, #56	@ 0x38
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800757c:	2300      	movs	r3, #0
 800757e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	f000 bec8 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800758e:	4b99      	ldr	r3, [pc, #612]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f003 030c 	and.w	r3, r3, #12
 8007596:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007598:	4b96      	ldr	r3, [pc, #600]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 800759a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0310 	and.w	r3, r3, #16
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 816c 	beq.w	8007888 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <HAL_RCC_OscConfig+0x52>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	2b0c      	cmp	r3, #12
 80075ba:	f040 80de 	bne.w	800777a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80075be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	f040 80da 	bne.w	800777a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d102      	bne.n	80075d4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	f000 bea5 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075d8:	4b86      	ldr	r3, [pc, #536]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d004      	beq.n	80075ee <HAL_RCC_OscConfig+0x7a>
 80075e4:	4b83      	ldr	r3, [pc, #524]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80075ec:	e005      	b.n	80075fa <HAL_RCC_OscConfig+0x86>
 80075ee:	4b81      	ldr	r3, [pc, #516]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80075f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075f4:	041b      	lsls	r3, r3, #16
 80075f6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d255      	bcs.n	80076aa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	4618      	mov	r0, r3
 800760a:	f001 f9dd 	bl	80089c8 <RCC_SetFlashLatencyFromMSIRange>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f000 be82 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800761a:	4b76      	ldr	r3, [pc, #472]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	4a75      	ldr	r2, [pc, #468]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007620:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007624:	6093      	str	r3, [r2, #8]
 8007626:	4b73      	ldr	r3, [pc, #460]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007632:	4970      	ldr	r1, [pc, #448]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007634:	4313      	orrs	r3, r2
 8007636:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007640:	d309      	bcc.n	8007656 <HAL_RCC_OscConfig+0xe2>
 8007642:	4b6c      	ldr	r3, [pc, #432]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f023 021f 	bic.w	r2, r3, #31
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	4969      	ldr	r1, [pc, #420]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007650:	4313      	orrs	r3, r2
 8007652:	60cb      	str	r3, [r1, #12]
 8007654:	e07e      	b.n	8007754 <HAL_RCC_OscConfig+0x1e0>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	da0a      	bge.n	8007674 <HAL_RCC_OscConfig+0x100>
 800765e:	4b65      	ldr	r3, [pc, #404]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	015b      	lsls	r3, r3, #5
 800766c:	4961      	ldr	r1, [pc, #388]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 800766e:	4313      	orrs	r3, r2
 8007670:	60cb      	str	r3, [r1, #12]
 8007672:	e06f      	b.n	8007754 <HAL_RCC_OscConfig+0x1e0>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800767c:	d30a      	bcc.n	8007694 <HAL_RCC_OscConfig+0x120>
 800767e:	4b5d      	ldr	r3, [pc, #372]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	029b      	lsls	r3, r3, #10
 800768c:	4959      	ldr	r1, [pc, #356]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 800768e:	4313      	orrs	r3, r2
 8007690:	60cb      	str	r3, [r1, #12]
 8007692:	e05f      	b.n	8007754 <HAL_RCC_OscConfig+0x1e0>
 8007694:	4b57      	ldr	r3, [pc, #348]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	03db      	lsls	r3, r3, #15
 80076a2:	4954      	ldr	r1, [pc, #336]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60cb      	str	r3, [r1, #12]
 80076a8:	e054      	b.n	8007754 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80076aa:	4b52      	ldr	r3, [pc, #328]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	4a51      	ldr	r2, [pc, #324]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80076b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80076b4:	6093      	str	r3, [r2, #8]
 80076b6:	4b4f      	ldr	r3, [pc, #316]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c2:	494c      	ldr	r1, [pc, #304]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80076d0:	d309      	bcc.n	80076e6 <HAL_RCC_OscConfig+0x172>
 80076d2:	4b48      	ldr	r3, [pc, #288]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f023 021f 	bic.w	r2, r3, #31
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	4945      	ldr	r1, [pc, #276]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60cb      	str	r3, [r1, #12]
 80076e4:	e028      	b.n	8007738 <HAL_RCC_OscConfig+0x1c4>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	da0a      	bge.n	8007704 <HAL_RCC_OscConfig+0x190>
 80076ee:	4b41      	ldr	r3, [pc, #260]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	015b      	lsls	r3, r3, #5
 80076fc:	493d      	ldr	r1, [pc, #244]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	60cb      	str	r3, [r1, #12]
 8007702:	e019      	b.n	8007738 <HAL_RCC_OscConfig+0x1c4>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770c:	d30a      	bcc.n	8007724 <HAL_RCC_OscConfig+0x1b0>
 800770e:	4b39      	ldr	r3, [pc, #228]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	029b      	lsls	r3, r3, #10
 800771c:	4935      	ldr	r1, [pc, #212]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 800771e:	4313      	orrs	r3, r2
 8007720:	60cb      	str	r3, [r1, #12]
 8007722:	e009      	b.n	8007738 <HAL_RCC_OscConfig+0x1c4>
 8007724:	4b33      	ldr	r3, [pc, #204]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	03db      	lsls	r3, r3, #15
 8007732:	4930      	ldr	r1, [pc, #192]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007734:	4313      	orrs	r3, r2
 8007736:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007742:	4618      	mov	r0, r3
 8007744:	f001 f940 	bl	80089c8 <RCC_SetFlashLatencyFromMSIRange>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f000 bde5 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007754:	f001 f8e2 	bl	800891c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007758:	4b27      	ldr	r3, [pc, #156]	@ (80077f8 <HAL_RCC_OscConfig+0x284>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe f9e5 	bl	8005b2c <HAL_InitTick>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8007768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 808a 	beq.w	8007886 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8007772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007776:	f000 bdd2 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d066      	beq.n	8007850 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8007782:	4b1c      	ldr	r3, [pc, #112]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1b      	ldr	r2, [pc, #108]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 8007788:	f043 0301 	orr.w	r3, r3, #1
 800778c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800778e:	f7fe fa57 	bl	8005c40 <HAL_GetTick>
 8007792:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007794:	e009      	b.n	80077aa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007796:	f7fe fa53 	bl	8005c40 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d902      	bls.n	80077aa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	f000 bdba 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80077aa:	4b12      	ldr	r3, [pc, #72]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0ef      	beq.n	8007796 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80077b6:	4b0f      	ldr	r3, [pc, #60]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	4a0e      	ldr	r2, [pc, #56]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80077bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80077c0:	6093      	str	r3, [r2, #8]
 80077c2:	4b0c      	ldr	r3, [pc, #48]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ce:	4909      	ldr	r1, [pc, #36]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80077dc:	d30e      	bcc.n	80077fc <HAL_RCC_OscConfig+0x288>
 80077de:	4b05      	ldr	r3, [pc, #20]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f023 021f 	bic.w	r2, r3, #31
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	4902      	ldr	r1, [pc, #8]	@ (80077f4 <HAL_RCC_OscConfig+0x280>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	60cb      	str	r3, [r1, #12]
 80077f0:	e04a      	b.n	8007888 <HAL_RCC_OscConfig+0x314>
 80077f2:	bf00      	nop
 80077f4:	46020c00 	.word	0x46020c00
 80077f8:	2000001c 	.word	0x2000001c
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	da0a      	bge.n	800781a <HAL_RCC_OscConfig+0x2a6>
 8007804:	4b98      	ldr	r3, [pc, #608]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	015b      	lsls	r3, r3, #5
 8007812:	4995      	ldr	r1, [pc, #596]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007814:	4313      	orrs	r3, r2
 8007816:	60cb      	str	r3, [r1, #12]
 8007818:	e036      	b.n	8007888 <HAL_RCC_OscConfig+0x314>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007822:	d30a      	bcc.n	800783a <HAL_RCC_OscConfig+0x2c6>
 8007824:	4b90      	ldr	r3, [pc, #576]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	029b      	lsls	r3, r3, #10
 8007832:	498d      	ldr	r1, [pc, #564]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007834:	4313      	orrs	r3, r2
 8007836:	60cb      	str	r3, [r1, #12]
 8007838:	e026      	b.n	8007888 <HAL_RCC_OscConfig+0x314>
 800783a:	4b8b      	ldr	r3, [pc, #556]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	03db      	lsls	r3, r3, #15
 8007848:	4987      	ldr	r1, [pc, #540]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 800784a:	4313      	orrs	r3, r2
 800784c:	60cb      	str	r3, [r1, #12]
 800784e:	e01b      	b.n	8007888 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007850:	4b85      	ldr	r3, [pc, #532]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a84      	ldr	r2, [pc, #528]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800785c:	f7fe f9f0 	bl	8005c40 <HAL_GetTick>
 8007860:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007862:	e009      	b.n	8007878 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007864:	f7fe f9ec 	bl	8005c40 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b02      	cmp	r3, #2
 8007870:	d902      	bls.n	8007878 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	f000 bd53 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007878:	4b7b      	ldr	r3, [pc, #492]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1ef      	bne.n	8007864 <HAL_RCC_OscConfig+0x2f0>
 8007884:	e000      	b.n	8007888 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007886:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 808b 	beq.w	80079ac <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007898:	2b08      	cmp	r3, #8
 800789a:	d005      	beq.n	80078a8 <HAL_RCC_OscConfig+0x334>
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	2b0c      	cmp	r3, #12
 80078a0:	d109      	bne.n	80078b6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80078a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d106      	bne.n	80078b6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d17d      	bne.n	80079ac <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f000 bd34 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078be:	d106      	bne.n	80078ce <HAL_RCC_OscConfig+0x35a>
 80078c0:	4b69      	ldr	r3, [pc, #420]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a68      	ldr	r2, [pc, #416]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80078c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	e041      	b.n	8007952 <HAL_RCC_OscConfig+0x3de>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078d6:	d112      	bne.n	80078fe <HAL_RCC_OscConfig+0x38a>
 80078d8:	4b63      	ldr	r3, [pc, #396]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a62      	ldr	r2, [pc, #392]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80078de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	4b60      	ldr	r3, [pc, #384]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a5f      	ldr	r2, [pc, #380]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80078ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	4b5d      	ldr	r3, [pc, #372]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a5c      	ldr	r2, [pc, #368]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80078f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	e029      	b.n	8007952 <HAL_RCC_OscConfig+0x3de>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007906:	d112      	bne.n	800792e <HAL_RCC_OscConfig+0x3ba>
 8007908:	4b57      	ldr	r3, [pc, #348]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a56      	ldr	r2, [pc, #344]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 800790e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	4b54      	ldr	r3, [pc, #336]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a53      	ldr	r2, [pc, #332]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 800791a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	4b51      	ldr	r3, [pc, #324]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a50      	ldr	r2, [pc, #320]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	e011      	b.n	8007952 <HAL_RCC_OscConfig+0x3de>
 800792e:	4b4e      	ldr	r3, [pc, #312]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a4d      	ldr	r2, [pc, #308]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	4b4b      	ldr	r3, [pc, #300]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a4a      	ldr	r2, [pc, #296]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007940:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	4b48      	ldr	r3, [pc, #288]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a47      	ldr	r2, [pc, #284]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 800794c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007950:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d014      	beq.n	8007984 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800795a:	f7fe f971 	bl	8005c40 <HAL_GetTick>
 800795e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007960:	e009      	b.n	8007976 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007962:	f7fe f96d 	bl	8005c40 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	2b64      	cmp	r3, #100	@ 0x64
 800796e:	d902      	bls.n	8007976 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	f000 bcd4 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007976:	4b3c      	ldr	r3, [pc, #240]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0ef      	beq.n	8007962 <HAL_RCC_OscConfig+0x3ee>
 8007982:	e013      	b.n	80079ac <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007984:	f7fe f95c 	bl	8005c40 <HAL_GetTick>
 8007988:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800798a:	e009      	b.n	80079a0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800798c:	f7fe f958 	bl	8005c40 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b64      	cmp	r3, #100	@ 0x64
 8007998:	d902      	bls.n	80079a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	f000 bcbf 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80079a0:	4b31      	ldr	r3, [pc, #196]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1ef      	bne.n	800798c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d05f      	beq.n	8007a78 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80079b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d005      	beq.n	80079ca <HAL_RCC_OscConfig+0x456>
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	2b0c      	cmp	r3, #12
 80079c2:	d114      	bne.n	80079ee <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80079c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d111      	bne.n	80079ee <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d102      	bne.n	80079d8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f000 bca3 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80079d8:	4b23      	ldr	r3, [pc, #140]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	041b      	lsls	r3, r3, #16
 80079e6:	4920      	ldr	r1, [pc, #128]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80079ec:	e044      	b.n	8007a78 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d024      	beq.n	8007a40 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80079f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 80079fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007a02:	f7fe f91d 	bl	8005c40 <HAL_GetTick>
 8007a06:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a08:	e009      	b.n	8007a1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a0a:	f7fe f919 	bl	8005c40 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d902      	bls.n	8007a1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	f000 bc80 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a1e:	4b12      	ldr	r3, [pc, #72]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0ef      	beq.n	8007a0a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	041b      	lsls	r3, r3, #16
 8007a38:	490b      	ldr	r1, [pc, #44]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	610b      	str	r3, [r1, #16]
 8007a3e:	e01b      	b.n	8007a78 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007a40:	4b09      	ldr	r3, [pc, #36]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a08      	ldr	r2, [pc, #32]	@ (8007a68 <HAL_RCC_OscConfig+0x4f4>)
 8007a46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a4a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007a4c:	f7fe f8f8 	bl	8005c40 <HAL_GetTick>
 8007a50:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a52:	e00b      	b.n	8007a6c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a54:	f7fe f8f4 	bl	8005c40 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d904      	bls.n	8007a6c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	f000 bc5b 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
 8007a68:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a6c:	4baf      	ldr	r3, [pc, #700]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1ed      	bne.n	8007a54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0308 	and.w	r3, r3, #8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 80c8 	beq.w	8007c16 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007a86:	2300      	movs	r3, #0
 8007a88:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a8c:	4ba7      	ldr	r3, [pc, #668]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a92:	f003 0304 	and.w	r3, r3, #4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d111      	bne.n	8007abe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a9a:	4ba4      	ldr	r3, [pc, #656]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aa0:	4aa2      	ldr	r2, [pc, #648]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007aa2:	f043 0304 	orr.w	r3, r3, #4
 8007aa6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007aaa:	4ba0      	ldr	r3, [pc, #640]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007abe:	4b9c      	ldr	r3, [pc, #624]	@ (8007d30 <HAL_RCC_OscConfig+0x7bc>)
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d119      	bne.n	8007afe <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007aca:	4b99      	ldr	r3, [pc, #612]	@ (8007d30 <HAL_RCC_OscConfig+0x7bc>)
 8007acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ace:	4a98      	ldr	r2, [pc, #608]	@ (8007d30 <HAL_RCC_OscConfig+0x7bc>)
 8007ad0:	f043 0301 	orr.w	r3, r3, #1
 8007ad4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ad6:	f7fe f8b3 	bl	8005c40 <HAL_GetTick>
 8007ada:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007adc:	e009      	b.n	8007af2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ade:	f7fe f8af 	bl	8005c40 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d902      	bls.n	8007af2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	f000 bc16 	b.w	800831e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007af2:	4b8f      	ldr	r3, [pc, #572]	@ (8007d30 <HAL_RCC_OscConfig+0x7bc>)
 8007af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0ef      	beq.n	8007ade <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d05f      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007b06:	4b89      	ldr	r3, [pc, #548]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b0c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d037      	beq.n	8007b8c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d006      	beq.n	8007b34 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e3f4      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d01b      	beq.n	8007b76 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b44:	4a79      	ldr	r2, [pc, #484]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007b46:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007b4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8007b4e:	f7fe f877 	bl	8005c40 <HAL_GetTick>
 8007b52:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b54:	e008      	b.n	8007b68 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b56:	f7fe f873 	bl	8005c40 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b05      	cmp	r3, #5
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e3da      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b68:	4b70      	ldr	r3, [pc, #448]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1ef      	bne.n	8007b56 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007b76:	4b6d      	ldr	r3, [pc, #436]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b7c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	4969      	ldr	r1, [pc, #420]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007b8c:	4b67      	ldr	r3, [pc, #412]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b92:	4a66      	ldr	r2, [pc, #408]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007b94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007b9c:	f7fe f850 	bl	8005c40 <HAL_GetTick>
 8007ba0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ba4:	f7fe f84c 	bl	8005c40 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b05      	cmp	r3, #5
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e3b3      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0ef      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x630>
 8007bc4:	e01b      	b.n	8007bfe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007bc6:	4b59      	ldr	r3, [pc, #356]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bcc:	4a57      	ldr	r2, [pc, #348]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007bce:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007bd6:	f7fe f833 	bl	8005c40 <HAL_GetTick>
 8007bda:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007bdc:	e008      	b.n	8007bf0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bde:	f7fe f82f 	bl	8005c40 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	d901      	bls.n	8007bf0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e396      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1ef      	bne.n	8007bde <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007bfe:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d107      	bne.n	8007c16 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c06:	4b49      	ldr	r3, [pc, #292]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c0c:	4a47      	ldr	r2, [pc, #284]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007c0e:	f023 0304 	bic.w	r3, r3, #4
 8007c12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 8111 	beq.w	8007e46 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c2a:	4b40      	ldr	r3, [pc, #256]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d111      	bne.n	8007c5c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c38:	4b3c      	ldr	r3, [pc, #240]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007c40:	f043 0304 	orr.w	r3, r3, #4
 8007c44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007c48:	4b38      	ldr	r3, [pc, #224]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c4e:	f003 0304 	and.w	r3, r3, #4
 8007c52:	613b      	str	r3, [r7, #16]
 8007c54:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007c56:	2301      	movs	r3, #1
 8007c58:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c5c:	4b34      	ldr	r3, [pc, #208]	@ (8007d30 <HAL_RCC_OscConfig+0x7bc>)
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d118      	bne.n	8007c9a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007c68:	4b31      	ldr	r3, [pc, #196]	@ (8007d30 <HAL_RCC_OscConfig+0x7bc>)
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6c:	4a30      	ldr	r2, [pc, #192]	@ (8007d30 <HAL_RCC_OscConfig+0x7bc>)
 8007c6e:	f043 0301 	orr.w	r3, r3, #1
 8007c72:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c74:	f7fd ffe4 	bl	8005c40 <HAL_GetTick>
 8007c78:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c7c:	f7fd ffe0 	bl	8005c40 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e347      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c8e:	4b28      	ldr	r3, [pc, #160]	@ (8007d30 <HAL_RCC_OscConfig+0x7bc>)
 8007c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d0f0      	beq.n	8007c7c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d01f      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0304 	and.w	r3, r3, #4
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d010      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007cba:	f043 0304 	orr.w	r3, r3, #4
 8007cbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cc8:	4a18      	ldr	r2, [pc, #96]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007cca:	f043 0301 	orr.w	r3, r3, #1
 8007cce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007cd2:	e018      	b.n	8007d06 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007cd4:	4b15      	ldr	r3, [pc, #84]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cda:	4a14      	ldr	r2, [pc, #80]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007cdc:	f043 0301 	orr.w	r3, r3, #1
 8007ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007ce4:	e00f      	b.n	8007d06 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007ce6:	4b11      	ldr	r3, [pc, #68]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cec:	4a0f      	ldr	r2, [pc, #60]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007cee:	f023 0301 	bic.w	r3, r3, #1
 8007cf2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8007d2c <HAL_RCC_OscConfig+0x7b8>)
 8007cfe:	f023 0304 	bic.w	r3, r3, #4
 8007d02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d057      	beq.n	8007dbe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007d0e:	f7fd ff97 	bl	8005c40 <HAL_GetTick>
 8007d12:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d14:	e00e      	b.n	8007d34 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d16:	f7fd ff93 	bl	8005c40 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d905      	bls.n	8007d34 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e2f8      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
 8007d2c:	46020c00 	.word	0x46020c00
 8007d30:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d34:	4b9c      	ldr	r3, [pc, #624]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0e9      	beq.n	8007d16 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01b      	beq.n	8007d86 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d4e:	4b96      	ldr	r3, [pc, #600]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d54:	4a94      	ldr	r2, [pc, #592]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007d5e:	e00a      	b.n	8007d76 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d60:	f7fd ff6e 	bl	8005c40 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e2d3      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007d76:	4b8c      	ldr	r3, [pc, #560]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0ed      	beq.n	8007d60 <HAL_RCC_OscConfig+0x7ec>
 8007d84:	e053      	b.n	8007e2e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d86:	4b88      	ldr	r3, [pc, #544]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d8c:	4a86      	ldr	r2, [pc, #536]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d96:	e00a      	b.n	8007dae <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d98:	f7fd ff52 	bl	8005c40 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e2b7      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007dae:	4b7e      	ldr	r3, [pc, #504]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1ed      	bne.n	8007d98 <HAL_RCC_OscConfig+0x824>
 8007dbc:	e037      	b.n	8007e2e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007dbe:	f7fd ff3f 	bl	8005c40 <HAL_GetTick>
 8007dc2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007dc4:	e00a      	b.n	8007ddc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dc6:	f7fd ff3b 	bl	8005c40 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d901      	bls.n	8007ddc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e2a0      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ddc:	4b72      	ldr	r3, [pc, #456]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1ed      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007dea:	4b6f      	ldr	r3, [pc, #444]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01a      	beq.n	8007e2e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007df8:	4b6b      	ldr	r3, [pc, #428]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dfe:	4a6a      	ldr	r2, [pc, #424]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007e08:	e00a      	b.n	8007e20 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e0a:	f7fd ff19 	bl	8005c40 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e27e      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007e20:	4b61      	ldr	r3, [pc, #388]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1ed      	bne.n	8007e0a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e2e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d107      	bne.n	8007e46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e36:	4b5c      	ldr	r3, [pc, #368]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e3c:	4a5a      	ldr	r2, [pc, #360]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007e3e:	f023 0304 	bic.w	r3, r3, #4
 8007e42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d036      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d019      	beq.n	8007e8e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8007e5a:	4b53      	ldr	r3, [pc, #332]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a52      	ldr	r2, [pc, #328]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007e64:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007e66:	f7fd feeb 	bl	8005c40 <HAL_GetTick>
 8007e6a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007e6c:	e008      	b.n	8007e80 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e6e:	f7fd fee7 	bl	8005c40 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d901      	bls.n	8007e80 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e24e      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007e80:	4b49      	ldr	r3, [pc, #292]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0f0      	beq.n	8007e6e <HAL_RCC_OscConfig+0x8fa>
 8007e8c:	e018      	b.n	8007ec0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8007e8e:	4b46      	ldr	r3, [pc, #280]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a45      	ldr	r2, [pc, #276]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007e94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e98:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007e9a:	f7fd fed1 	bl	8005c40 <HAL_GetTick>
 8007e9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007ea0:	e008      	b.n	8007eb4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ea2:	f7fd fecd 	bl	8005c40 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d901      	bls.n	8007eb4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e234      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1f0      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d036      	beq.n	8007f3a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d019      	beq.n	8007f08 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007ed4:	4b34      	ldr	r3, [pc, #208]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a33      	ldr	r2, [pc, #204]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ede:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007ee0:	f7fd feae 	bl	8005c40 <HAL_GetTick>
 8007ee4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007ee8:	f7fd feaa 	bl	8005c40 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e211      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007efa:	4b2b      	ldr	r3, [pc, #172]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0f0      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x974>
 8007f06:	e018      	b.n	8007f3a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007f08:	4b27      	ldr	r3, [pc, #156]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a26      	ldr	r2, [pc, #152]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007f0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007f14:	f7fd fe94 	bl	8005c40 <HAL_GetTick>
 8007f18:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007f1a:	e008      	b.n	8007f2e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007f1c:	f7fd fe90 	bl	8005c40 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e1f7      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f0      	bne.n	8007f1c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d07f      	beq.n	8008046 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d062      	beq.n	8008014 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8007f4e:	4b16      	ldr	r3, [pc, #88]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	4a15      	ldr	r2, [pc, #84]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007f54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f58:	6093      	str	r3, [r2, #8]
 8007f5a:	4b13      	ldr	r3, [pc, #76]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f66:	4910      	ldr	r1, [pc, #64]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f70:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007f74:	d309      	bcc.n	8007f8a <HAL_RCC_OscConfig+0xa16>
 8007f76:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f023 021f 	bic.w	r2, r3, #31
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	4909      	ldr	r1, [pc, #36]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60cb      	str	r3, [r1, #12]
 8007f88:	e02a      	b.n	8007fe0 <HAL_RCC_OscConfig+0xa6c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	da0c      	bge.n	8007fac <HAL_RCC_OscConfig+0xa38>
 8007f92:	4b05      	ldr	r3, [pc, #20]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	015b      	lsls	r3, r3, #5
 8007fa0:	4901      	ldr	r1, [pc, #4]	@ (8007fa8 <HAL_RCC_OscConfig+0xa34>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60cb      	str	r3, [r1, #12]
 8007fa6:	e01b      	b.n	8007fe0 <HAL_RCC_OscConfig+0xa6c>
 8007fa8:	46020c00 	.word	0x46020c00
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb4:	d30a      	bcc.n	8007fcc <HAL_RCC_OscConfig+0xa58>
 8007fb6:	4ba1      	ldr	r3, [pc, #644]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	029b      	lsls	r3, r3, #10
 8007fc4:	499d      	ldr	r1, [pc, #628]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60cb      	str	r3, [r1, #12]
 8007fca:	e009      	b.n	8007fe0 <HAL_RCC_OscConfig+0xa6c>
 8007fcc:	4b9b      	ldr	r3, [pc, #620]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	03db      	lsls	r3, r3, #15
 8007fda:	4998      	ldr	r1, [pc, #608]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007fe0:	4b96      	ldr	r3, [pc, #600]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a95      	ldr	r2, [pc, #596]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8007fe6:	f043 0310 	orr.w	r3, r3, #16
 8007fea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007fec:	f7fd fe28 	bl	8005c40 <HAL_GetTick>
 8007ff0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007ff2:	e008      	b.n	8008006 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007ff4:	f7fd fe24 	bl	8005c40 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d901      	bls.n	8008006 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e18b      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008006:	4b8d      	ldr	r3, [pc, #564]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0f0      	beq.n	8007ff4 <HAL_RCC_OscConfig+0xa80>
 8008012:	e018      	b.n	8008046 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008014:	4b89      	ldr	r3, [pc, #548]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a88      	ldr	r2, [pc, #544]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 800801a:	f023 0310 	bic.w	r3, r3, #16
 800801e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008020:	f7fd fe0e 	bl	8005c40 <HAL_GetTick>
 8008024:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008026:	e008      	b.n	800803a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008028:	f7fd fe0a 	bl	8005c40 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b02      	cmp	r3, #2
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e171      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800803a:	4b80      	ldr	r3, [pc, #512]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1f0      	bne.n	8008028 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8166 	beq.w	800831c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008050:	2300      	movs	r3, #0
 8008052:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008056:	4b79      	ldr	r3, [pc, #484]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f003 030c 	and.w	r3, r3, #12
 800805e:	2b0c      	cmp	r3, #12
 8008060:	f000 80f2 	beq.w	8008248 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	2b02      	cmp	r3, #2
 800806a:	f040 80c5 	bne.w	80081f8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800806e:	4b73      	ldr	r3, [pc, #460]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a72      	ldr	r2, [pc, #456]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008074:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008078:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800807a:	f7fd fde1 	bl	8005c40 <HAL_GetTick>
 800807e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008080:	e008      	b.n	8008094 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008082:	f7fd fddd 	bl	8005c40 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e144      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008094:	4b69      	ldr	r3, [pc, #420]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1f0      	bne.n	8008082 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080a0:	4b66      	ldr	r3, [pc, #408]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80080a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d111      	bne.n	80080d2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80080ae:	4b63      	ldr	r3, [pc, #396]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80080b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080b4:	4a61      	ldr	r2, [pc, #388]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80080b6:	f043 0304 	orr.w	r3, r3, #4
 80080ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80080be:	4b5f      	ldr	r3, [pc, #380]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80080c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80080d2:	4b5b      	ldr	r3, [pc, #364]	@ (8008240 <HAL_RCC_OscConfig+0xccc>)
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080de:	d102      	bne.n	80080e6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80080e0:	2301      	movs	r3, #1
 80080e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80080e6:	4b56      	ldr	r3, [pc, #344]	@ (8008240 <HAL_RCC_OscConfig+0xccc>)
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	4a55      	ldr	r2, [pc, #340]	@ (8008240 <HAL_RCC_OscConfig+0xccc>)
 80080ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080f0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80080f2:	4b52      	ldr	r3, [pc, #328]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80080f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080fa:	f023 0303 	bic.w	r3, r3, #3
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008106:	3a01      	subs	r2, #1
 8008108:	0212      	lsls	r2, r2, #8
 800810a:	4311      	orrs	r1, r2
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008110:	430a      	orrs	r2, r1
 8008112:	494a      	ldr	r1, [pc, #296]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008114:	4313      	orrs	r3, r2
 8008116:	628b      	str	r3, [r1, #40]	@ 0x28
 8008118:	4b48      	ldr	r3, [pc, #288]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 800811a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800811c:	4b49      	ldr	r3, [pc, #292]	@ (8008244 <HAL_RCC_OscConfig+0xcd0>)
 800811e:	4013      	ands	r3, r2
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008124:	3a01      	subs	r2, #1
 8008126:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800812e:	3a01      	subs	r2, #1
 8008130:	0252      	lsls	r2, r2, #9
 8008132:	b292      	uxth	r2, r2
 8008134:	4311      	orrs	r1, r2
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800813a:	3a01      	subs	r2, #1
 800813c:	0412      	lsls	r2, r2, #16
 800813e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008142:	4311      	orrs	r1, r2
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008148:	3a01      	subs	r2, #1
 800814a:	0612      	lsls	r2, r2, #24
 800814c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008150:	430a      	orrs	r2, r1
 8008152:	493a      	ldr	r1, [pc, #232]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008154:	4313      	orrs	r3, r2
 8008156:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008158:	4b38      	ldr	r3, [pc, #224]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	4a37      	ldr	r2, [pc, #220]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 800815e:	f023 0310 	bic.w	r3, r3, #16
 8008162:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008168:	4a34      	ldr	r2, [pc, #208]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800816e:	4b33      	ldr	r3, [pc, #204]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008172:	4a32      	ldr	r2, [pc, #200]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008174:	f043 0310 	orr.w	r3, r3, #16
 8008178:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800817a:	4b30      	ldr	r3, [pc, #192]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 800817c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817e:	f023 020c 	bic.w	r2, r3, #12
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008186:	492d      	ldr	r1, [pc, #180]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008188:	4313      	orrs	r3, r2
 800818a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800818c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008190:	2b01      	cmp	r3, #1
 8008192:	d105      	bne.n	80081a0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008194:	4b2a      	ldr	r3, [pc, #168]	@ (8008240 <HAL_RCC_OscConfig+0xccc>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	4a29      	ldr	r2, [pc, #164]	@ (8008240 <HAL_RCC_OscConfig+0xccc>)
 800819a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800819e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80081a0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d107      	bne.n	80081b8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80081a8:	4b24      	ldr	r3, [pc, #144]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80081aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081ae:	4a23      	ldr	r2, [pc, #140]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80081b0:	f023 0304 	bic.w	r3, r3, #4
 80081b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80081b8:	4b20      	ldr	r3, [pc, #128]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a1f      	ldr	r2, [pc, #124]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80081be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80081c4:	f7fd fd3c 	bl	8005c40 <HAL_GetTick>
 80081c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80081ca:	e008      	b.n	80081de <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081cc:	f7fd fd38 	bl	8005c40 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e09f      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80081de:	4b17      	ldr	r3, [pc, #92]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081ea:	4b14      	ldr	r3, [pc, #80]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80081ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ee:	4a13      	ldr	r2, [pc, #76]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80081f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081f4:	6293      	str	r3, [r2, #40]	@ 0x28
 80081f6:	e091      	b.n	800831c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80081f8:	4b10      	ldr	r3, [pc, #64]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a0f      	ldr	r2, [pc, #60]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 80081fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008202:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008204:	f7fd fd1c 	bl	8005c40 <HAL_GetTick>
 8008208:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800820a:	e008      	b.n	800821e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800820c:	f7fd fd18 	bl	8005c40 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	2b02      	cmp	r3, #2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e07f      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800821e:	4b07      	ldr	r3, [pc, #28]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f0      	bne.n	800820c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800822a:	4b04      	ldr	r3, [pc, #16]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 800822c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822e:	4a03      	ldr	r2, [pc, #12]	@ (800823c <HAL_RCC_OscConfig+0xcc8>)
 8008230:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008234:	f023 0303 	bic.w	r3, r3, #3
 8008238:	6293      	str	r3, [r2, #40]	@ 0x28
 800823a:	e06f      	b.n	800831c <HAL_RCC_OscConfig+0xda8>
 800823c:	46020c00 	.word	0x46020c00
 8008240:	46020800 	.word	0x46020800
 8008244:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008248:	4b37      	ldr	r3, [pc, #220]	@ (8008328 <HAL_RCC_OscConfig+0xdb4>)
 800824a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800824e:	4b36      	ldr	r3, [pc, #216]	@ (8008328 <HAL_RCC_OscConfig+0xdb4>)
 8008250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008252:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	2b01      	cmp	r3, #1
 800825a:	d039      	beq.n	80082d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f003 0203 	and.w	r2, r3, #3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008266:	429a      	cmp	r2, r3
 8008268:	d132      	bne.n	80082d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	0a1b      	lsrs	r3, r3, #8
 800826e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008276:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008278:	429a      	cmp	r2, r3
 800827a:	d129      	bne.n	80082d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008286:	429a      	cmp	r2, r3
 8008288:	d122      	bne.n	80082d0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008294:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008296:	429a      	cmp	r2, r3
 8008298:	d11a      	bne.n	80082d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	0a5b      	lsrs	r3, r3, #9
 800829e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d111      	bne.n	80082d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	0c1b      	lsrs	r3, r3, #16
 80082b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082b8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d108      	bne.n	80082d0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	0e1b      	lsrs	r3, r3, #24
 80082c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d001      	beq.n	80082d4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e024      	b.n	800831e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80082d4:	4b14      	ldr	r3, [pc, #80]	@ (8008328 <HAL_RCC_OscConfig+0xdb4>)
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	08db      	lsrs	r3, r3, #3
 80082da:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d01a      	beq.n	800831c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80082e6:	4b10      	ldr	r3, [pc, #64]	@ (8008328 <HAL_RCC_OscConfig+0xdb4>)
 80082e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ea:	4a0f      	ldr	r2, [pc, #60]	@ (8008328 <HAL_RCC_OscConfig+0xdb4>)
 80082ec:	f023 0310 	bic.w	r3, r3, #16
 80082f0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f2:	f7fd fca5 	bl	8005c40 <HAL_GetTick>
 80082f6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80082f8:	bf00      	nop
 80082fa:	f7fd fca1 	bl	8005c40 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008302:	4293      	cmp	r3, r2
 8008304:	d0f9      	beq.n	80082fa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800830a:	4a07      	ldr	r2, [pc, #28]	@ (8008328 <HAL_RCC_OscConfig+0xdb4>)
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008310:	4b05      	ldr	r3, [pc, #20]	@ (8008328 <HAL_RCC_OscConfig+0xdb4>)
 8008312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008314:	4a04      	ldr	r2, [pc, #16]	@ (8008328 <HAL_RCC_OscConfig+0xdb4>)
 8008316:	f043 0310 	orr.w	r3, r3, #16
 800831a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3738      	adds	r7, #56	@ 0x38
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	46020c00 	.word	0x46020c00

0800832c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e1d9      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008340:	4b9b      	ldr	r3, [pc, #620]	@ (80085b0 <HAL_RCC_ClockConfig+0x284>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 030f 	and.w	r3, r3, #15
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d910      	bls.n	8008370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800834e:	4b98      	ldr	r3, [pc, #608]	@ (80085b0 <HAL_RCC_ClockConfig+0x284>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f023 020f 	bic.w	r2, r3, #15
 8008356:	4996      	ldr	r1, [pc, #600]	@ (80085b0 <HAL_RCC_ClockConfig+0x284>)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	4313      	orrs	r3, r2
 800835c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800835e:	4b94      	ldr	r3, [pc, #592]	@ (80085b0 <HAL_RCC_ClockConfig+0x284>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	429a      	cmp	r2, r3
 800836a:	d001      	beq.n	8008370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e1c1      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0310 	and.w	r3, r3, #16
 8008378:	2b00      	cmp	r3, #0
 800837a:	d010      	beq.n	800839e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	695a      	ldr	r2, [r3, #20]
 8008380:	4b8c      	ldr	r3, [pc, #560]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 8008382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008384:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008388:	429a      	cmp	r2, r3
 800838a:	d908      	bls.n	800839e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800838c:	4b89      	ldr	r3, [pc, #548]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 800838e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008390:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	4986      	ldr	r1, [pc, #536]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 800839a:	4313      	orrs	r3, r2
 800839c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0308 	and.w	r3, r3, #8
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d012      	beq.n	80083d0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691a      	ldr	r2, [r3, #16]
 80083ae:	4b81      	ldr	r3, [pc, #516]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	091b      	lsrs	r3, r3, #4
 80083b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d909      	bls.n	80083d0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80083bc:	4b7d      	ldr	r3, [pc, #500]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	011b      	lsls	r3, r3, #4
 80083ca:	497a      	ldr	r1, [pc, #488]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d010      	beq.n	80083fe <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	4b74      	ldr	r3, [pc, #464]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d908      	bls.n	80083fe <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80083ec:	4b71      	ldr	r3, [pc, #452]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	496e      	ldr	r1, [pc, #440]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d010      	beq.n	800842c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	4b69      	ldr	r3, [pc, #420]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	f003 030f 	and.w	r3, r3, #15
 8008416:	429a      	cmp	r2, r3
 8008418:	d908      	bls.n	800842c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800841a:	4b66      	ldr	r3, [pc, #408]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	f023 020f 	bic.w	r2, r3, #15
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	4963      	ldr	r1, [pc, #396]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 8008428:	4313      	orrs	r3, r2
 800842a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 80d2 	beq.w	80085de <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800843a:	2300      	movs	r3, #0
 800843c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2b03      	cmp	r3, #3
 8008444:	d143      	bne.n	80084ce <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008446:	4b5b      	ldr	r3, [pc, #364]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 8008448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	d110      	bne.n	8008476 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008454:	4b57      	ldr	r3, [pc, #348]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 8008456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800845a:	4a56      	ldr	r2, [pc, #344]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 800845c:	f043 0304 	orr.w	r3, r3, #4
 8008460:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008464:	4b53      	ldr	r3, [pc, #332]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 8008466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	60bb      	str	r3, [r7, #8]
 8008470:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8008472:	2301      	movs	r3, #1
 8008474:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8008476:	f7fd fbe3 	bl	8005c40 <HAL_GetTick>
 800847a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800847c:	4b4e      	ldr	r3, [pc, #312]	@ (80085b8 <HAL_RCC_ClockConfig+0x28c>)
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00f      	beq.n	80084a8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008488:	e008      	b.n	800849c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800848a:	f7fd fbd9 	bl	8005c40 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	d901      	bls.n	800849c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e12b      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800849c:	4b46      	ldr	r3, [pc, #280]	@ (80085b8 <HAL_RCC_ClockConfig+0x28c>)
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0f0      	beq.n	800848a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d107      	bne.n	80084be <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80084ae:	4b41      	ldr	r3, [pc, #260]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80084b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084b4:	4a3f      	ldr	r2, [pc, #252]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80084b6:	f023 0304 	bic.w	r3, r3, #4
 80084ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80084be:	4b3d      	ldr	r3, [pc, #244]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d121      	bne.n	800850e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e112      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d107      	bne.n	80084e6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084d6:	4b37      	ldr	r3, [pc, #220]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d115      	bne.n	800850e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e106      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d107      	bne.n	80084fe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80084ee:	4b31      	ldr	r3, [pc, #196]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e0fa      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084fe:	4b2d      	ldr	r3, [pc, #180]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e0f2      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800850e:	4b29      	ldr	r3, [pc, #164]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f023 0203 	bic.w	r2, r3, #3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	4926      	ldr	r1, [pc, #152]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 800851c:	4313      	orrs	r3, r2
 800851e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008520:	f7fd fb8e 	bl	8005c40 <HAL_GetTick>
 8008524:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	2b03      	cmp	r3, #3
 800852c:	d112      	bne.n	8008554 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800852e:	e00a      	b.n	8008546 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008530:	f7fd fb86 	bl	8005c40 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800853e:	4293      	cmp	r3, r2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e0d6      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008546:	4b1b      	ldr	r3, [pc, #108]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	f003 030c 	and.w	r3, r3, #12
 800854e:	2b0c      	cmp	r3, #12
 8008550:	d1ee      	bne.n	8008530 <HAL_RCC_ClockConfig+0x204>
 8008552:	e044      	b.n	80085de <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2b02      	cmp	r3, #2
 800855a:	d112      	bne.n	8008582 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800855c:	e00a      	b.n	8008574 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800855e:	f7fd fb6f 	bl	8005c40 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800856c:	4293      	cmp	r3, r2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e0bf      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008574:	4b0f      	ldr	r3, [pc, #60]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	f003 030c 	and.w	r3, r3, #12
 800857c:	2b08      	cmp	r3, #8
 800857e:	d1ee      	bne.n	800855e <HAL_RCC_ClockConfig+0x232>
 8008580:	e02d      	b.n	80085de <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d123      	bne.n	80085d2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800858a:	e00a      	b.n	80085a2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800858c:	f7fd fb58 	bl	8005c40 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800859a:	4293      	cmp	r3, r2
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e0a8      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80085a2:	4b04      	ldr	r3, [pc, #16]	@ (80085b4 <HAL_RCC_ClockConfig+0x288>)
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	f003 030c 	and.w	r3, r3, #12
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1ee      	bne.n	800858c <HAL_RCC_ClockConfig+0x260>
 80085ae:	e016      	b.n	80085de <HAL_RCC_ClockConfig+0x2b2>
 80085b0:	40022000 	.word	0x40022000
 80085b4:	46020c00 	.word	0x46020c00
 80085b8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085bc:	f7fd fb40 	bl	8005c40 <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e090      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80085d2:	4b4a      	ldr	r3, [pc, #296]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	f003 030c 	and.w	r3, r3, #12
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d1ee      	bne.n	80085bc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d010      	beq.n	800860c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	4b43      	ldr	r3, [pc, #268]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d208      	bcs.n	800860c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80085fa:	4b40      	ldr	r3, [pc, #256]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f023 020f 	bic.w	r2, r3, #15
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	493d      	ldr	r1, [pc, #244]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 8008608:	4313      	orrs	r3, r2
 800860a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800860c:	4b3c      	ldr	r3, [pc, #240]	@ (8008700 <HAL_RCC_ClockConfig+0x3d4>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d210      	bcs.n	800863c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800861a:	4b39      	ldr	r3, [pc, #228]	@ (8008700 <HAL_RCC_ClockConfig+0x3d4>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f023 020f 	bic.w	r2, r3, #15
 8008622:	4937      	ldr	r1, [pc, #220]	@ (8008700 <HAL_RCC_ClockConfig+0x3d4>)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	4313      	orrs	r3, r2
 8008628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800862a:	4b35      	ldr	r3, [pc, #212]	@ (8008700 <HAL_RCC_ClockConfig+0x3d4>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d001      	beq.n	800863c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e05b      	b.n	80086f4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d010      	beq.n	800866a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	4b2b      	ldr	r3, [pc, #172]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008654:	429a      	cmp	r2, r3
 8008656:	d208      	bcs.n	800866a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008658:	4b28      	ldr	r3, [pc, #160]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	4925      	ldr	r1, [pc, #148]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 8008666:	4313      	orrs	r3, r2
 8008668:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0308 	and.w	r3, r3, #8
 8008672:	2b00      	cmp	r3, #0
 8008674:	d012      	beq.n	800869c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691a      	ldr	r2, [r3, #16]
 800867a:	4b20      	ldr	r3, [pc, #128]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	091b      	lsrs	r3, r3, #4
 8008680:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008684:	429a      	cmp	r2, r3
 8008686:	d209      	bcs.n	800869c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008688:	4b1c      	ldr	r3, [pc, #112]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	4919      	ldr	r1, [pc, #100]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 8008698:	4313      	orrs	r3, r2
 800869a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0310 	and.w	r3, r3, #16
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d010      	beq.n	80086ca <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	695a      	ldr	r2, [r3, #20]
 80086ac:	4b13      	ldr	r3, [pc, #76]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 80086ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d208      	bcs.n	80086ca <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80086b8:	4b10      	ldr	r3, [pc, #64]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 80086ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	490d      	ldr	r1, [pc, #52]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80086ca:	f000 f821 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 80086ce:	4602      	mov	r2, r0
 80086d0:	4b0a      	ldr	r3, [pc, #40]	@ (80086fc <HAL_RCC_ClockConfig+0x3d0>)
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	490a      	ldr	r1, [pc, #40]	@ (8008704 <HAL_RCC_ClockConfig+0x3d8>)
 80086da:	5ccb      	ldrb	r3, [r1, r3]
 80086dc:	fa22 f303 	lsr.w	r3, r2, r3
 80086e0:	4a09      	ldr	r2, [pc, #36]	@ (8008708 <HAL_RCC_ClockConfig+0x3dc>)
 80086e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80086e4:	4b09      	ldr	r3, [pc, #36]	@ (800870c <HAL_RCC_ClockConfig+0x3e0>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fd fa1f 	bl	8005b2c <HAL_InitTick>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	46020c00 	.word	0x46020c00
 8008700:	40022000 	.word	0x40022000
 8008704:	08013b34 	.word	0x08013b34
 8008708:	20000000 	.word	0x20000000
 800870c:	2000001c 	.word	0x2000001c

08008710 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008710:	b480      	push	{r7}
 8008712:	b08b      	sub	sp, #44	@ 0x2c
 8008714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800871e:	4b78      	ldr	r3, [pc, #480]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	f003 030c 	and.w	r3, r3, #12
 8008726:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008728:	4b75      	ldr	r3, [pc, #468]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800872a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872c:	f003 0303 	and.w	r3, r3, #3
 8008730:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d005      	beq.n	8008744 <HAL_RCC_GetSysClockFreq+0x34>
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	2b0c      	cmp	r3, #12
 800873c:	d121      	bne.n	8008782 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d11e      	bne.n	8008782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008744:	4b6e      	ldr	r3, [pc, #440]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d107      	bne.n	8008760 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008750:	4b6b      	ldr	r3, [pc, #428]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008756:	0b1b      	lsrs	r3, r3, #12
 8008758:	f003 030f 	and.w	r3, r3, #15
 800875c:	627b      	str	r3, [r7, #36]	@ 0x24
 800875e:	e005      	b.n	800876c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008760:	4b67      	ldr	r3, [pc, #412]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	0f1b      	lsrs	r3, r3, #28
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800876c:	4a65      	ldr	r2, [pc, #404]	@ (8008904 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008774:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d110      	bne.n	800879e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008780:	e00d      	b.n	800879e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008782:	4b5f      	ldr	r3, [pc, #380]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	f003 030c 	and.w	r3, r3, #12
 800878a:	2b04      	cmp	r3, #4
 800878c:	d102      	bne.n	8008794 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800878e:	4b5e      	ldr	r3, [pc, #376]	@ (8008908 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008790:	623b      	str	r3, [r7, #32]
 8008792:	e004      	b.n	800879e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	2b08      	cmp	r3, #8
 8008798:	d101      	bne.n	800879e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800879a:	4b5c      	ldr	r3, [pc, #368]	@ (800890c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800879c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	2b0c      	cmp	r3, #12
 80087a2:	f040 80a5 	bne.w	80088f0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80087a6:	4b56      	ldr	r3, [pc, #344]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087aa:	f003 0303 	and.w	r3, r3, #3
 80087ae:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80087b0:	4b53      	ldr	r3, [pc, #332]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b4:	0a1b      	lsrs	r3, r3, #8
 80087b6:	f003 030f 	and.w	r3, r3, #15
 80087ba:	3301      	adds	r3, #1
 80087bc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80087be:	4b50      	ldr	r3, [pc, #320]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c2:	091b      	lsrs	r3, r3, #4
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80087ca:	4b4d      	ldr	r3, [pc, #308]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ce:	08db      	lsrs	r3, r3, #3
 80087d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	fb02 f303 	mul.w	r3, r2, r3
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d003      	beq.n	80087f4 <HAL_RCC_GetSysClockFreq+0xe4>
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d022      	beq.n	8008838 <HAL_RCC_GetSysClockFreq+0x128>
 80087f2:	e043      	b.n	800887c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fe:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8008910 <HAL_RCC_GetSysClockFreq+0x200>
 8008802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008806:	4b3e      	ldr	r3, [pc, #248]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800880a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008816:	ed97 6a01 	vldr	s12, [r7, #4]
 800881a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008914 <HAL_RCC_GetSysClockFreq+0x204>
 800881e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008822:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800882a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800882e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008836:	e046      	b.n	80088c6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008842:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8008918 <HAL_RCC_GetSysClockFreq+0x208>
 8008846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884a:	4b2d      	ldr	r3, [pc, #180]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800884c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800885a:	ed97 6a01 	vldr	s12, [r7, #4]
 800885e:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8008914 <HAL_RCC_GetSysClockFreq+0x204>
 8008862:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008866:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800886a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800886e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800887a:	e024      	b.n	80088c6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008894:	4b1a      	ldr	r3, [pc, #104]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80088a4:	ed97 6a01 	vldr	s12, [r7, #4]
 80088a8:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8008914 <HAL_RCC_GetSysClockFreq+0x204>
 80088ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80088b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088c4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80088c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008900 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80088c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ca:	0e1b      	lsrs	r3, r3, #24
 80088cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088d0:	3301      	adds	r3, #1
 80088d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80088de:	edd7 6a07 	vldr	s13, [r7, #28]
 80088e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088ea:	ee17 3a90 	vmov	r3, s15
 80088ee:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80088f0:	6a3b      	ldr	r3, [r7, #32]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	372c      	adds	r7, #44	@ 0x2c
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	46020c00 	.word	0x46020c00
 8008904:	08013b4c 	.word	0x08013b4c
 8008908:	00f42400 	.word	0x00f42400
 800890c:	007a1200 	.word	0x007a1200
 8008910:	4b742400 	.word	0x4b742400
 8008914:	46000000 	.word	0x46000000
 8008918:	4af42400 	.word	0x4af42400

0800891c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008920:	f7ff fef6 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 8008924:	4602      	mov	r2, r0
 8008926:	4b07      	ldr	r3, [pc, #28]	@ (8008944 <HAL_RCC_GetHCLKFreq+0x28>)
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	f003 030f 	and.w	r3, r3, #15
 800892e:	4906      	ldr	r1, [pc, #24]	@ (8008948 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008930:	5ccb      	ldrb	r3, [r1, r3]
 8008932:	fa22 f303 	lsr.w	r3, r2, r3
 8008936:	4a05      	ldr	r2, [pc, #20]	@ (800894c <HAL_RCC_GetHCLKFreq+0x30>)
 8008938:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800893a:	4b04      	ldr	r3, [pc, #16]	@ (800894c <HAL_RCC_GetHCLKFreq+0x30>)
 800893c:	681b      	ldr	r3, [r3, #0]
}
 800893e:	4618      	mov	r0, r3
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	46020c00 	.word	0x46020c00
 8008948:	08013b34 	.word	0x08013b34
 800894c:	20000000 	.word	0x20000000

08008950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008954:	f7ff ffe2 	bl	800891c <HAL_RCC_GetHCLKFreq>
 8008958:	4602      	mov	r2, r0
 800895a:	4b05      	ldr	r3, [pc, #20]	@ (8008970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	091b      	lsrs	r3, r3, #4
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	4903      	ldr	r1, [pc, #12]	@ (8008974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008966:	5ccb      	ldrb	r3, [r1, r3]
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800896c:	4618      	mov	r0, r3
 800896e:	bd80      	pop	{r7, pc}
 8008970:	46020c00 	.word	0x46020c00
 8008974:	08013b44 	.word	0x08013b44

08008978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800897c:	f7ff ffce 	bl	800891c <HAL_RCC_GetHCLKFreq>
 8008980:	4602      	mov	r2, r0
 8008982:	4b05      	ldr	r3, [pc, #20]	@ (8008998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	0a1b      	lsrs	r3, r3, #8
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	4903      	ldr	r1, [pc, #12]	@ (800899c <HAL_RCC_GetPCLK2Freq+0x24>)
 800898e:	5ccb      	ldrb	r3, [r1, r3]
 8008990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008994:	4618      	mov	r0, r3
 8008996:	bd80      	pop	{r7, pc}
 8008998:	46020c00 	.word	0x46020c00
 800899c:	08013b44 	.word	0x08013b44

080089a0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80089a4:	f7ff ffba 	bl	800891c <HAL_RCC_GetHCLKFreq>
 80089a8:	4602      	mov	r2, r0
 80089aa:	4b05      	ldr	r3, [pc, #20]	@ (80089c0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80089ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ae:	091b      	lsrs	r3, r3, #4
 80089b0:	f003 0307 	and.w	r3, r3, #7
 80089b4:	4903      	ldr	r1, [pc, #12]	@ (80089c4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80089b6:	5ccb      	ldrb	r3, [r1, r3]
 80089b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089bc:	4618      	mov	r0, r3
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	46020c00 	.word	0x46020c00
 80089c4:	08013b44 	.word	0x08013b44

080089c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80089d0:	4b3e      	ldr	r3, [pc, #248]	@ (8008acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80089d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089d6:	f003 0304 	and.w	r3, r3, #4
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80089de:	f7fe fd4b 	bl	8007478 <HAL_PWREx_GetVoltageRange>
 80089e2:	6178      	str	r0, [r7, #20]
 80089e4:	e019      	b.n	8008a1a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80089e6:	4b39      	ldr	r3, [pc, #228]	@ (8008acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80089e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089ec:	4a37      	ldr	r2, [pc, #220]	@ (8008acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80089ee:	f043 0304 	orr.w	r3, r3, #4
 80089f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80089f6:	4b35      	ldr	r3, [pc, #212]	@ (8008acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80089f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008a04:	f7fe fd38 	bl	8007478 <HAL_PWREx_GetVoltageRange>
 8008a08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008a0a:	4b30      	ldr	r3, [pc, #192]	@ (8008acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a10:	4a2e      	ldr	r2, [pc, #184]	@ (8008acc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008a12:	f023 0304 	bic.w	r3, r3, #4
 8008a16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a20:	d003      	beq.n	8008a2a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a28:	d109      	bne.n	8008a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a30:	d202      	bcs.n	8008a38 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008a32:	2301      	movs	r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008a36:	e033      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008a38:	2300      	movs	r3, #0
 8008a3a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008a3c:	e030      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a44:	d208      	bcs.n	8008a58 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a4c:	d102      	bne.n	8008a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008a4e:	2303      	movs	r3, #3
 8008a50:	613b      	str	r3, [r7, #16]
 8008a52:	e025      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e035      	b.n	8008ac4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a5e:	d90f      	bls.n	8008a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d109      	bne.n	8008a7a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a6c:	d902      	bls.n	8008a74 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008a6e:	2300      	movs	r3, #0
 8008a70:	613b      	str	r3, [r7, #16]
 8008a72:	e015      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008a74:	2301      	movs	r3, #1
 8008a76:	613b      	str	r3, [r7, #16]
 8008a78:	e012      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	613b      	str	r3, [r7, #16]
 8008a7e:	e00f      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a86:	d109      	bne.n	8008a9c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a8e:	d102      	bne.n	8008a96 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008a90:	2301      	movs	r3, #1
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	e004      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008a96:	2302      	movs	r3, #2
 8008a98:	613b      	str	r3, [r7, #16]
 8008a9a:	e001      	b.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f023 020f 	bic.w	r2, r3, #15
 8008aa8:	4909      	ldr	r1, [pc, #36]	@ (8008ad0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008ab0:	4b07      	ldr	r3, [pc, #28]	@ (8008ad0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 030f 	and.w	r3, r3, #15
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d001      	beq.n	8008ac2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	46020c00 	.word	0x46020c00
 8008ad0:	40022000 	.word	0x40022000

08008ad4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ad8:	b0c4      	sub	sp, #272	@ 0x110
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f002 0401 	and.w	r4, r2, #1
 8008af8:	2500      	movs	r5, #0
 8008afa:	ea54 0305 	orrs.w	r3, r4, r5
 8008afe:	d00b      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008b00:	4bd5      	ldr	r3, [pc, #852]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b06:	f023 0103 	bic.w	r1, r3, #3
 8008b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b10:	4ad1      	ldr	r2, [pc, #836]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b12:	430b      	orrs	r3, r1
 8008b14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	f002 0802 	and.w	r8, r2, #2
 8008b24:	f04f 0900 	mov.w	r9, #0
 8008b28:	ea58 0309 	orrs.w	r3, r8, r9
 8008b2c:	d00b      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008b2e:	4bca      	ldr	r3, [pc, #808]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b34:	f023 010c 	bic.w	r1, r3, #12
 8008b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b3e:	4ac6      	ldr	r2, [pc, #792]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b40:	430b      	orrs	r3, r1
 8008b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	f002 0a04 	and.w	sl, r2, #4
 8008b52:	f04f 0b00 	mov.w	fp, #0
 8008b56:	ea5a 030b 	orrs.w	r3, sl, fp
 8008b5a:	d00b      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008b5c:	4bbe      	ldr	r3, [pc, #760]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b62:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b6c:	4aba      	ldr	r2, [pc, #744]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b6e:	430b      	orrs	r3, r1
 8008b70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	f002 0308 	and.w	r3, r2, #8
 8008b80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008b84:	2300      	movs	r3, #0
 8008b86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008b8a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4313      	orrs	r3, r2
 8008b92:	d00b      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008b94:	4bb0      	ldr	r3, [pc, #704]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ba4:	4aac      	ldr	r2, [pc, #688]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ba6:	430b      	orrs	r3, r1
 8008ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f002 0310 	and.w	r3, r2, #16
 8008bb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008bc2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	d00b      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008bcc:	4ba2      	ldr	r3, [pc, #648]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008bd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bdc:	4a9e      	ldr	r2, [pc, #632]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008bde:	430b      	orrs	r3, r1
 8008be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008bfa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4313      	orrs	r3, r2
 8008c02:	d00b      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008c04:	4b94      	ldr	r3, [pc, #592]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c14:	4a90      	ldr	r2, [pc, #576]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c16:	430b      	orrs	r3, r1
 8008c18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	f002 0320 	and.w	r3, r2, #32
 8008c28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008c36:	460b      	mov	r3, r1
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	d00b      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008c3c:	4b86      	ldr	r3, [pc, #536]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c42:	f023 0107 	bic.w	r1, r3, #7
 8008c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c4c:	4a82      	ldr	r2, [pc, #520]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c4e:	430b      	orrs	r3, r1
 8008c50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c64:	2300      	movs	r3, #0
 8008c66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4313      	orrs	r3, r2
 8008c72:	d00b      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008c74:	4b78      	ldr	r3, [pc, #480]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c7a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c84:	4a74      	ldr	r2, [pc, #464]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c86:	430b      	orrs	r3, r1
 8008c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008c98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008ca2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	d00b      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008cac:	4b6a      	ldr	r3, [pc, #424]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cbc:	4a66      	ldr	r2, [pc, #408]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cbe:	430b      	orrs	r3, r1
 8008cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	d00b      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cf4:	4a58      	ldr	r2, [pc, #352]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008d16:	460b      	mov	r3, r1
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	d00b      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008d1c:	4b4e      	ldr	r3, [pc, #312]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d22:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8008d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d2e:	430b      	orrs	r3, r1
 8008d30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8008d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d44:	2300      	movs	r3, #0
 8008d46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4313      	orrs	r3, r2
 8008d52:	d00b      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8008d54:	4b40      	ldr	r3, [pc, #256]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d5a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8008d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d64:	4a3c      	ldr	r2, [pc, #240]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d66:	430b      	orrs	r3, r1
 8008d68:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8008d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d82:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d86:	460b      	mov	r3, r1
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	d00c      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8008d8c:	4b32      	ldr	r3, [pc, #200]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d92:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008da0:	430b      	orrs	r3, r1
 8008da2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8008db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008db6:	2300      	movs	r3, #0
 8008db8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008dbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	d00c      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008dc6:	4b24      	ldr	r3, [pc, #144]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008dcc:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008dda:	430b      	orrs	r3, r1
 8008ddc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008df0:	2300      	movs	r3, #0
 8008df2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008df6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	d00c      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008e00:	4b15      	ldr	r3, [pc, #84]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e06:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8008e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e12:	4a11      	ldr	r2, [pc, #68]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e14:	430b      	orrs	r3, r1
 8008e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e30:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008e34:	460b      	mov	r3, r1
 8008e36:	4313      	orrs	r3, r2
 8008e38:	d010      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008e3a:	4b07      	ldr	r3, [pc, #28]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e4c:	4a02      	ldr	r2, [pc, #8]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e4e:	430b      	orrs	r3, r1
 8008e50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008e54:	e002      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8008e56:	bf00      	nop
 8008e58:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008e72:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008e76:	460b      	mov	r3, r1
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	d04c      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e84:	2b80      	cmp	r3, #128	@ 0x80
 8008e86:	d02d      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008e88:	2b80      	cmp	r3, #128	@ 0x80
 8008e8a:	d827      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008e8c:	2b60      	cmp	r3, #96	@ 0x60
 8008e8e:	d02b      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008e90:	2b60      	cmp	r3, #96	@ 0x60
 8008e92:	d823      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008e94:	2b40      	cmp	r3, #64	@ 0x40
 8008e96:	d006      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8008e98:	2b40      	cmp	r3, #64	@ 0x40
 8008e9a:	d81f      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d009      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008ea0:	2b20      	cmp	r3, #32
 8008ea2:	d011      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008ea4:	e01a      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ea6:	4bbe      	ldr	r3, [pc, #760]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eaa:	4abd      	ldr	r2, [pc, #756]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008eb0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008eb2:	e01a      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008eb8:	3308      	adds	r3, #8
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f002 fc3c 	bl	800b738 <RCCEx_PLL2_Config>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008ec6:	e010      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ecc:	332c      	adds	r3, #44	@ 0x2c
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f002 fcca 	bl	800b868 <RCCEx_PLL3_Config>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008eda:	e006      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8008ee2:	e002      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008ee4:	bf00      	nop
 8008ee6:	e000      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eea:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10d      	bne.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008ef2:	4bab      	ldr	r3, [pc, #684]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ef4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ef8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8008efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f04:	4aa6      	ldr	r2, [pc, #664]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f06:	430b      	orrs	r3, r1
 8008f08:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008f0c:	e003      	b.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8008f12:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008f22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f26:	2300      	movs	r3, #0
 8008f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f2c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008f30:	460b      	mov	r3, r1
 8008f32:	4313      	orrs	r3, r2
 8008f34:	d053      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f42:	d033      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8008f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f48:	d82c      	bhi.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f4e:	d02f      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8008f50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f54:	d826      	bhi.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f5a:	d008      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8008f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f60:	d820      	bhi.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f6a:	d011      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008f6c:	e01a      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f6e:	4b8c      	ldr	r3, [pc, #560]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f72:	4a8b      	ldr	r2, [pc, #556]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f78:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008f7a:	e01a      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f80:	3308      	adds	r3, #8
 8008f82:	4618      	mov	r0, r3
 8008f84:	f002 fbd8 	bl	800b738 <RCCEx_PLL2_Config>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008f8e:	e010      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f94:	332c      	adds	r3, #44	@ 0x2c
 8008f96:	4618      	mov	r0, r3
 8008f98:	f002 fc66 	bl	800b868 <RCCEx_PLL3_Config>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008fa2:	e006      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8008faa:	e002      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8008fac:	bf00      	nop
 8008fae:	e000      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8008fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10d      	bne.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008fba:	4b79      	ldr	r3, [pc, #484]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008fc0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008fcc:	4a74      	ldr	r2, [pc, #464]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fce:	430b      	orrs	r3, r1
 8008fd0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008fd4:	e003      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8008fda:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008fea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fec:	2300      	movs	r3, #0
 8008fee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ff0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	d046      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ffe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009002:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009006:	d028      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009008:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800900c:	d821      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800900e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009012:	d022      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009014:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009018:	d81b      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800901a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800901e:	d01c      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009020:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009024:	d815      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8009026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800902a:	d008      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800902c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009030:	d80f      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d011      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8009036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800903a:	d00e      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800903c:	e009      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800903e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009042:	3308      	adds	r3, #8
 8009044:	4618      	mov	r0, r3
 8009046:	f002 fb77 	bl	800b738 <RCCEx_PLL2_Config>
 800904a:	4603      	mov	r3, r0
 800904c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8009050:	e004      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8009058:	e000      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800905a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800905c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10d      	bne.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009064:	4b4e      	ldr	r3, [pc, #312]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800906a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800906e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009072:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009076:	4a4a      	ldr	r2, [pc, #296]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009078:	430b      	orrs	r3, r1
 800907a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800907e:	e003      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009080:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009084:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009094:	673b      	str	r3, [r7, #112]	@ 0x70
 8009096:	2300      	movs	r3, #0
 8009098:	677b      	str	r3, [r7, #116]	@ 0x74
 800909a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800909e:	460b      	mov	r3, r1
 80090a0:	4313      	orrs	r3, r2
 80090a2:	d03f      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80090a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d81e      	bhi.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80090b0:	a201      	add	r2, pc, #4	@ (adr r2, 80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b6:	bf00      	nop
 80090b8:	080090f7 	.word	0x080090f7
 80090bc:	080090cd 	.word	0x080090cd
 80090c0:	080090db 	.word	0x080090db
 80090c4:	080090f7 	.word	0x080090f7
 80090c8:	080090f7 	.word	0x080090f7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80090cc:	4b34      	ldr	r3, [pc, #208]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d0:	4a33      	ldr	r2, [pc, #204]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090d6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80090d8:	e00e      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090de:	332c      	adds	r3, #44	@ 0x2c
 80090e0:	4618      	mov	r0, r3
 80090e2:	f002 fbc1 	bl	800b868 <RCCEx_PLL3_Config>
 80090e6:	4603      	mov	r3, r0
 80090e8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80090ec:	e004      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80090f4:	e000      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80090f6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80090f8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10d      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009100:	4b27      	ldr	r3, [pc, #156]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009102:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009106:	f023 0107 	bic.w	r1, r3, #7
 800910a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800910e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009112:	4a23      	ldr	r2, [pc, #140]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009114:	430b      	orrs	r3, r1
 8009116:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800911a:	e003      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009120:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009130:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009132:	2300      	movs	r3, #0
 8009134:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009136:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800913a:	460b      	mov	r3, r1
 800913c:	4313      	orrs	r3, r2
 800913e:	d04c      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009144:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009148:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800914c:	d02a      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800914e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009152:	d821      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8009154:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009158:	d026      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800915a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800915e:	d81b      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8009160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009164:	d00e      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8009166:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800916a:	d815      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01d      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8009170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009174:	d110      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009176:	4b0a      	ldr	r3, [pc, #40]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917a:	4a09      	ldr	r2, [pc, #36]	@ (80091a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800917c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009180:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009182:	e014      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009188:	332c      	adds	r3, #44	@ 0x2c
 800918a:	4618      	mov	r0, r3
 800918c:	f002 fb6c 	bl	800b868 <RCCEx_PLL3_Config>
 8009190:	4603      	mov	r3, r0
 8009192:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8009196:	e00a      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800919e:	e006      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80091a0:	46020c00 	.word	0x46020c00
        break;
 80091a4:	bf00      	nop
 80091a6:	e002      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80091a8:	bf00      	nop
 80091aa:	e000      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80091ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80091ae:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10d      	bne.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80091b6:	4baf      	ldr	r3, [pc, #700]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80091b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80091c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80091c8:	4aaa      	ldr	r2, [pc, #680]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80091ca:	430b      	orrs	r3, r1
 80091cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80091d0:	e003      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80091d6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80091e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80091e8:	2300      	movs	r3, #0
 80091ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80091ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80091f0:	460b      	mov	r3, r1
 80091f2:	4313      	orrs	r3, r2
 80091f4:	f000 80b5 	beq.w	8009362 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091f8:	2300      	movs	r3, #0
 80091fa:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091fe:	4b9d      	ldr	r3, [pc, #628]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b00      	cmp	r3, #0
 800920a:	d113      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800920c:	4b99      	ldr	r3, [pc, #612]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800920e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009212:	4a98      	ldr	r2, [pc, #608]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009214:	f043 0304 	orr.w	r3, r3, #4
 8009218:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800921c:	4b95      	ldr	r3, [pc, #596]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800921e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800922a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 800922e:	2301      	movs	r3, #1
 8009230:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009234:	4b90      	ldr	r3, [pc, #576]	@ (8009478 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009238:	4a8f      	ldr	r2, [pc, #572]	@ (8009478 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800923a:	f043 0301 	orr.w	r3, r3, #1
 800923e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009240:	f7fc fcfe 	bl	8005c40 <HAL_GetTick>
 8009244:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009248:	e00b      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800924a:	f7fc fcf9 	bl	8005c40 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b02      	cmp	r3, #2
 8009258:	d903      	bls.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8009260:	e005      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009262:	4b85      	ldr	r3, [pc, #532]	@ (8009478 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8009264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0ed      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 800926e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009272:	2b00      	cmp	r3, #0
 8009274:	d165      	bne.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009276:	4b7f      	ldr	r3, [pc, #508]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800927c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009280:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009288:	2b00      	cmp	r3, #0
 800928a:	d023      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x800>
 800928c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009290:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8009294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009298:	4293      	cmp	r3, r2
 800929a:	d01b      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800929c:	4b75      	ldr	r3, [pc, #468]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800929e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092aa:	4b72      	ldr	r3, [pc, #456]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80092ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092b0:	4a70      	ldr	r2, [pc, #448]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80092b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092ba:	4b6e      	ldr	r3, [pc, #440]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80092bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092c0:	4a6c      	ldr	r2, [pc, #432]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80092c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092ca:	4a6a      	ldr	r2, [pc, #424]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80092cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d019      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092e0:	f7fc fcae 	bl	8005c40 <HAL_GetTick>
 80092e4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092e8:	e00d      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ea:	f7fc fca9 	bl	8005c40 <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f4:	1ad2      	subs	r2, r2, r3
 80092f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d903      	bls.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8009304:	e006      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009306:	4b5b      	ldr	r3, [pc, #364]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800930c:	f003 0302 	and.w	r3, r3, #2
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0ea      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8009314:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10d      	bne.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800931c:	4b55      	ldr	r3, [pc, #340]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800931e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009322:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800932a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800932e:	4a51      	ldr	r2, [pc, #324]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009330:	430b      	orrs	r3, r1
 8009332:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009336:	e008      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009338:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800933c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8009340:	e003      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009342:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009346:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800934a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800934e:	2b01      	cmp	r3, #1
 8009350:	d107      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009352:	4b48      	ldr	r3, [pc, #288]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8009354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009358:	4a46      	ldr	r2, [pc, #280]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800935a:	f023 0304 	bic.w	r3, r3, #4
 800935e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8009362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800936e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009370:	2300      	movs	r3, #0
 8009372:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009374:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009378:	460b      	mov	r3, r1
 800937a:	4313      	orrs	r3, r2
 800937c:	d042      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800937e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009382:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009386:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800938a:	d022      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800938c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009390:	d81b      	bhi.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009392:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009396:	d011      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8009398:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800939c:	d815      	bhi.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d019      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x902>
 80093a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093a6:	d110      	bne.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80093a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ac:	3308      	adds	r3, #8
 80093ae:	4618      	mov	r0, r3
 80093b0:	f002 f9c2 	bl	800b738 <RCCEx_PLL2_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80093ba:	e00d      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093bc:	4b2d      	ldr	r3, [pc, #180]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c0:	4a2c      	ldr	r2, [pc, #176]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80093c8:	e006      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80093d0:	e002      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80093d2:	bf00      	nop
 80093d4:	e000      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80093d6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80093d8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10d      	bne.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80093e0:	4b24      	ldr	r3, [pc, #144]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80093ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80093f2:	4a20      	ldr	r2, [pc, #128]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80093f4:	430b      	orrs	r3, r1
 80093f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80093fa:	e003      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093fc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009400:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009410:	653b      	str	r3, [r7, #80]	@ 0x50
 8009412:	2300      	movs	r3, #0
 8009414:	657b      	str	r3, [r7, #84]	@ 0x54
 8009416:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800941a:	460b      	mov	r3, r1
 800941c:	4313      	orrs	r3, r2
 800941e:	d031      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800942c:	d00b      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800942e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009432:	d804      	bhi.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009434:	2b00      	cmp	r3, #0
 8009436:	d008      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800943c:	d007      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8009444:	e004      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8009446:	bf00      	nop
 8009448:	e002      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800944a:	bf00      	nop
 800944c:	e000      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800944e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009450:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009454:	2b00      	cmp	r3, #0
 8009456:	d111      	bne.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009458:	4b06      	ldr	r3, [pc, #24]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800945a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800945e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800946a:	4a02      	ldr	r2, [pc, #8]	@ (8009474 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800946c:	430b      	orrs	r3, r1
 800946e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009472:	e007      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8009474:	46020c00 	.word	0x46020c00
 8009478:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800947c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009480:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009492:	2300      	movs	r3, #0
 8009494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009496:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800949a:	460b      	mov	r3, r1
 800949c:	4313      	orrs	r3, r2
 800949e:	d00c      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80094a0:	4bb2      	ldr	r3, [pc, #712]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80094a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094a6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80094aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80094b2:	4aae      	ldr	r2, [pc, #696]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80094b4:	430b      	orrs	r3, r1
 80094b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80094ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80094c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80094c8:	2300      	movs	r3, #0
 80094ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80094cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80094d0:	460b      	mov	r3, r1
 80094d2:	4313      	orrs	r3, r2
 80094d4:	d019      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80094d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094e2:	d105      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094e4:	4ba1      	ldr	r3, [pc, #644]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80094e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e8:	4aa0      	ldr	r2, [pc, #640]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80094ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094ee:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80094f0:	4b9e      	ldr	r3, [pc, #632]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80094f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094f6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80094fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009502:	4a9a      	ldr	r2, [pc, #616]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009504:	430b      	orrs	r3, r1
 8009506:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800950a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009516:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009518:	2300      	movs	r3, #0
 800951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800951c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009520:	460b      	mov	r3, r1
 8009522:	4313      	orrs	r3, r2
 8009524:	d00c      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009526:	4b91      	ldr	r3, [pc, #580]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800952c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009534:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009538:	4a8c      	ldr	r2, [pc, #560]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800953a:	430b      	orrs	r3, r1
 800953c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800954c:	633b      	str	r3, [r7, #48]	@ 0x30
 800954e:	2300      	movs	r3, #0
 8009550:	637b      	str	r3, [r7, #52]	@ 0x34
 8009552:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009556:	460b      	mov	r3, r1
 8009558:	4313      	orrs	r3, r2
 800955a:	d00c      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800955c:	4b83      	ldr	r3, [pc, #524]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800955e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009562:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800956a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800956e:	4a7f      	ldr	r2, [pc, #508]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009570:	430b      	orrs	r3, r1
 8009572:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009584:	2300      	movs	r3, #0
 8009586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009588:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800958c:	460b      	mov	r3, r1
 800958e:	4313      	orrs	r3, r2
 8009590:	d00c      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009592:	4b76      	ldr	r3, [pc, #472]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009594:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009598:	f023 0218 	bic.w	r2, r3, #24
 800959c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095a0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80095a4:	4971      	ldr	r1, [pc, #452]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80095ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80095b8:	623b      	str	r3, [r7, #32]
 80095ba:	2300      	movs	r3, #0
 80095bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80095be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80095c2:	460b      	mov	r3, r1
 80095c4:	4313      	orrs	r3, r2
 80095c6:	d032      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80095c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80095d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80095d4:	d105      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095d6:	4b65      	ldr	r3, [pc, #404]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80095d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095da:	4a64      	ldr	r2, [pc, #400]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80095dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095e0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80095e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80095ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80095ee:	d108      	bne.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80095f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095f4:	3308      	adds	r3, #8
 80095f6:	4618      	mov	r0, r3
 80095f8:	f002 f89e 	bl	800b738 <RCCEx_PLL2_Config>
 80095fc:	4603      	mov	r3, r0
 80095fe:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8009602:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10d      	bne.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800960a:	4b58      	ldr	r3, [pc, #352]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800960c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009610:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009618:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800961c:	4953      	ldr	r1, [pc, #332]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800961e:	4313      	orrs	r3, r2
 8009620:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009624:	e003      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009626:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800962a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800962e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009636:	2100      	movs	r1, #0
 8009638:	61b9      	str	r1, [r7, #24]
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009644:	460b      	mov	r3, r1
 8009646:	4313      	orrs	r3, r2
 8009648:	d04a      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800964a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800964e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009652:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009656:	d01e      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8009658:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800965c:	d825      	bhi.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800965e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009662:	d00e      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8009664:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009668:	d81f      	bhi.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800966a:	2b00      	cmp	r3, #0
 800966c:	d021      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800966e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009672:	d11a      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009674:	4b3d      	ldr	r3, [pc, #244]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009678:	4a3c      	ldr	r2, [pc, #240]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800967a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800967e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009680:	e018      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009686:	3308      	adds	r3, #8
 8009688:	4618      	mov	r0, r3
 800968a:	f002 f855 	bl	800b738 <RCCEx_PLL2_Config>
 800968e:	4603      	mov	r3, r0
 8009690:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009694:	e00e      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800969a:	332c      	adds	r3, #44	@ 0x2c
 800969c:	4618      	mov	r0, r3
 800969e:	f002 f8e3 	bl	800b868 <RCCEx_PLL3_Config>
 80096a2:	4603      	mov	r3, r0
 80096a4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80096a8:	e004      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80096b0:	e000      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 80096b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096b4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10d      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80096bc:	4b2b      	ldr	r3, [pc, #172]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80096be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80096c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80096c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80096ce:	4927      	ldr	r1, [pc, #156]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80096d6:	e003      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80096dc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80096e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80096ec:	613b      	str	r3, [r7, #16]
 80096ee:	2300      	movs	r3, #0
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80096f6:	460b      	mov	r3, r1
 80096f8:	4313      	orrs	r3, r2
 80096fa:	d03d      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80096fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009704:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009708:	d00e      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800970a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800970e:	d815      	bhi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009710:	2b00      	cmp	r3, #0
 8009712:	d017      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009718:	d110      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800971a:	4b14      	ldr	r3, [pc, #80]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800971c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800971e:	4a13      	ldr	r2, [pc, #76]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009724:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009726:	e00e      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800972c:	3308      	adds	r3, #8
 800972e:	4618      	mov	r0, r3
 8009730:	f002 f802 	bl	800b738 <RCCEx_PLL2_Config>
 8009734:	4603      	mov	r3, r0
 8009736:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800973a:	e004      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8009742:	e000      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8009744:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009746:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800974a:	2b00      	cmp	r3, #0
 800974c:	d110      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800974e:	4b07      	ldr	r3, [pc, #28]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009754:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800975c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009760:	4902      	ldr	r1, [pc, #8]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8009762:	4313      	orrs	r3, r2
 8009764:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009768:	e006      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 800976a:	bf00      	nop
 800976c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009770:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009774:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009784:	60bb      	str	r3, [r7, #8]
 8009786:	2300      	movs	r3, #0
 8009788:	60fb      	str	r3, [r7, #12]
 800978a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800978e:	460b      	mov	r3, r1
 8009790:	4313      	orrs	r3, r2
 8009792:	d00c      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009794:	4b2c      	ldr	r3, [pc, #176]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8009796:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800979a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800979e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80097a6:	4928      	ldr	r1, [pc, #160]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80097ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	2100      	movs	r1, #0
 80097b8:	6039      	str	r1, [r7, #0]
 80097ba:	f003 0308 	and.w	r3, r3, #8
 80097be:	607b      	str	r3, [r7, #4]
 80097c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80097c4:	460b      	mov	r3, r1
 80097c6:	4313      	orrs	r3, r2
 80097c8:	d036      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80097ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80097d2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80097d6:	d00d      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80097d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80097dc:	d811      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80097de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097e2:	d012      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80097e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097e8:	d80b      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00d      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80097ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f2:	d106      	bne.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80097f4:	4b14      	ldr	r3, [pc, #80]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80097f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f8:	4a13      	ldr	r2, [pc, #76]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80097fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097fe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8009800:	e004      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8009808:	e000      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 800980a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800980c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10d      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8009814:	4b0c      	ldr	r3, [pc, #48]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8009816:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800981a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800981e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009822:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009826:	4908      	ldr	r1, [pc, #32]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8009828:	4313      	orrs	r3, r2
 800982a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800982e:	e003      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009830:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8009834:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009838:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 800983c:	4618      	mov	r0, r3
 800983e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8009842:	46bd      	mov	sp, r7
 8009844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009848:	46020c00 	.word	0x46020c00

0800984c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800984c:	b480      	push	{r7}
 800984e:	b089      	sub	sp, #36	@ 0x24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009854:	4ba6      	ldr	r3, [pc, #664]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800985e:	4ba4      	ldr	r3, [pc, #656]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009868:	4ba1      	ldr	r3, [pc, #644]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800986a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986c:	0a1b      	lsrs	r3, r3, #8
 800986e:	f003 030f 	and.w	r3, r3, #15
 8009872:	3301      	adds	r3, #1
 8009874:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009876:	4b9e      	ldr	r3, [pc, #632]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800987a:	091b      	lsrs	r3, r3, #4
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009882:	4b9b      	ldr	r3, [pc, #620]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009886:	08db      	lsrs	r3, r3, #3
 8009888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	fb02 f303 	mul.w	r3, r2, r3
 8009892:	ee07 3a90 	vmov	s15, r3
 8009896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d062      	beq.n	800996a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	f200 8081 	bhi.w	80099ae <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d024      	beq.n	80098fc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d17a      	bne.n	80099ae <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009af4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80098c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ca:	4b89      	ldr	r3, [pc, #548]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80098cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80098da:	ed97 6a02 	vldr	s12, [r7, #8]
 80098de:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009af8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80098e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80098e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80098ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80098f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098fa:	e08f      	b.n	8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80098fc:	4b7c      	ldr	r3, [pc, #496]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d005      	beq.n	8009914 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009908:	4b79      	ldr	r3, [pc, #484]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	0f1b      	lsrs	r3, r3, #28
 800990e:	f003 030f 	and.w	r3, r3, #15
 8009912:	e006      	b.n	8009922 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009914:	4b76      	ldr	r3, [pc, #472]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800991a:	041b      	lsls	r3, r3, #16
 800991c:	0f1b      	lsrs	r3, r3, #28
 800991e:	f003 030f 	and.w	r3, r3, #15
 8009922:	4a76      	ldr	r2, [pc, #472]	@ (8009afc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009928:	ee07 3a90 	vmov	s15, r3
 800992c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	ee07 3a90 	vmov	s15, r3
 8009944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009948:	ed97 6a02 	vldr	s12, [r7, #8]
 800994c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009af8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009950:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009954:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009958:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800995c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009964:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009968:	e058      	b.n	8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	ee07 3a90 	vmov	s15, r3
 8009970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009974:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8009b00 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8009978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800997c:	4b5c      	ldr	r3, [pc, #368]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800997e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009984:	ee07 3a90 	vmov	s15, r3
 8009988:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800998c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009990:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009af8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009994:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009998:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800999c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80099a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ac:	e036      	b.n	8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80099ae:	4b50      	ldr	r3, [pc, #320]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d005      	beq.n	80099c6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80099ba:	4b4d      	ldr	r3, [pc, #308]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	0f1b      	lsrs	r3, r3, #28
 80099c0:	f003 030f 	and.w	r3, r3, #15
 80099c4:	e006      	b.n	80099d4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80099c6:	4b4a      	ldr	r3, [pc, #296]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80099c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099cc:	041b      	lsls	r3, r3, #16
 80099ce:	0f1b      	lsrs	r3, r3, #28
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	4a49      	ldr	r2, [pc, #292]	@ (8009afc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80099d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	ee07 3a90 	vmov	s15, r3
 80099e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80099fe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009af8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a1a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009a1c:	4b34      	ldr	r3, [pc, #208]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d017      	beq.n	8009a58 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a28:	4b31      	ldr	r3, [pc, #196]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a2c:	0a5b      	lsrs	r3, r3, #9
 8009a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8009a3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a4e:	ee17 2a90 	vmov	r2, s15
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	601a      	str	r2, [r3, #0]
 8009a56:	e002      	b.n	8009a5e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009a5e:	4b24      	ldr	r3, [pc, #144]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d017      	beq.n	8009a9a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a6a:	4b21      	ldr	r3, [pc, #132]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a6e:	0c1b      	lsrs	r3, r3, #16
 8009a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a74:	ee07 3a90 	vmov	s15, r3
 8009a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009a7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a80:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a90:	ee17 2a90 	vmov	r2, s15
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	605a      	str	r2, [r3, #4]
 8009a98:	e002      	b.n	8009aa0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009aa0:	4b13      	ldr	r3, [pc, #76]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d017      	beq.n	8009adc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009aac:	4b10      	ldr	r3, [pc, #64]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ab0:	0e1b      	lsrs	r3, r3, #24
 8009ab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab6:	ee07 3a90 	vmov	s15, r3
 8009aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009abe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ad2:	ee17 2a90 	vmov	r2, s15
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009ada:	e002      	b.n	8009ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	609a      	str	r2, [r3, #8]
}
 8009ae2:	bf00      	nop
 8009ae4:	3724      	adds	r7, #36	@ 0x24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	46020c00 	.word	0x46020c00
 8009af4:	4b742400 	.word	0x4b742400
 8009af8:	46000000 	.word	0x46000000
 8009afc:	08013b4c 	.word	0x08013b4c
 8009b00:	4af42400 	.word	0x4af42400

08009b04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b089      	sub	sp, #36	@ 0x24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009b0c:	4ba6      	ldr	r3, [pc, #664]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b14:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009b16:	4ba4      	ldr	r3, [pc, #656]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1a:	f003 0303 	and.w	r3, r3, #3
 8009b1e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009b20:	4ba1      	ldr	r3, [pc, #644]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b24:	0a1b      	lsrs	r3, r3, #8
 8009b26:	f003 030f 	and.w	r3, r3, #15
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009b2e:	4b9e      	ldr	r3, [pc, #632]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b32:	091b      	lsrs	r3, r3, #4
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009b3a:	4b9b      	ldr	r3, [pc, #620]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b3e:	08db      	lsrs	r3, r3, #3
 8009b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	fb02 f303 	mul.w	r3, r2, r3
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b52:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2b03      	cmp	r3, #3
 8009b5a:	d062      	beq.n	8009c22 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	2b03      	cmp	r3, #3
 8009b60:	f200 8081 	bhi.w	8009c66 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d024      	beq.n	8009bb4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d17a      	bne.n	8009c66 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b82:	4b89      	ldr	r3, [pc, #548]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b96:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bb2:	e08f      	b.n	8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009bb4:	4b7c      	ldr	r3, [pc, #496]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d005      	beq.n	8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009bc0:	4b79      	ldr	r3, [pc, #484]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	0f1b      	lsrs	r3, r3, #28
 8009bc6:	f003 030f 	and.w	r3, r3, #15
 8009bca:	e006      	b.n	8009bda <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009bcc:	4b76      	ldr	r3, [pc, #472]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009bd2:	041b      	lsls	r3, r3, #16
 8009bd4:	0f1b      	lsrs	r3, r3, #28
 8009bd6:	f003 030f 	and.w	r3, r3, #15
 8009bda:	4a76      	ldr	r2, [pc, #472]	@ (8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009be0:	ee07 3a90 	vmov	s15, r3
 8009be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	ee07 3a90 	vmov	s15, r3
 8009bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	ee07 3a90 	vmov	s15, r3
 8009bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c00:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c04:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c20:	e058      	b.n	8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	ee07 3a90 	vmov	s15, r3
 8009c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2c:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8009db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8009c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c34:	4b5c      	ldr	r3, [pc, #368]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3c:	ee07 3a90 	vmov	s15, r3
 8009c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c44:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c48:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c64:	e036      	b.n	8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009c66:	4b50      	ldr	r3, [pc, #320]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d005      	beq.n	8009c7e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8009c72:	4b4d      	ldr	r3, [pc, #308]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	0f1b      	lsrs	r3, r3, #28
 8009c78:	f003 030f 	and.w	r3, r3, #15
 8009c7c:	e006      	b.n	8009c8c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8009c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c84:	041b      	lsls	r3, r3, #16
 8009c86:	0f1b      	lsrs	r3, r3, #28
 8009c88:	f003 030f 	and.w	r3, r3, #15
 8009c8c:	4a49      	ldr	r2, [pc, #292]	@ (8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	ee07 3a90 	vmov	s15, r3
 8009ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cb6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cd2:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009cd4:	4b34      	ldr	r3, [pc, #208]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d017      	beq.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009ce0:	4b31      	ldr	r3, [pc, #196]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ce4:	0a5b      	lsrs	r3, r3, #9
 8009ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009cf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d06:	ee17 2a90 	vmov	r2, s15
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	601a      	str	r2, [r3, #0]
 8009d0e:	e002      	b.n	8009d16 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009d16:	4b24      	ldr	r3, [pc, #144]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d017      	beq.n	8009d52 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d22:	4b21      	ldr	r3, [pc, #132]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d26:	0c1b      	lsrs	r3, r3, #16
 8009d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d2c:	ee07 3a90 	vmov	s15, r3
 8009d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009d34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d38:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d48:	ee17 2a90 	vmov	r2, s15
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	605a      	str	r2, [r3, #4]
 8009d50:	e002      	b.n	8009d58 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009d58:	4b13      	ldr	r3, [pc, #76]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d017      	beq.n	8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d64:	4b10      	ldr	r3, [pc, #64]	@ (8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d68:	0e1b      	lsrs	r3, r3, #24
 8009d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d6e:	ee07 3a90 	vmov	s15, r3
 8009d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d8a:	ee17 2a90 	vmov	r2, s15
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d92:	e002      	b.n	8009d9a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	609a      	str	r2, [r3, #8]
}
 8009d9a:	bf00      	nop
 8009d9c:	3724      	adds	r7, #36	@ 0x24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	46020c00 	.word	0x46020c00
 8009dac:	4b742400 	.word	0x4b742400
 8009db0:	46000000 	.word	0x46000000
 8009db4:	08013b4c 	.word	0x08013b4c
 8009db8:	4af42400 	.word	0x4af42400

08009dbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b089      	sub	sp, #36	@ 0x24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009dc4:	4ba6      	ldr	r3, [pc, #664]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dcc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009dce:	4ba4      	ldr	r3, [pc, #656]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009dd8:	4ba1      	ldr	r3, [pc, #644]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ddc:	0a1b      	lsrs	r3, r3, #8
 8009dde:	f003 030f 	and.w	r3, r3, #15
 8009de2:	3301      	adds	r3, #1
 8009de4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009de6:	4b9e      	ldr	r3, [pc, #632]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dea:	091b      	lsrs	r3, r3, #4
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009df2:	4b9b      	ldr	r3, [pc, #620]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009df6:	08db      	lsrs	r3, r3, #3
 8009df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	fb02 f303 	mul.w	r3, r2, r3
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d062      	beq.n	8009eda <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	f200 8081 	bhi.w	8009f1e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d024      	beq.n	8009e6c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d17a      	bne.n	8009f1e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e32:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e3a:	4b89      	ldr	r3, [pc, #548]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e4e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e66:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8009e6a:	e08f      	b.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009e6c:	4b7c      	ldr	r3, [pc, #496]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d005      	beq.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009e78:	4b79      	ldr	r3, [pc, #484]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	0f1b      	lsrs	r3, r3, #28
 8009e7e:	f003 030f 	and.w	r3, r3, #15
 8009e82:	e006      	b.n	8009e92 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8009e84:	4b76      	ldr	r3, [pc, #472]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e8a:	041b      	lsls	r3, r3, #16
 8009e8c:	0f1b      	lsrs	r3, r3, #28
 8009e8e:	f003 030f 	and.w	r3, r3, #15
 8009e92:	4a76      	ldr	r2, [pc, #472]	@ (800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e98:	ee07 3a90 	vmov	s15, r3
 8009e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	ee07 3a90 	vmov	s15, r3
 8009eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ebc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ed8:	e058      	b.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	ee07 3a90 	vmov	s15, r3
 8009ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee4:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800a070 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8009ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eec:	4b5c      	ldr	r3, [pc, #368]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef4:	ee07 3a90 	vmov	s15, r3
 8009ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009efc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f00:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f1c:	e036      	b.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009f1e:	4b50      	ldr	r3, [pc, #320]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d005      	beq.n	8009f36 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8009f2a:	4b4d      	ldr	r3, [pc, #308]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	0f1b      	lsrs	r3, r3, #28
 8009f30:	f003 030f 	and.w	r3, r3, #15
 8009f34:	e006      	b.n	8009f44 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8009f36:	4b4a      	ldr	r3, [pc, #296]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009f3c:	041b      	lsls	r3, r3, #16
 8009f3e:	0f1b      	lsrs	r3, r3, #28
 8009f40:	f003 030f 	and.w	r3, r3, #15
 8009f44:	4a49      	ldr	r2, [pc, #292]	@ (800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8009f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	ee07 3a90 	vmov	s15, r3
 8009f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	ee07 3a90 	vmov	s15, r3
 8009f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f6e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f8a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009f8c:	4b34      	ldr	r3, [pc, #208]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d017      	beq.n	8009fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009f98:	4b31      	ldr	r3, [pc, #196]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f9c:	0a5b      	lsrs	r3, r3, #9
 8009f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8009faa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fbe:	ee17 2a90 	vmov	r2, s15
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	e002      	b.n	8009fce <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009fce:	4b24      	ldr	r3, [pc, #144]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d017      	beq.n	800a00a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009fda:	4b21      	ldr	r3, [pc, #132]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fde:	0c1b      	lsrs	r3, r3, #16
 8009fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fe4:	ee07 3a90 	vmov	s15, r3
 8009fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009fec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a000:	ee17 2a90 	vmov	r2, s15
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	605a      	str	r2, [r3, #4]
 800a008:	e002      	b.n	800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a010:	4b13      	ldr	r3, [pc, #76]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d017      	beq.n	800a04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a01c:	4b10      	ldr	r3, [pc, #64]	@ (800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a01e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a020:	0e1b      	lsrs	r3, r3, #24
 800a022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a026:	ee07 3a90 	vmov	s15, r3
 800a02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a02e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a032:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a036:	edd7 6a07 	vldr	s13, [r7, #28]
 800a03a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a03e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a042:	ee17 2a90 	vmov	r2, s15
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a04a:	e002      	b.n	800a052 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	609a      	str	r2, [r3, #8]
}
 800a052:	bf00      	nop
 800a054:	3724      	adds	r7, #36	@ 0x24
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	46020c00 	.word	0x46020c00
 800a064:	4b742400 	.word	0x4b742400
 800a068:	46000000 	.word	0x46000000
 800a06c:	08013b4c 	.word	0x08013b4c
 800a070:	4af42400 	.word	0x4af42400

0800a074 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08e      	sub	sp, #56	@ 0x38
 800a078:	af00      	add	r7, sp, #0
 800a07a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a07e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a082:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800a086:	430b      	orrs	r3, r1
 800a088:	d145      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a08a:	4ba7      	ldr	r3, [pc, #668]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a08c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a094:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a096:	4ba4      	ldr	r3, [pc, #656]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a09c:	f003 0302 	and.w	r3, r3, #2
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d108      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0aa:	d104      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a0ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b2:	f001 bb35 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a0b6:	4b9c      	ldr	r3, [pc, #624]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a0b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0c4:	d114      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0cc:	d110      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a0ce:	4b96      	ldr	r3, [pc, #600]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a0d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0dc:	d103      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a0de:	23fa      	movs	r3, #250	@ 0xfa
 800a0e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a0e2:	f001 bb1d 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800a0e6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a0ea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a0ec:	f001 bb18 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a0f0:	4b8d      	ldr	r3, [pc, #564]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0fc:	d107      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a100:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a104:	d103      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a106:	4b89      	ldr	r3, [pc, #548]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a108:	637b      	str	r3, [r7, #52]	@ 0x34
 800a10a:	f001 bb09 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	637b      	str	r3, [r7, #52]	@ 0x34
 800a112:	f001 bb05 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a11a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a11e:	430b      	orrs	r3, r1
 800a120:	d151      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a122:	4b81      	ldr	r3, [pc, #516]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a124:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a128:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a12c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a130:	2b80      	cmp	r3, #128	@ 0x80
 800a132:	d035      	beq.n	800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a136:	2b80      	cmp	r3, #128	@ 0x80
 800a138:	d841      	bhi.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13c:	2b60      	cmp	r3, #96	@ 0x60
 800a13e:	d02a      	beq.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a142:	2b60      	cmp	r3, #96	@ 0x60
 800a144:	d83b      	bhi.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a148:	2b40      	cmp	r3, #64	@ 0x40
 800a14a:	d009      	beq.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14e:	2b40      	cmp	r3, #64	@ 0x40
 800a150:	d835      	bhi.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00c      	beq.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15a:	2b20      	cmp	r3, #32
 800a15c:	d012      	beq.n	800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a15e:	e02e      	b.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a164:	4618      	mov	r0, r3
 800a166:	f7ff fb71 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a16e:	f001 bad7 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a172:	f107 0318 	add.w	r3, r7, #24
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff fcc4 	bl	8009b04 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a180:	f001 bace 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a184:	f107 030c 	add.w	r3, r7, #12
 800a188:	4618      	mov	r0, r3
 800a18a:	f7ff fe17 	bl	8009dbc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a192:	f001 bac5 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a196:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a19a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a19c:	f001 bac0 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a1a0:	4b61      	ldr	r3, [pc, #388]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1ac:	d103      	bne.n	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a1ae:	4b60      	ldr	r3, [pc, #384]	@ (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a1b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a1b2:	f001 bab5 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1ba:	f001 bab1 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1c2:	f001 baad 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ca:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a1ce:	430b      	orrs	r3, r1
 800a1d0:	d158      	bne.n	800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a1d2:	4b55      	ldr	r3, [pc, #340]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a1d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a1d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a1dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1e4:	d03b      	beq.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1ec:	d846      	bhi.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1f4:	d02e      	beq.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1fc:	d83e      	bhi.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a204:	d00b      	beq.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a20c:	d836      	bhi.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00d      	beq.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a21a:	d012      	beq.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a21c:	e02e      	b.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a21e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff fb12 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a22c:	f001 ba78 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a230:	f107 0318 	add.w	r3, r7, #24
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff fc65 	bl	8009b04 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a23e:	f001 ba6f 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a242:	f107 030c 	add.w	r3, r7, #12
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff fdb8 	bl	8009dbc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a250:	f001 ba66 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a254:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a258:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a25a:	f001 ba61 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a25e:	4b32      	ldr	r3, [pc, #200]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a26a:	d103      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a26c:	4b30      	ldr	r3, [pc, #192]	@ (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a26e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a270:	f001 ba56 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a278:	f001 ba52 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a280:	f001 ba4e 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800a284:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a288:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a28c:	430b      	orrs	r3, r1
 800a28e:	d126      	bne.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800a290:	4b25      	ldr	r3, [pc, #148]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a292:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a29a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800a29c:	4b22      	ldr	r3, [pc, #136]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2a8:	d106      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d103      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a2b0:	4b1f      	ldr	r3, [pc, #124]	@ (800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a2b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b4:	f001 ba34 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a2b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2c4:	d107      	bne.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2cc:	d103      	bne.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a2ce:	4b19      	ldr	r3, [pc, #100]	@ (800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a2d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d2:	f001 ba25 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2da:	f001 ba21 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a2de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2e2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	d16e      	bne.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a2ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a2ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a2f0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a2f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a2fc:	d03d      	beq.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a300:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a304:	d85c      	bhi.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a30c:	d014      	beq.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a314:	d854      	bhi.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d01f      	beq.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a322:	d012      	beq.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a324:	e04c      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a326:	bf00      	nop
 800a328:	46020c00 	.word	0x46020c00
 800a32c:	0003d090 	.word	0x0003d090
 800a330:	00f42400 	.word	0x00f42400
 800a334:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff fa85 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a346:	f001 b9eb 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a34a:	f107 0318 	add.w	r3, r7, #24
 800a34e:	4618      	mov	r0, r3
 800a350:	f7ff fbd8 	bl	8009b04 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a358:	f001 b9e2 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a35c:	4ba7      	ldr	r3, [pc, #668]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a368:	d103      	bne.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800a36a:	4ba5      	ldr	r3, [pc, #660]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a36e:	f001 b9d7 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800a372:	2300      	movs	r3, #0
 800a374:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a376:	f001 b9d3 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a37a:	4ba0      	ldr	r3, [pc, #640]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0320 	and.w	r3, r3, #32
 800a382:	2b20      	cmp	r3, #32
 800a384:	d118      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a386:	4b9d      	ldr	r3, [pc, #628]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d005      	beq.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a392:	4b9a      	ldr	r3, [pc, #616]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	0e1b      	lsrs	r3, r3, #24
 800a398:	f003 030f 	and.w	r3, r3, #15
 800a39c:	e006      	b.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a39e:	4b97      	ldr	r3, [pc, #604]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a3a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a3a4:	041b      	lsls	r3, r3, #16
 800a3a6:	0e1b      	lsrs	r3, r3, #24
 800a3a8:	f003 030f 	and.w	r3, r3, #15
 800a3ac:	4a95      	ldr	r2, [pc, #596]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a3b4:	f001 b9b4 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3bc:	f001 b9b0 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3c4:	f001 b9ac 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a3c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3cc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800a3d0:	430b      	orrs	r3, r1
 800a3d2:	d17f      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a3d4:	4b89      	ldr	r3, [pc, #548]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a3d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a3da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3de:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d165      	bne.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a3e6:	4b85      	ldr	r3, [pc, #532]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a3e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a3ec:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a3f0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a3f8:	d034      	beq.n	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a400:	d853      	bhi.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a408:	d00b      	beq.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800a40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a410:	d84b      	bhi.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a414:	2b00      	cmp	r3, #0
 800a416:	d016      	beq.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800a418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a41e:	d009      	beq.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a420:	e043      	b.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a426:	4618      	mov	r0, r3
 800a428:	f7ff fa10 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a430:	f001 b976 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a434:	f107 0318 	add.w	r3, r7, #24
 800a438:	4618      	mov	r0, r3
 800a43a:	f7ff fb63 	bl	8009b04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a442:	f001 b96d 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a446:	4b6d      	ldr	r3, [pc, #436]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a44e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a452:	d103      	bne.n	800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800a454:	4b6a      	ldr	r3, [pc, #424]	@ (800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a456:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a458:	f001 b962 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 800a45c:	2300      	movs	r3, #0
 800a45e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a460:	f001 b95e 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a464:	4b65      	ldr	r3, [pc, #404]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0320 	and.w	r3, r3, #32
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	d118      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a470:	4b62      	ldr	r3, [pc, #392]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800a47c:	4b5f      	ldr	r3, [pc, #380]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	0e1b      	lsrs	r3, r3, #24
 800a482:	f003 030f 	and.w	r3, r3, #15
 800a486:	e006      	b.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a488:	4b5c      	ldr	r3, [pc, #368]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a48a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a48e:	041b      	lsls	r3, r3, #16
 800a490:	0e1b      	lsrs	r3, r3, #24
 800a492:	f003 030f 	and.w	r3, r3, #15
 800a496:	4a5b      	ldr	r2, [pc, #364]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a49c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a49e:	f001 b93f 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a4a6:	f001 b93b 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a4ae:	f001 b937 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4b8:	d108      	bne.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff f9c4 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4c8:	f001 b92a 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4d0:	f001 b926 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a4d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4d8:	1e51      	subs	r1, r2, #1
 800a4da:	430b      	orrs	r3, r1
 800a4dc:	d136      	bne.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a4de:	4b47      	ldr	r3, [pc, #284]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a4e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a4e4:	f003 0303 	and.w	r3, r3, #3
 800a4e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d104      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a4f0:	f7fe fa42 	bl	8008978 <HAL_RCC_GetPCLK2Freq>
 800a4f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a4f6:	f001 b913 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d104      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a500:	f7fe f906 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800a504:	6378      	str	r0, [r7, #52]	@ 0x34
 800a506:	f001 b90b 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a50a:	4b3c      	ldr	r3, [pc, #240]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a516:	d106      	bne.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d103      	bne.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800a51e:	4b3a      	ldr	r3, [pc, #232]	@ (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a520:	637b      	str	r3, [r7, #52]	@ 0x34
 800a522:	f001 b8fd 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a526:	4b35      	ldr	r3, [pc, #212]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b02      	cmp	r3, #2
 800a532:	d107      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a536:	2b03      	cmp	r3, #3
 800a538:	d104      	bne.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800a53a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a53e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a540:	f001 b8ee 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	637b      	str	r3, [r7, #52]	@ 0x34
 800a548:	f001 b8ea 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a54c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a550:	1e91      	subs	r1, r2, #2
 800a552:	430b      	orrs	r3, r1
 800a554:	d136      	bne.n	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a556:	4b29      	ldr	r3, [pc, #164]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a55c:	f003 030c 	and.w	r3, r3, #12
 800a560:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a564:	2b00      	cmp	r3, #0
 800a566:	d104      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a568:	f7fe f9f2 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800a56c:	6378      	str	r0, [r7, #52]	@ 0x34
 800a56e:	f001 b8d7 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a574:	2b04      	cmp	r3, #4
 800a576:	d104      	bne.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a578:	f7fe f8ca 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800a57c:	6378      	str	r0, [r7, #52]	@ 0x34
 800a57e:	f001 b8cf 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a582:	4b1e      	ldr	r3, [pc, #120]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a58a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a58e:	d106      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	2b08      	cmp	r3, #8
 800a594:	d103      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800a596:	4b1c      	ldr	r3, [pc, #112]	@ (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a598:	637b      	str	r3, [r7, #52]	@ 0x34
 800a59a:	f001 b8c1 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a59e:	4b17      	ldr	r3, [pc, #92]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a5a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5a4:	f003 0302 	and.w	r3, r3, #2
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d107      	bne.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ae:	2b0c      	cmp	r3, #12
 800a5b0:	d104      	bne.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800a5b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5b8:	f001 b8b2 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c0:	f001 b8ae 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a5c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5c8:	1f11      	subs	r1, r2, #4
 800a5ca:	430b      	orrs	r3, r1
 800a5cc:	d13f      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a5ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a5d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a5d8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d104      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a5e0:	f7fe f9b6 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800a5e4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a5e6:	f001 b89b 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	2b10      	cmp	r3, #16
 800a5ee:	d10d      	bne.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a5f0:	f7fe f88e 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800a5f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a5f6:	f001 b893 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800a5fa:	bf00      	nop
 800a5fc:	46020c00 	.word	0x46020c00
 800a600:	02dc6c00 	.word	0x02dc6c00
 800a604:	08013b4c 	.word	0x08013b4c
 800a608:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a60c:	4ba8      	ldr	r3, [pc, #672]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a618:	d106      	bne.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800a61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61c:	2b20      	cmp	r3, #32
 800a61e:	d103      	bne.n	800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800a620:	4ba4      	ldr	r3, [pc, #656]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a622:	637b      	str	r3, [r7, #52]	@ 0x34
 800a624:	f001 b87c 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a628:	4ba1      	ldr	r3, [pc, #644]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a62a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a62e:	f003 0302 	and.w	r3, r3, #2
 800a632:	2b02      	cmp	r3, #2
 800a634:	d107      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a638:	2b30      	cmp	r3, #48	@ 0x30
 800a63a:	d104      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800a63c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a640:	637b      	str	r3, [r7, #52]	@ 0x34
 800a642:	f001 b86d 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	637b      	str	r3, [r7, #52]	@ 0x34
 800a64a:	f001 b869 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800a64e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a652:	f1a2 0108 	sub.w	r1, r2, #8
 800a656:	430b      	orrs	r3, r1
 800a658:	d136      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a65a:	4b95      	ldr	r3, [pc, #596]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a65c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a660:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a664:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d104      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a66c:	f7fe f970 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800a670:	6378      	str	r0, [r7, #52]	@ 0x34
 800a672:	f001 b855 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800a676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a678:	2b40      	cmp	r3, #64	@ 0x40
 800a67a:	d104      	bne.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a67c:	f7fe f848 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800a680:	6378      	str	r0, [r7, #52]	@ 0x34
 800a682:	f001 b84d 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a686:	4b8a      	ldr	r3, [pc, #552]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a68e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a692:	d106      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800a694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a696:	2b80      	cmp	r3, #128	@ 0x80
 800a698:	d103      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800a69a:	4b86      	ldr	r3, [pc, #536]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a69e:	f001 b83f 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a6a2:	4b83      	ldr	r3, [pc, #524]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a6a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d107      	bne.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6b4:	d104      	bne.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800a6b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6bc:	f001 b830 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6c4:	f001 b82c 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a6c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6cc:	f1a2 0110 	sub.w	r1, r2, #16
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	d139      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a6d4:	4b76      	ldr	r3, [pc, #472]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a6d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d104      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a6e6:	f7fe f933 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800a6ea:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6ec:	f001 b818 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6f6:	d104      	bne.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a6f8:	f7fe f80a 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800a6fc:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6fe:	f001 b80f 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a702:	4b6b      	ldr	r3, [pc, #428]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a70a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a70e:	d107      	bne.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a716:	d103      	bne.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a718:	4b66      	ldr	r3, [pc, #408]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a71a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a71c:	f001 b800 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a720:	4b63      	ldr	r3, [pc, #396]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a726:	f003 0302 	and.w	r3, r3, #2
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d108      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a734:	d104      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a73a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a73c:	f000 bff0 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a740:	2300      	movs	r3, #0
 800a742:	637b      	str	r3, [r7, #52]	@ 0x34
 800a744:	f000 bfec 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800a748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a74c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800a750:	430b      	orrs	r3, r1
 800a752:	d139      	bne.n	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a754:	4b56      	ldr	r3, [pc, #344]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a756:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a75a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a75e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a762:	2b00      	cmp	r3, #0
 800a764:	d104      	bne.n	800a770 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a766:	f7fe f8f3 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800a76a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a76c:	f000 bfd8 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800a770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a776:	d104      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a778:	f7fd ffca 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800a77c:	6378      	str	r0, [r7, #52]	@ 0x34
 800a77e:	f000 bfcf 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a782:	4b4b      	ldr	r3, [pc, #300]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a78a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a78e:	d107      	bne.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a796:	d103      	bne.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800a798:	4b46      	ldr	r3, [pc, #280]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a79a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a79c:	f000 bfc0 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a7a0:	4b43      	ldr	r3, [pc, #268]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a7a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7a6:	f003 0302 	and.w	r3, r3, #2
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d108      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a7b4:	d104      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800a7b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7bc:	f000 bfb0 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7c4:	f000 bfac 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a7c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7cc:	f1a2 0120 	sub.w	r1, r2, #32
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	d158      	bne.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a7d4:	4b36      	ldr	r3, [pc, #216]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a7d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a7da:	f003 0307 	and.w	r3, r3, #7
 800a7de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d104      	bne.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a7e6:	f7fe f8db 	bl	80089a0 <HAL_RCC_GetPCLK3Freq>
 800a7ea:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7ec:	f000 bf98 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d104      	bne.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7f6:	f7fd ff8b 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800a7fa:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7fc:	f000 bf90 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a800:	4b2b      	ldr	r3, [pc, #172]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a80c:	d106      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800a80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a810:	2b02      	cmp	r3, #2
 800a812:	d103      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800a814:	4b27      	ldr	r3, [pc, #156]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a816:	637b      	str	r3, [r7, #52]	@ 0x34
 800a818:	f000 bf82 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a81c:	4b24      	ldr	r3, [pc, #144]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a81e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a822:	f003 0302 	and.w	r3, r3, #2
 800a826:	2b02      	cmp	r3, #2
 800a828:	d107      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	d104      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800a830:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a834:	637b      	str	r3, [r7, #52]	@ 0x34
 800a836:	f000 bf73 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a83a:	4b1d      	ldr	r3, [pc, #116]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 0320 	and.w	r3, r3, #32
 800a842:	2b20      	cmp	r3, #32
 800a844:	d11b      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800a846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a848:	2b04      	cmp	r3, #4
 800a84a:	d118      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a84c:	4b18      	ldr	r3, [pc, #96]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800a858:	4b15      	ldr	r3, [pc, #84]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	0e1b      	lsrs	r3, r3, #24
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	e006      	b.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800a864:	4b12      	ldr	r3, [pc, #72]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a866:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a86a:	041b      	lsls	r3, r3, #16
 800a86c:	0e1b      	lsrs	r3, r3, #24
 800a86e:	f003 030f 	and.w	r3, r3, #15
 800a872:	4a11      	ldr	r2, [pc, #68]	@ (800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a878:	637b      	str	r3, [r7, #52]	@ 0x34
 800a87a:	f000 bf51 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a87e:	2300      	movs	r3, #0
 800a880:	637b      	str	r3, [r7, #52]	@ 0x34
 800a882:	f000 bf4d 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a88a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a88e:	430b      	orrs	r3, r1
 800a890:	d172      	bne.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a892:	4b07      	ldr	r3, [pc, #28]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a898:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a89c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8a4:	d10a      	bne.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a8a6:	f7fd ff33 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800a8aa:	6378      	str	r0, [r7, #52]	@ 0x34
 800a8ac:	f000 bf38 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800a8b0:	46020c00 	.word	0x46020c00
 800a8b4:	00f42400 	.word	0x00f42400
 800a8b8:	08013b4c 	.word	0x08013b4c
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8c2:	d108      	bne.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c4:	f107 0318 	add.w	r3, r7, #24
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff f91b 	bl	8009b04 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8d2:	f000 bf25 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d104      	bne.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a8dc:	f7fe f81e 	bl	800891c <HAL_RCC_GetHCLKFreq>
 800a8e0:	6378      	str	r0, [r7, #52]	@ 0x34
 800a8e2:	f000 bf1d 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a8ec:	d122      	bne.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a8ee:	4bb0      	ldr	r3, [pc, #704]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b20      	cmp	r3, #32
 800a8f8:	d118      	bne.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a8fa:	4bad      	ldr	r3, [pc, #692]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800a906:	4baa      	ldr	r3, [pc, #680]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	0e1b      	lsrs	r3, r3, #24
 800a90c:	f003 030f 	and.w	r3, r3, #15
 800a910:	e006      	b.n	800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800a912:	4ba7      	ldr	r3, [pc, #668]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a918:	041b      	lsls	r3, r3, #16
 800a91a:	0e1b      	lsrs	r3, r3, #24
 800a91c:	f003 030f 	and.w	r3, r3, #15
 800a920:	4aa4      	ldr	r2, [pc, #656]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800a922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a926:	637b      	str	r3, [r7, #52]	@ 0x34
 800a928:	f000 befa 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 800a92c:	2300      	movs	r3, #0
 800a92e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a930:	f000 bef6 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a934:	4b9e      	ldr	r3, [pc, #632]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a93c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a940:	d107      	bne.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a944:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a948:	d103      	bne.n	800a952 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800a94a:	4b9b      	ldr	r3, [pc, #620]	@ (800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800a94c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a94e:	f000 bee7 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a952:	4b97      	ldr	r3, [pc, #604]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a95a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a95e:	d107      	bne.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800a960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a962:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a966:	d103      	bne.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800a968:	4b94      	ldr	r3, [pc, #592]	@ (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 800a96a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a96c:	f000 bed8 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a970:	2300      	movs	r3, #0
 800a972:	637b      	str	r3, [r7, #52]	@ 0x34
 800a974:	f000 bed4 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a97c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a980:	430b      	orrs	r3, r1
 800a982:	d158      	bne.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a984:	4b8a      	ldr	r3, [pc, #552]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a986:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a992:	2b04      	cmp	r3, #4
 800a994:	d84b      	bhi.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800a996:	a201      	add	r2, pc, #4	@ (adr r2, 800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800a9d5 	.word	0x0800a9d5
 800a9a0:	0800a9b1 	.word	0x0800a9b1
 800a9a4:	0800a9c3 	.word	0x0800a9c3
 800a9a8:	0800a9df 	.word	0x0800a9df
 800a9ac:	0800a9e9 	.word	0x0800a9e9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe ff49 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9be:	f000 beaf 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9c2:	f107 030c 	add.w	r3, r7, #12
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff f9f8 	bl	8009dbc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9d0:	f000 bea6 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a9d4:	f7fd ffa2 	bl	800891c <HAL_RCC_GetHCLKFreq>
 800a9d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a9da:	f000 bea1 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a9de:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a9e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9e4:	f000 be9c 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a9e8:	4b71      	ldr	r3, [pc, #452]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0320 	and.w	r3, r3, #32
 800a9f0:	2b20      	cmp	r3, #32
 800a9f2:	d118      	bne.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a9f4:	4b6e      	ldr	r3, [pc, #440]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d005      	beq.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800aa00:	4b6b      	ldr	r3, [pc, #428]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	0e1b      	lsrs	r3, r3, #24
 800aa06:	f003 030f 	and.w	r3, r3, #15
 800aa0a:	e006      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800aa0c:	4b68      	ldr	r3, [pc, #416]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aa0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa12:	041b      	lsls	r3, r3, #16
 800aa14:	0e1b      	lsrs	r3, r3, #24
 800aa16:	f003 030f 	and.w	r3, r3, #15
 800aa1a:	4a66      	ldr	r2, [pc, #408]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800aa1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa20:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aa22:	f000 be7d 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa2a:	f000 be79 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa32:	f000 be75 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800aa36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa3a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800aa3e:	430b      	orrs	r3, r1
 800aa40:	d167      	bne.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800aa42:	4b5b      	ldr	r3, [pc, #364]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aa44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa48:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aa4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa54:	d036      	beq.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800aa56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa5c:	d855      	bhi.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa64:	d029      	beq.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa6c:	d84d      	bhi.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa74:	d013      	beq.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800aa76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa7c:	d845      	bhi.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d015      	beq.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800aa84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa8a:	d13e      	bne.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe fedb 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa9a:	f000 be41 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa9e:	f107 030c 	add.w	r3, r7, #12
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7ff f98a 	bl	8009dbc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aaac:	f000 be38 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800aab0:	f7fd ff34 	bl	800891c <HAL_RCC_GetHCLKFreq>
 800aab4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aab6:	f000 be33 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800aaba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800aabe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aac0:	f000 be2e 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aac4:	4b3a      	ldr	r3, [pc, #232]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0320 	and.w	r3, r3, #32
 800aacc:	2b20      	cmp	r3, #32
 800aace:	d118      	bne.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aad0:	4b37      	ldr	r3, [pc, #220]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d005      	beq.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800aadc:	4b34      	ldr	r3, [pc, #208]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	0e1b      	lsrs	r3, r3, #24
 800aae2:	f003 030f 	and.w	r3, r3, #15
 800aae6:	e006      	b.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800aae8:	4b31      	ldr	r3, [pc, #196]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aaea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aaee:	041b      	lsls	r3, r3, #16
 800aaf0:	0e1b      	lsrs	r3, r3, #24
 800aaf2:	f003 030f 	and.w	r3, r3, #15
 800aaf6:	4a2f      	ldr	r2, [pc, #188]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800aaf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aafc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aafe:	f000 be0f 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800ab02:	2300      	movs	r3, #0
 800ab04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab06:	f000 be0b 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab0e:	f000 be07 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800ab12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab16:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800ab1a:	430b      	orrs	r3, r1
 800ab1c:	d154      	bne.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ab1e:	4b24      	ldr	r3, [pc, #144]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ab28:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d104      	bne.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ab30:	f7fd ff0e 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800ab34:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab36:	f000 bdf3 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab40:	d104      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ab42:	f7fd fde5 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800ab46:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab48:	f000 bdea 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ab4c:	4b18      	ldr	r3, [pc, #96]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab58:	d107      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab60:	d103      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800ab62:	4b16      	ldr	r3, [pc, #88]	@ (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 800ab64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab66:	f000 bddb 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ab6a:	4b11      	ldr	r3, [pc, #68]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 0320 	and.w	r3, r3, #32
 800ab72:	2b20      	cmp	r3, #32
 800ab74:	d124      	bne.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800ab76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab7c:	d120      	bne.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab7e:	4b0c      	ldr	r3, [pc, #48]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d005      	beq.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800ab8a:	4b09      	ldr	r3, [pc, #36]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	0e1b      	lsrs	r3, r3, #24
 800ab90:	f003 030f 	and.w	r3, r3, #15
 800ab94:	e006      	b.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800ab96:	4b06      	ldr	r3, [pc, #24]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab9c:	041b      	lsls	r3, r3, #16
 800ab9e:	0e1b      	lsrs	r3, r3, #24
 800aba0:	f003 030f 	and.w	r3, r3, #15
 800aba4:	4a03      	ldr	r2, [pc, #12]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800aba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800abac:	f000 bdb8 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800abb0:	46020c00 	.word	0x46020c00
 800abb4:	08013b4c 	.word	0x08013b4c
 800abb8:	007a1200 	.word	0x007a1200
 800abbc:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800abc4:	f000 bdac 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800abc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abcc:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800abd0:	430b      	orrs	r3, r1
 800abd2:	d14c      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800abd4:	4ba8      	ldr	r3, [pc, #672]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800abd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800abda:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800abde:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800abe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d104      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800abe6:	f7fd feb3 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800abea:	6378      	str	r0, [r7, #52]	@ 0x34
 800abec:	f000 bd98 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800abf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abf6:	d104      	bne.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800abf8:	f7fd fd8a 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800abfc:	6378      	str	r0, [r7, #52]	@ 0x34
 800abfe:	f000 bd8f 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800ac02:	4b9d      	ldr	r3, [pc, #628]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac0e:	d107      	bne.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 800ac10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac16:	d103      	bne.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 800ac18:	4b98      	ldr	r3, [pc, #608]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ac1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac1c:	f000 bd80 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800ac20:	4b95      	ldr	r3, [pc, #596]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0320 	and.w	r3, r3, #32
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d11c      	bne.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac32:	d118      	bne.n	800ac66 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac34:	4b90      	ldr	r3, [pc, #576]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d005      	beq.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800ac40:	4b8d      	ldr	r3, [pc, #564]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	0e1b      	lsrs	r3, r3, #24
 800ac46:	f003 030f 	and.w	r3, r3, #15
 800ac4a:	e006      	b.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800ac4c:	4b8a      	ldr	r3, [pc, #552]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ac4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ac52:	041b      	lsls	r3, r3, #16
 800ac54:	0e1b      	lsrs	r3, r3, #24
 800ac56:	f003 030f 	and.w	r3, r3, #15
 800ac5a:	4a89      	ldr	r2, [pc, #548]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800ac5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac62:	f000 bd5d 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ac66:	2300      	movs	r3, #0
 800ac68:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac6a:	f000 bd59 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ac6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac72:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ac76:	430b      	orrs	r3, r1
 800ac78:	d158      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ac7a:	4b7f      	ldr	r3, [pc, #508]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ac7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac80:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ac86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac88:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac8a:	d028      	beq.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac90:	d848      	bhi.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	2b80      	cmp	r3, #128	@ 0x80
 800ac96:	d00e      	beq.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 800ac98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9a:	2b80      	cmp	r3, #128	@ 0x80
 800ac9c:	d842      	bhi.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d003      	beq.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800aca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca6:	2b40      	cmp	r3, #64	@ 0x40
 800aca8:	d014      	beq.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 800acaa:	e03b      	b.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800acac:	f7fd fe78 	bl	80089a0 <HAL_RCC_GetPCLK3Freq>
 800acb0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800acb2:	f000 bd35 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acb6:	4b70      	ldr	r3, [pc, #448]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800acbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acc2:	d103      	bne.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 800acc4:	4b6d      	ldr	r3, [pc, #436]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800acc6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800acc8:	f000 bd2a 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800accc:	2300      	movs	r3, #0
 800acce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acd0:	f000 bd26 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800acd4:	f7fd fd1c 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800acd8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800acda:	f000 bd21 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800acde:	4b66      	ldr	r3, [pc, #408]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 0320 	and.w	r3, r3, #32
 800ace6:	2b20      	cmp	r3, #32
 800ace8:	d118      	bne.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800acea:	4b63      	ldr	r3, [pc, #396]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d005      	beq.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 800acf6:	4b60      	ldr	r3, [pc, #384]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	0e1b      	lsrs	r3, r3, #24
 800acfc:	f003 030f 	and.w	r3, r3, #15
 800ad00:	e006      	b.n	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 800ad02:	4b5d      	ldr	r3, [pc, #372]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ad04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad08:	041b      	lsls	r3, r3, #16
 800ad0a:	0e1b      	lsrs	r3, r3, #24
 800ad0c:	f003 030f 	and.w	r3, r3, #15
 800ad10:	4a5b      	ldr	r2, [pc, #364]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800ad12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad18:	f000 bd02 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad20:	f000 bcfe 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad28:	f000 bcfa 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800ad2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad30:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800ad34:	430b      	orrs	r3, r1
 800ad36:	d14c      	bne.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ad38:	4b4f      	ldr	r3, [pc, #316]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ad3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ad42:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800ad44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d104      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ad4a:	f7fd fe01 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800ad4e:	6378      	str	r0, [r7, #52]	@ 0x34
 800ad50:	f000 bce6 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800ad54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad5a:	d104      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ad5c:	f7fd fcd8 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800ad60:	6378      	str	r0, [r7, #52]	@ 0x34
 800ad62:	f000 bcdd 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800ad66:	4b44      	ldr	r3, [pc, #272]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad72:	d107      	bne.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad7a:	d103      	bne.n	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 800ad7c:	4b3f      	ldr	r3, [pc, #252]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ad7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad80:	f000 bcce 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800ad84:	4b3c      	ldr	r3, [pc, #240]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0320 	and.w	r3, r3, #32
 800ad8c:	2b20      	cmp	r3, #32
 800ad8e:	d11c      	bne.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 800ad90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad92:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ad96:	d118      	bne.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad98:	4b37      	ldr	r3, [pc, #220]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d005      	beq.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 800ada4:	4b34      	ldr	r3, [pc, #208]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	0e1b      	lsrs	r3, r3, #24
 800adaa:	f003 030f 	and.w	r3, r3, #15
 800adae:	e006      	b.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 800adb0:	4b31      	ldr	r3, [pc, #196]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800adb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800adb6:	041b      	lsls	r3, r3, #16
 800adb8:	0e1b      	lsrs	r3, r3, #24
 800adba:	f003 030f 	and.w	r3, r3, #15
 800adbe:	4a30      	ldr	r2, [pc, #192]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800adc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800adc6:	f000 bcab 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800adca:	2300      	movs	r3, #0
 800adcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800adce:	f000 bca7 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800add2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800add6:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800adda:	430b      	orrs	r3, r1
 800addc:	d152      	bne.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800adde:	4b26      	ldr	r3, [pc, #152]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ade0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ade4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800ade8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800adea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adec:	2b00      	cmp	r3, #0
 800adee:	d104      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800adf0:	f7fd fdae 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800adf4:	6378      	str	r0, [r7, #52]	@ 0x34
 800adf6:	f000 bc93 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800adfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae00:	d104      	bne.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ae02:	f7fd fc85 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800ae06:	6378      	str	r0, [r7, #52]	@ 0x34
 800ae08:	f000 bc8a 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800ae0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae18:	d107      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae20:	d103      	bne.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 800ae22:	4b16      	ldr	r3, [pc, #88]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ae24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae26:	f000 bc7b 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800ae2a:	4b13      	ldr	r3, [pc, #76]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	2b20      	cmp	r3, #32
 800ae34:	d11c      	bne.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800ae36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae3c:	d118      	bne.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ae3e:	4b0e      	ldr	r3, [pc, #56]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d005      	beq.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800ae4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	0e1b      	lsrs	r3, r3, #24
 800ae50:	f003 030f 	and.w	r3, r3, #15
 800ae54:	e006      	b.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 800ae56:	4b08      	ldr	r3, [pc, #32]	@ (800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ae58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae5c:	041b      	lsls	r3, r3, #16
 800ae5e:	0e1b      	lsrs	r3, r3, #24
 800ae60:	f003 030f 	and.w	r3, r3, #15
 800ae64:	4a06      	ldr	r2, [pc, #24]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800ae66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae6c:	f000 bc58 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800ae70:	2300      	movs	r3, #0
 800ae72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae74:	f000 bc54 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800ae78:	46020c00 	.word	0x46020c00
 800ae7c:	00f42400 	.word	0x00f42400
 800ae80:	08013b4c 	.word	0x08013b4c
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800ae84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae88:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	d14a      	bne.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800ae90:	4ba5      	ldr	r3, [pc, #660]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ae92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ae96:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ae9a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800ae9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d104      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aea2:	f7fd fd55 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800aea6:	6378      	str	r0, [r7, #52]	@ 0x34
 800aea8:	f000 bc3a 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800aeac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aeb2:	d104      	bne.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aeb4:	f7fd fc2c 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800aeb8:	6378      	str	r0, [r7, #52]	@ 0x34
 800aeba:	f000 bc31 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800aebe:	4b9a      	ldr	r3, [pc, #616]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aeca:	d107      	bne.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 800aecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aece:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aed2:	d103      	bne.n	800aedc <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 800aed4:	4b95      	ldr	r3, [pc, #596]	@ (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800aed6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aed8:	f000 bc22 	b.w	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800aedc:	4b92      	ldr	r3, [pc, #584]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0320 	and.w	r3, r3, #32
 800aee4:	2b20      	cmp	r3, #32
 800aee6:	d11b      	bne.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 800aee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800aeee:	d117      	bne.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aef0:	4b8d      	ldr	r3, [pc, #564]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d005      	beq.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 800aefc:	4b8a      	ldr	r3, [pc, #552]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	0e1b      	lsrs	r3, r3, #24
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	e006      	b.n	800af16 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800af08:	4b87      	ldr	r3, [pc, #540]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800af0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af0e:	041b      	lsls	r3, r3, #16
 800af10:	0e1b      	lsrs	r3, r3, #24
 800af12:	f003 030f 	and.w	r3, r3, #15
 800af16:	4a86      	ldr	r2, [pc, #536]	@ (800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800af18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af1e:	e3ff      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	637b      	str	r3, [r7, #52]	@ 0x34
 800af24:	e3fc      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800af26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af2a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800af2e:	430b      	orrs	r3, r1
 800af30:	d164      	bne.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800af32:	4b7d      	ldr	r3, [pc, #500]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800af34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af3c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800af3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af40:	2b00      	cmp	r3, #0
 800af42:	d120      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800af44:	4b78      	ldr	r3, [pc, #480]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0320 	and.w	r3, r3, #32
 800af4c:	2b20      	cmp	r3, #32
 800af4e:	d117      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af50:	4b75      	ldr	r3, [pc, #468]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d005      	beq.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800af5c:	4b72      	ldr	r3, [pc, #456]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	0e1b      	lsrs	r3, r3, #24
 800af62:	f003 030f 	and.w	r3, r3, #15
 800af66:	e006      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800af68:	4b6f      	ldr	r3, [pc, #444]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800af6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	0e1b      	lsrs	r3, r3, #24
 800af72:	f003 030f 	and.w	r3, r3, #15
 800af76:	4a6e      	ldr	r2, [pc, #440]	@ (800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800af78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af7e:	e3cf      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 800af80:	2300      	movs	r3, #0
 800af82:	637b      	str	r3, [r7, #52]	@ 0x34
 800af84:	e3cc      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800af86:	4b68      	ldr	r3, [pc, #416]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800af88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af94:	d112      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800af96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af9c:	d10e      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af9e:	4b62      	ldr	r3, [pc, #392]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800afa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afac:	d102      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800afae:	23fa      	movs	r3, #250	@ 0xfa
 800afb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800afb2:	e3b5      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800afb4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800afb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800afba:	e3b1      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800afbc:	4b5a      	ldr	r3, [pc, #360]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afc8:	d106      	bne.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800afca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afd0:	d102      	bne.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800afd2:	4b56      	ldr	r3, [pc, #344]	@ (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800afd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800afd6:	e3a3      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800afd8:	4b53      	ldr	r3, [pc, #332]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800afda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afde:	f003 0302 	and.w	r3, r3, #2
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d107      	bne.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800afe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afec:	d103      	bne.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800afee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aff2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aff4:	e394      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800aff6:	2300      	movs	r3, #0
 800aff8:	637b      	str	r3, [r7, #52]	@ 0x34
 800affa:	e391      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800affc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b000:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b004:	430b      	orrs	r3, r1
 800b006:	d164      	bne.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b008:	4b47      	ldr	r3, [pc, #284]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b00a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b00e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b012:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800b014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b016:	2b00      	cmp	r3, #0
 800b018:	d120      	bne.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b01a:	4b43      	ldr	r3, [pc, #268]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 0320 	and.w	r3, r3, #32
 800b022:	2b20      	cmp	r3, #32
 800b024:	d117      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b026:	4b40      	ldr	r3, [pc, #256]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d005      	beq.n	800b03e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800b032:	4b3d      	ldr	r3, [pc, #244]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	0e1b      	lsrs	r3, r3, #24
 800b038:	f003 030f 	and.w	r3, r3, #15
 800b03c:	e006      	b.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800b03e:	4b3a      	ldr	r3, [pc, #232]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b044:	041b      	lsls	r3, r3, #16
 800b046:	0e1b      	lsrs	r3, r3, #24
 800b048:	f003 030f 	and.w	r3, r3, #15
 800b04c:	4a38      	ldr	r2, [pc, #224]	@ (800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b04e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b052:	637b      	str	r3, [r7, #52]	@ 0x34
 800b054:	e364      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 800b056:	2300      	movs	r3, #0
 800b058:	637b      	str	r3, [r7, #52]	@ 0x34
 800b05a:	e361      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b05c:	4b32      	ldr	r3, [pc, #200]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b05e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b062:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b06a:	d112      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b072:	d10e      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b074:	4b2c      	ldr	r3, [pc, #176]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b07a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b07e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b082:	d102      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800b084:	23fa      	movs	r3, #250	@ 0xfa
 800b086:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b088:	e34a      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800b08a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b08e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b090:	e346      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b092:	4b25      	ldr	r3, [pc, #148]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b09a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b09e:	d106      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0a6:	d102      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800b0a8:	4b20      	ldr	r3, [pc, #128]	@ (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b0aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ac:	e338      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b0ae:	4b1e      	ldr	r3, [pc, #120]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b0b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0b4:	f003 0302 	and.w	r3, r3, #2
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d107      	bne.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b0c2:	d103      	bne.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800b0c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ca:	e329      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0d0:	e326      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800b0d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d6:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b0da:	430b      	orrs	r3, r1
 800b0dc:	d14e      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b0de:	4b12      	ldr	r3, [pc, #72]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b0e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b0e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d103      	bne.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b0f0:	f7fd fc2e 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800b0f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800b0f6:	e313      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b0f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b0fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b102:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b106:	d119      	bne.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800b108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b10e:	d115      	bne.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b110:	4b05      	ldr	r3, [pc, #20]	@ (800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b11a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b11e:	d109      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800b120:	23fa      	movs	r3, #250	@ 0xfa
 800b122:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b124:	e2fc      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800b126:	bf00      	nop
 800b128:	46020c00 	.word	0x46020c00
 800b12c:	00f42400 	.word	0x00f42400
 800b130:	08013b4c 	.word	0x08013b4c
      }
      else
      {
        frequency = LSI_VALUE;
 800b134:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b138:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b13a:	e2f1      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b13c:	4ba8      	ldr	r3, [pc, #672]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b148:	d106      	bne.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800b14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b150:	d102      	bne.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800b152:	4ba4      	ldr	r3, [pc, #656]	@ (800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b154:	637b      	str	r3, [r7, #52]	@ 0x34
 800b156:	e2e3      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b158:	4ba1      	ldr	r3, [pc, #644]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b15a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b15e:	f003 0302 	and.w	r3, r3, #2
 800b162:	2b02      	cmp	r3, #2
 800b164:	d107      	bne.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800b166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b168:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b16c:	d103      	bne.n	800b176 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800b16e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b172:	637b      	str	r3, [r7, #52]	@ 0x34
 800b174:	e2d4      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	637b      	str	r3, [r7, #52]	@ 0x34
 800b17a:	e2d1      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b180:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800b184:	430b      	orrs	r3, r1
 800b186:	d12d      	bne.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b188:	4b95      	ldr	r3, [pc, #596]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b18a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b18e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b192:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b194:	4b92      	ldr	r3, [pc, #584]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b19c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1a0:	d105      	bne.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800b1a8:	4b8f      	ldr	r3, [pc, #572]	@ (800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b1aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ac:	e2b8      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1b4:	d107      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fe fb46 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1c4:	e2ac      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1cc:	d107      	bne.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ce:	f107 0318 	add.w	r3, r7, #24
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fe fc96 	bl	8009b04 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1dc:	e2a0      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1e2:	e29d      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b1e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1e8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800b1ec:	430b      	orrs	r3, r1
 800b1ee:	d156      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b1f0:	4b7b      	ldr	r3, [pc, #492]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b1f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1f6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b1fa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b202:	d028      	beq.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b20a:	d845      	bhi.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b20e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b212:	d013      	beq.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800b214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b216:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b21a:	d83d      	bhi.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800b222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b224:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b228:	d004      	beq.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800b22a:	e035      	b.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b22c:	f7fd fba4 	bl	8008978 <HAL_RCC_GetPCLK2Freq>
 800b230:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b232:	e275      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b234:	f7fd fa6c 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800b238:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b23a:	e271      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b23c:	4b68      	ldr	r3, [pc, #416]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b248:	d102      	bne.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800b24a:	4b66      	ldr	r3, [pc, #408]	@ (800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b24c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b24e:	e267      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800b250:	2300      	movs	r3, #0
 800b252:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b254:	e264      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b256:	4b62      	ldr	r3, [pc, #392]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0320 	and.w	r3, r3, #32
 800b25e:	2b20      	cmp	r3, #32
 800b260:	d117      	bne.n	800b292 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b262:	4b5f      	ldr	r3, [pc, #380]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d005      	beq.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800b26e:	4b5c      	ldr	r3, [pc, #368]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	0e1b      	lsrs	r3, r3, #24
 800b274:	f003 030f 	and.w	r3, r3, #15
 800b278:	e006      	b.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800b27a:	4b59      	ldr	r3, [pc, #356]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b27c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b280:	041b      	lsls	r3, r3, #16
 800b282:	0e1b      	lsrs	r3, r3, #24
 800b284:	f003 030f 	and.w	r3, r3, #15
 800b288:	4a58      	ldr	r2, [pc, #352]	@ (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 800b28a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b28e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b290:	e246      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800b292:	2300      	movs	r3, #0
 800b294:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b296:	e243      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800b298:	2300      	movs	r3, #0
 800b29a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b29c:	e240      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b29e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2a2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800b2a6:	430b      	orrs	r3, r1
 800b2a8:	d156      	bne.n	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b2aa:	4b4d      	ldr	r3, [pc, #308]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b2ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2b4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b2bc:	d028      	beq.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800b2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b2c4:	d845      	bhi.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2cc:	d013      	beq.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2d4:	d83d      	bhi.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d004      	beq.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2e2:	d004      	beq.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800b2e4:	e035      	b.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b2e6:	f7fd fb33 	bl	8008950 <HAL_RCC_GetPCLK1Freq>
 800b2ea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b2ec:	e218      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b2ee:	f7fd fa0f 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800b2f2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b2f4:	e214      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2f6:	4b3a      	ldr	r3, [pc, #232]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b302:	d102      	bne.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800b304:	4b37      	ldr	r3, [pc, #220]	@ (800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b306:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b308:	e20a      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b30e:	e207      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b310:	4b33      	ldr	r3, [pc, #204]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0320 	and.w	r3, r3, #32
 800b318:	2b20      	cmp	r3, #32
 800b31a:	d117      	bne.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b31c:	4b30      	ldr	r3, [pc, #192]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d005      	beq.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800b328:	4b2d      	ldr	r3, [pc, #180]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	0e1b      	lsrs	r3, r3, #24
 800b32e:	f003 030f 	and.w	r3, r3, #15
 800b332:	e006      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800b334:	4b2a      	ldr	r3, [pc, #168]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b33a:	041b      	lsls	r3, r3, #16
 800b33c:	0e1b      	lsrs	r3, r3, #24
 800b33e:	f003 030f 	and.w	r3, r3, #15
 800b342:	4a2a      	ldr	r2, [pc, #168]	@ (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 800b344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b348:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b34a:	e1e9      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800b34c:	2300      	movs	r3, #0
 800b34e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b350:	e1e6      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b356:	e1e3      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b35c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800b360:	430b      	orrs	r3, r1
 800b362:	d17e      	bne.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b364:	4b1e      	ldr	r3, [pc, #120]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b36a:	f003 0318 	and.w	r3, r3, #24
 800b36e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b372:	2b18      	cmp	r3, #24
 800b374:	d872      	bhi.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 800b376:	a201      	add	r2, pc, #4	@ (adr r2, 800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b3f1 	.word	0x0800b3f1
 800b380:	0800b45d 	.word	0x0800b45d
 800b384:	0800b45d 	.word	0x0800b45d
 800b388:	0800b45d 	.word	0x0800b45d
 800b38c:	0800b45d 	.word	0x0800b45d
 800b390:	0800b45d 	.word	0x0800b45d
 800b394:	0800b45d 	.word	0x0800b45d
 800b398:	0800b45d 	.word	0x0800b45d
 800b39c:	0800b3f9 	.word	0x0800b3f9
 800b3a0:	0800b45d 	.word	0x0800b45d
 800b3a4:	0800b45d 	.word	0x0800b45d
 800b3a8:	0800b45d 	.word	0x0800b45d
 800b3ac:	0800b45d 	.word	0x0800b45d
 800b3b0:	0800b45d 	.word	0x0800b45d
 800b3b4:	0800b45d 	.word	0x0800b45d
 800b3b8:	0800b45d 	.word	0x0800b45d
 800b3bc:	0800b401 	.word	0x0800b401
 800b3c0:	0800b45d 	.word	0x0800b45d
 800b3c4:	0800b45d 	.word	0x0800b45d
 800b3c8:	0800b45d 	.word	0x0800b45d
 800b3cc:	0800b45d 	.word	0x0800b45d
 800b3d0:	0800b45d 	.word	0x0800b45d
 800b3d4:	0800b45d 	.word	0x0800b45d
 800b3d8:	0800b45d 	.word	0x0800b45d
 800b3dc:	0800b41b 	.word	0x0800b41b
 800b3e0:	46020c00 	.word	0x46020c00
 800b3e4:	00f42400 	.word	0x00f42400
 800b3e8:	007a1200 	.word	0x007a1200
 800b3ec:	08013b4c 	.word	0x08013b4c
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b3f0:	f7fd fad6 	bl	80089a0 <HAL_RCC_GetPCLK3Freq>
 800b3f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b3f6:	e193      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b3f8:	f7fd f98a 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800b3fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b3fe:	e18f      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b400:	4b9f      	ldr	r3, [pc, #636]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b40c:	d102      	bne.n	800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 800b40e:	4b9d      	ldr	r3, [pc, #628]	@ (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b410:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b412:	e185      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800b414:	2300      	movs	r3, #0
 800b416:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b418:	e182      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b41a:	4b99      	ldr	r3, [pc, #612]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0320 	and.w	r3, r3, #32
 800b422:	2b20      	cmp	r3, #32
 800b424:	d117      	bne.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b426:	4b96      	ldr	r3, [pc, #600]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d005      	beq.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 800b432:	4b93      	ldr	r3, [pc, #588]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	0e1b      	lsrs	r3, r3, #24
 800b438:	f003 030f 	and.w	r3, r3, #15
 800b43c:	e006      	b.n	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800b43e:	4b90      	ldr	r3, [pc, #576]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b444:	041b      	lsls	r3, r3, #16
 800b446:	0e1b      	lsrs	r3, r3, #24
 800b448:	f003 030f 	and.w	r3, r3, #15
 800b44c:	4a8e      	ldr	r2, [pc, #568]	@ (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800b44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b452:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b454:	e164      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800b456:	2300      	movs	r3, #0
 800b458:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b45a:	e161      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800b45c:	2300      	movs	r3, #0
 800b45e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b460:	e15e      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b462:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b466:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800b46a:	430b      	orrs	r3, r1
 800b46c:	d155      	bne.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b46e:	4b84      	ldr	r3, [pc, #528]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b474:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b478:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b480:	d013      	beq.n	800b4aa <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b488:	d844      	bhi.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800b48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b490:	d013      	beq.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 800b492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b494:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b498:	d83c      	bhi.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800b49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d014      	beq.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4a6:	d014      	beq.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 800b4a8:	e034      	b.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4aa:	f107 0318 	add.w	r3, r7, #24
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fe fb28 	bl	8009b04 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b4b8:	e132      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe f9c4 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b4c8:	e12a      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b4ca:	f7fd f921 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800b4ce:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b4d0:	e126      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b4d2:	4b6b      	ldr	r3, [pc, #428]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 0320 	and.w	r3, r3, #32
 800b4da:	2b20      	cmp	r3, #32
 800b4dc:	d117      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b4de:	4b68      	ldr	r3, [pc, #416]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d005      	beq.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 800b4ea:	4b65      	ldr	r3, [pc, #404]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	0e1b      	lsrs	r3, r3, #24
 800b4f0:	f003 030f 	and.w	r3, r3, #15
 800b4f4:	e006      	b.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 800b4f6:	4b62      	ldr	r3, [pc, #392]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b4f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b4fc:	041b      	lsls	r3, r3, #16
 800b4fe:	0e1b      	lsrs	r3, r3, #24
 800b500:	f003 030f 	and.w	r3, r3, #15
 800b504:	4a60      	ldr	r2, [pc, #384]	@ (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800b506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b50a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b50c:	e108      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800b50e:	2300      	movs	r3, #0
 800b510:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b512:	e105      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800b514:	2300      	movs	r3, #0
 800b516:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b518:	e102      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800b51a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b51e:	1e59      	subs	r1, r3, #1
 800b520:	ea52 0301 	orrs.w	r3, r2, r1
 800b524:	d13c      	bne.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800b526:	4b56      	ldr	r3, [pc, #344]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b528:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b52c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b530:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b534:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b538:	d027      	beq.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800b53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b540:	d82b      	bhi.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 800b542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b544:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b548:	d017      	beq.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 800b54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b550:	d823      	bhi.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	2b00      	cmp	r3, #0
 800b556:	d004      	beq.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 800b558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b55e:	d004      	beq.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 800b560:	e01b      	b.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b562:	f7fd f8d5 	bl	8008710 <HAL_RCC_GetSysClockFreq>
 800b566:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b568:	e0da      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b56a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fe f96c 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b576:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b578:	e0d2      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b57a:	f107 0318 	add.w	r3, r7, #24
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fe fac0 	bl	8009b04 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b588:	e0ca      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b58a:	f107 030c 	add.w	r3, r7, #12
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fe fc14 	bl	8009dbc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b598:	e0c2      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800b59a:	2300      	movs	r3, #0
 800b59c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b59e:	e0bf      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b5a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5a4:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800b5a8:	430b      	orrs	r3, r1
 800b5aa:	d131      	bne.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b5ac:	4b34      	ldr	r3, [pc, #208]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b5ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b5b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b5b6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b5b8:	4b31      	ldr	r3, [pc, #196]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b5ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5be:	f003 0302 	and.w	r3, r3, #2
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d106      	bne.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d103      	bne.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 800b5cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5d2:	e0a5      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b5d4:	4b2a      	ldr	r3, [pc, #168]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b5d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5e2:	d112      	bne.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b5ea:	d10e      	bne.n	800b60a <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b5ec:	4b24      	ldr	r3, [pc, #144]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b5ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5fa:	d102      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 800b5fc:	23fa      	movs	r3, #250	@ 0xfa
 800b5fe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b600:	e08e      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800b602:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b606:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b608:	e08a      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b60e:	e087      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b610:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b614:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b618:	430b      	orrs	r3, r1
 800b61a:	d13b      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b61c:	4b18      	ldr	r3, [pc, #96]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b61e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b622:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b626:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b628:	4b15      	ldr	r3, [pc, #84]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b634:	d105      	bne.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 800b636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d102      	bne.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 800b63c:	4b13      	ldr	r3, [pc, #76]	@ (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800b63e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b640:	e06e      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800b642:	4b0f      	ldr	r3, [pc, #60]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b64a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b64e:	d106      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 800b650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b656:	d102      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 800b658:	4b0d      	ldr	r3, [pc, #52]	@ (800b690 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 800b65a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b65c:	e060      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800b65e:	4b08      	ldr	r3, [pc, #32]	@ (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b66a:	d106      	bne.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 800b66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b672:	d102      	bne.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 800b674:	4b03      	ldr	r3, [pc, #12]	@ (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b676:	637b      	str	r3, [r7, #52]	@ 0x34
 800b678:	e052      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800b67a:	2300      	movs	r3, #0
 800b67c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b67e:	e04f      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800b680:	46020c00 	.word	0x46020c00
 800b684:	00f42400 	.word	0x00f42400
 800b688:	08013b4c 	.word	0x08013b4c
 800b68c:	02dc6c00 	.word	0x02dc6c00
 800b690:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800b694:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b698:	f1a3 0108 	sub.w	r1, r3, #8
 800b69c:	ea52 0301 	orrs.w	r3, r2, r1
 800b6a0:	d13c      	bne.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800b6a2:	4b22      	ldr	r3, [pc, #136]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800b6a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b6a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b6ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800b6ae:	4b1f      	ldr	r3, [pc, #124]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6ba:	d105      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d102      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 800b6c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800b6c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6c6:	e02b      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800b6c8:	4b18      	ldr	r3, [pc, #96]	@ (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6d4:	d106      	bne.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6dc:	d102      	bne.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 800b6de:	4b15      	ldr	r3, [pc, #84]	@ (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 800b6e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6e2:	e01d      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6ea:	d107      	bne.n	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fe f8ab 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6fa:	e011      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fe:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b702:	d108      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b708:	4618      	mov	r0, r3
 800b70a:	f7fe f89f 	bl	800984c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800b70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b710:	085b      	lsrs	r3, r3, #1
 800b712:	637b      	str	r3, [r7, #52]	@ 0x34
 800b714:	e004      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800b716:	2300      	movs	r3, #0
 800b718:	637b      	str	r3, [r7, #52]	@ 0x34
 800b71a:	e001      	b.n	800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800b720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b722:	4618      	mov	r0, r3
 800b724:	3738      	adds	r7, #56	@ 0x38
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	46020c00 	.word	0x46020c00
 800b730:	007a1200 	.word	0x007a1200
 800b734:	003d0900 	.word	0x003d0900

0800b738 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b740:	4b47      	ldr	r3, [pc, #284]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a46      	ldr	r2, [pc, #280]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b746:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b74a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b74c:	f7fa fa78 	bl	8005c40 <HAL_GetTick>
 800b750:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b752:	e008      	b.n	800b766 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b754:	f7fa fa74 	bl	8005c40 <HAL_GetTick>
 800b758:	4602      	mov	r2, r0
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	1ad3      	subs	r3, r2, r3
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d901      	bls.n	800b766 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b762:	2303      	movs	r3, #3
 800b764:	e077      	b.n	800b856 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b766:	4b3e      	ldr	r3, [pc, #248]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1f0      	bne.n	800b754 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b772:	4b3b      	ldr	r3, [pc, #236]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b776:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b77a:	f023 0303 	bic.w	r3, r3, #3
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	6811      	ldr	r1, [r2, #0]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	6852      	ldr	r2, [r2, #4]
 800b786:	3a01      	subs	r2, #1
 800b788:	0212      	lsls	r2, r2, #8
 800b78a:	430a      	orrs	r2, r1
 800b78c:	4934      	ldr	r1, [pc, #208]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b78e:	4313      	orrs	r3, r2
 800b790:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b792:	4b33      	ldr	r3, [pc, #204]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b794:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b796:	4b33      	ldr	r3, [pc, #204]	@ (800b864 <RCCEx_PLL2_Config+0x12c>)
 800b798:	4013      	ands	r3, r2
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	6892      	ldr	r2, [r2, #8]
 800b79e:	3a01      	subs	r2, #1
 800b7a0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	68d2      	ldr	r2, [r2, #12]
 800b7a8:	3a01      	subs	r2, #1
 800b7aa:	0252      	lsls	r2, r2, #9
 800b7ac:	b292      	uxth	r2, r2
 800b7ae:	4311      	orrs	r1, r2
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	6912      	ldr	r2, [r2, #16]
 800b7b4:	3a01      	subs	r2, #1
 800b7b6:	0412      	lsls	r2, r2, #16
 800b7b8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b7bc:	4311      	orrs	r1, r2
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	6952      	ldr	r2, [r2, #20]
 800b7c2:	3a01      	subs	r2, #1
 800b7c4:	0612      	lsls	r2, r2, #24
 800b7c6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	4924      	ldr	r1, [pc, #144]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b7d2:	4b23      	ldr	r3, [pc, #140]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d6:	f023 020c 	bic.w	r2, r3, #12
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	699b      	ldr	r3, [r3, #24]
 800b7de:	4920      	ldr	r1, [pc, #128]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b7e4:	4b1e      	ldr	r3, [pc, #120]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	491c      	ldr	r1, [pc, #112]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f6:	4a1a      	ldr	r2, [pc, #104]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b7f8:	f023 0310 	bic.w	r3, r3, #16
 800b7fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7fe:	4b18      	ldr	r3, [pc, #96]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b802:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b806:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	69d2      	ldr	r2, [r2, #28]
 800b80e:	00d2      	lsls	r2, r2, #3
 800b810:	4913      	ldr	r1, [pc, #76]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b812:	4313      	orrs	r3, r2
 800b814:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b816:	4b12      	ldr	r3, [pc, #72]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81a:	4a11      	ldr	r2, [pc, #68]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b81c:	f043 0310 	orr.w	r3, r3, #16
 800b820:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b822:	4b0f      	ldr	r3, [pc, #60]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a0e      	ldr	r2, [pc, #56]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b828:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b82c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b82e:	f7fa fa07 	bl	8005c40 <HAL_GetTick>
 800b832:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b834:	e008      	b.n	800b848 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b836:	f7fa fa03 	bl	8005c40 <HAL_GetTick>
 800b83a:	4602      	mov	r2, r0
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	2b02      	cmp	r3, #2
 800b842:	d901      	bls.n	800b848 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b844:	2303      	movs	r3, #3
 800b846:	e006      	b.n	800b856 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b848:	4b05      	ldr	r3, [pc, #20]	@ (800b860 <RCCEx_PLL2_Config+0x128>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0f0      	beq.n	800b836 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b854:	2300      	movs	r3, #0

}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	46020c00 	.word	0x46020c00
 800b864:	80800000 	.word	0x80800000

0800b868 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b870:	4b47      	ldr	r3, [pc, #284]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a46      	ldr	r2, [pc, #280]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b87a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b87c:	f7fa f9e0 	bl	8005c40 <HAL_GetTick>
 800b880:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b882:	e008      	b.n	800b896 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b884:	f7fa f9dc 	bl	8005c40 <HAL_GetTick>
 800b888:	4602      	mov	r2, r0
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d901      	bls.n	800b896 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b892:	2303      	movs	r3, #3
 800b894:	e077      	b.n	800b986 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b896:	4b3e      	ldr	r3, [pc, #248]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1f0      	bne.n	800b884 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b8a2:	4b3b      	ldr	r3, [pc, #236]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b8a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b8aa:	f023 0303 	bic.w	r3, r3, #3
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	6811      	ldr	r1, [r2, #0]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	6852      	ldr	r2, [r2, #4]
 800b8b6:	3a01      	subs	r2, #1
 800b8b8:	0212      	lsls	r2, r2, #8
 800b8ba:	430a      	orrs	r2, r1
 800b8bc:	4934      	ldr	r1, [pc, #208]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	630b      	str	r3, [r1, #48]	@ 0x30
 800b8c2:	4b33      	ldr	r3, [pc, #204]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b8c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8c6:	4b33      	ldr	r3, [pc, #204]	@ (800b994 <RCCEx_PLL3_Config+0x12c>)
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	6892      	ldr	r2, [r2, #8]
 800b8ce:	3a01      	subs	r2, #1
 800b8d0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	68d2      	ldr	r2, [r2, #12]
 800b8d8:	3a01      	subs	r2, #1
 800b8da:	0252      	lsls	r2, r2, #9
 800b8dc:	b292      	uxth	r2, r2
 800b8de:	4311      	orrs	r1, r2
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	6912      	ldr	r2, [r2, #16]
 800b8e4:	3a01      	subs	r2, #1
 800b8e6:	0412      	lsls	r2, r2, #16
 800b8e8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b8ec:	4311      	orrs	r1, r2
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	6952      	ldr	r2, [r2, #20]
 800b8f2:	3a01      	subs	r2, #1
 800b8f4:	0612      	lsls	r2, r2, #24
 800b8f6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	4924      	ldr	r1, [pc, #144]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b902:	4b23      	ldr	r3, [pc, #140]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b906:	f023 020c 	bic.w	r2, r3, #12
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	4920      	ldr	r1, [pc, #128]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b910:	4313      	orrs	r3, r2
 800b912:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b914:	4b1e      	ldr	r3, [pc, #120]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b916:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a1b      	ldr	r3, [r3, #32]
 800b91c:	491c      	ldr	r1, [pc, #112]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b91e:	4313      	orrs	r3, r2
 800b920:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b922:	4b1b      	ldr	r3, [pc, #108]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b926:	4a1a      	ldr	r2, [pc, #104]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b928:	f023 0310 	bic.w	r3, r3, #16
 800b92c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b92e:	4b18      	ldr	r3, [pc, #96]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b936:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	69d2      	ldr	r2, [r2, #28]
 800b93e:	00d2      	lsls	r2, r2, #3
 800b940:	4913      	ldr	r1, [pc, #76]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b942:	4313      	orrs	r3, r2
 800b944:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b946:	4b12      	ldr	r3, [pc, #72]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b94a:	4a11      	ldr	r2, [pc, #68]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b94c:	f043 0310 	orr.w	r3, r3, #16
 800b950:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b952:	4b0f      	ldr	r3, [pc, #60]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a0e      	ldr	r2, [pc, #56]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b95c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b95e:	f7fa f96f 	bl	8005c40 <HAL_GetTick>
 800b962:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b964:	e008      	b.n	800b978 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b966:	f7fa f96b 	bl	8005c40 <HAL_GetTick>
 800b96a:	4602      	mov	r2, r0
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	2b02      	cmp	r3, #2
 800b972:	d901      	bls.n	800b978 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b974:	2303      	movs	r3, #3
 800b976:	e006      	b.n	800b986 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b978:	4b05      	ldr	r3, [pc, #20]	@ (800b990 <RCCEx_PLL3_Config+0x128>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d0f0      	beq.n	800b966 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	46020c00 	.word	0x46020c00
 800b994:	80800000 	.word	0x80800000

0800b998 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e0fb      	b.n	800bba2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a7f      	ldr	r2, [pc, #508]	@ (800bbac <HAL_SPI_Init+0x214>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d004      	beq.n	800b9be <HAL_SPI_Init+0x26>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a7d      	ldr	r2, [pc, #500]	@ (800bbb0 <HAL_SPI_Init+0x218>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	e000      	b.n	800b9c0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800b9be:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a78      	ldr	r2, [pc, #480]	@ (800bbac <HAL_SPI_Init+0x214>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d004      	beq.n	800b9da <HAL_SPI_Init+0x42>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a76      	ldr	r2, [pc, #472]	@ (800bbb0 <HAL_SPI_Init+0x218>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d105      	bne.n	800b9e6 <HAL_SPI_Init+0x4e>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	2b0f      	cmp	r3, #15
 800b9e0:	d901      	bls.n	800b9e6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e0dd      	b.n	800bba2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fd1a 	bl	800c420 <SPI_GetPacketSize>
 800b9ec:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a6e      	ldr	r2, [pc, #440]	@ (800bbac <HAL_SPI_Init+0x214>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d004      	beq.n	800ba02 <HAL_SPI_Init+0x6a>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a6c      	ldr	r2, [pc, #432]	@ (800bbb0 <HAL_SPI_Init+0x218>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d102      	bne.n	800ba08 <HAL_SPI_Init+0x70>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b08      	cmp	r3, #8
 800ba06:	d816      	bhi.n	800ba36 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ba0c:	4a69      	ldr	r2, [pc, #420]	@ (800bbb4 <HAL_SPI_Init+0x21c>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d00e      	beq.n	800ba30 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a68      	ldr	r2, [pc, #416]	@ (800bbb8 <HAL_SPI_Init+0x220>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d009      	beq.n	800ba30 <HAL_SPI_Init+0x98>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a66      	ldr	r2, [pc, #408]	@ (800bbbc <HAL_SPI_Init+0x224>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d004      	beq.n	800ba30 <HAL_SPI_Init+0x98>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a65      	ldr	r2, [pc, #404]	@ (800bbc0 <HAL_SPI_Init+0x228>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d104      	bne.n	800ba3a <HAL_SPI_Init+0xa2>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b10      	cmp	r3, #16
 800ba34:	d901      	bls.n	800ba3a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e0b3      	b.n	800bba2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d106      	bne.n	800ba54 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7f9 fcb8 	bl	80053c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2202      	movs	r2, #2
 800ba58:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f022 0201 	bic.w	r2, r2, #1
 800ba6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ba76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba80:	d119      	bne.n	800bab6 <HAL_SPI_Init+0x11e>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba8a:	d103      	bne.n	800ba94 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d008      	beq.n	800baa6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10c      	bne.n	800bab6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800baa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800baa4:	d107      	bne.n	800bab6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bab4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00f      	beq.n	800bae2 <HAL_SPI_Init+0x14a>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	2b06      	cmp	r3, #6
 800bac8:	d90b      	bls.n	800bae2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	430a      	orrs	r2, r1
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	e007      	b.n	800baf2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800baf0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	69da      	ldr	r2, [r3, #28]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bafa:	431a      	orrs	r2, r3
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	431a      	orrs	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb04:	ea42 0103 	orr.w	r1, r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68da      	ldr	r2, [r3, #12]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	430a      	orrs	r2, r1
 800bb12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb1c:	431a      	orrs	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb22:	431a      	orrs	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	431a      	orrs	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	431a      	orrs	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	431a      	orrs	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	431a      	orrs	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	431a      	orrs	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb46:	431a      	orrs	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	431a      	orrs	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb52:	431a      	orrs	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb58:	431a      	orrs	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb5e:	ea42 0103 	orr.w	r1, r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	430a      	orrs	r2, r1
 800bb6c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00a      	beq.n	800bb90 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	430a      	orrs	r2, r1
 800bb8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	46002000 	.word	0x46002000
 800bbb0:	56002000 	.word	0x56002000
 800bbb4:	40013000 	.word	0x40013000
 800bbb8:	50013000 	.word	0x50013000
 800bbbc:	40003800 	.word	0x40003800
 800bbc0:	50003800 	.word	0x50003800

0800bbc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b08e      	sub	sp, #56	@ 0x38
 800bbc8:	af02      	add	r7, sp, #8
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	60b9      	str	r1, [r7, #8]
 800bbce:	607a      	str	r2, [r7, #4]
 800bbd0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3320      	adds	r3, #32
 800bbd8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	3330      	adds	r3, #48	@ 0x30
 800bbe0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbe6:	095b      	lsrs	r3, r3, #5
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	3301      	adds	r3, #1
 800bbec:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a90      	ldr	r2, [pc, #576]	@ (800be34 <HAL_SPI_TransmitReceive+0x270>)
 800bbf4:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbf6:	f7fa f823 	bl	8005c40 <HAL_GetTick>
 800bbfa:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800bbfc:	887b      	ldrh	r3, [r7, #2]
 800bbfe:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800bc00:	887b      	ldrh	r3, [r7, #2]
 800bc02:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d001      	beq.n	800bc14 <HAL_SPI_TransmitReceive+0x50>
  {
    return HAL_BUSY;
 800bc10:	2302      	movs	r3, #2
 800bc12:	e332      	b.n	800c27a <HAL_SPI_TransmitReceive+0x6b6>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d005      	beq.n	800bc26 <HAL_SPI_TransmitReceive+0x62>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <HAL_SPI_TransmitReceive+0x62>
 800bc20:	887b      	ldrh	r3, [r7, #2]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d101      	bne.n	800bc2a <HAL_SPI_TransmitReceive+0x66>
  {
    return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e327      	b.n	800c27a <HAL_SPI_TransmitReceive+0x6b6>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d101      	bne.n	800bc38 <HAL_SPI_TransmitReceive+0x74>
 800bc34:	2302      	movs	r3, #2
 800bc36:	e320      	b.n	800c27a <HAL_SPI_TransmitReceive+0x6b6>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2205      	movs	r2, #5
 800bc44:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	887a      	ldrh	r2, [r7, #2]
 800bc5a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	887a      	ldrh	r2, [r7, #2]
 800bc62:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	887a      	ldrh	r2, [r7, #2]
 800bc70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	887a      	ldrh	r2, [r7, #2]
 800bc78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68da      	ldr	r2, [r3, #12]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800bc96:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a66      	ldr	r2, [pc, #408]	@ (800be38 <HAL_SPI_TransmitReceive+0x274>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d00e      	beq.n	800bcc0 <HAL_SPI_TransmitReceive+0xfc>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a65      	ldr	r2, [pc, #404]	@ (800be3c <HAL_SPI_TransmitReceive+0x278>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d009      	beq.n	800bcc0 <HAL_SPI_TransmitReceive+0xfc>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a63      	ldr	r2, [pc, #396]	@ (800be40 <HAL_SPI_TransmitReceive+0x27c>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d004      	beq.n	800bcc0 <HAL_SPI_TransmitReceive+0xfc>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a62      	ldr	r2, [pc, #392]	@ (800be44 <HAL_SPI_TransmitReceive+0x280>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d102      	bne.n	800bcc6 <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800bcc0:	2310      	movs	r3, #16
 800bcc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcc4:	e001      	b.n	800bcca <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800bcc6:	2308      	movs	r3, #8
 800bcc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	0c1b      	lsrs	r3, r3, #16
 800bcd2:	041b      	lsls	r3, r3, #16
 800bcd4:	8879      	ldrh	r1, [r7, #2]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	6812      	ldr	r2, [r2, #0]
 800bcda:	430b      	orrs	r3, r1
 800bcdc:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f042 0201 	orr.w	r2, r2, #1
 800bcec:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	69db      	ldr	r3, [r3, #28]
 800bcf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10c      	bne.n	800bd16 <HAL_SPI_TransmitReceive+0x152>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd04:	d107      	bne.n	800bd16 <HAL_SPI_TransmitReceive+0x152>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	2b0f      	cmp	r3, #15
 800bd1c:	f240 80c1 	bls.w	800bea2 <HAL_SPI_TransmitReceive+0x2de>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a44      	ldr	r2, [pc, #272]	@ (800be38 <HAL_SPI_TransmitReceive+0x274>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d00f      	beq.n	800bd4a <HAL_SPI_TransmitReceive+0x186>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a43      	ldr	r2, [pc, #268]	@ (800be3c <HAL_SPI_TransmitReceive+0x278>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d00a      	beq.n	800bd4a <HAL_SPI_TransmitReceive+0x186>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a41      	ldr	r2, [pc, #260]	@ (800be40 <HAL_SPI_TransmitReceive+0x27c>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d005      	beq.n	800bd4a <HAL_SPI_TransmitReceive+0x186>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a40      	ldr	r2, [pc, #256]	@ (800be44 <HAL_SPI_TransmitReceive+0x280>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	f040 80ac 	bne.w	800bea2 <HAL_SPI_TransmitReceive+0x2de>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800bd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd4c:	089b      	lsrs	r3, r3, #2
 800bd4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd50:	e09e      	b.n	800be90 <HAL_SPI_TransmitReceive+0x2cc>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	695b      	ldr	r3, [r3, #20]
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d120      	bne.n	800bda2 <HAL_SPI_TransmitReceive+0x1de>
 800bd60:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d01d      	beq.n	800bda2 <HAL_SPI_TransmitReceive+0x1de>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bd66:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bd68:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6c:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d217      	bcs.n	800bda2 <HAL_SPI_TransmitReceive+0x1de>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6812      	ldr	r2, [r2, #0]
 800bd7c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd82:	1d1a      	adds	r2, r3, #4
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	3b01      	subs	r3, #1
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bda0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bdaa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d06f      	beq.n	800be90 <HAL_SPI_TransmitReceive+0x2cc>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	695b      	ldr	r3, [r3, #20]
 800bdb6:	f003 0301 	and.w	r3, r3, #1
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d118      	bne.n	800bdf0 <HAL_SPI_TransmitReceive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdc6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bdc8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdce:	1d1a      	adds	r2, r3, #4
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	3b01      	subs	r3, #1
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bdec:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bdee:	e04f      	b.n	800be90 <HAL_SPI_TransmitReceive+0x2cc>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bdf0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bdf2:	8bfb      	ldrh	r3, [r7, #30]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d227      	bcs.n	800be48 <HAL_SPI_TransmitReceive+0x284>
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d022      	beq.n	800be48 <HAL_SPI_TransmitReceive+0x284>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be0a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800be0c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be12:	1d1a      	adds	r2, r3, #4
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800be1e:	b29b      	uxth	r3, r3
 800be20:	3b01      	subs	r3, #1
 800be22:	b29a      	uxth	r2, r3
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800be30:	853b      	strh	r3, [r7, #40]	@ 0x28
 800be32:	e02d      	b.n	800be90 <HAL_SPI_TransmitReceive+0x2cc>
 800be34:	46002000 	.word	0x46002000
 800be38:	40013000 	.word	0x40013000
 800be3c:	50013000 	.word	0x50013000
 800be40:	40003800 	.word	0x40003800
 800be44:	50003800 	.word	0x50003800
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be48:	f7f9 fefa 	bl	8005c40 <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be54:	429a      	cmp	r2, r3
 800be56:	d803      	bhi.n	800be60 <HAL_SPI_TransmitReceive+0x29c>
 800be58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be5e:	d102      	bne.n	800be66 <HAL_SPI_TransmitReceive+0x2a2>
 800be60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be62:	2b00      	cmp	r3, #0
 800be64:	d114      	bne.n	800be90 <HAL_SPI_TransmitReceive+0x2cc>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f000 fa0c 	bl	800c284 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e1f4      	b.n	800c27a <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800be90:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800be92:	2b00      	cmp	r3, #0
 800be94:	f47f af5d 	bne.w	800bd52 <HAL_SPI_TransmitReceive+0x18e>
 800be98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f47f af59 	bne.w	800bd52 <HAL_SPI_TransmitReceive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800bea0:	e1c5      	b.n	800c22e <HAL_SPI_TransmitReceive+0x66a>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	2b07      	cmp	r3, #7
 800bea8:	f240 81b9 	bls.w	800c21e <HAL_SPI_TransmitReceive+0x65a>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800beac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beae:	085b      	lsrs	r3, r3, #1
 800beb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800beb2:	e0c0      	b.n	800c036 <HAL_SPI_TransmitReceive+0x472>
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	695b      	ldr	r3, [r3, #20]
 800beba:	f003 0302 	and.w	r3, r3, #2
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d11f      	bne.n	800bf02 <HAL_SPI_TransmitReceive+0x33e>
 800bec2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d01c      	beq.n	800bf02 <HAL_SPI_TransmitReceive+0x33e>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bec8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800beca:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800becc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bece:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d216      	bcs.n	800bf02 <HAL_SPI_TransmitReceive+0x33e>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bed8:	881a      	ldrh	r2, [r3, #0]
 800beda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bedc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bee2:	1c9a      	adds	r2, r3, #2
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800beee:	b29b      	uxth	r3, r3
 800bef0:	3b01      	subs	r3, #1
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf00:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bf0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f000 8092 	beq.w	800c036 <HAL_SPI_TransmitReceive+0x472>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d118      	bne.n	800bf52 <HAL_SPI_TransmitReceive+0x38e>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf24:	6a3a      	ldr	r2, [r7, #32]
 800bf26:	8812      	ldrh	r2, [r2, #0]
 800bf28:	b292      	uxth	r2, r2
 800bf2a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf30:	1c9a      	adds	r2, r3, #2
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bf4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bf50:	e071      	b.n	800c036 <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bf52:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bf54:	8bfb      	ldrh	r3, [r7, #30]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d228      	bcs.n	800bfac <HAL_SPI_TransmitReceive+0x3e8>
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d023      	beq.n	800bfac <HAL_SPI_TransmitReceive+0x3e8>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf68:	6a3a      	ldr	r2, [r7, #32]
 800bf6a:	8812      	ldrh	r2, [r2, #0]
 800bf6c:	b292      	uxth	r2, r2
 800bf6e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf74:	1c9a      	adds	r2, r3, #2
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf7e:	6a3a      	ldr	r2, [r7, #32]
 800bf80:	8812      	ldrh	r2, [r2, #0]
 800bf82:	b292      	uxth	r2, r2
 800bf84:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf8a:	1c9a      	adds	r2, r3, #2
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)2UL;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	3b02      	subs	r3, #2
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bfa8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bfaa:	e044      	b.n	800c036 <HAL_SPI_TransmitReceive+0x472>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bfac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d11d      	bne.n	800bfee <HAL_SPI_TransmitReceive+0x42a>
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d018      	beq.n	800bfee <HAL_SPI_TransmitReceive+0x42a>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfc0:	6a3a      	ldr	r2, [r7, #32]
 800bfc2:	8812      	ldrh	r2, [r2, #0]
 800bfc4:	b292      	uxth	r2, r2
 800bfc6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfcc:	1c9a      	adds	r2, r3, #2
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bfea:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bfec:	e023      	b.n	800c036 <HAL_SPI_TransmitReceive+0x472>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfee:	f7f9 fe27 	bl	8005c40 <HAL_GetTick>
 800bff2:	4602      	mov	r2, r0
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d803      	bhi.n	800c006 <HAL_SPI_TransmitReceive+0x442>
 800bffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c004:	d102      	bne.n	800c00c <HAL_SPI_TransmitReceive+0x448>
 800c006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d114      	bne.n	800c036 <HAL_SPI_TransmitReceive+0x472>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f000 f939 	bl	800c284 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c018:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800c032:	2303      	movs	r3, #3
 800c034:	e121      	b.n	800c27a <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c036:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f47f af3b 	bne.w	800beb4 <HAL_SPI_TransmitReceive+0x2f0>
 800c03e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c040:	2b00      	cmp	r3, #0
 800c042:	f47f af37 	bne.w	800beb4 <HAL_SPI_TransmitReceive+0x2f0>
 800c046:	e0f2      	b.n	800c22e <HAL_SPI_TransmitReceive+0x66a>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	f003 0302 	and.w	r3, r3, #2
 800c052:	2b02      	cmp	r3, #2
 800c054:	d121      	bne.n	800c09a <HAL_SPI_TransmitReceive+0x4d6>
 800c056:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d01e      	beq.n	800c09a <HAL_SPI_TransmitReceive+0x4d6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800c05c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c05e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800c060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c062:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c064:	429a      	cmp	r2, r3
 800c066:	d218      	bcs.n	800c09a <HAL_SPI_TransmitReceive+0x4d6>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	3320      	adds	r3, #32
 800c072:	7812      	ldrb	r2, [r2, #0]
 800c074:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c07a:	1c5a      	adds	r2, r3, #1
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c086:	b29b      	uxth	r3, r3
 800c088:	3b01      	subs	r3, #1
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c098:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	695b      	ldr	r3, [r3, #20]
 800c0a0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800c0a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 80ba 	beq.w	800c21e <HAL_SPI_TransmitReceive+0x65a>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	695b      	ldr	r3, [r3, #20]
 800c0b0:	f003 0301 	and.w	r3, r3, #1
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d11b      	bne.n	800c0f0 <HAL_SPI_TransmitReceive+0x52c>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0c4:	7812      	ldrb	r2, [r2, #0]
 800c0c6:	b2d2      	uxtb	r2, r2
 800c0c8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0ce:	1c5a      	adds	r2, r3, #1
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c0ec:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c0ee:	e096      	b.n	800c21e <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c0f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c0f2:	8bfb      	ldrh	r3, [r7, #30]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d24a      	bcs.n	800c18e <HAL_SPI_TransmitReceive+0x5ca>
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d045      	beq.n	800c18e <HAL_SPI_TransmitReceive+0x5ca>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c10e:	7812      	ldrb	r2, [r2, #0]
 800c110:	b2d2      	uxtb	r2, r2
 800c112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c118:	1c5a      	adds	r2, r3, #1
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c12a:	7812      	ldrb	r2, [r2, #0]
 800c12c:	b2d2      	uxtb	r2, r2
 800c12e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c134:	1c5a      	adds	r2, r3, #1
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c146:	7812      	ldrb	r2, [r2, #0]
 800c148:	b2d2      	uxtb	r2, r2
 800c14a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	66da      	str	r2, [r3, #108]	@ 0x6c
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c162:	7812      	ldrb	r2, [r2, #0]
 800c164:	b2d2      	uxtb	r2, r2
 800c166:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c16c:	1c5a      	adds	r2, r3, #1
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount -= (uint16_t)4UL;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c178:	b29b      	uxth	r3, r3
 800c17a:	3b04      	subs	r3, #4
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c18a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c18c:	e047      	b.n	800c21e <HAL_SPI_TransmitReceive+0x65a>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c18e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c190:	2b03      	cmp	r3, #3
 800c192:	d820      	bhi.n	800c1d6 <HAL_SPI_TransmitReceive+0x612>
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d01b      	beq.n	800c1d6 <HAL_SPI_TransmitReceive+0x612>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1aa:	7812      	ldrb	r2, [r2, #0]
 800c1ac:	b2d2      	uxtb	r2, r2
 800c1ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1b4:	1c5a      	adds	r2, r3, #1
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	66da      	str	r2, [r3, #108]	@ 0x6c
          hspi->RxXferCount--;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
          initial_RxXferCount = hspi->RxXferCount;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800c1d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c1d4:	e023      	b.n	800c21e <HAL_SPI_TransmitReceive+0x65a>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1d6:	f7f9 fd33 	bl	8005c40 <HAL_GetTick>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d803      	bhi.n	800c1ee <HAL_SPI_TransmitReceive+0x62a>
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1ec:	d102      	bne.n	800c1f4 <HAL_SPI_TransmitReceive+0x630>
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d114      	bne.n	800c21e <HAL_SPI_TransmitReceive+0x65a>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f000 f845 	bl	800c284 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c200:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            hspi->State = HAL_SPI_STATE_READY;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

            return HAL_TIMEOUT;
 800c21a:	2303      	movs	r3, #3
 800c21c:	e02d      	b.n	800c27a <HAL_SPI_TransmitReceive+0x6b6>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c21e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c220:	2b00      	cmp	r3, #0
 800c222:	f47f af11 	bne.w	800c048 <HAL_SPI_TransmitReceive+0x484>
 800c226:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f47f af0d 	bne.w	800c048 <HAL_SPI_TransmitReceive+0x484>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c234:	2200      	movs	r2, #0
 800c236:	2108      	movs	r1, #8
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f000 f8c3 	bl	800c3c4 <SPI_WaitOnFlagUntilTimeout>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d007      	beq.n	800c254 <HAL_SPI_TransmitReceive+0x690>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c24a:	f043 0220 	orr.w	r2, r3, #32
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f000 f815 	bl	800c284 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <HAL_SPI_TransmitReceive+0x6b4>
  {
    return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e000      	b.n	800c27a <HAL_SPI_TransmitReceive+0x6b6>
  }
  else
  {
    return HAL_OK;
 800c278:	2300      	movs	r3, #0
  }
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3730      	adds	r7, #48	@ 0x30
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop

0800c284 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	695b      	ldr	r3, [r3, #20]
 800c292:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	699a      	ldr	r2, [r3, #24]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f042 0208 	orr.w	r2, r2, #8
 800c2a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	699a      	ldr	r2, [r3, #24]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f042 0210 	orr.w	r2, r2, #16
 800c2b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 0201 	bic.w	r2, r2, #1
 800c2c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	6812      	ldr	r2, [r2, #0]
 800c2ce:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800c2d2:	f023 0303 	bic.w	r3, r3, #3
 800c2d6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689a      	ldr	r2, [r3, #8]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c2e6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	d014      	beq.n	800c31e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f003 0320 	and.w	r3, r3, #32
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00f      	beq.n	800c31e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c304:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	699a      	ldr	r2, [r3, #24]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f042 0220 	orr.w	r2, r2, #32
 800c31c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b03      	cmp	r3, #3
 800c328:	d014      	beq.n	800c354 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00f      	beq.n	800c354 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c33a:	f043 0204 	orr.w	r2, r3, #4
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	699a      	ldr	r2, [r3, #24]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c352:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00f      	beq.n	800c37e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c364:	f043 0201 	orr.w	r2, r3, #1
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	699a      	ldr	r2, [r3, #24]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c37c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00f      	beq.n	800c3a8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c38e:	f043 0208 	orr.w	r2, r3, #8
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	699a      	ldr	r2, [r3, #24]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c3a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800c3b8:	bf00      	nop
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	603b      	str	r3, [r7, #0]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c3d4:	e010      	b.n	800c3f8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3d6:	f7f9 fc33 	bl	8005c40 <HAL_GetTick>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	683a      	ldr	r2, [r7, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d803      	bhi.n	800c3ee <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3ec:	d102      	bne.n	800c3f4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d101      	bne.n	800c3f8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	e00f      	b.n	800c418 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	695a      	ldr	r2, [r3, #20]
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	4013      	ands	r3, r2
 800c402:	68ba      	ldr	r2, [r7, #8]
 800c404:	429a      	cmp	r2, r3
 800c406:	bf0c      	ite	eq
 800c408:	2301      	moveq	r3, #1
 800c40a:	2300      	movne	r3, #0
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	461a      	mov	r2, r3
 800c410:	79fb      	ldrb	r3, [r7, #7]
 800c412:	429a      	cmp	r2, r3
 800c414:	d0df      	beq.n	800c3d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c42c:	095b      	lsrs	r3, r3, #5
 800c42e:	3301      	adds	r3, #1
 800c430:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	3301      	adds	r3, #1
 800c438:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	3307      	adds	r3, #7
 800c43e:	08db      	lsrs	r3, r3, #3
 800c440:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	fb02 f303 	mul.w	r3, r2, r3
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr

0800c456 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c456:	b480      	push	{r7}
 800c458:	b083      	sub	sp, #12
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
 800c45e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d12e      	bne.n	800c4ca <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c472:	2b01      	cmp	r3, #1
 800c474:	d101      	bne.n	800c47a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c476:	2302      	movs	r3, #2
 800c478:	e028      	b.n	800c4cc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2202      	movs	r2, #2
 800c486:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f022 0201 	bic.w	r2, r2, #1
 800c498:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800c4a6:	ea42 0103 	orr.w	r1, r2, r3
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	689a      	ldr	r2, [r3, #8]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e000      	b.n	800c4cc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
  }
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d101      	bne.n	800c4ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e049      	b.n	800c57e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d106      	bne.n	800c504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7f8 ffcc 	bl	800549c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2202      	movs	r2, #2
 800c508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	3304      	adds	r3, #4
 800c514:	4619      	mov	r1, r3
 800c516:	4610      	mov	r0, r2
 800c518:	f000 f9d0 	bl	800c8bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2201      	movs	r2, #1
 800c560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
	...

0800c588 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d001      	beq.n	800c5a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	e06a      	b.n	800c676 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2202      	movs	r2, #2
 800c5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a35      	ldr	r2, [pc, #212]	@ (800c684 <HAL_TIM_Base_Start+0xfc>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d040      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a34      	ldr	r2, [pc, #208]	@ (800c688 <HAL_TIM_Base_Start+0x100>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d03b      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5c4:	d036      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c5ce:	d031      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a2d      	ldr	r2, [pc, #180]	@ (800c68c <HAL_TIM_Base_Start+0x104>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d02c      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4a2c      	ldr	r2, [pc, #176]	@ (800c690 <HAL_TIM_Base_Start+0x108>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d027      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a2a      	ldr	r2, [pc, #168]	@ (800c694 <HAL_TIM_Base_Start+0x10c>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d022      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a29      	ldr	r2, [pc, #164]	@ (800c698 <HAL_TIM_Base_Start+0x110>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d01d      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a27      	ldr	r2, [pc, #156]	@ (800c69c <HAL_TIM_Base_Start+0x114>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d018      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a26      	ldr	r2, [pc, #152]	@ (800c6a0 <HAL_TIM_Base_Start+0x118>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d013      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a24      	ldr	r2, [pc, #144]	@ (800c6a4 <HAL_TIM_Base_Start+0x11c>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d00e      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a23      	ldr	r2, [pc, #140]	@ (800c6a8 <HAL_TIM_Base_Start+0x120>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d009      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a21      	ldr	r2, [pc, #132]	@ (800c6ac <HAL_TIM_Base_Start+0x124>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d004      	beq.n	800c634 <HAL_TIM_Base_Start+0xac>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a20      	ldr	r2, [pc, #128]	@ (800c6b0 <HAL_TIM_Base_Start+0x128>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d115      	bne.n	800c660 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	689a      	ldr	r2, [r3, #8]
 800c63a:	4b1e      	ldr	r3, [pc, #120]	@ (800c6b4 <HAL_TIM_Base_Start+0x12c>)
 800c63c:	4013      	ands	r3, r2
 800c63e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b06      	cmp	r3, #6
 800c644:	d015      	beq.n	800c672 <HAL_TIM_Base_Start+0xea>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c64c:	d011      	beq.n	800c672 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f042 0201 	orr.w	r2, r2, #1
 800c65c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c65e:	e008      	b.n	800c672 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f042 0201 	orr.w	r2, r2, #1
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	e000      	b.n	800c674 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c672:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3714      	adds	r7, #20
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	40012c00 	.word	0x40012c00
 800c688:	50012c00 	.word	0x50012c00
 800c68c:	40000400 	.word	0x40000400
 800c690:	50000400 	.word	0x50000400
 800c694:	40000800 	.word	0x40000800
 800c698:	50000800 	.word	0x50000800
 800c69c:	40000c00 	.word	0x40000c00
 800c6a0:	50000c00 	.word	0x50000c00
 800c6a4:	40013400 	.word	0x40013400
 800c6a8:	50013400 	.word	0x50013400
 800c6ac:	40014000 	.word	0x40014000
 800c6b0:	50014000 	.word	0x50014000
 800c6b4:	00010007 	.word	0x00010007

0800c6b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d101      	bne.n	800c6d4 <HAL_TIM_ConfigClockSource+0x1c>
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	e0e6      	b.n	800c8a2 <HAL_TIM_ConfigClockSource+0x1ea>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2202      	movs	r2, #2
 800c6e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c6f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c6f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a67      	ldr	r2, [pc, #412]	@ (800c8ac <HAL_TIM_ConfigClockSource+0x1f4>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	f000 80b1 	beq.w	800c876 <HAL_TIM_ConfigClockSource+0x1be>
 800c714:	4a65      	ldr	r2, [pc, #404]	@ (800c8ac <HAL_TIM_ConfigClockSource+0x1f4>)
 800c716:	4293      	cmp	r3, r2
 800c718:	f200 80b6 	bhi.w	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c71c:	4a64      	ldr	r2, [pc, #400]	@ (800c8b0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	f000 80a9 	beq.w	800c876 <HAL_TIM_ConfigClockSource+0x1be>
 800c724:	4a62      	ldr	r2, [pc, #392]	@ (800c8b0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800c726:	4293      	cmp	r3, r2
 800c728:	f200 80ae 	bhi.w	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c72c:	4a61      	ldr	r2, [pc, #388]	@ (800c8b4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	f000 80a1 	beq.w	800c876 <HAL_TIM_ConfigClockSource+0x1be>
 800c734:	4a5f      	ldr	r2, [pc, #380]	@ (800c8b4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800c736:	4293      	cmp	r3, r2
 800c738:	f200 80a6 	bhi.w	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c73c:	4a5e      	ldr	r2, [pc, #376]	@ (800c8b8 <HAL_TIM_ConfigClockSource+0x200>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	f000 8099 	beq.w	800c876 <HAL_TIM_ConfigClockSource+0x1be>
 800c744:	4a5c      	ldr	r2, [pc, #368]	@ (800c8b8 <HAL_TIM_ConfigClockSource+0x200>)
 800c746:	4293      	cmp	r3, r2
 800c748:	f200 809e 	bhi.w	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c74c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c750:	f000 8091 	beq.w	800c876 <HAL_TIM_ConfigClockSource+0x1be>
 800c754:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c758:	f200 8096 	bhi.w	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c75c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c760:	f000 8089 	beq.w	800c876 <HAL_TIM_ConfigClockSource+0x1be>
 800c764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c768:	f200 808e 	bhi.w	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c76c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c770:	d03e      	beq.n	800c7f0 <HAL_TIM_ConfigClockSource+0x138>
 800c772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c776:	f200 8087 	bhi.w	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c77a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c77e:	f000 8086 	beq.w	800c88e <HAL_TIM_ConfigClockSource+0x1d6>
 800c782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c786:	d87f      	bhi.n	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c788:	2b70      	cmp	r3, #112	@ 0x70
 800c78a:	d01a      	beq.n	800c7c2 <HAL_TIM_ConfigClockSource+0x10a>
 800c78c:	2b70      	cmp	r3, #112	@ 0x70
 800c78e:	d87b      	bhi.n	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c790:	2b60      	cmp	r3, #96	@ 0x60
 800c792:	d050      	beq.n	800c836 <HAL_TIM_ConfigClockSource+0x17e>
 800c794:	2b60      	cmp	r3, #96	@ 0x60
 800c796:	d877      	bhi.n	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c798:	2b50      	cmp	r3, #80	@ 0x50
 800c79a:	d03c      	beq.n	800c816 <HAL_TIM_ConfigClockSource+0x15e>
 800c79c:	2b50      	cmp	r3, #80	@ 0x50
 800c79e:	d873      	bhi.n	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c7a0:	2b40      	cmp	r3, #64	@ 0x40
 800c7a2:	d058      	beq.n	800c856 <HAL_TIM_ConfigClockSource+0x19e>
 800c7a4:	2b40      	cmp	r3, #64	@ 0x40
 800c7a6:	d86f      	bhi.n	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c7a8:	2b30      	cmp	r3, #48	@ 0x30
 800c7aa:	d064      	beq.n	800c876 <HAL_TIM_ConfigClockSource+0x1be>
 800c7ac:	2b30      	cmp	r3, #48	@ 0x30
 800c7ae:	d86b      	bhi.n	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c7b0:	2b20      	cmp	r3, #32
 800c7b2:	d060      	beq.n	800c876 <HAL_TIM_ConfigClockSource+0x1be>
 800c7b4:	2b20      	cmp	r3, #32
 800c7b6:	d867      	bhi.n	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d05c      	beq.n	800c876 <HAL_TIM_ConfigClockSource+0x1be>
 800c7bc:	2b10      	cmp	r3, #16
 800c7be:	d05a      	beq.n	800c876 <HAL_TIM_ConfigClockSource+0x1be>
 800c7c0:	e062      	b.n	800c888 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7d2:	f000 fa50 	bl	800cc76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c7e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	609a      	str	r2, [r3, #8]
      break;
 800c7ee:	e04f      	b.n	800c890 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c800:	f000 fa39 	bl	800cc76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	689a      	ldr	r2, [r3, #8]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c812:	609a      	str	r2, [r3, #8]
      break;
 800c814:	e03c      	b.n	800c890 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c822:	461a      	mov	r2, r3
 800c824:	f000 f94a 	bl	800cabc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2150      	movs	r1, #80	@ 0x50
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fa04 	bl	800cc3c <TIM_ITRx_SetConfig>
      break;
 800c834:	e02c      	b.n	800c890 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c842:	461a      	mov	r2, r3
 800c844:	f000 f9ac 	bl	800cba0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2160      	movs	r1, #96	@ 0x60
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 f9f4 	bl	800cc3c <TIM_ITRx_SetConfig>
      break;
 800c854:	e01c      	b.n	800c890 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c862:	461a      	mov	r2, r3
 800c864:	f000 f92a 	bl	800cabc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2140      	movs	r1, #64	@ 0x40
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 f9e4 	bl	800cc3c <TIM_ITRx_SetConfig>
      break;
 800c874:	e00c      	b.n	800c890 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4619      	mov	r1, r3
 800c880:	4610      	mov	r0, r2
 800c882:	f000 f9db 	bl	800cc3c <TIM_ITRx_SetConfig>
      break;
 800c886:	e003      	b.n	800c890 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800c888:	2301      	movs	r3, #1
 800c88a:	73fb      	strb	r3, [r7, #15]
      break;
 800c88c:	e000      	b.n	800c890 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800c88e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	00100070 	.word	0x00100070
 800c8b0:	00100040 	.word	0x00100040
 800c8b4:	00100030 	.word	0x00100030
 800c8b8:	00100020 	.word	0x00100020

0800c8bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a6b      	ldr	r2, [pc, #428]	@ (800ca7c <TIM_Base_SetConfig+0x1c0>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d02b      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a6a      	ldr	r2, [pc, #424]	@ (800ca80 <TIM_Base_SetConfig+0x1c4>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d027      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8e2:	d023      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8ea:	d01f      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	4a65      	ldr	r2, [pc, #404]	@ (800ca84 <TIM_Base_SetConfig+0x1c8>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d01b      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a64      	ldr	r2, [pc, #400]	@ (800ca88 <TIM_Base_SetConfig+0x1cc>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d017      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a63      	ldr	r2, [pc, #396]	@ (800ca8c <TIM_Base_SetConfig+0x1d0>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d013      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a62      	ldr	r2, [pc, #392]	@ (800ca90 <TIM_Base_SetConfig+0x1d4>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d00f      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a61      	ldr	r2, [pc, #388]	@ (800ca94 <TIM_Base_SetConfig+0x1d8>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d00b      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a60      	ldr	r2, [pc, #384]	@ (800ca98 <TIM_Base_SetConfig+0x1dc>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d007      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a5f      	ldr	r2, [pc, #380]	@ (800ca9c <TIM_Base_SetConfig+0x1e0>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d003      	beq.n	800c92c <TIM_Base_SetConfig+0x70>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4a5e      	ldr	r2, [pc, #376]	@ (800caa0 <TIM_Base_SetConfig+0x1e4>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d108      	bne.n	800c93e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a4e      	ldr	r2, [pc, #312]	@ (800ca7c <TIM_Base_SetConfig+0x1c0>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d043      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4a4d      	ldr	r2, [pc, #308]	@ (800ca80 <TIM_Base_SetConfig+0x1c4>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d03f      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c954:	d03b      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c95c:	d037      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a48      	ldr	r2, [pc, #288]	@ (800ca84 <TIM_Base_SetConfig+0x1c8>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d033      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a47      	ldr	r2, [pc, #284]	@ (800ca88 <TIM_Base_SetConfig+0x1cc>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d02f      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a46      	ldr	r2, [pc, #280]	@ (800ca8c <TIM_Base_SetConfig+0x1d0>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d02b      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a45      	ldr	r2, [pc, #276]	@ (800ca90 <TIM_Base_SetConfig+0x1d4>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d027      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a44      	ldr	r2, [pc, #272]	@ (800ca94 <TIM_Base_SetConfig+0x1d8>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d023      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a43      	ldr	r2, [pc, #268]	@ (800ca98 <TIM_Base_SetConfig+0x1dc>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d01f      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4a42      	ldr	r2, [pc, #264]	@ (800ca9c <TIM_Base_SetConfig+0x1e0>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d01b      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a41      	ldr	r2, [pc, #260]	@ (800caa0 <TIM_Base_SetConfig+0x1e4>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d017      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a40      	ldr	r2, [pc, #256]	@ (800caa4 <TIM_Base_SetConfig+0x1e8>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d013      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a3f      	ldr	r2, [pc, #252]	@ (800caa8 <TIM_Base_SetConfig+0x1ec>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d00f      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a3e      	ldr	r2, [pc, #248]	@ (800caac <TIM_Base_SetConfig+0x1f0>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d00b      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a3d      	ldr	r2, [pc, #244]	@ (800cab0 <TIM_Base_SetConfig+0x1f4>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d007      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4a3c      	ldr	r2, [pc, #240]	@ (800cab4 <TIM_Base_SetConfig+0x1f8>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d003      	beq.n	800c9ce <TIM_Base_SetConfig+0x112>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	4a3b      	ldr	r2, [pc, #236]	@ (800cab8 <TIM_Base_SetConfig+0x1fc>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d108      	bne.n	800c9e0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	689a      	ldr	r2, [r3, #8]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4a1e      	ldr	r2, [pc, #120]	@ (800ca7c <TIM_Base_SetConfig+0x1c0>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d023      	beq.n	800ca4e <TIM_Base_SetConfig+0x192>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a1d      	ldr	r2, [pc, #116]	@ (800ca80 <TIM_Base_SetConfig+0x1c4>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d01f      	beq.n	800ca4e <TIM_Base_SetConfig+0x192>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a22      	ldr	r2, [pc, #136]	@ (800ca9c <TIM_Base_SetConfig+0x1e0>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d01b      	beq.n	800ca4e <TIM_Base_SetConfig+0x192>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a21      	ldr	r2, [pc, #132]	@ (800caa0 <TIM_Base_SetConfig+0x1e4>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d017      	beq.n	800ca4e <TIM_Base_SetConfig+0x192>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a20      	ldr	r2, [pc, #128]	@ (800caa4 <TIM_Base_SetConfig+0x1e8>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d013      	beq.n	800ca4e <TIM_Base_SetConfig+0x192>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a1f      	ldr	r2, [pc, #124]	@ (800caa8 <TIM_Base_SetConfig+0x1ec>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d00f      	beq.n	800ca4e <TIM_Base_SetConfig+0x192>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a1e      	ldr	r2, [pc, #120]	@ (800caac <TIM_Base_SetConfig+0x1f0>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d00b      	beq.n	800ca4e <TIM_Base_SetConfig+0x192>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a1d      	ldr	r2, [pc, #116]	@ (800cab0 <TIM_Base_SetConfig+0x1f4>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d007      	beq.n	800ca4e <TIM_Base_SetConfig+0x192>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4a1c      	ldr	r2, [pc, #112]	@ (800cab4 <TIM_Base_SetConfig+0x1f8>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d003      	beq.n	800ca4e <TIM_Base_SetConfig+0x192>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4a1b      	ldr	r2, [pc, #108]	@ (800cab8 <TIM_Base_SetConfig+0x1fc>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d103      	bne.n	800ca56 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	691a      	ldr	r2, [r3, #16]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f043 0204 	orr.w	r2, r3, #4
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2201      	movs	r2, #1
 800ca66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	601a      	str	r2, [r3, #0]
}
 800ca6e:	bf00      	nop
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	40012c00 	.word	0x40012c00
 800ca80:	50012c00 	.word	0x50012c00
 800ca84:	40000400 	.word	0x40000400
 800ca88:	50000400 	.word	0x50000400
 800ca8c:	40000800 	.word	0x40000800
 800ca90:	50000800 	.word	0x50000800
 800ca94:	40000c00 	.word	0x40000c00
 800ca98:	50000c00 	.word	0x50000c00
 800ca9c:	40013400 	.word	0x40013400
 800caa0:	50013400 	.word	0x50013400
 800caa4:	40014000 	.word	0x40014000
 800caa8:	50014000 	.word	0x50014000
 800caac:	40014400 	.word	0x40014400
 800cab0:	50014400 	.word	0x50014400
 800cab4:	40014800 	.word	0x40014800
 800cab8:	50014800 	.word	0x50014800

0800cabc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b087      	sub	sp, #28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	6a1b      	ldr	r3, [r3, #32]
 800cacc:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6a1b      	ldr	r3, [r3, #32]
 800cad2:	f023 0201 	bic.w	r2, r3, #1
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 1N: Reset the CC1NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	4a26      	ldr	r2, [pc, #152]	@ (800cb78 <TIM_TI1_ConfigInputStage+0xbc>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d023      	beq.n	800cb2a <TIM_TI1_ConfigInputStage+0x6e>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	4a25      	ldr	r2, [pc, #148]	@ (800cb7c <TIM_TI1_ConfigInputStage+0xc0>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d01f      	beq.n	800cb2a <TIM_TI1_ConfigInputStage+0x6e>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	4a24      	ldr	r2, [pc, #144]	@ (800cb80 <TIM_TI1_ConfigInputStage+0xc4>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d01b      	beq.n	800cb2a <TIM_TI1_ConfigInputStage+0x6e>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	4a23      	ldr	r2, [pc, #140]	@ (800cb84 <TIM_TI1_ConfigInputStage+0xc8>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d017      	beq.n	800cb2a <TIM_TI1_ConfigInputStage+0x6e>
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	4a22      	ldr	r2, [pc, #136]	@ (800cb88 <TIM_TI1_ConfigInputStage+0xcc>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d013      	beq.n	800cb2a <TIM_TI1_ConfigInputStage+0x6e>
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	4a21      	ldr	r2, [pc, #132]	@ (800cb8c <TIM_TI1_ConfigInputStage+0xd0>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d00f      	beq.n	800cb2a <TIM_TI1_ConfigInputStage+0x6e>
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	4a20      	ldr	r2, [pc, #128]	@ (800cb90 <TIM_TI1_ConfigInputStage+0xd4>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d00b      	beq.n	800cb2a <TIM_TI1_ConfigInputStage+0x6e>
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	4a1f      	ldr	r2, [pc, #124]	@ (800cb94 <TIM_TI1_ConfigInputStage+0xd8>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d007      	beq.n	800cb2a <TIM_TI1_ConfigInputStage+0x6e>
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	4a1e      	ldr	r2, [pc, #120]	@ (800cb98 <TIM_TI1_ConfigInputStage+0xdc>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d003      	beq.n	800cb2a <TIM_TI1_ConfigInputStage+0x6e>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	4a1d      	ldr	r2, [pc, #116]	@ (800cb9c <TIM_TI1_ConfigInputStage+0xe0>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d105      	bne.n	800cb36 <TIM_TI1_ConfigInputStage+0x7a>
  {
    TIMx->CCER &= ~TIM_CCER_CC1NE;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	f023 0204 	bic.w	r2, r3, #4
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	699b      	ldr	r3, [r3, #24]
 800cb3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cb42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	011b      	lsls	r3, r3, #4
 800cb48:	693a      	ldr	r2, [r7, #16]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f023 030a 	bic.w	r3, r3, #10
 800cb54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	621a      	str	r2, [r3, #32]
}
 800cb6a:	bf00      	nop
 800cb6c:	371c      	adds	r7, #28
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	40012c00 	.word	0x40012c00
 800cb7c:	50012c00 	.word	0x50012c00
 800cb80:	40013400 	.word	0x40013400
 800cb84:	50013400 	.word	0x50013400
 800cb88:	40014000 	.word	0x40014000
 800cb8c:	50014000 	.word	0x50014000
 800cb90:	40014400 	.word	0x40014400
 800cb94:	50014400 	.word	0x50014400
 800cb98:	40014800 	.word	0x40014800
 800cb9c:	50014800 	.word	0x50014800

0800cba0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b087      	sub	sp, #28
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6a1b      	ldr	r3, [r3, #32]
 800cbb0:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6a1b      	ldr	r3, [r3, #32]
 800cbb6:	f023 0210 	bic.w	r2, r3, #16
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 2N: Reset the CC2NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	4a1a      	ldr	r2, [pc, #104]	@ (800cc2c <TIM_TI2_ConfigInputStage+0x8c>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d00b      	beq.n	800cbde <TIM_TI2_ConfigInputStage+0x3e>
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	4a19      	ldr	r2, [pc, #100]	@ (800cc30 <TIM_TI2_ConfigInputStage+0x90>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d007      	beq.n	800cbde <TIM_TI2_ConfigInputStage+0x3e>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	4a18      	ldr	r2, [pc, #96]	@ (800cc34 <TIM_TI2_ConfigInputStage+0x94>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d003      	beq.n	800cbde <TIM_TI2_ConfigInputStage+0x3e>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	4a17      	ldr	r2, [pc, #92]	@ (800cc38 <TIM_TI2_ConfigInputStage+0x98>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d105      	bne.n	800cbea <TIM_TI2_ConfigInputStage+0x4a>
  {
    TIMx->CCER &= ~TIM_CCER_CC2NE;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6a1b      	ldr	r3, [r3, #32]
 800cbe2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	699b      	ldr	r3, [r3, #24]
 800cbee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cbf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	031b      	lsls	r3, r3, #12
 800cbfc:	693a      	ldr	r2, [r7, #16]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	011b      	lsls	r3, r3, #4
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	693a      	ldr	r2, [r7, #16]
 800cc18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	697a      	ldr	r2, [r7, #20]
 800cc1e:	621a      	str	r2, [r3, #32]
}
 800cc20:	bf00      	nop
 800cc22:	371c      	adds	r7, #28
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	40012c00 	.word	0x40012c00
 800cc30:	50012c00 	.word	0x50012c00
 800cc34:	40013400 	.word	0x40013400
 800cc38:	50013400 	.word	0x50013400

0800cc3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800cc52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc58:	683a      	ldr	r2, [r7, #0]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	f043 0307 	orr.w	r3, r3, #7
 800cc62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	609a      	str	r2, [r3, #8]
}
 800cc6a:	bf00      	nop
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc76:	b480      	push	{r7}
 800cc78:	b087      	sub	sp, #28
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	60f8      	str	r0, [r7, #12]
 800cc7e:	60b9      	str	r1, [r7, #8]
 800cc80:	607a      	str	r2, [r7, #4]
 800cc82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cc90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	021a      	lsls	r2, r3, #8
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	431a      	orrs	r2, r3
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	4313      	orrs	r3, r2
 800cca2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	697a      	ldr	r2, [r7, #20]
 800cca8:	609a      	str	r2, [r3, #8]
}
 800ccaa:	bf00      	nop
 800ccac:	371c      	adds	r7, #28
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
	...

0800ccb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d101      	bne.n	800ccd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cccc:	2302      	movs	r3, #2
 800ccce:	e097      	b.n	800ce00 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2202      	movs	r2, #2
 800ccdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a45      	ldr	r2, [pc, #276]	@ (800ce0c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d00e      	beq.n	800cd18 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a44      	ldr	r2, [pc, #272]	@ (800ce10 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d009      	beq.n	800cd18 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a42      	ldr	r2, [pc, #264]	@ (800ce14 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d004      	beq.n	800cd18 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a41      	ldr	r2, [pc, #260]	@ (800ce18 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d108      	bne.n	800cd2a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cd1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800cd30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a2f      	ldr	r2, [pc, #188]	@ (800ce0c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d040      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a2e      	ldr	r2, [pc, #184]	@ (800ce10 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d03b      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd64:	d036      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd6e:	d031      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a29      	ldr	r2, [pc, #164]	@ (800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d02c      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a28      	ldr	r2, [pc, #160]	@ (800ce20 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d027      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a26      	ldr	r2, [pc, #152]	@ (800ce24 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d022      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a25      	ldr	r2, [pc, #148]	@ (800ce28 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d01d      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a23      	ldr	r2, [pc, #140]	@ (800ce2c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d018      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a22      	ldr	r2, [pc, #136]	@ (800ce30 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d013      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a18      	ldr	r2, [pc, #96]	@ (800ce14 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d00e      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a17      	ldr	r2, [pc, #92]	@ (800ce18 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d009      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a1b      	ldr	r2, [pc, #108]	@ (800ce34 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d004      	beq.n	800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a1a      	ldr	r2, [pc, #104]	@ (800ce38 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d10c      	bne.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	40012c00 	.word	0x40012c00
 800ce10:	50012c00 	.word	0x50012c00
 800ce14:	40013400 	.word	0x40013400
 800ce18:	50013400 	.word	0x50013400
 800ce1c:	40000400 	.word	0x40000400
 800ce20:	50000400 	.word	0x50000400
 800ce24:	40000800 	.word	0x40000800
 800ce28:	50000800 	.word	0x50000800
 800ce2c:	40000c00 	.word	0x40000c00
 800ce30:	50000c00 	.word	0x50000c00
 800ce34:	40014000 	.word	0x40014000
 800ce38:	50014000 	.word	0x50014000

0800ce3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e042      	b.n	800ced4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7f8 fb3b 	bl	80054dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2224      	movs	r2, #36	@ 0x24
 800ce6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f022 0201 	bic.w	r2, r2, #1
 800ce7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 fa64 	bl	800d354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f8b3 	bl	800cff8 <UART_SetConfig>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d101      	bne.n	800ce9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e01b      	b.n	800ced4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ceaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	689a      	ldr	r2, [r3, #8]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ceba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f042 0201 	orr.w	r2, r2, #1
 800ceca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 fae3 	bl	800d498 <UART_CheckIdleState>
 800ced2:	4603      	mov	r3, r0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08a      	sub	sp, #40	@ 0x28
 800cee0:	af02      	add	r7, sp, #8
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	4613      	mov	r3, r2
 800ceea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cef2:	2b20      	cmp	r3, #32
 800cef4:	d17b      	bne.n	800cfee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <HAL_UART_Transmit+0x26>
 800cefc:	88fb      	ldrh	r3, [r7, #6]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e074      	b.n	800cff0 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2221      	movs	r2, #33	@ 0x21
 800cf12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf16:	f7f8 fe93 	bl	8005c40 <HAL_GetTick>
 800cf1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	88fa      	ldrh	r2, [r7, #6]
 800cf20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	88fa      	ldrh	r2, [r7, #6]
 800cf28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf34:	d108      	bne.n	800cf48 <HAL_UART_Transmit+0x6c>
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d104      	bne.n	800cf48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	61bb      	str	r3, [r7, #24]
 800cf46:	e003      	b.n	800cf50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf50:	e030      	b.n	800cfb4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	2180      	movs	r1, #128	@ 0x80
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f000 fb45 	bl	800d5ec <UART_WaitOnFlagUntilTimeout>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d005      	beq.n	800cf74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2220      	movs	r2, #32
 800cf6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cf70:	2303      	movs	r3, #3
 800cf72:	e03d      	b.n	800cff0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10b      	bne.n	800cf92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	3302      	adds	r3, #2
 800cf8e:	61bb      	str	r3, [r7, #24]
 800cf90:	e007      	b.n	800cfa2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	781a      	ldrb	r2, [r3, #0]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1c8      	bne.n	800cf52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2140      	movs	r1, #64	@ 0x40
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f000 fb0e 	bl	800d5ec <UART_WaitOnFlagUntilTimeout>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d005      	beq.n	800cfe2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cfde:	2303      	movs	r3, #3
 800cfe0:	e006      	b.n	800cff0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2220      	movs	r2, #32
 800cfe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	e000      	b.n	800cff0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cfee:	2302      	movs	r3, #2
  }
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3720      	adds	r7, #32
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cffc:	b094      	sub	sp, #80	@ 0x50
 800cffe:	af00      	add	r7, sp, #0
 800d000:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	4b83      	ldr	r3, [pc, #524]	@ (800d21c <UART_SetConfig+0x224>)
 800d00e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d012:	689a      	ldr	r2, [r3, #8]
 800d014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d016:	691b      	ldr	r3, [r3, #16]
 800d018:	431a      	orrs	r2, r3
 800d01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01c:	695b      	ldr	r3, [r3, #20]
 800d01e:	431a      	orrs	r2, r3
 800d020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d022:	69db      	ldr	r3, [r3, #28]
 800d024:	4313      	orrs	r3, r2
 800d026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	497c      	ldr	r1, [pc, #496]	@ (800d220 <UART_SetConfig+0x228>)
 800d030:	4019      	ands	r1, r3
 800d032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d038:	430b      	orrs	r3, r1
 800d03a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d048:	68d9      	ldr	r1, [r3, #12]
 800d04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	ea40 0301 	orr.w	r3, r0, r1
 800d052:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	4b6f      	ldr	r3, [pc, #444]	@ (800d21c <UART_SetConfig+0x224>)
 800d060:	429a      	cmp	r2, r3
 800d062:	d009      	beq.n	800d078 <UART_SetConfig+0x80>
 800d064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	4b6e      	ldr	r3, [pc, #440]	@ (800d224 <UART_SetConfig+0x22c>)
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d004      	beq.n	800d078 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d070:	6a1a      	ldr	r2, [r3, #32]
 800d072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d074:	4313      	orrs	r3, r2
 800d076:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d082:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d08c:	430b      	orrs	r3, r1
 800d08e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d096:	f023 000f 	bic.w	r0, r3, #15
 800d09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d09c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	ea40 0301 	orr.w	r3, r0, r1
 800d0a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	4b5e      	ldr	r3, [pc, #376]	@ (800d228 <UART_SetConfig+0x230>)
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d102      	bne.n	800d0b8 <UART_SetConfig+0xc0>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0b6:	e032      	b.n	800d11e <UART_SetConfig+0x126>
 800d0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	4b5b      	ldr	r3, [pc, #364]	@ (800d22c <UART_SetConfig+0x234>)
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d102      	bne.n	800d0c8 <UART_SetConfig+0xd0>
 800d0c2:	2302      	movs	r3, #2
 800d0c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0c6:	e02a      	b.n	800d11e <UART_SetConfig+0x126>
 800d0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	4b58      	ldr	r3, [pc, #352]	@ (800d230 <UART_SetConfig+0x238>)
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d102      	bne.n	800d0d8 <UART_SetConfig+0xe0>
 800d0d2:	2304      	movs	r3, #4
 800d0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0d6:	e022      	b.n	800d11e <UART_SetConfig+0x126>
 800d0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	4b55      	ldr	r3, [pc, #340]	@ (800d234 <UART_SetConfig+0x23c>)
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d102      	bne.n	800d0e8 <UART_SetConfig+0xf0>
 800d0e2:	2308      	movs	r3, #8
 800d0e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0e6:	e01a      	b.n	800d11e <UART_SetConfig+0x126>
 800d0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	4b52      	ldr	r3, [pc, #328]	@ (800d238 <UART_SetConfig+0x240>)
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d102      	bne.n	800d0f8 <UART_SetConfig+0x100>
 800d0f2:	2310      	movs	r3, #16
 800d0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0f6:	e012      	b.n	800d11e <UART_SetConfig+0x126>
 800d0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	4b4f      	ldr	r3, [pc, #316]	@ (800d23c <UART_SetConfig+0x244>)
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d103      	bne.n	800d10a <UART_SetConfig+0x112>
 800d102:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800d106:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d108:	e009      	b.n	800d11e <UART_SetConfig+0x126>
 800d10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	4b43      	ldr	r3, [pc, #268]	@ (800d21c <UART_SetConfig+0x224>)
 800d110:	429a      	cmp	r2, r3
 800d112:	d102      	bne.n	800d11a <UART_SetConfig+0x122>
 800d114:	2320      	movs	r3, #32
 800d116:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d118:	e001      	b.n	800d11e <UART_SetConfig+0x126>
 800d11a:	2300      	movs	r3, #0
 800d11c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	4b3e      	ldr	r3, [pc, #248]	@ (800d21c <UART_SetConfig+0x224>)
 800d124:	429a      	cmp	r2, r3
 800d126:	d005      	beq.n	800d134 <UART_SetConfig+0x13c>
 800d128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	4b3d      	ldr	r3, [pc, #244]	@ (800d224 <UART_SetConfig+0x22c>)
 800d12e:	429a      	cmp	r2, r3
 800d130:	f040 8088 	bne.w	800d244 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d136:	2200      	movs	r2, #0
 800d138:	623b      	str	r3, [r7, #32]
 800d13a:	627a      	str	r2, [r7, #36]	@ 0x24
 800d13c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d140:	f7fc ff98 	bl	800a074 <HAL_RCCEx_GetPeriphCLKFreq>
 800d144:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f000 80eb 	beq.w	800d324 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d152:	4a3b      	ldr	r2, [pc, #236]	@ (800d240 <UART_SetConfig+0x248>)
 800d154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d158:	461a      	mov	r2, r3
 800d15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d15c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d160:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	4613      	mov	r3, r2
 800d168:	005b      	lsls	r3, r3, #1
 800d16a:	4413      	add	r3, r2
 800d16c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d16e:	429a      	cmp	r2, r3
 800d170:	d305      	bcc.n	800d17e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d178:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d903      	bls.n	800d186 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d184:	e048      	b.n	800d218 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d188:	2200      	movs	r2, #0
 800d18a:	61bb      	str	r3, [r7, #24]
 800d18c:	61fa      	str	r2, [r7, #28]
 800d18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d192:	4a2b      	ldr	r2, [pc, #172]	@ (800d240 <UART_SetConfig+0x248>)
 800d194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d198:	b29b      	uxth	r3, r3
 800d19a:	2200      	movs	r2, #0
 800d19c:	613b      	str	r3, [r7, #16]
 800d19e:	617a      	str	r2, [r7, #20]
 800d1a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d1a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d1a8:	f7f3 fd7e 	bl	8000ca8 <__aeabi_uldivmod>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	f04f 0200 	mov.w	r2, #0
 800d1b8:	f04f 0300 	mov.w	r3, #0
 800d1bc:	020b      	lsls	r3, r1, #8
 800d1be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d1c2:	0202      	lsls	r2, r0, #8
 800d1c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d1c6:	6849      	ldr	r1, [r1, #4]
 800d1c8:	0849      	lsrs	r1, r1, #1
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	460c      	mov	r4, r1
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	eb12 0804 	adds.w	r8, r2, r4
 800d1d4:	eb43 0905 	adc.w	r9, r3, r5
 800d1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	60bb      	str	r3, [r7, #8]
 800d1e0:	60fa      	str	r2, [r7, #12]
 800d1e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d1e6:	4640      	mov	r0, r8
 800d1e8:	4649      	mov	r1, r9
 800d1ea:	f7f3 fd5d 	bl	8000ca8 <__aeabi_uldivmod>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d1fc:	d308      	bcc.n	800d210 <UART_SetConfig+0x218>
 800d1fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d200:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d204:	d204      	bcs.n	800d210 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800d206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d20c:	60da      	str	r2, [r3, #12]
 800d20e:	e003      	b.n	800d218 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d216:	e085      	b.n	800d324 <UART_SetConfig+0x32c>
 800d218:	e084      	b.n	800d324 <UART_SetConfig+0x32c>
 800d21a:	bf00      	nop
 800d21c:	46002400 	.word	0x46002400
 800d220:	cfff69f3 	.word	0xcfff69f3
 800d224:	56002400 	.word	0x56002400
 800d228:	40013800 	.word	0x40013800
 800d22c:	40004400 	.word	0x40004400
 800d230:	40004800 	.word	0x40004800
 800d234:	40004c00 	.word	0x40004c00
 800d238:	40005000 	.word	0x40005000
 800d23c:	40006400 	.word	0x40006400
 800d240:	08013c18 	.word	0x08013c18
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d246:	69db      	ldr	r3, [r3, #28]
 800d248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d24c:	d13c      	bne.n	800d2c8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d24e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d250:	2200      	movs	r2, #0
 800d252:	603b      	str	r3, [r7, #0]
 800d254:	607a      	str	r2, [r7, #4]
 800d256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d25a:	f7fc ff0b 	bl	800a074 <HAL_RCCEx_GetPeriphCLKFreq>
 800d25e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d262:	2b00      	cmp	r3, #0
 800d264:	d05e      	beq.n	800d324 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d26a:	4a39      	ldr	r2, [pc, #228]	@ (800d350 <UART_SetConfig+0x358>)
 800d26c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d270:	461a      	mov	r2, r3
 800d272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d274:	fbb3 f3f2 	udiv	r3, r3, r2
 800d278:	005a      	lsls	r2, r3, #1
 800d27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	085b      	lsrs	r3, r3, #1
 800d280:	441a      	add	r2, r3
 800d282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	fbb2 f3f3 	udiv	r3, r2, r3
 800d28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d28e:	2b0f      	cmp	r3, #15
 800d290:	d916      	bls.n	800d2c0 <UART_SetConfig+0x2c8>
 800d292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d298:	d212      	bcs.n	800d2c0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d29a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	f023 030f 	bic.w	r3, r3, #15
 800d2a2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a6:	085b      	lsrs	r3, r3, #1
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	f003 0307 	and.w	r3, r3, #7
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d2bc:	60da      	str	r2, [r3, #12]
 800d2be:	e031      	b.n	800d324 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d2c6:	e02d      	b.n	800d324 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d2c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	469a      	mov	sl, r3
 800d2ce:	4693      	mov	fp, r2
 800d2d0:	4650      	mov	r0, sl
 800d2d2:	4659      	mov	r1, fp
 800d2d4:	f7fc fece 	bl	800a074 <HAL_RCCEx_GetPeriphCLKFreq>
 800d2d8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d2da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d021      	beq.n	800d324 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e4:	4a1a      	ldr	r2, [pc, #104]	@ (800d350 <UART_SetConfig+0x358>)
 800d2e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	085b      	lsrs	r3, r3, #1
 800d2f8:	441a      	add	r2, r3
 800d2fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d302:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d306:	2b0f      	cmp	r3, #15
 800d308:	d909      	bls.n	800d31e <UART_SetConfig+0x326>
 800d30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d310:	d205      	bcs.n	800d31e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d314:	b29a      	uxth	r2, r3
 800d316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	60da      	str	r2, [r3, #12]
 800d31c:	e002      	b.n	800d324 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800d31e:	2301      	movs	r3, #1
 800d320:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d326:	2201      	movs	r2, #1
 800d328:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32e:	2201      	movs	r2, #1
 800d330:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d336:	2200      	movs	r2, #0
 800d338:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d33c:	2200      	movs	r2, #0
 800d33e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d340:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d344:	4618      	mov	r0, r3
 800d346:	3750      	adds	r7, #80	@ 0x50
 800d348:	46bd      	mov	sp, r7
 800d34a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d34e:	bf00      	nop
 800d350:	08013c18 	.word	0x08013c18

0800d354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d360:	f003 0308 	and.w	r3, r3, #8
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00a      	beq.n	800d37e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	430a      	orrs	r2, r1
 800d37c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00a      	beq.n	800d3a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	430a      	orrs	r2, r1
 800d39e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3a4:	f003 0302 	and.w	r3, r3, #2
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00a      	beq.n	800d3c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	430a      	orrs	r2, r1
 800d3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3c6:	f003 0304 	and.w	r3, r3, #4
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00a      	beq.n	800d3e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	430a      	orrs	r2, r1
 800d3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e8:	f003 0310 	and.w	r3, r3, #16
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00a      	beq.n	800d406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	430a      	orrs	r2, r1
 800d404:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d40a:	f003 0320 	and.w	r3, r3, #32
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00a      	beq.n	800d428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	430a      	orrs	r2, r1
 800d426:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d430:	2b00      	cmp	r3, #0
 800d432:	d01a      	beq.n	800d46a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	430a      	orrs	r2, r1
 800d448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d44e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d452:	d10a      	bne.n	800d46a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	430a      	orrs	r2, r1
 800d468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d46e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00a      	beq.n	800d48c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	430a      	orrs	r2, r1
 800d48a:	605a      	str	r2, [r3, #4]
  }
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b098      	sub	sp, #96	@ 0x60
 800d49c:	af02      	add	r7, sp, #8
 800d49e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4a8:	f7f8 fbca 	bl	8005c40 <HAL_GetTick>
 800d4ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 0308 	and.w	r3, r3, #8
 800d4b8:	2b08      	cmp	r3, #8
 800d4ba:	d12f      	bne.n	800d51c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f88e 	bl	800d5ec <UART_WaitOnFlagUntilTimeout>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d022      	beq.n	800d51c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4de:	e853 3f00 	ldrex	r3, [r3]
 800d4e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d4fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4fc:	e841 2300 	strex	r3, r2, [r1]
 800d500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1e6      	bne.n	800d4d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2220      	movs	r2, #32
 800d50c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d518:	2303      	movs	r3, #3
 800d51a:	e063      	b.n	800d5e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f003 0304 	and.w	r3, r3, #4
 800d526:	2b04      	cmp	r3, #4
 800d528:	d149      	bne.n	800d5be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d52a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d532:	2200      	movs	r2, #0
 800d534:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 f857 	bl	800d5ec <UART_WaitOnFlagUntilTimeout>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d03c      	beq.n	800d5be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54c:	e853 3f00 	ldrex	r3, [r3]
 800d550:	623b      	str	r3, [r7, #32]
   return(result);
 800d552:	6a3b      	ldr	r3, [r7, #32]
 800d554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	461a      	mov	r2, r3
 800d560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d562:	633b      	str	r3, [r7, #48]	@ 0x30
 800d564:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d56a:	e841 2300 	strex	r3, r2, [r1]
 800d56e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1e6      	bne.n	800d544 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	3308      	adds	r3, #8
 800d57c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	e853 3f00 	ldrex	r3, [r3]
 800d584:	60fb      	str	r3, [r7, #12]
   return(result);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f023 0301 	bic.w	r3, r3, #1
 800d58c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	3308      	adds	r3, #8
 800d594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d596:	61fa      	str	r2, [r7, #28]
 800d598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59a:	69b9      	ldr	r1, [r7, #24]
 800d59c:	69fa      	ldr	r2, [r7, #28]
 800d59e:	e841 2300 	strex	r3, r2, [r1]
 800d5a2:	617b      	str	r3, [r7, #20]
   return(result);
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1e5      	bne.n	800d576 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2220      	movs	r2, #32
 800d5ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e012      	b.n	800d5e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2220      	movs	r2, #32
 800d5c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2220      	movs	r2, #32
 800d5ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3758      	adds	r7, #88	@ 0x58
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	603b      	str	r3, [r7, #0]
 800d5f8:	4613      	mov	r3, r2
 800d5fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5fc:	e04f      	b.n	800d69e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d604:	d04b      	beq.n	800d69e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d606:	f7f8 fb1b 	bl	8005c40 <HAL_GetTick>
 800d60a:	4602      	mov	r2, r0
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	69ba      	ldr	r2, [r7, #24]
 800d612:	429a      	cmp	r2, r3
 800d614:	d302      	bcc.n	800d61c <UART_WaitOnFlagUntilTimeout+0x30>
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d101      	bne.n	800d620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d61c:	2303      	movs	r3, #3
 800d61e:	e04e      	b.n	800d6be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f003 0304 	and.w	r3, r3, #4
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d037      	beq.n	800d69e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	2b80      	cmp	r3, #128	@ 0x80
 800d632:	d034      	beq.n	800d69e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	2b40      	cmp	r3, #64	@ 0x40
 800d638:	d031      	beq.n	800d69e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	69db      	ldr	r3, [r3, #28]
 800d640:	f003 0308 	and.w	r3, r3, #8
 800d644:	2b08      	cmp	r3, #8
 800d646:	d110      	bne.n	800d66a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2208      	movs	r2, #8
 800d64e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f000 f838 	bl	800d6c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2208      	movs	r2, #8
 800d65a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2200      	movs	r2, #0
 800d662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	e029      	b.n	800d6be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	69db      	ldr	r3, [r3, #28]
 800d670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d678:	d111      	bne.n	800d69e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f000 f81e 	bl	800d6c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2220      	movs	r2, #32
 800d68e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d69a:	2303      	movs	r3, #3
 800d69c:	e00f      	b.n	800d6be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	69da      	ldr	r2, [r3, #28]
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	68ba      	ldr	r2, [r7, #8]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	bf0c      	ite	eq
 800d6ae:	2301      	moveq	r3, #1
 800d6b0:	2300      	movne	r3, #0
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	79fb      	ldrb	r3, [r7, #7]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d0a0      	beq.n	800d5fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6bc:	2300      	movs	r3, #0
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d6c6:	b480      	push	{r7}
 800d6c8:	b095      	sub	sp, #84	@ 0x54
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6d6:	e853 3f00 	ldrex	r3, [r3]
 800d6da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d6e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d6f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d6f4:	e841 2300 	strex	r3, r2, [r1]
 800d6f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e6      	bne.n	800d6ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3308      	adds	r3, #8
 800d706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d708:	6a3b      	ldr	r3, [r7, #32]
 800d70a:	e853 3f00 	ldrex	r3, [r3]
 800d70e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d716:	f023 0301 	bic.w	r3, r3, #1
 800d71a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	3308      	adds	r3, #8
 800d722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d72a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d72c:	e841 2300 	strex	r3, r2, [r1]
 800d730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1e3      	bne.n	800d700 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d118      	bne.n	800d772 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	e853 3f00 	ldrex	r3, [r3]
 800d74c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	f023 0310 	bic.w	r3, r3, #16
 800d754:	647b      	str	r3, [r7, #68]	@ 0x44
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	461a      	mov	r2, r3
 800d75c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d75e:	61bb      	str	r3, [r7, #24]
 800d760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d762:	6979      	ldr	r1, [r7, #20]
 800d764:	69ba      	ldr	r2, [r7, #24]
 800d766:	e841 2300 	strex	r3, r2, [r1]
 800d76a:	613b      	str	r3, [r7, #16]
   return(result);
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1e6      	bne.n	800d740 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2220      	movs	r2, #32
 800d776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d786:	bf00      	nop
 800d788:	3754      	adds	r7, #84	@ 0x54
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr

0800d792 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d792:	b480      	push	{r7}
 800d794:	b085      	sub	sp, #20
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d101      	bne.n	800d7a8 <HAL_UARTEx_DisableFifoMode+0x16>
 800d7a4:	2302      	movs	r3, #2
 800d7a6:	e027      	b.n	800d7f8 <HAL_UARTEx_DisableFifoMode+0x66>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2224      	movs	r2, #36	@ 0x24
 800d7b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f022 0201 	bic.w	r2, r2, #1
 800d7ce:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d7d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2220      	movs	r2, #32
 800d7ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3714      	adds	r7, #20
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d814:	2b01      	cmp	r3, #1
 800d816:	d101      	bne.n	800d81c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d818:	2302      	movs	r3, #2
 800d81a:	e02d      	b.n	800d878 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2224      	movs	r2, #36	@ 0x24
 800d828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f022 0201 	bic.w	r2, r2, #1
 800d842:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	430a      	orrs	r2, r1
 800d856:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 f84f 	bl	800d8fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2220      	movs	r2, #32
 800d86a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d890:	2b01      	cmp	r3, #1
 800d892:	d101      	bne.n	800d898 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d894:	2302      	movs	r3, #2
 800d896:	e02d      	b.n	800d8f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2224      	movs	r2, #36	@ 0x24
 800d8a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f022 0201 	bic.w	r2, r2, #1
 800d8be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 f811 	bl	800d8fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2220      	movs	r2, #32
 800d8e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3710      	adds	r7, #16
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d108      	bne.n	800d91e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d91c:	e031      	b.n	800d982 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d91e:	2308      	movs	r3, #8
 800d920:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d922:	2308      	movs	r3, #8
 800d924:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	0e5b      	lsrs	r3, r3, #25
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 0307 	and.w	r3, r3, #7
 800d934:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	0f5b      	lsrs	r3, r3, #29
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f003 0307 	and.w	r3, r3, #7
 800d944:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	7b3a      	ldrb	r2, [r7, #12]
 800d94a:	4911      	ldr	r1, [pc, #68]	@ (800d990 <UARTEx_SetNbDataToProcess+0x94>)
 800d94c:	5c8a      	ldrb	r2, [r1, r2]
 800d94e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d952:	7b3a      	ldrb	r2, [r7, #12]
 800d954:	490f      	ldr	r1, [pc, #60]	@ (800d994 <UARTEx_SetNbDataToProcess+0x98>)
 800d956:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d958:	fb93 f3f2 	sdiv	r3, r3, r2
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d964:	7bfb      	ldrb	r3, [r7, #15]
 800d966:	7b7a      	ldrb	r2, [r7, #13]
 800d968:	4909      	ldr	r1, [pc, #36]	@ (800d990 <UARTEx_SetNbDataToProcess+0x94>)
 800d96a:	5c8a      	ldrb	r2, [r1, r2]
 800d96c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d970:	7b7a      	ldrb	r2, [r7, #13]
 800d972:	4908      	ldr	r1, [pc, #32]	@ (800d994 <UARTEx_SetNbDataToProcess+0x98>)
 800d974:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d976:	fb93 f3f2 	sdiv	r3, r3, r2
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d982:	bf00      	nop
 800d984:	3714      	adds	r7, #20
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	08013c30 	.word	0x08013c30
 800d994:	08013c38 	.word	0x08013c38

0800d998 <__cvt>:
 800d998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d99c:	ec57 6b10 	vmov	r6, r7, d0
 800d9a0:	2f00      	cmp	r7, #0
 800d9a2:	460c      	mov	r4, r1
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	463b      	mov	r3, r7
 800d9a8:	bfb4      	ite	lt
 800d9aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d9ae:	2300      	movge	r3, #0
 800d9b0:	4691      	mov	r9, r2
 800d9b2:	bfbf      	itttt	lt
 800d9b4:	4632      	movlt	r2, r6
 800d9b6:	461f      	movlt	r7, r3
 800d9b8:	232d      	movlt	r3, #45	@ 0x2d
 800d9ba:	4616      	movlt	r6, r2
 800d9bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d9c0:	700b      	strb	r3, [r1, #0]
 800d9c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9c4:	f023 0820 	bic.w	r8, r3, #32
 800d9c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d9cc:	d005      	beq.n	800d9da <__cvt+0x42>
 800d9ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d9d2:	d100      	bne.n	800d9d6 <__cvt+0x3e>
 800d9d4:	3401      	adds	r4, #1
 800d9d6:	2102      	movs	r1, #2
 800d9d8:	e000      	b.n	800d9dc <__cvt+0x44>
 800d9da:	2103      	movs	r1, #3
 800d9dc:	ab03      	add	r3, sp, #12
 800d9de:	4622      	mov	r2, r4
 800d9e0:	9301      	str	r3, [sp, #4]
 800d9e2:	ab02      	add	r3, sp, #8
 800d9e4:	ec47 6b10 	vmov	d0, r6, r7
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	4653      	mov	r3, sl
 800d9ec:	f001 fedc 	bl	800f7a8 <_dtoa_r>
 800d9f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d9f4:	4605      	mov	r5, r0
 800d9f6:	d119      	bne.n	800da2c <__cvt+0x94>
 800d9f8:	f019 0f01 	tst.w	r9, #1
 800d9fc:	d00e      	beq.n	800da1c <__cvt+0x84>
 800d9fe:	eb00 0904 	add.w	r9, r0, r4
 800da02:	2200      	movs	r2, #0
 800da04:	2300      	movs	r3, #0
 800da06:	4630      	mov	r0, r6
 800da08:	4639      	mov	r1, r7
 800da0a:	f7f3 f86d 	bl	8000ae8 <__aeabi_dcmpeq>
 800da0e:	b108      	cbz	r0, 800da14 <__cvt+0x7c>
 800da10:	f8cd 900c 	str.w	r9, [sp, #12]
 800da14:	2230      	movs	r2, #48	@ 0x30
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	454b      	cmp	r3, r9
 800da1a:	d31e      	bcc.n	800da5a <__cvt+0xc2>
 800da1c:	9b03      	ldr	r3, [sp, #12]
 800da1e:	4628      	mov	r0, r5
 800da20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da22:	1b5b      	subs	r3, r3, r5
 800da24:	6013      	str	r3, [r2, #0]
 800da26:	b004      	add	sp, #16
 800da28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800da30:	eb00 0904 	add.w	r9, r0, r4
 800da34:	d1e5      	bne.n	800da02 <__cvt+0x6a>
 800da36:	7803      	ldrb	r3, [r0, #0]
 800da38:	2b30      	cmp	r3, #48	@ 0x30
 800da3a:	d10a      	bne.n	800da52 <__cvt+0xba>
 800da3c:	2200      	movs	r2, #0
 800da3e:	2300      	movs	r3, #0
 800da40:	4630      	mov	r0, r6
 800da42:	4639      	mov	r1, r7
 800da44:	f7f3 f850 	bl	8000ae8 <__aeabi_dcmpeq>
 800da48:	b918      	cbnz	r0, 800da52 <__cvt+0xba>
 800da4a:	f1c4 0401 	rsb	r4, r4, #1
 800da4e:	f8ca 4000 	str.w	r4, [sl]
 800da52:	f8da 3000 	ldr.w	r3, [sl]
 800da56:	4499      	add	r9, r3
 800da58:	e7d3      	b.n	800da02 <__cvt+0x6a>
 800da5a:	1c59      	adds	r1, r3, #1
 800da5c:	9103      	str	r1, [sp, #12]
 800da5e:	701a      	strb	r2, [r3, #0]
 800da60:	e7d9      	b.n	800da16 <__cvt+0x7e>

0800da62 <__exponent>:
 800da62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da64:	2900      	cmp	r1, #0
 800da66:	7002      	strb	r2, [r0, #0]
 800da68:	bfba      	itte	lt
 800da6a:	4249      	neglt	r1, r1
 800da6c:	232d      	movlt	r3, #45	@ 0x2d
 800da6e:	232b      	movge	r3, #43	@ 0x2b
 800da70:	2909      	cmp	r1, #9
 800da72:	7043      	strb	r3, [r0, #1]
 800da74:	dd28      	ble.n	800dac8 <__exponent+0x66>
 800da76:	f10d 0307 	add.w	r3, sp, #7
 800da7a:	270a      	movs	r7, #10
 800da7c:	461d      	mov	r5, r3
 800da7e:	461a      	mov	r2, r3
 800da80:	3b01      	subs	r3, #1
 800da82:	fbb1 f6f7 	udiv	r6, r1, r7
 800da86:	fb07 1416 	mls	r4, r7, r6, r1
 800da8a:	3430      	adds	r4, #48	@ 0x30
 800da8c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800da90:	460c      	mov	r4, r1
 800da92:	4631      	mov	r1, r6
 800da94:	2c63      	cmp	r4, #99	@ 0x63
 800da96:	dcf2      	bgt.n	800da7e <__exponent+0x1c>
 800da98:	3130      	adds	r1, #48	@ 0x30
 800da9a:	1e94      	subs	r4, r2, #2
 800da9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800daa0:	1c41      	adds	r1, r0, #1
 800daa2:	4623      	mov	r3, r4
 800daa4:	42ab      	cmp	r3, r5
 800daa6:	d30a      	bcc.n	800dabe <__exponent+0x5c>
 800daa8:	f10d 0309 	add.w	r3, sp, #9
 800daac:	1a9b      	subs	r3, r3, r2
 800daae:	42ac      	cmp	r4, r5
 800dab0:	bf88      	it	hi
 800dab2:	2300      	movhi	r3, #0
 800dab4:	3302      	adds	r3, #2
 800dab6:	4403      	add	r3, r0
 800dab8:	1a18      	subs	r0, r3, r0
 800daba:	b003      	add	sp, #12
 800dabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dabe:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dac2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dac6:	e7ed      	b.n	800daa4 <__exponent+0x42>
 800dac8:	2330      	movs	r3, #48	@ 0x30
 800daca:	3130      	adds	r1, #48	@ 0x30
 800dacc:	7083      	strb	r3, [r0, #2]
 800dace:	1d03      	adds	r3, r0, #4
 800dad0:	70c1      	strb	r1, [r0, #3]
 800dad2:	e7f1      	b.n	800dab8 <__exponent+0x56>

0800dad4 <_printf_float>:
 800dad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad8:	b08d      	sub	sp, #52	@ 0x34
 800dada:	460c      	mov	r4, r1
 800dadc:	4616      	mov	r6, r2
 800dade:	461f      	mov	r7, r3
 800dae0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dae4:	4605      	mov	r5, r0
 800dae6:	f001 fda3 	bl	800f630 <_localeconv_r>
 800daea:	6803      	ldr	r3, [r0, #0]
 800daec:	4618      	mov	r0, r3
 800daee:	9304      	str	r3, [sp, #16]
 800daf0:	f7f2 fbce 	bl	8000290 <strlen>
 800daf4:	2300      	movs	r3, #0
 800daf6:	9005      	str	r0, [sp, #20]
 800daf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800dafa:	f8d8 3000 	ldr.w	r3, [r8]
 800dafe:	f894 a018 	ldrb.w	sl, [r4, #24]
 800db02:	3307      	adds	r3, #7
 800db04:	f8d4 b000 	ldr.w	fp, [r4]
 800db08:	f023 0307 	bic.w	r3, r3, #7
 800db0c:	f103 0208 	add.w	r2, r3, #8
 800db10:	f8c8 2000 	str.w	r2, [r8]
 800db14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800db20:	f8cd 8018 	str.w	r8, [sp, #24]
 800db24:	9307      	str	r3, [sp, #28]
 800db26:	4b9d      	ldr	r3, [pc, #628]	@ (800dd9c <_printf_float+0x2c8>)
 800db28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800db30:	f7f3 f80c 	bl	8000b4c <__aeabi_dcmpun>
 800db34:	bb70      	cbnz	r0, 800db94 <_printf_float+0xc0>
 800db36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db3a:	4b98      	ldr	r3, [pc, #608]	@ (800dd9c <_printf_float+0x2c8>)
 800db3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db40:	f7f2 ffe6 	bl	8000b10 <__aeabi_dcmple>
 800db44:	bb30      	cbnz	r0, 800db94 <_printf_float+0xc0>
 800db46:	2200      	movs	r2, #0
 800db48:	2300      	movs	r3, #0
 800db4a:	4640      	mov	r0, r8
 800db4c:	4649      	mov	r1, r9
 800db4e:	f7f2 ffd5 	bl	8000afc <__aeabi_dcmplt>
 800db52:	b110      	cbz	r0, 800db5a <_printf_float+0x86>
 800db54:	232d      	movs	r3, #45	@ 0x2d
 800db56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db5a:	4a91      	ldr	r2, [pc, #580]	@ (800dda0 <_printf_float+0x2cc>)
 800db5c:	4b91      	ldr	r3, [pc, #580]	@ (800dda4 <_printf_float+0x2d0>)
 800db5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800db62:	bf8c      	ite	hi
 800db64:	4690      	movhi	r8, r2
 800db66:	4698      	movls	r8, r3
 800db68:	2303      	movs	r3, #3
 800db6a:	f04f 0900 	mov.w	r9, #0
 800db6e:	6123      	str	r3, [r4, #16]
 800db70:	f02b 0304 	bic.w	r3, fp, #4
 800db74:	6023      	str	r3, [r4, #0]
 800db76:	4633      	mov	r3, r6
 800db78:	aa0b      	add	r2, sp, #44	@ 0x2c
 800db7a:	4621      	mov	r1, r4
 800db7c:	4628      	mov	r0, r5
 800db7e:	9700      	str	r7, [sp, #0]
 800db80:	f000 f9d2 	bl	800df28 <_printf_common>
 800db84:	3001      	adds	r0, #1
 800db86:	f040 808d 	bne.w	800dca4 <_printf_float+0x1d0>
 800db8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db8e:	b00d      	add	sp, #52	@ 0x34
 800db90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db94:	4642      	mov	r2, r8
 800db96:	464b      	mov	r3, r9
 800db98:	4640      	mov	r0, r8
 800db9a:	4649      	mov	r1, r9
 800db9c:	f7f2 ffd6 	bl	8000b4c <__aeabi_dcmpun>
 800dba0:	b140      	cbz	r0, 800dbb4 <_printf_float+0xe0>
 800dba2:	464b      	mov	r3, r9
 800dba4:	4a80      	ldr	r2, [pc, #512]	@ (800dda8 <_printf_float+0x2d4>)
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	bfbc      	itt	lt
 800dbaa:	232d      	movlt	r3, #45	@ 0x2d
 800dbac:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dbb0:	4b7e      	ldr	r3, [pc, #504]	@ (800ddac <_printf_float+0x2d8>)
 800dbb2:	e7d4      	b.n	800db5e <_printf_float+0x8a>
 800dbb4:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dbb8:	6863      	ldr	r3, [r4, #4]
 800dbba:	9206      	str	r2, [sp, #24]
 800dbbc:	1c5a      	adds	r2, r3, #1
 800dbbe:	d13b      	bne.n	800dc38 <_printf_float+0x164>
 800dbc0:	2306      	movs	r3, #6
 800dbc2:	6063      	str	r3, [r4, #4]
 800dbc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800dbc8:	2300      	movs	r3, #0
 800dbca:	4628      	mov	r0, r5
 800dbcc:	6022      	str	r2, [r4, #0]
 800dbce:	9303      	str	r3, [sp, #12]
 800dbd0:	ab0a      	add	r3, sp, #40	@ 0x28
 800dbd2:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dbd6:	ab09      	add	r3, sp, #36	@ 0x24
 800dbd8:	ec49 8b10 	vmov	d0, r8, r9
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dbe2:	6861      	ldr	r1, [r4, #4]
 800dbe4:	f7ff fed8 	bl	800d998 <__cvt>
 800dbe8:	9b06      	ldr	r3, [sp, #24]
 800dbea:	4680      	mov	r8, r0
 800dbec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbee:	2b47      	cmp	r3, #71	@ 0x47
 800dbf0:	d129      	bne.n	800dc46 <_printf_float+0x172>
 800dbf2:	1cc8      	adds	r0, r1, #3
 800dbf4:	db02      	blt.n	800dbfc <_printf_float+0x128>
 800dbf6:	6863      	ldr	r3, [r4, #4]
 800dbf8:	4299      	cmp	r1, r3
 800dbfa:	dd41      	ble.n	800dc80 <_printf_float+0x1ac>
 800dbfc:	f1aa 0a02 	sub.w	sl, sl, #2
 800dc00:	fa5f fa8a 	uxtb.w	sl, sl
 800dc04:	3901      	subs	r1, #1
 800dc06:	4652      	mov	r2, sl
 800dc08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dc0c:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc0e:	f7ff ff28 	bl	800da62 <__exponent>
 800dc12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc14:	4681      	mov	r9, r0
 800dc16:	1813      	adds	r3, r2, r0
 800dc18:	2a01      	cmp	r2, #1
 800dc1a:	6123      	str	r3, [r4, #16]
 800dc1c:	dc02      	bgt.n	800dc24 <_printf_float+0x150>
 800dc1e:	6822      	ldr	r2, [r4, #0]
 800dc20:	07d2      	lsls	r2, r2, #31
 800dc22:	d501      	bpl.n	800dc28 <_printf_float+0x154>
 800dc24:	3301      	adds	r3, #1
 800dc26:	6123      	str	r3, [r4, #16]
 800dc28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d0a2      	beq.n	800db76 <_printf_float+0xa2>
 800dc30:	232d      	movs	r3, #45	@ 0x2d
 800dc32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc36:	e79e      	b.n	800db76 <_printf_float+0xa2>
 800dc38:	9a06      	ldr	r2, [sp, #24]
 800dc3a:	2a47      	cmp	r2, #71	@ 0x47
 800dc3c:	d1c2      	bne.n	800dbc4 <_printf_float+0xf0>
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1c0      	bne.n	800dbc4 <_printf_float+0xf0>
 800dc42:	2301      	movs	r3, #1
 800dc44:	e7bd      	b.n	800dbc2 <_printf_float+0xee>
 800dc46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc4a:	d9db      	bls.n	800dc04 <_printf_float+0x130>
 800dc4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dc50:	d118      	bne.n	800dc84 <_printf_float+0x1b0>
 800dc52:	2900      	cmp	r1, #0
 800dc54:	6863      	ldr	r3, [r4, #4]
 800dc56:	dd0b      	ble.n	800dc70 <_printf_float+0x19c>
 800dc58:	6121      	str	r1, [r4, #16]
 800dc5a:	b913      	cbnz	r3, 800dc62 <_printf_float+0x18e>
 800dc5c:	6822      	ldr	r2, [r4, #0]
 800dc5e:	07d0      	lsls	r0, r2, #31
 800dc60:	d502      	bpl.n	800dc68 <_printf_float+0x194>
 800dc62:	3301      	adds	r3, #1
 800dc64:	440b      	add	r3, r1
 800dc66:	6123      	str	r3, [r4, #16]
 800dc68:	f04f 0900 	mov.w	r9, #0
 800dc6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dc6e:	e7db      	b.n	800dc28 <_printf_float+0x154>
 800dc70:	b913      	cbnz	r3, 800dc78 <_printf_float+0x1a4>
 800dc72:	6822      	ldr	r2, [r4, #0]
 800dc74:	07d2      	lsls	r2, r2, #31
 800dc76:	d501      	bpl.n	800dc7c <_printf_float+0x1a8>
 800dc78:	3302      	adds	r3, #2
 800dc7a:	e7f4      	b.n	800dc66 <_printf_float+0x192>
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	e7f2      	b.n	800dc66 <_printf_float+0x192>
 800dc80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dc84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc86:	4299      	cmp	r1, r3
 800dc88:	db05      	blt.n	800dc96 <_printf_float+0x1c2>
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	6121      	str	r1, [r4, #16]
 800dc8e:	07d8      	lsls	r0, r3, #31
 800dc90:	d5ea      	bpl.n	800dc68 <_printf_float+0x194>
 800dc92:	1c4b      	adds	r3, r1, #1
 800dc94:	e7e7      	b.n	800dc66 <_printf_float+0x192>
 800dc96:	2900      	cmp	r1, #0
 800dc98:	bfd4      	ite	le
 800dc9a:	f1c1 0202 	rsble	r2, r1, #2
 800dc9e:	2201      	movgt	r2, #1
 800dca0:	4413      	add	r3, r2
 800dca2:	e7e0      	b.n	800dc66 <_printf_float+0x192>
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	055a      	lsls	r2, r3, #21
 800dca8:	d407      	bmi.n	800dcba <_printf_float+0x1e6>
 800dcaa:	6923      	ldr	r3, [r4, #16]
 800dcac:	4642      	mov	r2, r8
 800dcae:	4631      	mov	r1, r6
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	47b8      	blx	r7
 800dcb4:	3001      	adds	r0, #1
 800dcb6:	d12b      	bne.n	800dd10 <_printf_float+0x23c>
 800dcb8:	e767      	b.n	800db8a <_printf_float+0xb6>
 800dcba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dcbe:	f240 80dd 	bls.w	800de7c <_printf_float+0x3a8>
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dcca:	f7f2 ff0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d033      	beq.n	800dd3a <_printf_float+0x266>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	4a36      	ldr	r2, [pc, #216]	@ (800ddb0 <_printf_float+0x2dc>)
 800dcd6:	4631      	mov	r1, r6
 800dcd8:	4628      	mov	r0, r5
 800dcda:	47b8      	blx	r7
 800dcdc:	3001      	adds	r0, #1
 800dcde:	f43f af54 	beq.w	800db8a <_printf_float+0xb6>
 800dce2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dce6:	4543      	cmp	r3, r8
 800dce8:	db02      	blt.n	800dcf0 <_printf_float+0x21c>
 800dcea:	6823      	ldr	r3, [r4, #0]
 800dcec:	07d8      	lsls	r0, r3, #31
 800dcee:	d50f      	bpl.n	800dd10 <_printf_float+0x23c>
 800dcf0:	4631      	mov	r1, r6
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcf8:	47b8      	blx	r7
 800dcfa:	3001      	adds	r0, #1
 800dcfc:	f43f af45 	beq.w	800db8a <_printf_float+0xb6>
 800dd00:	f04f 0900 	mov.w	r9, #0
 800dd04:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800dd08:	f104 0a1a 	add.w	sl, r4, #26
 800dd0c:	45c8      	cmp	r8, r9
 800dd0e:	dc09      	bgt.n	800dd24 <_printf_float+0x250>
 800dd10:	6823      	ldr	r3, [r4, #0]
 800dd12:	079b      	lsls	r3, r3, #30
 800dd14:	f100 8103 	bmi.w	800df1e <_printf_float+0x44a>
 800dd18:	68e0      	ldr	r0, [r4, #12]
 800dd1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd1c:	4298      	cmp	r0, r3
 800dd1e:	bfb8      	it	lt
 800dd20:	4618      	movlt	r0, r3
 800dd22:	e734      	b.n	800db8e <_printf_float+0xba>
 800dd24:	2301      	movs	r3, #1
 800dd26:	4652      	mov	r2, sl
 800dd28:	4631      	mov	r1, r6
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	47b8      	blx	r7
 800dd2e:	3001      	adds	r0, #1
 800dd30:	f43f af2b 	beq.w	800db8a <_printf_float+0xb6>
 800dd34:	f109 0901 	add.w	r9, r9, #1
 800dd38:	e7e8      	b.n	800dd0c <_printf_float+0x238>
 800dd3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	dc39      	bgt.n	800ddb4 <_printf_float+0x2e0>
 800dd40:	2301      	movs	r3, #1
 800dd42:	4a1b      	ldr	r2, [pc, #108]	@ (800ddb0 <_printf_float+0x2dc>)
 800dd44:	4631      	mov	r1, r6
 800dd46:	4628      	mov	r0, r5
 800dd48:	47b8      	blx	r7
 800dd4a:	3001      	adds	r0, #1
 800dd4c:	f43f af1d 	beq.w	800db8a <_printf_float+0xb6>
 800dd50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dd54:	ea59 0303 	orrs.w	r3, r9, r3
 800dd58:	d102      	bne.n	800dd60 <_printf_float+0x28c>
 800dd5a:	6823      	ldr	r3, [r4, #0]
 800dd5c:	07d9      	lsls	r1, r3, #31
 800dd5e:	d5d7      	bpl.n	800dd10 <_printf_float+0x23c>
 800dd60:	4631      	mov	r1, r6
 800dd62:	4628      	mov	r0, r5
 800dd64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd68:	47b8      	blx	r7
 800dd6a:	3001      	adds	r0, #1
 800dd6c:	f43f af0d 	beq.w	800db8a <_printf_float+0xb6>
 800dd70:	f04f 0a00 	mov.w	sl, #0
 800dd74:	f104 0b1a 	add.w	fp, r4, #26
 800dd78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd7a:	425b      	negs	r3, r3
 800dd7c:	4553      	cmp	r3, sl
 800dd7e:	dc01      	bgt.n	800dd84 <_printf_float+0x2b0>
 800dd80:	464b      	mov	r3, r9
 800dd82:	e793      	b.n	800dcac <_printf_float+0x1d8>
 800dd84:	2301      	movs	r3, #1
 800dd86:	465a      	mov	r2, fp
 800dd88:	4631      	mov	r1, r6
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	47b8      	blx	r7
 800dd8e:	3001      	adds	r0, #1
 800dd90:	f43f aefb 	beq.w	800db8a <_printf_float+0xb6>
 800dd94:	f10a 0a01 	add.w	sl, sl, #1
 800dd98:	e7ee      	b.n	800dd78 <_printf_float+0x2a4>
 800dd9a:	bf00      	nop
 800dd9c:	7fefffff 	.word	0x7fefffff
 800dda0:	08013c44 	.word	0x08013c44
 800dda4:	08013c40 	.word	0x08013c40
 800dda8:	08013c4c 	.word	0x08013c4c
 800ddac:	08013c48 	.word	0x08013c48
 800ddb0:	08013c50 	.word	0x08013c50
 800ddb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ddb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ddba:	4553      	cmp	r3, sl
 800ddbc:	bfa8      	it	ge
 800ddbe:	4653      	movge	r3, sl
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	4699      	mov	r9, r3
 800ddc4:	dc36      	bgt.n	800de34 <_printf_float+0x360>
 800ddc6:	f04f 0b00 	mov.w	fp, #0
 800ddca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ddce:	f104 021a 	add.w	r2, r4, #26
 800ddd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ddd4:	9306      	str	r3, [sp, #24]
 800ddd6:	eba3 0309 	sub.w	r3, r3, r9
 800ddda:	455b      	cmp	r3, fp
 800dddc:	dc31      	bgt.n	800de42 <_printf_float+0x36e>
 800ddde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde0:	459a      	cmp	sl, r3
 800dde2:	dc3a      	bgt.n	800de5a <_printf_float+0x386>
 800dde4:	6823      	ldr	r3, [r4, #0]
 800dde6:	07da      	lsls	r2, r3, #31
 800dde8:	d437      	bmi.n	800de5a <_printf_float+0x386>
 800ddea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddec:	ebaa 0903 	sub.w	r9, sl, r3
 800ddf0:	9b06      	ldr	r3, [sp, #24]
 800ddf2:	ebaa 0303 	sub.w	r3, sl, r3
 800ddf6:	4599      	cmp	r9, r3
 800ddf8:	bfa8      	it	ge
 800ddfa:	4699      	movge	r9, r3
 800ddfc:	f1b9 0f00 	cmp.w	r9, #0
 800de00:	dc33      	bgt.n	800de6a <_printf_float+0x396>
 800de02:	f04f 0800 	mov.w	r8, #0
 800de06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de0a:	f104 0b1a 	add.w	fp, r4, #26
 800de0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de10:	ebaa 0303 	sub.w	r3, sl, r3
 800de14:	eba3 0309 	sub.w	r3, r3, r9
 800de18:	4543      	cmp	r3, r8
 800de1a:	f77f af79 	ble.w	800dd10 <_printf_float+0x23c>
 800de1e:	2301      	movs	r3, #1
 800de20:	465a      	mov	r2, fp
 800de22:	4631      	mov	r1, r6
 800de24:	4628      	mov	r0, r5
 800de26:	47b8      	blx	r7
 800de28:	3001      	adds	r0, #1
 800de2a:	f43f aeae 	beq.w	800db8a <_printf_float+0xb6>
 800de2e:	f108 0801 	add.w	r8, r8, #1
 800de32:	e7ec      	b.n	800de0e <_printf_float+0x33a>
 800de34:	4642      	mov	r2, r8
 800de36:	4631      	mov	r1, r6
 800de38:	4628      	mov	r0, r5
 800de3a:	47b8      	blx	r7
 800de3c:	3001      	adds	r0, #1
 800de3e:	d1c2      	bne.n	800ddc6 <_printf_float+0x2f2>
 800de40:	e6a3      	b.n	800db8a <_printf_float+0xb6>
 800de42:	2301      	movs	r3, #1
 800de44:	4631      	mov	r1, r6
 800de46:	4628      	mov	r0, r5
 800de48:	9206      	str	r2, [sp, #24]
 800de4a:	47b8      	blx	r7
 800de4c:	3001      	adds	r0, #1
 800de4e:	f43f ae9c 	beq.w	800db8a <_printf_float+0xb6>
 800de52:	f10b 0b01 	add.w	fp, fp, #1
 800de56:	9a06      	ldr	r2, [sp, #24]
 800de58:	e7bb      	b.n	800ddd2 <_printf_float+0x2fe>
 800de5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de5e:	4631      	mov	r1, r6
 800de60:	4628      	mov	r0, r5
 800de62:	47b8      	blx	r7
 800de64:	3001      	adds	r0, #1
 800de66:	d1c0      	bne.n	800ddea <_printf_float+0x316>
 800de68:	e68f      	b.n	800db8a <_printf_float+0xb6>
 800de6a:	9a06      	ldr	r2, [sp, #24]
 800de6c:	464b      	mov	r3, r9
 800de6e:	4631      	mov	r1, r6
 800de70:	4628      	mov	r0, r5
 800de72:	4442      	add	r2, r8
 800de74:	47b8      	blx	r7
 800de76:	3001      	adds	r0, #1
 800de78:	d1c3      	bne.n	800de02 <_printf_float+0x32e>
 800de7a:	e686      	b.n	800db8a <_printf_float+0xb6>
 800de7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800de80:	f1ba 0f01 	cmp.w	sl, #1
 800de84:	dc01      	bgt.n	800de8a <_printf_float+0x3b6>
 800de86:	07db      	lsls	r3, r3, #31
 800de88:	d536      	bpl.n	800def8 <_printf_float+0x424>
 800de8a:	2301      	movs	r3, #1
 800de8c:	4642      	mov	r2, r8
 800de8e:	4631      	mov	r1, r6
 800de90:	4628      	mov	r0, r5
 800de92:	47b8      	blx	r7
 800de94:	3001      	adds	r0, #1
 800de96:	f43f ae78 	beq.w	800db8a <_printf_float+0xb6>
 800de9a:	4631      	mov	r1, r6
 800de9c:	4628      	mov	r0, r5
 800de9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dea2:	47b8      	blx	r7
 800dea4:	3001      	adds	r0, #1
 800dea6:	f43f ae70 	beq.w	800db8a <_printf_float+0xb6>
 800deaa:	2200      	movs	r2, #0
 800deac:	2300      	movs	r3, #0
 800deae:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800deb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800deb6:	f7f2 fe17 	bl	8000ae8 <__aeabi_dcmpeq>
 800deba:	b9c0      	cbnz	r0, 800deee <_printf_float+0x41a>
 800debc:	4653      	mov	r3, sl
 800debe:	f108 0201 	add.w	r2, r8, #1
 800dec2:	4631      	mov	r1, r6
 800dec4:	4628      	mov	r0, r5
 800dec6:	47b8      	blx	r7
 800dec8:	3001      	adds	r0, #1
 800deca:	d10c      	bne.n	800dee6 <_printf_float+0x412>
 800decc:	e65d      	b.n	800db8a <_printf_float+0xb6>
 800dece:	2301      	movs	r3, #1
 800ded0:	465a      	mov	r2, fp
 800ded2:	4631      	mov	r1, r6
 800ded4:	4628      	mov	r0, r5
 800ded6:	47b8      	blx	r7
 800ded8:	3001      	adds	r0, #1
 800deda:	f43f ae56 	beq.w	800db8a <_printf_float+0xb6>
 800dede:	f108 0801 	add.w	r8, r8, #1
 800dee2:	45d0      	cmp	r8, sl
 800dee4:	dbf3      	blt.n	800dece <_printf_float+0x3fa>
 800dee6:	464b      	mov	r3, r9
 800dee8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800deec:	e6df      	b.n	800dcae <_printf_float+0x1da>
 800deee:	f04f 0800 	mov.w	r8, #0
 800def2:	f104 0b1a 	add.w	fp, r4, #26
 800def6:	e7f4      	b.n	800dee2 <_printf_float+0x40e>
 800def8:	2301      	movs	r3, #1
 800defa:	4642      	mov	r2, r8
 800defc:	e7e1      	b.n	800dec2 <_printf_float+0x3ee>
 800defe:	2301      	movs	r3, #1
 800df00:	464a      	mov	r2, r9
 800df02:	4631      	mov	r1, r6
 800df04:	4628      	mov	r0, r5
 800df06:	47b8      	blx	r7
 800df08:	3001      	adds	r0, #1
 800df0a:	f43f ae3e 	beq.w	800db8a <_printf_float+0xb6>
 800df0e:	f108 0801 	add.w	r8, r8, #1
 800df12:	68e3      	ldr	r3, [r4, #12]
 800df14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df16:	1a5b      	subs	r3, r3, r1
 800df18:	4543      	cmp	r3, r8
 800df1a:	dcf0      	bgt.n	800defe <_printf_float+0x42a>
 800df1c:	e6fc      	b.n	800dd18 <_printf_float+0x244>
 800df1e:	f04f 0800 	mov.w	r8, #0
 800df22:	f104 0919 	add.w	r9, r4, #25
 800df26:	e7f4      	b.n	800df12 <_printf_float+0x43e>

0800df28 <_printf_common>:
 800df28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df2c:	4616      	mov	r6, r2
 800df2e:	4698      	mov	r8, r3
 800df30:	688a      	ldr	r2, [r1, #8]
 800df32:	4607      	mov	r7, r0
 800df34:	690b      	ldr	r3, [r1, #16]
 800df36:	460c      	mov	r4, r1
 800df38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df3c:	4293      	cmp	r3, r2
 800df3e:	bfb8      	it	lt
 800df40:	4613      	movlt	r3, r2
 800df42:	6033      	str	r3, [r6, #0]
 800df44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df48:	b10a      	cbz	r2, 800df4e <_printf_common+0x26>
 800df4a:	3301      	adds	r3, #1
 800df4c:	6033      	str	r3, [r6, #0]
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	0699      	lsls	r1, r3, #26
 800df52:	bf42      	ittt	mi
 800df54:	6833      	ldrmi	r3, [r6, #0]
 800df56:	3302      	addmi	r3, #2
 800df58:	6033      	strmi	r3, [r6, #0]
 800df5a:	6825      	ldr	r5, [r4, #0]
 800df5c:	f015 0506 	ands.w	r5, r5, #6
 800df60:	d106      	bne.n	800df70 <_printf_common+0x48>
 800df62:	f104 0a19 	add.w	sl, r4, #25
 800df66:	68e3      	ldr	r3, [r4, #12]
 800df68:	6832      	ldr	r2, [r6, #0]
 800df6a:	1a9b      	subs	r3, r3, r2
 800df6c:	42ab      	cmp	r3, r5
 800df6e:	dc2b      	bgt.n	800dfc8 <_printf_common+0xa0>
 800df70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df74:	6822      	ldr	r2, [r4, #0]
 800df76:	3b00      	subs	r3, #0
 800df78:	bf18      	it	ne
 800df7a:	2301      	movne	r3, #1
 800df7c:	0692      	lsls	r2, r2, #26
 800df7e:	d430      	bmi.n	800dfe2 <_printf_common+0xba>
 800df80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df84:	4641      	mov	r1, r8
 800df86:	4638      	mov	r0, r7
 800df88:	47c8      	blx	r9
 800df8a:	3001      	adds	r0, #1
 800df8c:	d023      	beq.n	800dfd6 <_printf_common+0xae>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	341a      	adds	r4, #26
 800df92:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800df96:	f003 0306 	and.w	r3, r3, #6
 800df9a:	2b04      	cmp	r3, #4
 800df9c:	bf0a      	itet	eq
 800df9e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800dfa2:	2500      	movne	r5, #0
 800dfa4:	6833      	ldreq	r3, [r6, #0]
 800dfa6:	f04f 0600 	mov.w	r6, #0
 800dfaa:	bf08      	it	eq
 800dfac:	1aed      	subeq	r5, r5, r3
 800dfae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dfb2:	bf08      	it	eq
 800dfb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	bfc4      	itt	gt
 800dfbc:	1a9b      	subgt	r3, r3, r2
 800dfbe:	18ed      	addgt	r5, r5, r3
 800dfc0:	42b5      	cmp	r5, r6
 800dfc2:	d11a      	bne.n	800dffa <_printf_common+0xd2>
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	e008      	b.n	800dfda <_printf_common+0xb2>
 800dfc8:	2301      	movs	r3, #1
 800dfca:	4652      	mov	r2, sl
 800dfcc:	4641      	mov	r1, r8
 800dfce:	4638      	mov	r0, r7
 800dfd0:	47c8      	blx	r9
 800dfd2:	3001      	adds	r0, #1
 800dfd4:	d103      	bne.n	800dfde <_printf_common+0xb6>
 800dfd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfde:	3501      	adds	r5, #1
 800dfe0:	e7c1      	b.n	800df66 <_printf_common+0x3e>
 800dfe2:	18e1      	adds	r1, r4, r3
 800dfe4:	1c5a      	adds	r2, r3, #1
 800dfe6:	2030      	movs	r0, #48	@ 0x30
 800dfe8:	3302      	adds	r3, #2
 800dfea:	4422      	add	r2, r4
 800dfec:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dff8:	e7c2      	b.n	800df80 <_printf_common+0x58>
 800dffa:	2301      	movs	r3, #1
 800dffc:	4622      	mov	r2, r4
 800dffe:	4641      	mov	r1, r8
 800e000:	4638      	mov	r0, r7
 800e002:	47c8      	blx	r9
 800e004:	3001      	adds	r0, #1
 800e006:	d0e6      	beq.n	800dfd6 <_printf_common+0xae>
 800e008:	3601      	adds	r6, #1
 800e00a:	e7d9      	b.n	800dfc0 <_printf_common+0x98>

0800e00c <_printf_i>:
 800e00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e010:	7e0f      	ldrb	r7, [r1, #24]
 800e012:	4691      	mov	r9, r2
 800e014:	4680      	mov	r8, r0
 800e016:	460c      	mov	r4, r1
 800e018:	2f78      	cmp	r7, #120	@ 0x78
 800e01a:	469a      	mov	sl, r3
 800e01c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e01e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e022:	d807      	bhi.n	800e034 <_printf_i+0x28>
 800e024:	2f62      	cmp	r7, #98	@ 0x62
 800e026:	d80a      	bhi.n	800e03e <_printf_i+0x32>
 800e028:	2f00      	cmp	r7, #0
 800e02a:	f000 80d1 	beq.w	800e1d0 <_printf_i+0x1c4>
 800e02e:	2f58      	cmp	r7, #88	@ 0x58
 800e030:	f000 80b8 	beq.w	800e1a4 <_printf_i+0x198>
 800e034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e03c:	e03a      	b.n	800e0b4 <_printf_i+0xa8>
 800e03e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e042:	2b15      	cmp	r3, #21
 800e044:	d8f6      	bhi.n	800e034 <_printf_i+0x28>
 800e046:	a101      	add	r1, pc, #4	@ (adr r1, 800e04c <_printf_i+0x40>)
 800e048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e04c:	0800e0a5 	.word	0x0800e0a5
 800e050:	0800e0b9 	.word	0x0800e0b9
 800e054:	0800e035 	.word	0x0800e035
 800e058:	0800e035 	.word	0x0800e035
 800e05c:	0800e035 	.word	0x0800e035
 800e060:	0800e035 	.word	0x0800e035
 800e064:	0800e0b9 	.word	0x0800e0b9
 800e068:	0800e035 	.word	0x0800e035
 800e06c:	0800e035 	.word	0x0800e035
 800e070:	0800e035 	.word	0x0800e035
 800e074:	0800e035 	.word	0x0800e035
 800e078:	0800e1b7 	.word	0x0800e1b7
 800e07c:	0800e0e3 	.word	0x0800e0e3
 800e080:	0800e171 	.word	0x0800e171
 800e084:	0800e035 	.word	0x0800e035
 800e088:	0800e035 	.word	0x0800e035
 800e08c:	0800e1d9 	.word	0x0800e1d9
 800e090:	0800e035 	.word	0x0800e035
 800e094:	0800e0e3 	.word	0x0800e0e3
 800e098:	0800e035 	.word	0x0800e035
 800e09c:	0800e035 	.word	0x0800e035
 800e0a0:	0800e179 	.word	0x0800e179
 800e0a4:	6833      	ldr	r3, [r6, #0]
 800e0a6:	1d1a      	adds	r2, r3, #4
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	6032      	str	r2, [r6, #0]
 800e0ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e0b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e09c      	b.n	800e1f2 <_printf_i+0x1e6>
 800e0b8:	6833      	ldr	r3, [r6, #0]
 800e0ba:	6820      	ldr	r0, [r4, #0]
 800e0bc:	1d19      	adds	r1, r3, #4
 800e0be:	6031      	str	r1, [r6, #0]
 800e0c0:	0606      	lsls	r6, r0, #24
 800e0c2:	d501      	bpl.n	800e0c8 <_printf_i+0xbc>
 800e0c4:	681d      	ldr	r5, [r3, #0]
 800e0c6:	e003      	b.n	800e0d0 <_printf_i+0xc4>
 800e0c8:	0645      	lsls	r5, r0, #25
 800e0ca:	d5fb      	bpl.n	800e0c4 <_printf_i+0xb8>
 800e0cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e0d0:	2d00      	cmp	r5, #0
 800e0d2:	da03      	bge.n	800e0dc <_printf_i+0xd0>
 800e0d4:	232d      	movs	r3, #45	@ 0x2d
 800e0d6:	426d      	negs	r5, r5
 800e0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0dc:	4858      	ldr	r0, [pc, #352]	@ (800e240 <_printf_i+0x234>)
 800e0de:	230a      	movs	r3, #10
 800e0e0:	e011      	b.n	800e106 <_printf_i+0xfa>
 800e0e2:	6821      	ldr	r1, [r4, #0]
 800e0e4:	6833      	ldr	r3, [r6, #0]
 800e0e6:	0608      	lsls	r0, r1, #24
 800e0e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e0ec:	d402      	bmi.n	800e0f4 <_printf_i+0xe8>
 800e0ee:	0649      	lsls	r1, r1, #25
 800e0f0:	bf48      	it	mi
 800e0f2:	b2ad      	uxthmi	r5, r5
 800e0f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e0f6:	6033      	str	r3, [r6, #0]
 800e0f8:	4851      	ldr	r0, [pc, #324]	@ (800e240 <_printf_i+0x234>)
 800e0fa:	bf14      	ite	ne
 800e0fc:	230a      	movne	r3, #10
 800e0fe:	2308      	moveq	r3, #8
 800e100:	2100      	movs	r1, #0
 800e102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e106:	6866      	ldr	r6, [r4, #4]
 800e108:	2e00      	cmp	r6, #0
 800e10a:	60a6      	str	r6, [r4, #8]
 800e10c:	db05      	blt.n	800e11a <_printf_i+0x10e>
 800e10e:	6821      	ldr	r1, [r4, #0]
 800e110:	432e      	orrs	r6, r5
 800e112:	f021 0104 	bic.w	r1, r1, #4
 800e116:	6021      	str	r1, [r4, #0]
 800e118:	d04b      	beq.n	800e1b2 <_printf_i+0x1a6>
 800e11a:	4616      	mov	r6, r2
 800e11c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e120:	fb03 5711 	mls	r7, r3, r1, r5
 800e124:	5dc7      	ldrb	r7, [r0, r7]
 800e126:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e12a:	462f      	mov	r7, r5
 800e12c:	460d      	mov	r5, r1
 800e12e:	42bb      	cmp	r3, r7
 800e130:	d9f4      	bls.n	800e11c <_printf_i+0x110>
 800e132:	2b08      	cmp	r3, #8
 800e134:	d10b      	bne.n	800e14e <_printf_i+0x142>
 800e136:	6823      	ldr	r3, [r4, #0]
 800e138:	07df      	lsls	r7, r3, #31
 800e13a:	d508      	bpl.n	800e14e <_printf_i+0x142>
 800e13c:	6923      	ldr	r3, [r4, #16]
 800e13e:	6861      	ldr	r1, [r4, #4]
 800e140:	4299      	cmp	r1, r3
 800e142:	bfde      	ittt	le
 800e144:	2330      	movle	r3, #48	@ 0x30
 800e146:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e14a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e14e:	1b92      	subs	r2, r2, r6
 800e150:	6122      	str	r2, [r4, #16]
 800e152:	464b      	mov	r3, r9
 800e154:	aa03      	add	r2, sp, #12
 800e156:	4621      	mov	r1, r4
 800e158:	4640      	mov	r0, r8
 800e15a:	f8cd a000 	str.w	sl, [sp]
 800e15e:	f7ff fee3 	bl	800df28 <_printf_common>
 800e162:	3001      	adds	r0, #1
 800e164:	d14a      	bne.n	800e1fc <_printf_i+0x1f0>
 800e166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e16a:	b004      	add	sp, #16
 800e16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e170:	6823      	ldr	r3, [r4, #0]
 800e172:	f043 0320 	orr.w	r3, r3, #32
 800e176:	6023      	str	r3, [r4, #0]
 800e178:	2778      	movs	r7, #120	@ 0x78
 800e17a:	4832      	ldr	r0, [pc, #200]	@ (800e244 <_printf_i+0x238>)
 800e17c:	6823      	ldr	r3, [r4, #0]
 800e17e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e182:	061f      	lsls	r7, r3, #24
 800e184:	6831      	ldr	r1, [r6, #0]
 800e186:	f851 5b04 	ldr.w	r5, [r1], #4
 800e18a:	d402      	bmi.n	800e192 <_printf_i+0x186>
 800e18c:	065f      	lsls	r7, r3, #25
 800e18e:	bf48      	it	mi
 800e190:	b2ad      	uxthmi	r5, r5
 800e192:	6031      	str	r1, [r6, #0]
 800e194:	07d9      	lsls	r1, r3, #31
 800e196:	bf44      	itt	mi
 800e198:	f043 0320 	orrmi.w	r3, r3, #32
 800e19c:	6023      	strmi	r3, [r4, #0]
 800e19e:	b11d      	cbz	r5, 800e1a8 <_printf_i+0x19c>
 800e1a0:	2310      	movs	r3, #16
 800e1a2:	e7ad      	b.n	800e100 <_printf_i+0xf4>
 800e1a4:	4826      	ldr	r0, [pc, #152]	@ (800e240 <_printf_i+0x234>)
 800e1a6:	e7e9      	b.n	800e17c <_printf_i+0x170>
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	f023 0320 	bic.w	r3, r3, #32
 800e1ae:	6023      	str	r3, [r4, #0]
 800e1b0:	e7f6      	b.n	800e1a0 <_printf_i+0x194>
 800e1b2:	4616      	mov	r6, r2
 800e1b4:	e7bd      	b.n	800e132 <_printf_i+0x126>
 800e1b6:	6833      	ldr	r3, [r6, #0]
 800e1b8:	6825      	ldr	r5, [r4, #0]
 800e1ba:	1d18      	adds	r0, r3, #4
 800e1bc:	6961      	ldr	r1, [r4, #20]
 800e1be:	6030      	str	r0, [r6, #0]
 800e1c0:	062e      	lsls	r6, r5, #24
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	d501      	bpl.n	800e1ca <_printf_i+0x1be>
 800e1c6:	6019      	str	r1, [r3, #0]
 800e1c8:	e002      	b.n	800e1d0 <_printf_i+0x1c4>
 800e1ca:	0668      	lsls	r0, r5, #25
 800e1cc:	d5fb      	bpl.n	800e1c6 <_printf_i+0x1ba>
 800e1ce:	8019      	strh	r1, [r3, #0]
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	4616      	mov	r6, r2
 800e1d4:	6123      	str	r3, [r4, #16]
 800e1d6:	e7bc      	b.n	800e152 <_printf_i+0x146>
 800e1d8:	6833      	ldr	r3, [r6, #0]
 800e1da:	2100      	movs	r1, #0
 800e1dc:	1d1a      	adds	r2, r3, #4
 800e1de:	6032      	str	r2, [r6, #0]
 800e1e0:	681e      	ldr	r6, [r3, #0]
 800e1e2:	6862      	ldr	r2, [r4, #4]
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	f001 fa27 	bl	800f638 <memchr>
 800e1ea:	b108      	cbz	r0, 800e1f0 <_printf_i+0x1e4>
 800e1ec:	1b80      	subs	r0, r0, r6
 800e1ee:	6060      	str	r0, [r4, #4]
 800e1f0:	6863      	ldr	r3, [r4, #4]
 800e1f2:	6123      	str	r3, [r4, #16]
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1fa:	e7aa      	b.n	800e152 <_printf_i+0x146>
 800e1fc:	6923      	ldr	r3, [r4, #16]
 800e1fe:	4632      	mov	r2, r6
 800e200:	4649      	mov	r1, r9
 800e202:	4640      	mov	r0, r8
 800e204:	47d0      	blx	sl
 800e206:	3001      	adds	r0, #1
 800e208:	d0ad      	beq.n	800e166 <_printf_i+0x15a>
 800e20a:	6823      	ldr	r3, [r4, #0]
 800e20c:	079b      	lsls	r3, r3, #30
 800e20e:	d413      	bmi.n	800e238 <_printf_i+0x22c>
 800e210:	68e0      	ldr	r0, [r4, #12]
 800e212:	9b03      	ldr	r3, [sp, #12]
 800e214:	4298      	cmp	r0, r3
 800e216:	bfb8      	it	lt
 800e218:	4618      	movlt	r0, r3
 800e21a:	e7a6      	b.n	800e16a <_printf_i+0x15e>
 800e21c:	2301      	movs	r3, #1
 800e21e:	4632      	mov	r2, r6
 800e220:	4649      	mov	r1, r9
 800e222:	4640      	mov	r0, r8
 800e224:	47d0      	blx	sl
 800e226:	3001      	adds	r0, #1
 800e228:	d09d      	beq.n	800e166 <_printf_i+0x15a>
 800e22a:	3501      	adds	r5, #1
 800e22c:	68e3      	ldr	r3, [r4, #12]
 800e22e:	9903      	ldr	r1, [sp, #12]
 800e230:	1a5b      	subs	r3, r3, r1
 800e232:	42ab      	cmp	r3, r5
 800e234:	dcf2      	bgt.n	800e21c <_printf_i+0x210>
 800e236:	e7eb      	b.n	800e210 <_printf_i+0x204>
 800e238:	2500      	movs	r5, #0
 800e23a:	f104 0619 	add.w	r6, r4, #25
 800e23e:	e7f5      	b.n	800e22c <_printf_i+0x220>
 800e240:	08013c52 	.word	0x08013c52
 800e244:	08013c63 	.word	0x08013c63

0800e248 <_scanf_float>:
 800e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	b087      	sub	sp, #28
 800e24e:	4691      	mov	r9, r2
 800e250:	4680      	mov	r8, r0
 800e252:	460c      	mov	r4, r1
 800e254:	9303      	str	r3, [sp, #12]
 800e256:	688b      	ldr	r3, [r1, #8]
 800e258:	1e5a      	subs	r2, r3, #1
 800e25a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e25e:	460a      	mov	r2, r1
 800e260:	bf89      	itett	hi
 800e262:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e266:	f04f 0b00 	movls.w	fp, #0
 800e26a:	eb03 0b05 	addhi.w	fp, r3, r5
 800e26e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e272:	f04f 0500 	mov.w	r5, #0
 800e276:	bf88      	it	hi
 800e278:	608b      	strhi	r3, [r1, #8]
 800e27a:	680b      	ldr	r3, [r1, #0]
 800e27c:	46aa      	mov	sl, r5
 800e27e:	462f      	mov	r7, r5
 800e280:	9502      	str	r5, [sp, #8]
 800e282:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e286:	f842 3b1c 	str.w	r3, [r2], #28
 800e28a:	4616      	mov	r6, r2
 800e28c:	9201      	str	r2, [sp, #4]
 800e28e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e292:	68a2      	ldr	r2, [r4, #8]
 800e294:	b15a      	cbz	r2, 800e2ae <_scanf_float+0x66>
 800e296:	f8d9 3000 	ldr.w	r3, [r9]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2b4e      	cmp	r3, #78	@ 0x4e
 800e29e:	d863      	bhi.n	800e368 <_scanf_float+0x120>
 800e2a0:	2b40      	cmp	r3, #64	@ 0x40
 800e2a2:	d83b      	bhi.n	800e31c <_scanf_float+0xd4>
 800e2a4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e2a8:	b2c8      	uxtb	r0, r1
 800e2aa:	280e      	cmp	r0, #14
 800e2ac:	d939      	bls.n	800e322 <_scanf_float+0xda>
 800e2ae:	b11f      	cbz	r7, 800e2b8 <_scanf_float+0x70>
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e2b6:	6023      	str	r3, [r4, #0]
 800e2b8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e2bc:	f1ba 0f01 	cmp.w	sl, #1
 800e2c0:	f200 8115 	bhi.w	800e4ee <_scanf_float+0x2a6>
 800e2c4:	9b01      	ldr	r3, [sp, #4]
 800e2c6:	429e      	cmp	r6, r3
 800e2c8:	f200 8106 	bhi.w	800e4d8 <_scanf_float+0x290>
 800e2cc:	2001      	movs	r0, #1
 800e2ce:	b007      	add	sp, #28
 800e2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e2d8:	2a0d      	cmp	r2, #13
 800e2da:	d8e8      	bhi.n	800e2ae <_scanf_float+0x66>
 800e2dc:	a101      	add	r1, pc, #4	@ (adr r1, 800e2e4 <_scanf_float+0x9c>)
 800e2de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e2e2:	bf00      	nop
 800e2e4:	0800e42d 	.word	0x0800e42d
 800e2e8:	0800e2af 	.word	0x0800e2af
 800e2ec:	0800e2af 	.word	0x0800e2af
 800e2f0:	0800e2af 	.word	0x0800e2af
 800e2f4:	0800e489 	.word	0x0800e489
 800e2f8:	0800e463 	.word	0x0800e463
 800e2fc:	0800e2af 	.word	0x0800e2af
 800e300:	0800e2af 	.word	0x0800e2af
 800e304:	0800e43b 	.word	0x0800e43b
 800e308:	0800e2af 	.word	0x0800e2af
 800e30c:	0800e2af 	.word	0x0800e2af
 800e310:	0800e2af 	.word	0x0800e2af
 800e314:	0800e2af 	.word	0x0800e2af
 800e318:	0800e3f7 	.word	0x0800e3f7
 800e31c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e320:	e7da      	b.n	800e2d8 <_scanf_float+0x90>
 800e322:	290e      	cmp	r1, #14
 800e324:	d8c3      	bhi.n	800e2ae <_scanf_float+0x66>
 800e326:	a001      	add	r0, pc, #4	@ (adr r0, 800e32c <_scanf_float+0xe4>)
 800e328:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e32c:	0800e3e7 	.word	0x0800e3e7
 800e330:	0800e2af 	.word	0x0800e2af
 800e334:	0800e3e7 	.word	0x0800e3e7
 800e338:	0800e477 	.word	0x0800e477
 800e33c:	0800e2af 	.word	0x0800e2af
 800e340:	0800e389 	.word	0x0800e389
 800e344:	0800e3cd 	.word	0x0800e3cd
 800e348:	0800e3cd 	.word	0x0800e3cd
 800e34c:	0800e3cd 	.word	0x0800e3cd
 800e350:	0800e3cd 	.word	0x0800e3cd
 800e354:	0800e3cd 	.word	0x0800e3cd
 800e358:	0800e3cd 	.word	0x0800e3cd
 800e35c:	0800e3cd 	.word	0x0800e3cd
 800e360:	0800e3cd 	.word	0x0800e3cd
 800e364:	0800e3cd 	.word	0x0800e3cd
 800e368:	2b6e      	cmp	r3, #110	@ 0x6e
 800e36a:	d809      	bhi.n	800e380 <_scanf_float+0x138>
 800e36c:	2b60      	cmp	r3, #96	@ 0x60
 800e36e:	d8b1      	bhi.n	800e2d4 <_scanf_float+0x8c>
 800e370:	2b54      	cmp	r3, #84	@ 0x54
 800e372:	d07b      	beq.n	800e46c <_scanf_float+0x224>
 800e374:	2b59      	cmp	r3, #89	@ 0x59
 800e376:	d19a      	bne.n	800e2ae <_scanf_float+0x66>
 800e378:	2d07      	cmp	r5, #7
 800e37a:	d198      	bne.n	800e2ae <_scanf_float+0x66>
 800e37c:	2508      	movs	r5, #8
 800e37e:	e02f      	b.n	800e3e0 <_scanf_float+0x198>
 800e380:	2b74      	cmp	r3, #116	@ 0x74
 800e382:	d073      	beq.n	800e46c <_scanf_float+0x224>
 800e384:	2b79      	cmp	r3, #121	@ 0x79
 800e386:	e7f6      	b.n	800e376 <_scanf_float+0x12e>
 800e388:	6821      	ldr	r1, [r4, #0]
 800e38a:	05c8      	lsls	r0, r1, #23
 800e38c:	d51e      	bpl.n	800e3cc <_scanf_float+0x184>
 800e38e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e392:	3701      	adds	r7, #1
 800e394:	6021      	str	r1, [r4, #0]
 800e396:	f1bb 0f00 	cmp.w	fp, #0
 800e39a:	d003      	beq.n	800e3a4 <_scanf_float+0x15c>
 800e39c:	3201      	adds	r2, #1
 800e39e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800e3a2:	60a2      	str	r2, [r4, #8]
 800e3a4:	68a3      	ldr	r3, [r4, #8]
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	60a3      	str	r3, [r4, #8]
 800e3aa:	6923      	ldr	r3, [r4, #16]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	6123      	str	r3, [r4, #16]
 800e3b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f8c9 3004 	str.w	r3, [r9, #4]
 800e3bc:	f340 8083 	ble.w	800e4c6 <_scanf_float+0x27e>
 800e3c0:	f8d9 3000 	ldr.w	r3, [r9]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	f8c9 3000 	str.w	r3, [r9]
 800e3ca:	e762      	b.n	800e292 <_scanf_float+0x4a>
 800e3cc:	eb1a 0105 	adds.w	r1, sl, r5
 800e3d0:	f47f af6d 	bne.w	800e2ae <_scanf_float+0x66>
 800e3d4:	6822      	ldr	r2, [r4, #0]
 800e3d6:	460d      	mov	r5, r1
 800e3d8:	468a      	mov	sl, r1
 800e3da:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e3de:	6022      	str	r2, [r4, #0]
 800e3e0:	f806 3b01 	strb.w	r3, [r6], #1
 800e3e4:	e7de      	b.n	800e3a4 <_scanf_float+0x15c>
 800e3e6:	6822      	ldr	r2, [r4, #0]
 800e3e8:	0610      	lsls	r0, r2, #24
 800e3ea:	f57f af60 	bpl.w	800e2ae <_scanf_float+0x66>
 800e3ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e3f2:	6022      	str	r2, [r4, #0]
 800e3f4:	e7f4      	b.n	800e3e0 <_scanf_float+0x198>
 800e3f6:	f1ba 0f00 	cmp.w	sl, #0
 800e3fa:	d10c      	bne.n	800e416 <_scanf_float+0x1ce>
 800e3fc:	b977      	cbnz	r7, 800e41c <_scanf_float+0x1d4>
 800e3fe:	6822      	ldr	r2, [r4, #0]
 800e400:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e404:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e408:	d108      	bne.n	800e41c <_scanf_float+0x1d4>
 800e40a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e40e:	f04f 0a01 	mov.w	sl, #1
 800e412:	6022      	str	r2, [r4, #0]
 800e414:	e7e4      	b.n	800e3e0 <_scanf_float+0x198>
 800e416:	f1ba 0f02 	cmp.w	sl, #2
 800e41a:	d051      	beq.n	800e4c0 <_scanf_float+0x278>
 800e41c:	2d01      	cmp	r5, #1
 800e41e:	d002      	beq.n	800e426 <_scanf_float+0x1de>
 800e420:	2d04      	cmp	r5, #4
 800e422:	f47f af44 	bne.w	800e2ae <_scanf_float+0x66>
 800e426:	3501      	adds	r5, #1
 800e428:	b2ed      	uxtb	r5, r5
 800e42a:	e7d9      	b.n	800e3e0 <_scanf_float+0x198>
 800e42c:	f1ba 0f01 	cmp.w	sl, #1
 800e430:	f47f af3d 	bne.w	800e2ae <_scanf_float+0x66>
 800e434:	f04f 0a02 	mov.w	sl, #2
 800e438:	e7d2      	b.n	800e3e0 <_scanf_float+0x198>
 800e43a:	b975      	cbnz	r5, 800e45a <_scanf_float+0x212>
 800e43c:	2f00      	cmp	r7, #0
 800e43e:	f47f af37 	bne.w	800e2b0 <_scanf_float+0x68>
 800e442:	6822      	ldr	r2, [r4, #0]
 800e444:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e448:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e44c:	f040 8103 	bne.w	800e656 <_scanf_float+0x40e>
 800e450:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e454:	2501      	movs	r5, #1
 800e456:	6022      	str	r2, [r4, #0]
 800e458:	e7c2      	b.n	800e3e0 <_scanf_float+0x198>
 800e45a:	2d03      	cmp	r5, #3
 800e45c:	d0e3      	beq.n	800e426 <_scanf_float+0x1de>
 800e45e:	2d05      	cmp	r5, #5
 800e460:	e7df      	b.n	800e422 <_scanf_float+0x1da>
 800e462:	2d02      	cmp	r5, #2
 800e464:	f47f af23 	bne.w	800e2ae <_scanf_float+0x66>
 800e468:	2503      	movs	r5, #3
 800e46a:	e7b9      	b.n	800e3e0 <_scanf_float+0x198>
 800e46c:	2d06      	cmp	r5, #6
 800e46e:	f47f af1e 	bne.w	800e2ae <_scanf_float+0x66>
 800e472:	2507      	movs	r5, #7
 800e474:	e7b4      	b.n	800e3e0 <_scanf_float+0x198>
 800e476:	6822      	ldr	r2, [r4, #0]
 800e478:	0591      	lsls	r1, r2, #22
 800e47a:	f57f af18 	bpl.w	800e2ae <_scanf_float+0x66>
 800e47e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e482:	9702      	str	r7, [sp, #8]
 800e484:	6022      	str	r2, [r4, #0]
 800e486:	e7ab      	b.n	800e3e0 <_scanf_float+0x198>
 800e488:	6822      	ldr	r2, [r4, #0]
 800e48a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e48e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e492:	d005      	beq.n	800e4a0 <_scanf_float+0x258>
 800e494:	0550      	lsls	r0, r2, #21
 800e496:	f57f af0a 	bpl.w	800e2ae <_scanf_float+0x66>
 800e49a:	2f00      	cmp	r7, #0
 800e49c:	f000 80db 	beq.w	800e656 <_scanf_float+0x40e>
 800e4a0:	0591      	lsls	r1, r2, #22
 800e4a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e4a6:	bf58      	it	pl
 800e4a8:	9902      	ldrpl	r1, [sp, #8]
 800e4aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e4ae:	bf58      	it	pl
 800e4b0:	1a79      	subpl	r1, r7, r1
 800e4b2:	6022      	str	r2, [r4, #0]
 800e4b4:	f04f 0700 	mov.w	r7, #0
 800e4b8:	bf58      	it	pl
 800e4ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e4be:	e78f      	b.n	800e3e0 <_scanf_float+0x198>
 800e4c0:	f04f 0a03 	mov.w	sl, #3
 800e4c4:	e78c      	b.n	800e3e0 <_scanf_float+0x198>
 800e4c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e4ca:	4649      	mov	r1, r9
 800e4cc:	4640      	mov	r0, r8
 800e4ce:	4798      	blx	r3
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	f43f aede 	beq.w	800e292 <_scanf_float+0x4a>
 800e4d6:	e6ea      	b.n	800e2ae <_scanf_float+0x66>
 800e4d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4dc:	464a      	mov	r2, r9
 800e4de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4e2:	4640      	mov	r0, r8
 800e4e4:	4798      	blx	r3
 800e4e6:	6923      	ldr	r3, [r4, #16]
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	6123      	str	r3, [r4, #16]
 800e4ec:	e6ea      	b.n	800e2c4 <_scanf_float+0x7c>
 800e4ee:	1e6b      	subs	r3, r5, #1
 800e4f0:	2b06      	cmp	r3, #6
 800e4f2:	d824      	bhi.n	800e53e <_scanf_float+0x2f6>
 800e4f4:	2d02      	cmp	r5, #2
 800e4f6:	d836      	bhi.n	800e566 <_scanf_float+0x31e>
 800e4f8:	9b01      	ldr	r3, [sp, #4]
 800e4fa:	429e      	cmp	r6, r3
 800e4fc:	f67f aee6 	bls.w	800e2cc <_scanf_float+0x84>
 800e500:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e504:	464a      	mov	r2, r9
 800e506:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e50a:	4640      	mov	r0, r8
 800e50c:	4798      	blx	r3
 800e50e:	6923      	ldr	r3, [r4, #16]
 800e510:	3b01      	subs	r3, #1
 800e512:	6123      	str	r3, [r4, #16]
 800e514:	e7f0      	b.n	800e4f8 <_scanf_float+0x2b0>
 800e516:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e51a:	464a      	mov	r2, r9
 800e51c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e520:	4640      	mov	r0, r8
 800e522:	4798      	blx	r3
 800e524:	6923      	ldr	r3, [r4, #16]
 800e526:	3b01      	subs	r3, #1
 800e528:	6123      	str	r3, [r4, #16]
 800e52a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e52e:	fa5f fa8a 	uxtb.w	sl, sl
 800e532:	f1ba 0f02 	cmp.w	sl, #2
 800e536:	d1ee      	bne.n	800e516 <_scanf_float+0x2ce>
 800e538:	3d03      	subs	r5, #3
 800e53a:	b2ed      	uxtb	r5, r5
 800e53c:	1b76      	subs	r6, r6, r5
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	05da      	lsls	r2, r3, #23
 800e542:	d52f      	bpl.n	800e5a4 <_scanf_float+0x35c>
 800e544:	055b      	lsls	r3, r3, #21
 800e546:	d511      	bpl.n	800e56c <_scanf_float+0x324>
 800e548:	9b01      	ldr	r3, [sp, #4]
 800e54a:	429e      	cmp	r6, r3
 800e54c:	f67f aebe 	bls.w	800e2cc <_scanf_float+0x84>
 800e550:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e554:	464a      	mov	r2, r9
 800e556:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e55a:	4640      	mov	r0, r8
 800e55c:	4798      	blx	r3
 800e55e:	6923      	ldr	r3, [r4, #16]
 800e560:	3b01      	subs	r3, #1
 800e562:	6123      	str	r3, [r4, #16]
 800e564:	e7f0      	b.n	800e548 <_scanf_float+0x300>
 800e566:	46aa      	mov	sl, r5
 800e568:	46b3      	mov	fp, r6
 800e56a:	e7de      	b.n	800e52a <_scanf_float+0x2e2>
 800e56c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e570:	1e75      	subs	r5, r6, #1
 800e572:	6923      	ldr	r3, [r4, #16]
 800e574:	2965      	cmp	r1, #101	@ 0x65
 800e576:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e57a:	6123      	str	r3, [r4, #16]
 800e57c:	d00c      	beq.n	800e598 <_scanf_float+0x350>
 800e57e:	2945      	cmp	r1, #69	@ 0x45
 800e580:	d00a      	beq.n	800e598 <_scanf_float+0x350>
 800e582:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e586:	464a      	mov	r2, r9
 800e588:	4640      	mov	r0, r8
 800e58a:	1eb5      	subs	r5, r6, #2
 800e58c:	4798      	blx	r3
 800e58e:	6923      	ldr	r3, [r4, #16]
 800e590:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e594:	3b01      	subs	r3, #1
 800e596:	6123      	str	r3, [r4, #16]
 800e598:	462e      	mov	r6, r5
 800e59a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e59e:	464a      	mov	r2, r9
 800e5a0:	4640      	mov	r0, r8
 800e5a2:	4798      	blx	r3
 800e5a4:	6822      	ldr	r2, [r4, #0]
 800e5a6:	f012 0210 	ands.w	r2, r2, #16
 800e5aa:	d001      	beq.n	800e5b0 <_scanf_float+0x368>
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	e68e      	b.n	800e2ce <_scanf_float+0x86>
 800e5b0:	7032      	strb	r2, [r6, #0]
 800e5b2:	6823      	ldr	r3, [r4, #0]
 800e5b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e5b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5bc:	d125      	bne.n	800e60a <_scanf_float+0x3c2>
 800e5be:	9b02      	ldr	r3, [sp, #8]
 800e5c0:	429f      	cmp	r7, r3
 800e5c2:	d00a      	beq.n	800e5da <_scanf_float+0x392>
 800e5c4:	1bda      	subs	r2, r3, r7
 800e5c6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e5ca:	4924      	ldr	r1, [pc, #144]	@ (800e65c <_scanf_float+0x414>)
 800e5cc:	429e      	cmp	r6, r3
 800e5ce:	bf28      	it	cs
 800e5d0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f000 f87b 	bl	800e6d0 <siprintf>
 800e5da:	2200      	movs	r2, #0
 800e5dc:	9901      	ldr	r1, [sp, #4]
 800e5de:	4640      	mov	r0, r8
 800e5e0:	f000 ff3e 	bl	800f460 <_strtod_r>
 800e5e4:	6821      	ldr	r1, [r4, #0]
 800e5e6:	9b03      	ldr	r3, [sp, #12]
 800e5e8:	f011 0f02 	tst.w	r1, #2
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	ec57 6b10 	vmov	r6, r7, d0
 800e5f2:	f103 0204 	add.w	r2, r3, #4
 800e5f6:	d015      	beq.n	800e624 <_scanf_float+0x3dc>
 800e5f8:	9903      	ldr	r1, [sp, #12]
 800e5fa:	600a      	str	r2, [r1, #0]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	e9c3 6700 	strd	r6, r7, [r3]
 800e602:	68e3      	ldr	r3, [r4, #12]
 800e604:	3301      	adds	r3, #1
 800e606:	60e3      	str	r3, [r4, #12]
 800e608:	e7d0      	b.n	800e5ac <_scanf_float+0x364>
 800e60a:	9b04      	ldr	r3, [sp, #16]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d0e4      	beq.n	800e5da <_scanf_float+0x392>
 800e610:	9905      	ldr	r1, [sp, #20]
 800e612:	230a      	movs	r3, #10
 800e614:	4640      	mov	r0, r8
 800e616:	3101      	adds	r1, #1
 800e618:	f000 ffa2 	bl	800f560 <_strtol_r>
 800e61c:	9b04      	ldr	r3, [sp, #16]
 800e61e:	9e05      	ldr	r6, [sp, #20]
 800e620:	1ac2      	subs	r2, r0, r3
 800e622:	e7d0      	b.n	800e5c6 <_scanf_float+0x37e>
 800e624:	f011 0f04 	tst.w	r1, #4
 800e628:	9903      	ldr	r1, [sp, #12]
 800e62a:	600a      	str	r2, [r1, #0]
 800e62c:	d1e6      	bne.n	800e5fc <_scanf_float+0x3b4>
 800e62e:	681d      	ldr	r5, [r3, #0]
 800e630:	4632      	mov	r2, r6
 800e632:	463b      	mov	r3, r7
 800e634:	4630      	mov	r0, r6
 800e636:	4639      	mov	r1, r7
 800e638:	f7f2 fa88 	bl	8000b4c <__aeabi_dcmpun>
 800e63c:	b128      	cbz	r0, 800e64a <_scanf_float+0x402>
 800e63e:	4808      	ldr	r0, [pc, #32]	@ (800e660 <_scanf_float+0x418>)
 800e640:	f001 f81e 	bl	800f680 <nanf>
 800e644:	ed85 0a00 	vstr	s0, [r5]
 800e648:	e7db      	b.n	800e602 <_scanf_float+0x3ba>
 800e64a:	4630      	mov	r0, r6
 800e64c:	4639      	mov	r1, r7
 800e64e:	f7f2 fadb 	bl	8000c08 <__aeabi_d2f>
 800e652:	6028      	str	r0, [r5, #0]
 800e654:	e7d5      	b.n	800e602 <_scanf_float+0x3ba>
 800e656:	2700      	movs	r7, #0
 800e658:	e62e      	b.n	800e2b8 <_scanf_float+0x70>
 800e65a:	bf00      	nop
 800e65c:	08013c74 	.word	0x08013c74
 800e660:	08013e15 	.word	0x08013e15

0800e664 <sniprintf>:
 800e664:	b40c      	push	{r2, r3}
 800e666:	4b19      	ldr	r3, [pc, #100]	@ (800e6cc <sniprintf+0x68>)
 800e668:	b530      	push	{r4, r5, lr}
 800e66a:	1e0c      	subs	r4, r1, #0
 800e66c:	b09d      	sub	sp, #116	@ 0x74
 800e66e:	681d      	ldr	r5, [r3, #0]
 800e670:	da08      	bge.n	800e684 <sniprintf+0x20>
 800e672:	238b      	movs	r3, #139	@ 0x8b
 800e674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e678:	602b      	str	r3, [r5, #0]
 800e67a:	b01d      	add	sp, #116	@ 0x74
 800e67c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e680:	b002      	add	sp, #8
 800e682:	4770      	bx	lr
 800e684:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e688:	9002      	str	r0, [sp, #8]
 800e68a:	9006      	str	r0, [sp, #24]
 800e68c:	a902      	add	r1, sp, #8
 800e68e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e692:	f04f 0300 	mov.w	r3, #0
 800e696:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e698:	4628      	mov	r0, r5
 800e69a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e69c:	bf14      	ite	ne
 800e69e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800e6a2:	4623      	moveq	r3, r4
 800e6a4:	9304      	str	r3, [sp, #16]
 800e6a6:	9307      	str	r3, [sp, #28]
 800e6a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e6ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e6b0:	ab21      	add	r3, sp, #132	@ 0x84
 800e6b2:	9301      	str	r3, [sp, #4]
 800e6b4:	f002 f9da 	bl	8010a6c <_svfiprintf_r>
 800e6b8:	1c43      	adds	r3, r0, #1
 800e6ba:	bfbc      	itt	lt
 800e6bc:	238b      	movlt	r3, #139	@ 0x8b
 800e6be:	602b      	strlt	r3, [r5, #0]
 800e6c0:	2c00      	cmp	r4, #0
 800e6c2:	d0da      	beq.n	800e67a <sniprintf+0x16>
 800e6c4:	9b02      	ldr	r3, [sp, #8]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	701a      	strb	r2, [r3, #0]
 800e6ca:	e7d6      	b.n	800e67a <sniprintf+0x16>
 800e6cc:	2000019c 	.word	0x2000019c

0800e6d0 <siprintf>:
 800e6d0:	b40e      	push	{r1, r2, r3}
 800e6d2:	b510      	push	{r4, lr}
 800e6d4:	b09d      	sub	sp, #116	@ 0x74
 800e6d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e6da:	2400      	movs	r4, #0
 800e6dc:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e6de:	9002      	str	r0, [sp, #8]
 800e6e0:	9006      	str	r0, [sp, #24]
 800e6e2:	9107      	str	r1, [sp, #28]
 800e6e4:	9104      	str	r1, [sp, #16]
 800e6e6:	4809      	ldr	r0, [pc, #36]	@ (800e70c <siprintf+0x3c>)
 800e6e8:	4909      	ldr	r1, [pc, #36]	@ (800e710 <siprintf+0x40>)
 800e6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6ee:	9105      	str	r1, [sp, #20]
 800e6f0:	a902      	add	r1, sp, #8
 800e6f2:	6800      	ldr	r0, [r0, #0]
 800e6f4:	9301      	str	r3, [sp, #4]
 800e6f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e6f8:	f002 f9b8 	bl	8010a6c <_svfiprintf_r>
 800e6fc:	9b02      	ldr	r3, [sp, #8]
 800e6fe:	701c      	strb	r4, [r3, #0]
 800e700:	b01d      	add	sp, #116	@ 0x74
 800e702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e706:	b003      	add	sp, #12
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	2000019c 	.word	0x2000019c
 800e710:	ffff0208 	.word	0xffff0208

0800e714 <std>:
 800e714:	2300      	movs	r3, #0
 800e716:	b510      	push	{r4, lr}
 800e718:	4604      	mov	r4, r0
 800e71a:	6083      	str	r3, [r0, #8]
 800e71c:	8181      	strh	r1, [r0, #12]
 800e71e:	4619      	mov	r1, r3
 800e720:	6643      	str	r3, [r0, #100]	@ 0x64
 800e722:	81c2      	strh	r2, [r0, #14]
 800e724:	2208      	movs	r2, #8
 800e726:	6183      	str	r3, [r0, #24]
 800e728:	e9c0 3300 	strd	r3, r3, [r0]
 800e72c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e730:	305c      	adds	r0, #92	@ 0x5c
 800e732:	f000 ff35 	bl	800f5a0 <memset>
 800e736:	4b0d      	ldr	r3, [pc, #52]	@ (800e76c <std+0x58>)
 800e738:	6224      	str	r4, [r4, #32]
 800e73a:	6263      	str	r3, [r4, #36]	@ 0x24
 800e73c:	4b0c      	ldr	r3, [pc, #48]	@ (800e770 <std+0x5c>)
 800e73e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e740:	4b0c      	ldr	r3, [pc, #48]	@ (800e774 <std+0x60>)
 800e742:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e744:	4b0c      	ldr	r3, [pc, #48]	@ (800e778 <std+0x64>)
 800e746:	6323      	str	r3, [r4, #48]	@ 0x30
 800e748:	4b0c      	ldr	r3, [pc, #48]	@ (800e77c <std+0x68>)
 800e74a:	429c      	cmp	r4, r3
 800e74c:	d006      	beq.n	800e75c <std+0x48>
 800e74e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e752:	4294      	cmp	r4, r2
 800e754:	d002      	beq.n	800e75c <std+0x48>
 800e756:	33d0      	adds	r3, #208	@ 0xd0
 800e758:	429c      	cmp	r4, r3
 800e75a:	d105      	bne.n	800e768 <std+0x54>
 800e75c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e764:	f000 bf60 	b.w	800f628 <__retarget_lock_init_recursive>
 800e768:	bd10      	pop	{r4, pc}
 800e76a:	bf00      	nop
 800e76c:	080118b9 	.word	0x080118b9
 800e770:	080118db 	.word	0x080118db
 800e774:	08011913 	.word	0x08011913
 800e778:	08011937 	.word	0x08011937
 800e77c:	200004d4 	.word	0x200004d4

0800e780 <stdio_exit_handler>:
 800e780:	4a02      	ldr	r2, [pc, #8]	@ (800e78c <stdio_exit_handler+0xc>)
 800e782:	4903      	ldr	r1, [pc, #12]	@ (800e790 <stdio_exit_handler+0x10>)
 800e784:	4803      	ldr	r0, [pc, #12]	@ (800e794 <stdio_exit_handler+0x14>)
 800e786:	f000 beed 	b.w	800f564 <_fwalk_sglue>
 800e78a:	bf00      	nop
 800e78c:	20000024 	.word	0x20000024
 800e790:	08010ee5 	.word	0x08010ee5
 800e794:	200001a0 	.word	0x200001a0

0800e798 <cleanup_stdio>:
 800e798:	6841      	ldr	r1, [r0, #4]
 800e79a:	4b0c      	ldr	r3, [pc, #48]	@ (800e7cc <cleanup_stdio+0x34>)
 800e79c:	4299      	cmp	r1, r3
 800e79e:	b510      	push	{r4, lr}
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	d001      	beq.n	800e7a8 <cleanup_stdio+0x10>
 800e7a4:	f002 fb9e 	bl	8010ee4 <_fflush_r>
 800e7a8:	68a1      	ldr	r1, [r4, #8]
 800e7aa:	4b09      	ldr	r3, [pc, #36]	@ (800e7d0 <cleanup_stdio+0x38>)
 800e7ac:	4299      	cmp	r1, r3
 800e7ae:	d002      	beq.n	800e7b6 <cleanup_stdio+0x1e>
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	f002 fb97 	bl	8010ee4 <_fflush_r>
 800e7b6:	68e1      	ldr	r1, [r4, #12]
 800e7b8:	4b06      	ldr	r3, [pc, #24]	@ (800e7d4 <cleanup_stdio+0x3c>)
 800e7ba:	4299      	cmp	r1, r3
 800e7bc:	d004      	beq.n	800e7c8 <cleanup_stdio+0x30>
 800e7be:	4620      	mov	r0, r4
 800e7c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7c4:	f002 bb8e 	b.w	8010ee4 <_fflush_r>
 800e7c8:	bd10      	pop	{r4, pc}
 800e7ca:	bf00      	nop
 800e7cc:	200004d4 	.word	0x200004d4
 800e7d0:	2000053c 	.word	0x2000053c
 800e7d4:	200005a4 	.word	0x200005a4

0800e7d8 <global_stdio_init.part.0>:
 800e7d8:	b510      	push	{r4, lr}
 800e7da:	4b0b      	ldr	r3, [pc, #44]	@ (800e808 <global_stdio_init.part.0+0x30>)
 800e7dc:	2104      	movs	r1, #4
 800e7de:	4c0b      	ldr	r4, [pc, #44]	@ (800e80c <global_stdio_init.part.0+0x34>)
 800e7e0:	4a0b      	ldr	r2, [pc, #44]	@ (800e810 <global_stdio_init.part.0+0x38>)
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	601a      	str	r2, [r3, #0]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f7ff ff94 	bl	800e714 <std>
 800e7ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	2109      	movs	r1, #9
 800e7f4:	f7ff ff8e 	bl	800e714 <std>
 800e7f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e7fc:	2202      	movs	r2, #2
 800e7fe:	2112      	movs	r1, #18
 800e800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e804:	f7ff bf86 	b.w	800e714 <std>
 800e808:	2000060c 	.word	0x2000060c
 800e80c:	200004d4 	.word	0x200004d4
 800e810:	0800e781 	.word	0x0800e781

0800e814 <__sfp_lock_acquire>:
 800e814:	4801      	ldr	r0, [pc, #4]	@ (800e81c <__sfp_lock_acquire+0x8>)
 800e816:	f000 bf08 	b.w	800f62a <__retarget_lock_acquire_recursive>
 800e81a:	bf00      	nop
 800e81c:	20000611 	.word	0x20000611

0800e820 <__sfp_lock_release>:
 800e820:	4801      	ldr	r0, [pc, #4]	@ (800e828 <__sfp_lock_release+0x8>)
 800e822:	f000 bf03 	b.w	800f62c <__retarget_lock_release_recursive>
 800e826:	bf00      	nop
 800e828:	20000611 	.word	0x20000611

0800e82c <__sinit>:
 800e82c:	b510      	push	{r4, lr}
 800e82e:	4604      	mov	r4, r0
 800e830:	f7ff fff0 	bl	800e814 <__sfp_lock_acquire>
 800e834:	6a23      	ldr	r3, [r4, #32]
 800e836:	b11b      	cbz	r3, 800e840 <__sinit+0x14>
 800e838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e83c:	f7ff bff0 	b.w	800e820 <__sfp_lock_release>
 800e840:	4b04      	ldr	r3, [pc, #16]	@ (800e854 <__sinit+0x28>)
 800e842:	6223      	str	r3, [r4, #32]
 800e844:	4b04      	ldr	r3, [pc, #16]	@ (800e858 <__sinit+0x2c>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d1f5      	bne.n	800e838 <__sinit+0xc>
 800e84c:	f7ff ffc4 	bl	800e7d8 <global_stdio_init.part.0>
 800e850:	e7f2      	b.n	800e838 <__sinit+0xc>
 800e852:	bf00      	nop
 800e854:	0800e799 	.word	0x0800e799
 800e858:	2000060c 	.word	0x2000060c

0800e85c <sulp>:
 800e85c:	b570      	push	{r4, r5, r6, lr}
 800e85e:	4604      	mov	r4, r0
 800e860:	460d      	mov	r5, r1
 800e862:	4616      	mov	r6, r2
 800e864:	ec45 4b10 	vmov	d0, r4, r5
 800e868:	f002 fee4 	bl	8011634 <__ulp>
 800e86c:	ec51 0b10 	vmov	r0, r1, d0
 800e870:	b17e      	cbz	r6, 800e892 <sulp+0x36>
 800e872:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e876:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	dd09      	ble.n	800e892 <sulp+0x36>
 800e87e:	051b      	lsls	r3, r3, #20
 800e880:	2400      	movs	r4, #0
 800e882:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e886:	4622      	mov	r2, r4
 800e888:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e88c:	462b      	mov	r3, r5
 800e88e:	f7f1 fec3 	bl	8000618 <__aeabi_dmul>
 800e892:	ec41 0b10 	vmov	d0, r0, r1
 800e896:	bd70      	pop	{r4, r5, r6, pc}

0800e898 <_strtod_l>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	b09f      	sub	sp, #124	@ 0x7c
 800e89e:	460c      	mov	r4, r1
 800e8a0:	f04f 0a00 	mov.w	sl, #0
 800e8a4:	f04f 0b00 	mov.w	fp, #0
 800e8a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	9005      	str	r0, [sp, #20]
 800e8ae:	921a      	str	r2, [sp, #104]	@ 0x68
 800e8b0:	460a      	mov	r2, r1
 800e8b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8b4:	7811      	ldrb	r1, [r2, #0]
 800e8b6:	292b      	cmp	r1, #43	@ 0x2b
 800e8b8:	d04a      	beq.n	800e950 <_strtod_l+0xb8>
 800e8ba:	d838      	bhi.n	800e92e <_strtod_l+0x96>
 800e8bc:	290d      	cmp	r1, #13
 800e8be:	d832      	bhi.n	800e926 <_strtod_l+0x8e>
 800e8c0:	2908      	cmp	r1, #8
 800e8c2:	d832      	bhi.n	800e92a <_strtod_l+0x92>
 800e8c4:	2900      	cmp	r1, #0
 800e8c6:	d03b      	beq.n	800e940 <_strtod_l+0xa8>
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e8ce:	782a      	ldrb	r2, [r5, #0]
 800e8d0:	2a30      	cmp	r2, #48	@ 0x30
 800e8d2:	f040 80b2 	bne.w	800ea3a <_strtod_l+0x1a2>
 800e8d6:	786a      	ldrb	r2, [r5, #1]
 800e8d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e8dc:	2a58      	cmp	r2, #88	@ 0x58
 800e8de:	d16e      	bne.n	800e9be <_strtod_l+0x126>
 800e8e0:	9302      	str	r3, [sp, #8]
 800e8e2:	a919      	add	r1, sp, #100	@ 0x64
 800e8e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8e6:	4a90      	ldr	r2, [pc, #576]	@ (800eb28 <_strtod_l+0x290>)
 800e8e8:	9301      	str	r3, [sp, #4]
 800e8ea:	ab1a      	add	r3, sp, #104	@ 0x68
 800e8ec:	9805      	ldr	r0, [sp, #20]
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e8f2:	f001 fd91 	bl	8010418 <__gethex>
 800e8f6:	f010 060f 	ands.w	r6, r0, #15
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	d005      	beq.n	800e90a <_strtod_l+0x72>
 800e8fe:	2e06      	cmp	r6, #6
 800e900:	d128      	bne.n	800e954 <_strtod_l+0xbc>
 800e902:	3501      	adds	r5, #1
 800e904:	2300      	movs	r3, #0
 800e906:	9519      	str	r5, [sp, #100]	@ 0x64
 800e908:	930e      	str	r3, [sp, #56]	@ 0x38
 800e90a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f040 858e 	bne.w	800f42e <_strtod_l+0xb96>
 800e912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e914:	b1cb      	cbz	r3, 800e94a <_strtod_l+0xb2>
 800e916:	4652      	mov	r2, sl
 800e918:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e91c:	ec43 2b10 	vmov	d0, r2, r3
 800e920:	b01f      	add	sp, #124	@ 0x7c
 800e922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e926:	2920      	cmp	r1, #32
 800e928:	d1ce      	bne.n	800e8c8 <_strtod_l+0x30>
 800e92a:	3201      	adds	r2, #1
 800e92c:	e7c1      	b.n	800e8b2 <_strtod_l+0x1a>
 800e92e:	292d      	cmp	r1, #45	@ 0x2d
 800e930:	d1ca      	bne.n	800e8c8 <_strtod_l+0x30>
 800e932:	2101      	movs	r1, #1
 800e934:	910e      	str	r1, [sp, #56]	@ 0x38
 800e936:	1c51      	adds	r1, r2, #1
 800e938:	9119      	str	r1, [sp, #100]	@ 0x64
 800e93a:	7852      	ldrb	r2, [r2, #1]
 800e93c:	2a00      	cmp	r2, #0
 800e93e:	d1c5      	bne.n	800e8cc <_strtod_l+0x34>
 800e940:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e942:	9419      	str	r4, [sp, #100]	@ 0x64
 800e944:	2b00      	cmp	r3, #0
 800e946:	f040 8570 	bne.w	800f42a <_strtod_l+0xb92>
 800e94a:	4652      	mov	r2, sl
 800e94c:	465b      	mov	r3, fp
 800e94e:	e7e5      	b.n	800e91c <_strtod_l+0x84>
 800e950:	2100      	movs	r1, #0
 800e952:	e7ef      	b.n	800e934 <_strtod_l+0x9c>
 800e954:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e956:	b13a      	cbz	r2, 800e968 <_strtod_l+0xd0>
 800e958:	2135      	movs	r1, #53	@ 0x35
 800e95a:	a81c      	add	r0, sp, #112	@ 0x70
 800e95c:	f002 ff68 	bl	8011830 <__copybits>
 800e960:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e962:	9805      	ldr	r0, [sp, #20]
 800e964:	f002 fb32 	bl	8010fcc <_Bfree>
 800e968:	3e01      	subs	r6, #1
 800e96a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e96c:	2e04      	cmp	r6, #4
 800e96e:	d806      	bhi.n	800e97e <_strtod_l+0xe6>
 800e970:	e8df f006 	tbb	[pc, r6]
 800e974:	201d0314 	.word	0x201d0314
 800e978:	14          	.byte	0x14
 800e979:	00          	.byte	0x00
 800e97a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e97e:	05e1      	lsls	r1, r4, #23
 800e980:	bf48      	it	mi
 800e982:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e986:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e98a:	0d1b      	lsrs	r3, r3, #20
 800e98c:	051b      	lsls	r3, r3, #20
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1bb      	bne.n	800e90a <_strtod_l+0x72>
 800e992:	f000 fe1f 	bl	800f5d4 <__errno>
 800e996:	2322      	movs	r3, #34	@ 0x22
 800e998:	6003      	str	r3, [r0, #0]
 800e99a:	e7b6      	b.n	800e90a <_strtod_l+0x72>
 800e99c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e9a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e9a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e9a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e9ac:	e7e7      	b.n	800e97e <_strtod_l+0xe6>
 800e9ae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800eb30 <_strtod_l+0x298>
 800e9b2:	e7e4      	b.n	800e97e <_strtod_l+0xe6>
 800e9b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e9b8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e9bc:	e7df      	b.n	800e97e <_strtod_l+0xe6>
 800e9be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9c0:	1c5a      	adds	r2, r3, #1
 800e9c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9c4:	785b      	ldrb	r3, [r3, #1]
 800e9c6:	2b30      	cmp	r3, #48	@ 0x30
 800e9c8:	d0f9      	beq.n	800e9be <_strtod_l+0x126>
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d09d      	beq.n	800e90a <_strtod_l+0x72>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	2700      	movs	r7, #0
 800e9d2:	9308      	str	r3, [sp, #32]
 800e9d4:	220a      	movs	r2, #10
 800e9d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9d8:	46b9      	mov	r9, r7
 800e9da:	970b      	str	r7, [sp, #44]	@ 0x2c
 800e9dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e9de:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e9e0:	7805      	ldrb	r5, [r0, #0]
 800e9e2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e9e6:	b2d9      	uxtb	r1, r3
 800e9e8:	2909      	cmp	r1, #9
 800e9ea:	d928      	bls.n	800ea3e <_strtod_l+0x1a6>
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	494f      	ldr	r1, [pc, #316]	@ (800eb2c <_strtod_l+0x294>)
 800e9f0:	f000 fdde 	bl	800f5b0 <strncmp>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	d032      	beq.n	800ea5e <_strtod_l+0x1c6>
 800e9f8:	2000      	movs	r0, #0
 800e9fa:	462a      	mov	r2, r5
 800e9fc:	464d      	mov	r5, r9
 800e9fe:	4603      	mov	r3, r0
 800ea00:	900a      	str	r0, [sp, #40]	@ 0x28
 800ea02:	2a65      	cmp	r2, #101	@ 0x65
 800ea04:	d001      	beq.n	800ea0a <_strtod_l+0x172>
 800ea06:	2a45      	cmp	r2, #69	@ 0x45
 800ea08:	d114      	bne.n	800ea34 <_strtod_l+0x19c>
 800ea0a:	b91d      	cbnz	r5, 800ea14 <_strtod_l+0x17c>
 800ea0c:	9a08      	ldr	r2, [sp, #32]
 800ea0e:	4302      	orrs	r2, r0
 800ea10:	d096      	beq.n	800e940 <_strtod_l+0xa8>
 800ea12:	2500      	movs	r5, #0
 800ea14:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ea16:	1c62      	adds	r2, r4, #1
 800ea18:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea1a:	7862      	ldrb	r2, [r4, #1]
 800ea1c:	2a2b      	cmp	r2, #43	@ 0x2b
 800ea1e:	d079      	beq.n	800eb14 <_strtod_l+0x27c>
 800ea20:	2a2d      	cmp	r2, #45	@ 0x2d
 800ea22:	d07d      	beq.n	800eb20 <_strtod_l+0x288>
 800ea24:	f04f 0c00 	mov.w	ip, #0
 800ea28:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ea2c:	2909      	cmp	r1, #9
 800ea2e:	f240 8085 	bls.w	800eb3c <_strtod_l+0x2a4>
 800ea32:	9419      	str	r4, [sp, #100]	@ 0x64
 800ea34:	f04f 0800 	mov.w	r8, #0
 800ea38:	e0a5      	b.n	800eb86 <_strtod_l+0x2ee>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e7c8      	b.n	800e9d0 <_strtod_l+0x138>
 800ea3e:	f1b9 0f08 	cmp.w	r9, #8
 800ea42:	f100 0001 	add.w	r0, r0, #1
 800ea46:	f109 0901 	add.w	r9, r9, #1
 800ea4a:	bfd4      	ite	le
 800ea4c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ea4e:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ea52:	9019      	str	r0, [sp, #100]	@ 0x64
 800ea54:	bfdc      	itt	le
 800ea56:	fb02 3301 	mlale	r3, r2, r1, r3
 800ea5a:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ea5c:	e7bf      	b.n	800e9de <_strtod_l+0x146>
 800ea5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea60:	1c5a      	adds	r2, r3, #1
 800ea62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea64:	785a      	ldrb	r2, [r3, #1]
 800ea66:	f1b9 0f00 	cmp.w	r9, #0
 800ea6a:	d03a      	beq.n	800eae2 <_strtod_l+0x24a>
 800ea6c:	464d      	mov	r5, r9
 800ea6e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ea70:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ea74:	2b09      	cmp	r3, #9
 800ea76:	d912      	bls.n	800ea9e <_strtod_l+0x206>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e7c2      	b.n	800ea02 <_strtod_l+0x16a>
 800ea7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea7e:	3001      	adds	r0, #1
 800ea80:	1c5a      	adds	r2, r3, #1
 800ea82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea84:	785a      	ldrb	r2, [r3, #1]
 800ea86:	2a30      	cmp	r2, #48	@ 0x30
 800ea88:	d0f8      	beq.n	800ea7c <_strtod_l+0x1e4>
 800ea8a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ea8e:	2b08      	cmp	r3, #8
 800ea90:	f200 84d2 	bhi.w	800f438 <_strtod_l+0xba0>
 800ea94:	900a      	str	r0, [sp, #40]	@ 0x28
 800ea96:	2000      	movs	r0, #0
 800ea98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea9e:	3a30      	subs	r2, #48	@ 0x30
 800eaa0:	f100 0301 	add.w	r3, r0, #1
 800eaa4:	d017      	beq.n	800ead6 <_strtod_l+0x23e>
 800eaa6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eaa8:	462e      	mov	r6, r5
 800eaaa:	f04f 0e0a 	mov.w	lr, #10
 800eaae:	4419      	add	r1, r3
 800eab0:	910a      	str	r1, [sp, #40]	@ 0x28
 800eab2:	1c71      	adds	r1, r6, #1
 800eab4:	eba1 0c05 	sub.w	ip, r1, r5
 800eab8:	4563      	cmp	r3, ip
 800eaba:	dc14      	bgt.n	800eae6 <_strtod_l+0x24e>
 800eabc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800eac0:	182b      	adds	r3, r5, r0
 800eac2:	3501      	adds	r5, #1
 800eac4:	2b08      	cmp	r3, #8
 800eac6:	4405      	add	r5, r0
 800eac8:	dc1a      	bgt.n	800eb00 <_strtod_l+0x268>
 800eaca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eacc:	230a      	movs	r3, #10
 800eace:	fb03 2301 	mla	r3, r3, r1, r2
 800ead2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ead4:	2300      	movs	r3, #0
 800ead6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ead8:	4618      	mov	r0, r3
 800eada:	1c51      	adds	r1, r2, #1
 800eadc:	9119      	str	r1, [sp, #100]	@ 0x64
 800eade:	7852      	ldrb	r2, [r2, #1]
 800eae0:	e7c6      	b.n	800ea70 <_strtod_l+0x1d8>
 800eae2:	4648      	mov	r0, r9
 800eae4:	e7cf      	b.n	800ea86 <_strtod_l+0x1ee>
 800eae6:	2e08      	cmp	r6, #8
 800eae8:	dc05      	bgt.n	800eaf6 <_strtod_l+0x25e>
 800eaea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800eaec:	fb0e f606 	mul.w	r6, lr, r6
 800eaf0:	960b      	str	r6, [sp, #44]	@ 0x2c
 800eaf2:	460e      	mov	r6, r1
 800eaf4:	e7dd      	b.n	800eab2 <_strtod_l+0x21a>
 800eaf6:	2910      	cmp	r1, #16
 800eaf8:	bfd8      	it	le
 800eafa:	fb0e f707 	mulle.w	r7, lr, r7
 800eafe:	e7f8      	b.n	800eaf2 <_strtod_l+0x25a>
 800eb00:	2b0f      	cmp	r3, #15
 800eb02:	bfdc      	itt	le
 800eb04:	230a      	movle	r3, #10
 800eb06:	fb03 2707 	mlale	r7, r3, r7, r2
 800eb0a:	e7e3      	b.n	800ead4 <_strtod_l+0x23c>
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb10:	2301      	movs	r3, #1
 800eb12:	e77b      	b.n	800ea0c <_strtod_l+0x174>
 800eb14:	f04f 0c00 	mov.w	ip, #0
 800eb18:	1ca2      	adds	r2, r4, #2
 800eb1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb1c:	78a2      	ldrb	r2, [r4, #2]
 800eb1e:	e783      	b.n	800ea28 <_strtod_l+0x190>
 800eb20:	f04f 0c01 	mov.w	ip, #1
 800eb24:	e7f8      	b.n	800eb18 <_strtod_l+0x280>
 800eb26:	bf00      	nop
 800eb28:	08013e2c 	.word	0x08013e2c
 800eb2c:	08013c79 	.word	0x08013c79
 800eb30:	7ff00000 	.word	0x7ff00000
 800eb34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb36:	1c51      	adds	r1, r2, #1
 800eb38:	9119      	str	r1, [sp, #100]	@ 0x64
 800eb3a:	7852      	ldrb	r2, [r2, #1]
 800eb3c:	2a30      	cmp	r2, #48	@ 0x30
 800eb3e:	d0f9      	beq.n	800eb34 <_strtod_l+0x29c>
 800eb40:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800eb44:	2908      	cmp	r1, #8
 800eb46:	f63f af75 	bhi.w	800ea34 <_strtod_l+0x19c>
 800eb4a:	3a30      	subs	r2, #48	@ 0x30
 800eb4c:	f04f 080a 	mov.w	r8, #10
 800eb50:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb54:	920f      	str	r2, [sp, #60]	@ 0x3c
 800eb56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb58:	1c56      	adds	r6, r2, #1
 800eb5a:	9619      	str	r6, [sp, #100]	@ 0x64
 800eb5c:	7852      	ldrb	r2, [r2, #1]
 800eb5e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800eb62:	f1be 0f09 	cmp.w	lr, #9
 800eb66:	d939      	bls.n	800ebdc <_strtod_l+0x344>
 800eb68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eb6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800eb6e:	1a76      	subs	r6, r6, r1
 800eb70:	2e08      	cmp	r6, #8
 800eb72:	dc03      	bgt.n	800eb7c <_strtod_l+0x2e4>
 800eb74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb76:	4588      	cmp	r8, r1
 800eb78:	bfa8      	it	ge
 800eb7a:	4688      	movge	r8, r1
 800eb7c:	f1bc 0f00 	cmp.w	ip, #0
 800eb80:	d001      	beq.n	800eb86 <_strtod_l+0x2ee>
 800eb82:	f1c8 0800 	rsb	r8, r8, #0
 800eb86:	2d00      	cmp	r5, #0
 800eb88:	d14e      	bne.n	800ec28 <_strtod_l+0x390>
 800eb8a:	9908      	ldr	r1, [sp, #32]
 800eb8c:	4308      	orrs	r0, r1
 800eb8e:	f47f aebc 	bne.w	800e90a <_strtod_l+0x72>
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	f47f aed4 	bne.w	800e940 <_strtod_l+0xa8>
 800eb98:	2a69      	cmp	r2, #105	@ 0x69
 800eb9a:	d028      	beq.n	800ebee <_strtod_l+0x356>
 800eb9c:	dc25      	bgt.n	800ebea <_strtod_l+0x352>
 800eb9e:	2a49      	cmp	r2, #73	@ 0x49
 800eba0:	d025      	beq.n	800ebee <_strtod_l+0x356>
 800eba2:	2a4e      	cmp	r2, #78	@ 0x4e
 800eba4:	f47f aecc 	bne.w	800e940 <_strtod_l+0xa8>
 800eba8:	499a      	ldr	r1, [pc, #616]	@ (800ee14 <_strtod_l+0x57c>)
 800ebaa:	a819      	add	r0, sp, #100	@ 0x64
 800ebac:	f001 fe54 	bl	8010858 <__match>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	f43f aec5 	beq.w	800e940 <_strtod_l+0xa8>
 800ebb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	2b28      	cmp	r3, #40	@ 0x28
 800ebbc:	d12e      	bne.n	800ec1c <_strtod_l+0x384>
 800ebbe:	aa1c      	add	r2, sp, #112	@ 0x70
 800ebc0:	4995      	ldr	r1, [pc, #596]	@ (800ee18 <_strtod_l+0x580>)
 800ebc2:	a819      	add	r0, sp, #100	@ 0x64
 800ebc4:	f001 fe5c 	bl	8010880 <__hexnan>
 800ebc8:	2805      	cmp	r0, #5
 800ebca:	d127      	bne.n	800ec1c <_strtod_l+0x384>
 800ebcc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ebce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ebd2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ebd6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ebda:	e696      	b.n	800e90a <_strtod_l+0x72>
 800ebdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebde:	fb08 2101 	mla	r1, r8, r1, r2
 800ebe2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ebe6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebe8:	e7b5      	b.n	800eb56 <_strtod_l+0x2be>
 800ebea:	2a6e      	cmp	r2, #110	@ 0x6e
 800ebec:	e7da      	b.n	800eba4 <_strtod_l+0x30c>
 800ebee:	498b      	ldr	r1, [pc, #556]	@ (800ee1c <_strtod_l+0x584>)
 800ebf0:	a819      	add	r0, sp, #100	@ 0x64
 800ebf2:	f001 fe31 	bl	8010858 <__match>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	f43f aea2 	beq.w	800e940 <_strtod_l+0xa8>
 800ebfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebfe:	a819      	add	r0, sp, #100	@ 0x64
 800ec00:	4987      	ldr	r1, [pc, #540]	@ (800ee20 <_strtod_l+0x588>)
 800ec02:	3b01      	subs	r3, #1
 800ec04:	9319      	str	r3, [sp, #100]	@ 0x64
 800ec06:	f001 fe27 	bl	8010858 <__match>
 800ec0a:	b910      	cbnz	r0, 800ec12 <_strtod_l+0x37a>
 800ec0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec0e:	3301      	adds	r3, #1
 800ec10:	9319      	str	r3, [sp, #100]	@ 0x64
 800ec12:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ee30 <_strtod_l+0x598>
 800ec16:	f04f 0a00 	mov.w	sl, #0
 800ec1a:	e676      	b.n	800e90a <_strtod_l+0x72>
 800ec1c:	4881      	ldr	r0, [pc, #516]	@ (800ee24 <_strtod_l+0x58c>)
 800ec1e:	f000 fd27 	bl	800f670 <nan>
 800ec22:	ec5b ab10 	vmov	sl, fp, d0
 800ec26:	e670      	b.n	800e90a <_strtod_l+0x72>
 800ec28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec2a:	f1b9 0f00 	cmp.w	r9, #0
 800ec2e:	bf08      	it	eq
 800ec30:	46a9      	moveq	r9, r5
 800ec32:	2d10      	cmp	r5, #16
 800ec34:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ec36:	eba8 0303 	sub.w	r3, r8, r3
 800ec3a:	462c      	mov	r4, r5
 800ec3c:	bfa8      	it	ge
 800ec3e:	2410      	movge	r4, #16
 800ec40:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec42:	f7f1 fc6f 	bl	8000524 <__aeabi_ui2d>
 800ec46:	2d09      	cmp	r5, #9
 800ec48:	4682      	mov	sl, r0
 800ec4a:	468b      	mov	fp, r1
 800ec4c:	dc13      	bgt.n	800ec76 <_strtod_l+0x3de>
 800ec4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	f43f ae5a 	beq.w	800e90a <_strtod_l+0x72>
 800ec56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec58:	dd78      	ble.n	800ed4c <_strtod_l+0x4b4>
 800ec5a:	2b16      	cmp	r3, #22
 800ec5c:	dc5f      	bgt.n	800ed1e <_strtod_l+0x486>
 800ec5e:	4972      	ldr	r1, [pc, #456]	@ (800ee28 <_strtod_l+0x590>)
 800ec60:	4652      	mov	r2, sl
 800ec62:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec66:	465b      	mov	r3, fp
 800ec68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec6c:	f7f1 fcd4 	bl	8000618 <__aeabi_dmul>
 800ec70:	4682      	mov	sl, r0
 800ec72:	468b      	mov	fp, r1
 800ec74:	e649      	b.n	800e90a <_strtod_l+0x72>
 800ec76:	4b6c      	ldr	r3, [pc, #432]	@ (800ee28 <_strtod_l+0x590>)
 800ec78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ec80:	f7f1 fcca 	bl	8000618 <__aeabi_dmul>
 800ec84:	4682      	mov	sl, r0
 800ec86:	468b      	mov	fp, r1
 800ec88:	4638      	mov	r0, r7
 800ec8a:	f7f1 fc4b 	bl	8000524 <__aeabi_ui2d>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	460b      	mov	r3, r1
 800ec92:	4650      	mov	r0, sl
 800ec94:	4659      	mov	r1, fp
 800ec96:	f7f1 fb09 	bl	80002ac <__adddf3>
 800ec9a:	2d0f      	cmp	r5, #15
 800ec9c:	4682      	mov	sl, r0
 800ec9e:	468b      	mov	fp, r1
 800eca0:	ddd5      	ble.n	800ec4e <_strtod_l+0x3b6>
 800eca2:	1b2c      	subs	r4, r5, r4
 800eca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eca6:	441c      	add	r4, r3
 800eca8:	2c00      	cmp	r4, #0
 800ecaa:	f340 8093 	ble.w	800edd4 <_strtod_l+0x53c>
 800ecae:	f014 030f 	ands.w	r3, r4, #15
 800ecb2:	d00a      	beq.n	800ecca <_strtod_l+0x432>
 800ecb4:	495c      	ldr	r1, [pc, #368]	@ (800ee28 <_strtod_l+0x590>)
 800ecb6:	4652      	mov	r2, sl
 800ecb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ecbc:	465b      	mov	r3, fp
 800ecbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecc2:	f7f1 fca9 	bl	8000618 <__aeabi_dmul>
 800ecc6:	4682      	mov	sl, r0
 800ecc8:	468b      	mov	fp, r1
 800ecca:	f034 040f 	bics.w	r4, r4, #15
 800ecce:	d073      	beq.n	800edb8 <_strtod_l+0x520>
 800ecd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ecd4:	dd49      	ble.n	800ed6a <_strtod_l+0x4d2>
 800ecd6:	2400      	movs	r4, #0
 800ecd8:	46a0      	mov	r8, r4
 800ecda:	46a1      	mov	r9, r4
 800ecdc:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ecde:	2322      	movs	r3, #34	@ 0x22
 800ece0:	9a05      	ldr	r2, [sp, #20]
 800ece2:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ee30 <_strtod_l+0x598>
 800ece6:	f04f 0a00 	mov.w	sl, #0
 800ecea:	6013      	str	r3, [r2, #0]
 800ecec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	f43f ae0b 	beq.w	800e90a <_strtod_l+0x72>
 800ecf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ecf6:	9805      	ldr	r0, [sp, #20]
 800ecf8:	f002 f968 	bl	8010fcc <_Bfree>
 800ecfc:	4649      	mov	r1, r9
 800ecfe:	9805      	ldr	r0, [sp, #20]
 800ed00:	f002 f964 	bl	8010fcc <_Bfree>
 800ed04:	4641      	mov	r1, r8
 800ed06:	9805      	ldr	r0, [sp, #20]
 800ed08:	f002 f960 	bl	8010fcc <_Bfree>
 800ed0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed0e:	9805      	ldr	r0, [sp, #20]
 800ed10:	f002 f95c 	bl	8010fcc <_Bfree>
 800ed14:	4621      	mov	r1, r4
 800ed16:	9805      	ldr	r0, [sp, #20]
 800ed18:	f002 f958 	bl	8010fcc <_Bfree>
 800ed1c:	e5f5      	b.n	800e90a <_strtod_l+0x72>
 800ed1e:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ed22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed24:	4293      	cmp	r3, r2
 800ed26:	dbbc      	blt.n	800eca2 <_strtod_l+0x40a>
 800ed28:	f1c5 050f 	rsb	r5, r5, #15
 800ed2c:	4c3e      	ldr	r4, [pc, #248]	@ (800ee28 <_strtod_l+0x590>)
 800ed2e:	4652      	mov	r2, sl
 800ed30:	465b      	mov	r3, fp
 800ed32:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ed36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed3a:	f7f1 fc6d 	bl	8000618 <__aeabi_dmul>
 800ed3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed40:	1b5d      	subs	r5, r3, r5
 800ed42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ed46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ed4a:	e78f      	b.n	800ec6c <_strtod_l+0x3d4>
 800ed4c:	3316      	adds	r3, #22
 800ed4e:	dba8      	blt.n	800eca2 <_strtod_l+0x40a>
 800ed50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed52:	4650      	mov	r0, sl
 800ed54:	4659      	mov	r1, fp
 800ed56:	eba3 0808 	sub.w	r8, r3, r8
 800ed5a:	4b33      	ldr	r3, [pc, #204]	@ (800ee28 <_strtod_l+0x590>)
 800ed5c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ed60:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ed64:	f7f1 fd82 	bl	800086c <__aeabi_ddiv>
 800ed68:	e782      	b.n	800ec70 <_strtod_l+0x3d8>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	1124      	asrs	r4, r4, #4
 800ed6e:	4650      	mov	r0, sl
 800ed70:	4659      	mov	r1, fp
 800ed72:	4f2e      	ldr	r7, [pc, #184]	@ (800ee2c <_strtod_l+0x594>)
 800ed74:	461e      	mov	r6, r3
 800ed76:	2c01      	cmp	r4, #1
 800ed78:	dc21      	bgt.n	800edbe <_strtod_l+0x526>
 800ed7a:	b10b      	cbz	r3, 800ed80 <_strtod_l+0x4e8>
 800ed7c:	4682      	mov	sl, r0
 800ed7e:	468b      	mov	fp, r1
 800ed80:	492a      	ldr	r1, [pc, #168]	@ (800ee2c <_strtod_l+0x594>)
 800ed82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ed86:	4652      	mov	r2, sl
 800ed88:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ed8c:	465b      	mov	r3, fp
 800ed8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed92:	f7f1 fc41 	bl	8000618 <__aeabi_dmul>
 800ed96:	4b26      	ldr	r3, [pc, #152]	@ (800ee30 <_strtod_l+0x598>)
 800ed98:	460a      	mov	r2, r1
 800ed9a:	4682      	mov	sl, r0
 800ed9c:	400b      	ands	r3, r1
 800ed9e:	4925      	ldr	r1, [pc, #148]	@ (800ee34 <_strtod_l+0x59c>)
 800eda0:	428b      	cmp	r3, r1
 800eda2:	d898      	bhi.n	800ecd6 <_strtod_l+0x43e>
 800eda4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800eda8:	428b      	cmp	r3, r1
 800edaa:	bf86      	itte	hi
 800edac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ee38 <_strtod_l+0x5a0>
 800edb0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800edb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800edb8:	2300      	movs	r3, #0
 800edba:	9308      	str	r3, [sp, #32]
 800edbc:	e076      	b.n	800eeac <_strtod_l+0x614>
 800edbe:	07e2      	lsls	r2, r4, #31
 800edc0:	d504      	bpl.n	800edcc <_strtod_l+0x534>
 800edc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edc6:	f7f1 fc27 	bl	8000618 <__aeabi_dmul>
 800edca:	2301      	movs	r3, #1
 800edcc:	3601      	adds	r6, #1
 800edce:	1064      	asrs	r4, r4, #1
 800edd0:	3708      	adds	r7, #8
 800edd2:	e7d0      	b.n	800ed76 <_strtod_l+0x4de>
 800edd4:	d0f0      	beq.n	800edb8 <_strtod_l+0x520>
 800edd6:	4264      	negs	r4, r4
 800edd8:	f014 020f 	ands.w	r2, r4, #15
 800eddc:	d00a      	beq.n	800edf4 <_strtod_l+0x55c>
 800edde:	4b12      	ldr	r3, [pc, #72]	@ (800ee28 <_strtod_l+0x590>)
 800ede0:	4650      	mov	r0, sl
 800ede2:	4659      	mov	r1, fp
 800ede4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ede8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edec:	f7f1 fd3e 	bl	800086c <__aeabi_ddiv>
 800edf0:	4682      	mov	sl, r0
 800edf2:	468b      	mov	fp, r1
 800edf4:	1124      	asrs	r4, r4, #4
 800edf6:	d0df      	beq.n	800edb8 <_strtod_l+0x520>
 800edf8:	2c1f      	cmp	r4, #31
 800edfa:	dd1f      	ble.n	800ee3c <_strtod_l+0x5a4>
 800edfc:	2400      	movs	r4, #0
 800edfe:	46a0      	mov	r8, r4
 800ee00:	46a1      	mov	r9, r4
 800ee02:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ee04:	2322      	movs	r3, #34	@ 0x22
 800ee06:	9a05      	ldr	r2, [sp, #20]
 800ee08:	f04f 0a00 	mov.w	sl, #0
 800ee0c:	f04f 0b00 	mov.w	fp, #0
 800ee10:	6013      	str	r3, [r2, #0]
 800ee12:	e76b      	b.n	800ecec <_strtod_l+0x454>
 800ee14:	08013c4d 	.word	0x08013c4d
 800ee18:	08013e18 	.word	0x08013e18
 800ee1c:	08013c45 	.word	0x08013c45
 800ee20:	08013c86 	.word	0x08013c86
 800ee24:	08013e15 	.word	0x08013e15
 800ee28:	08013fa0 	.word	0x08013fa0
 800ee2c:	08013f78 	.word	0x08013f78
 800ee30:	7ff00000 	.word	0x7ff00000
 800ee34:	7ca00000 	.word	0x7ca00000
 800ee38:	7fefffff 	.word	0x7fefffff
 800ee3c:	f014 0310 	ands.w	r3, r4, #16
 800ee40:	4650      	mov	r0, sl
 800ee42:	4659      	mov	r1, fp
 800ee44:	4ea9      	ldr	r6, [pc, #676]	@ (800f0ec <_strtod_l+0x854>)
 800ee46:	bf18      	it	ne
 800ee48:	236a      	movne	r3, #106	@ 0x6a
 800ee4a:	9308      	str	r3, [sp, #32]
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	07e7      	lsls	r7, r4, #31
 800ee50:	d504      	bpl.n	800ee5c <_strtod_l+0x5c4>
 800ee52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ee56:	f7f1 fbdf 	bl	8000618 <__aeabi_dmul>
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	1064      	asrs	r4, r4, #1
 800ee5e:	f106 0608 	add.w	r6, r6, #8
 800ee62:	d1f4      	bne.n	800ee4e <_strtod_l+0x5b6>
 800ee64:	b10b      	cbz	r3, 800ee6a <_strtod_l+0x5d2>
 800ee66:	4682      	mov	sl, r0
 800ee68:	468b      	mov	fp, r1
 800ee6a:	9b08      	ldr	r3, [sp, #32]
 800ee6c:	b1b3      	cbz	r3, 800ee9c <_strtod_l+0x604>
 800ee6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ee72:	4659      	mov	r1, fp
 800ee74:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	dd0f      	ble.n	800ee9c <_strtod_l+0x604>
 800ee7c:	2b1f      	cmp	r3, #31
 800ee7e:	dd56      	ble.n	800ef2e <_strtod_l+0x696>
 800ee80:	2b34      	cmp	r3, #52	@ 0x34
 800ee82:	f04f 0a00 	mov.w	sl, #0
 800ee86:	bfdb      	ittet	le
 800ee88:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800ee8c:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ee90:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ee94:	4093      	lslle	r3, r2
 800ee96:	bfd8      	it	le
 800ee98:	ea03 0b01 	andle.w	fp, r3, r1
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	2300      	movs	r3, #0
 800eea0:	4650      	mov	r0, sl
 800eea2:	4659      	mov	r1, fp
 800eea4:	f7f1 fe20 	bl	8000ae8 <__aeabi_dcmpeq>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d1a7      	bne.n	800edfc <_strtod_l+0x564>
 800eeac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eeae:	464a      	mov	r2, r9
 800eeb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800eeb2:	9300      	str	r3, [sp, #0]
 800eeb4:	462b      	mov	r3, r5
 800eeb6:	9805      	ldr	r0, [sp, #20]
 800eeb8:	f002 f8f2 	bl	80110a0 <__s2b>
 800eebc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800eebe:	2800      	cmp	r0, #0
 800eec0:	f43f af09 	beq.w	800ecd6 <_strtod_l+0x43e>
 800eec4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eec6:	2400      	movs	r4, #0
 800eec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eeca:	2a00      	cmp	r2, #0
 800eecc:	eba3 0308 	sub.w	r3, r3, r8
 800eed0:	46a0      	mov	r8, r4
 800eed2:	bfa8      	it	ge
 800eed4:	2300      	movge	r3, #0
 800eed6:	9312      	str	r3, [sp, #72]	@ 0x48
 800eed8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800eedc:	9316      	str	r3, [sp, #88]	@ 0x58
 800eede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eee0:	9805      	ldr	r0, [sp, #20]
 800eee2:	6859      	ldr	r1, [r3, #4]
 800eee4:	f002 f832 	bl	8010f4c <_Balloc>
 800eee8:	4681      	mov	r9, r0
 800eeea:	2800      	cmp	r0, #0
 800eeec:	f43f aef7 	beq.w	800ecde <_strtod_l+0x446>
 800eef0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eef2:	300c      	adds	r0, #12
 800eef4:	691a      	ldr	r2, [r3, #16]
 800eef6:	f103 010c 	add.w	r1, r3, #12
 800eefa:	3202      	adds	r2, #2
 800eefc:	0092      	lsls	r2, r2, #2
 800eefe:	f000 fba9 	bl	800f654 <memcpy>
 800ef02:	aa1c      	add	r2, sp, #112	@ 0x70
 800ef04:	a91b      	add	r1, sp, #108	@ 0x6c
 800ef06:	9805      	ldr	r0, [sp, #20]
 800ef08:	ec4b ab10 	vmov	d0, sl, fp
 800ef0c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ef10:	f002 fc04 	bl	801171c <__d2b>
 800ef14:	901a      	str	r0, [sp, #104]	@ 0x68
 800ef16:	2800      	cmp	r0, #0
 800ef18:	f43f aee1 	beq.w	800ecde <_strtod_l+0x446>
 800ef1c:	2101      	movs	r1, #1
 800ef1e:	9805      	ldr	r0, [sp, #20]
 800ef20:	f002 f954 	bl	80111cc <__i2b>
 800ef24:	4680      	mov	r8, r0
 800ef26:	b948      	cbnz	r0, 800ef3c <_strtod_l+0x6a4>
 800ef28:	f04f 0800 	mov.w	r8, #0
 800ef2c:	e6d7      	b.n	800ecde <_strtod_l+0x446>
 800ef2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ef32:	fa02 f303 	lsl.w	r3, r2, r3
 800ef36:	ea03 0a0a 	and.w	sl, r3, sl
 800ef3a:	e7af      	b.n	800ee9c <_strtod_l+0x604>
 800ef3c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ef3e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ef40:	2d00      	cmp	r5, #0
 800ef42:	bfa9      	itett	ge
 800ef44:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ef46:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ef48:	18ef      	addge	r7, r5, r3
 800ef4a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ef4c:	bfb8      	it	lt
 800ef4e:	1b5e      	sublt	r6, r3, r5
 800ef50:	9b08      	ldr	r3, [sp, #32]
 800ef52:	bfb8      	it	lt
 800ef54:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ef56:	1aed      	subs	r5, r5, r3
 800ef58:	4b65      	ldr	r3, [pc, #404]	@ (800f0f0 <_strtod_l+0x858>)
 800ef5a:	4415      	add	r5, r2
 800ef5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ef60:	3d01      	subs	r5, #1
 800ef62:	429d      	cmp	r5, r3
 800ef64:	da4f      	bge.n	800f006 <_strtod_l+0x76e>
 800ef66:	1b5b      	subs	r3, r3, r5
 800ef68:	2101      	movs	r1, #1
 800ef6a:	2b1f      	cmp	r3, #31
 800ef6c:	eba2 0203 	sub.w	r2, r2, r3
 800ef70:	dc3d      	bgt.n	800efee <_strtod_l+0x756>
 800ef72:	fa01 f303 	lsl.w	r3, r1, r3
 800ef76:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef78:	2300      	movs	r3, #0
 800ef7a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef7c:	18bd      	adds	r5, r7, r2
 800ef7e:	9b08      	ldr	r3, [sp, #32]
 800ef80:	4416      	add	r6, r2
 800ef82:	42af      	cmp	r7, r5
 800ef84:	441e      	add	r6, r3
 800ef86:	463b      	mov	r3, r7
 800ef88:	bfa8      	it	ge
 800ef8a:	462b      	movge	r3, r5
 800ef8c:	42b3      	cmp	r3, r6
 800ef8e:	bfa8      	it	ge
 800ef90:	4633      	movge	r3, r6
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	bfc2      	ittt	gt
 800ef96:	1aed      	subgt	r5, r5, r3
 800ef98:	1af6      	subgt	r6, r6, r3
 800ef9a:	1aff      	subgt	r7, r7, r3
 800ef9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	dd16      	ble.n	800efd0 <_strtod_l+0x738>
 800efa2:	4641      	mov	r1, r8
 800efa4:	461a      	mov	r2, r3
 800efa6:	9805      	ldr	r0, [sp, #20]
 800efa8:	f002 f9ca 	bl	8011340 <__pow5mult>
 800efac:	4680      	mov	r8, r0
 800efae:	2800      	cmp	r0, #0
 800efb0:	d0ba      	beq.n	800ef28 <_strtod_l+0x690>
 800efb2:	4601      	mov	r1, r0
 800efb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800efb6:	9805      	ldr	r0, [sp, #20]
 800efb8:	f002 f91e 	bl	80111f8 <__multiply>
 800efbc:	900a      	str	r0, [sp, #40]	@ 0x28
 800efbe:	2800      	cmp	r0, #0
 800efc0:	f43f ae8d 	beq.w	800ecde <_strtod_l+0x446>
 800efc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800efc6:	9805      	ldr	r0, [sp, #20]
 800efc8:	f002 f800 	bl	8010fcc <_Bfree>
 800efcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efce:	931a      	str	r3, [sp, #104]	@ 0x68
 800efd0:	2d00      	cmp	r5, #0
 800efd2:	dc1d      	bgt.n	800f010 <_strtod_l+0x778>
 800efd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	dd23      	ble.n	800f022 <_strtod_l+0x78a>
 800efda:	4649      	mov	r1, r9
 800efdc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800efde:	9805      	ldr	r0, [sp, #20]
 800efe0:	f002 f9ae 	bl	8011340 <__pow5mult>
 800efe4:	4681      	mov	r9, r0
 800efe6:	b9e0      	cbnz	r0, 800f022 <_strtod_l+0x78a>
 800efe8:	f04f 0900 	mov.w	r9, #0
 800efec:	e677      	b.n	800ecde <_strtod_l+0x446>
 800efee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800eff2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800eff4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800eff8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800effc:	35e2      	adds	r5, #226	@ 0xe2
 800effe:	fa01 f305 	lsl.w	r3, r1, r5
 800f002:	9310      	str	r3, [sp, #64]	@ 0x40
 800f004:	e7ba      	b.n	800ef7c <_strtod_l+0x6e4>
 800f006:	2300      	movs	r3, #0
 800f008:	9310      	str	r3, [sp, #64]	@ 0x40
 800f00a:	2301      	movs	r3, #1
 800f00c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f00e:	e7b5      	b.n	800ef7c <_strtod_l+0x6e4>
 800f010:	462a      	mov	r2, r5
 800f012:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f014:	9805      	ldr	r0, [sp, #20]
 800f016:	f002 f9ed 	bl	80113f4 <__lshift>
 800f01a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d1d9      	bne.n	800efd4 <_strtod_l+0x73c>
 800f020:	e65d      	b.n	800ecde <_strtod_l+0x446>
 800f022:	2e00      	cmp	r6, #0
 800f024:	dd07      	ble.n	800f036 <_strtod_l+0x79e>
 800f026:	4649      	mov	r1, r9
 800f028:	4632      	mov	r2, r6
 800f02a:	9805      	ldr	r0, [sp, #20]
 800f02c:	f002 f9e2 	bl	80113f4 <__lshift>
 800f030:	4681      	mov	r9, r0
 800f032:	2800      	cmp	r0, #0
 800f034:	d0d8      	beq.n	800efe8 <_strtod_l+0x750>
 800f036:	2f00      	cmp	r7, #0
 800f038:	dd08      	ble.n	800f04c <_strtod_l+0x7b4>
 800f03a:	4641      	mov	r1, r8
 800f03c:	463a      	mov	r2, r7
 800f03e:	9805      	ldr	r0, [sp, #20]
 800f040:	f002 f9d8 	bl	80113f4 <__lshift>
 800f044:	4680      	mov	r8, r0
 800f046:	2800      	cmp	r0, #0
 800f048:	f43f ae49 	beq.w	800ecde <_strtod_l+0x446>
 800f04c:	464a      	mov	r2, r9
 800f04e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f050:	9805      	ldr	r0, [sp, #20]
 800f052:	f002 fa57 	bl	8011504 <__mdiff>
 800f056:	4604      	mov	r4, r0
 800f058:	2800      	cmp	r0, #0
 800f05a:	f43f ae40 	beq.w	800ecde <_strtod_l+0x446>
 800f05e:	68c3      	ldr	r3, [r0, #12]
 800f060:	4641      	mov	r1, r8
 800f062:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f064:	2300      	movs	r3, #0
 800f066:	60c3      	str	r3, [r0, #12]
 800f068:	f002 fa30 	bl	80114cc <__mcmp>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	da45      	bge.n	800f0fc <_strtod_l+0x864>
 800f070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f072:	ea53 030a 	orrs.w	r3, r3, sl
 800f076:	d16b      	bne.n	800f150 <_strtod_l+0x8b8>
 800f078:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d167      	bne.n	800f150 <_strtod_l+0x8b8>
 800f080:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f084:	0d1b      	lsrs	r3, r3, #20
 800f086:	051b      	lsls	r3, r3, #20
 800f088:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f08c:	d960      	bls.n	800f150 <_strtod_l+0x8b8>
 800f08e:	6963      	ldr	r3, [r4, #20]
 800f090:	b913      	cbnz	r3, 800f098 <_strtod_l+0x800>
 800f092:	6923      	ldr	r3, [r4, #16]
 800f094:	2b01      	cmp	r3, #1
 800f096:	dd5b      	ble.n	800f150 <_strtod_l+0x8b8>
 800f098:	4621      	mov	r1, r4
 800f09a:	2201      	movs	r2, #1
 800f09c:	9805      	ldr	r0, [sp, #20]
 800f09e:	f002 f9a9 	bl	80113f4 <__lshift>
 800f0a2:	4641      	mov	r1, r8
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	f002 fa11 	bl	80114cc <__mcmp>
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	dd50      	ble.n	800f150 <_strtod_l+0x8b8>
 800f0ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f0b2:	9a08      	ldr	r2, [sp, #32]
 800f0b4:	0d1b      	lsrs	r3, r3, #20
 800f0b6:	051b      	lsls	r3, r3, #20
 800f0b8:	2a00      	cmp	r2, #0
 800f0ba:	d06a      	beq.n	800f192 <_strtod_l+0x8fa>
 800f0bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f0c0:	d867      	bhi.n	800f192 <_strtod_l+0x8fa>
 800f0c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f0c6:	f67f ae9d 	bls.w	800ee04 <_strtod_l+0x56c>
 800f0ca:	4b0a      	ldr	r3, [pc, #40]	@ (800f0f4 <_strtod_l+0x85c>)
 800f0cc:	4650      	mov	r0, sl
 800f0ce:	4659      	mov	r1, fp
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f7f1 faa1 	bl	8000618 <__aeabi_dmul>
 800f0d6:	4b08      	ldr	r3, [pc, #32]	@ (800f0f8 <_strtod_l+0x860>)
 800f0d8:	4682      	mov	sl, r0
 800f0da:	468b      	mov	fp, r1
 800f0dc:	400b      	ands	r3, r1
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	f47f ae08 	bne.w	800ecf4 <_strtod_l+0x45c>
 800f0e4:	2322      	movs	r3, #34	@ 0x22
 800f0e6:	9a05      	ldr	r2, [sp, #20]
 800f0e8:	6013      	str	r3, [r2, #0]
 800f0ea:	e603      	b.n	800ecf4 <_strtod_l+0x45c>
 800f0ec:	08013e40 	.word	0x08013e40
 800f0f0:	fffffc02 	.word	0xfffffc02
 800f0f4:	39500000 	.word	0x39500000
 800f0f8:	7ff00000 	.word	0x7ff00000
 800f0fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f100:	d165      	bne.n	800f1ce <_strtod_l+0x936>
 800f102:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f108:	b35a      	cbz	r2, 800f162 <_strtod_l+0x8ca>
 800f10a:	4a9f      	ldr	r2, [pc, #636]	@ (800f388 <_strtod_l+0xaf0>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d12b      	bne.n	800f168 <_strtod_l+0x8d0>
 800f110:	9b08      	ldr	r3, [sp, #32]
 800f112:	4651      	mov	r1, sl
 800f114:	b303      	cbz	r3, 800f158 <_strtod_l+0x8c0>
 800f116:	465a      	mov	r2, fp
 800f118:	4b9c      	ldr	r3, [pc, #624]	@ (800f38c <_strtod_l+0xaf4>)
 800f11a:	4013      	ands	r3, r2
 800f11c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f120:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f124:	d81b      	bhi.n	800f15e <_strtod_l+0x8c6>
 800f126:	0d1b      	lsrs	r3, r3, #20
 800f128:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f12c:	fa02 f303 	lsl.w	r3, r2, r3
 800f130:	4299      	cmp	r1, r3
 800f132:	d119      	bne.n	800f168 <_strtod_l+0x8d0>
 800f134:	4b96      	ldr	r3, [pc, #600]	@ (800f390 <_strtod_l+0xaf8>)
 800f136:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f138:	429a      	cmp	r2, r3
 800f13a:	d102      	bne.n	800f142 <_strtod_l+0x8aa>
 800f13c:	3101      	adds	r1, #1
 800f13e:	f43f adce 	beq.w	800ecde <_strtod_l+0x446>
 800f142:	4b92      	ldr	r3, [pc, #584]	@ (800f38c <_strtod_l+0xaf4>)
 800f144:	f04f 0a00 	mov.w	sl, #0
 800f148:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f14a:	401a      	ands	r2, r3
 800f14c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f150:	9b08      	ldr	r3, [sp, #32]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d1b9      	bne.n	800f0ca <_strtod_l+0x832>
 800f156:	e5cd      	b.n	800ecf4 <_strtod_l+0x45c>
 800f158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f15c:	e7e8      	b.n	800f130 <_strtod_l+0x898>
 800f15e:	4613      	mov	r3, r2
 800f160:	e7e6      	b.n	800f130 <_strtod_l+0x898>
 800f162:	ea53 030a 	orrs.w	r3, r3, sl
 800f166:	d0a2      	beq.n	800f0ae <_strtod_l+0x816>
 800f168:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f16a:	b1db      	cbz	r3, 800f1a4 <_strtod_l+0x90c>
 800f16c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f16e:	4213      	tst	r3, r2
 800f170:	d0ee      	beq.n	800f150 <_strtod_l+0x8b8>
 800f172:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f174:	4650      	mov	r0, sl
 800f176:	9a08      	ldr	r2, [sp, #32]
 800f178:	4659      	mov	r1, fp
 800f17a:	b1bb      	cbz	r3, 800f1ac <_strtod_l+0x914>
 800f17c:	f7ff fb6e 	bl	800e85c <sulp>
 800f180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f184:	ec53 2b10 	vmov	r2, r3, d0
 800f188:	f7f1 f890 	bl	80002ac <__adddf3>
 800f18c:	4682      	mov	sl, r0
 800f18e:	468b      	mov	fp, r1
 800f190:	e7de      	b.n	800f150 <_strtod_l+0x8b8>
 800f192:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f196:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f19a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f19e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f1a2:	e7d5      	b.n	800f150 <_strtod_l+0x8b8>
 800f1a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f1a6:	ea13 0f0a 	tst.w	r3, sl
 800f1aa:	e7e1      	b.n	800f170 <_strtod_l+0x8d8>
 800f1ac:	f7ff fb56 	bl	800e85c <sulp>
 800f1b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1b4:	ec53 2b10 	vmov	r2, r3, d0
 800f1b8:	f7f1 f876 	bl	80002a8 <__aeabi_dsub>
 800f1bc:	2200      	movs	r2, #0
 800f1be:	2300      	movs	r3, #0
 800f1c0:	4682      	mov	sl, r0
 800f1c2:	468b      	mov	fp, r1
 800f1c4:	f7f1 fc90 	bl	8000ae8 <__aeabi_dcmpeq>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	d0c1      	beq.n	800f150 <_strtod_l+0x8b8>
 800f1cc:	e61a      	b.n	800ee04 <_strtod_l+0x56c>
 800f1ce:	4641      	mov	r1, r8
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f002 fafb 	bl	80117cc <__ratio>
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f1dc:	ec57 6b10 	vmov	r6, r7, d0
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	4639      	mov	r1, r7
 800f1e4:	f7f1 fc94 	bl	8000b10 <__aeabi_dcmple>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	d06f      	beq.n	800f2cc <_strtod_l+0xa34>
 800f1ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d17a      	bne.n	800f2e8 <_strtod_l+0xa50>
 800f1f2:	f1ba 0f00 	cmp.w	sl, #0
 800f1f6:	d158      	bne.n	800f2aa <_strtod_l+0xa12>
 800f1f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d15a      	bne.n	800f2b8 <_strtod_l+0xa20>
 800f202:	2200      	movs	r2, #0
 800f204:	4b63      	ldr	r3, [pc, #396]	@ (800f394 <_strtod_l+0xafc>)
 800f206:	4630      	mov	r0, r6
 800f208:	4639      	mov	r1, r7
 800f20a:	f7f1 fc77 	bl	8000afc <__aeabi_dcmplt>
 800f20e:	2800      	cmp	r0, #0
 800f210:	d159      	bne.n	800f2c6 <_strtod_l+0xa2e>
 800f212:	4630      	mov	r0, r6
 800f214:	4639      	mov	r1, r7
 800f216:	2200      	movs	r2, #0
 800f218:	4b5f      	ldr	r3, [pc, #380]	@ (800f398 <_strtod_l+0xb00>)
 800f21a:	f7f1 f9fd 	bl	8000618 <__aeabi_dmul>
 800f21e:	4606      	mov	r6, r0
 800f220:	460f      	mov	r7, r1
 800f222:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f226:	9606      	str	r6, [sp, #24]
 800f228:	9307      	str	r3, [sp, #28]
 800f22a:	4d58      	ldr	r5, [pc, #352]	@ (800f38c <_strtod_l+0xaf4>)
 800f22c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f230:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f236:	401d      	ands	r5, r3
 800f238:	4b58      	ldr	r3, [pc, #352]	@ (800f39c <_strtod_l+0xb04>)
 800f23a:	429d      	cmp	r5, r3
 800f23c:	f040 80b2 	bne.w	800f3a4 <_strtod_l+0xb0c>
 800f240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f242:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f246:	ec4b ab10 	vmov	d0, sl, fp
 800f24a:	f002 f9f3 	bl	8011634 <__ulp>
 800f24e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f252:	ec51 0b10 	vmov	r0, r1, d0
 800f256:	f7f1 f9df 	bl	8000618 <__aeabi_dmul>
 800f25a:	4652      	mov	r2, sl
 800f25c:	465b      	mov	r3, fp
 800f25e:	f7f1 f825 	bl	80002ac <__adddf3>
 800f262:	460b      	mov	r3, r1
 800f264:	4949      	ldr	r1, [pc, #292]	@ (800f38c <_strtod_l+0xaf4>)
 800f266:	4682      	mov	sl, r0
 800f268:	4a4d      	ldr	r2, [pc, #308]	@ (800f3a0 <_strtod_l+0xb08>)
 800f26a:	4019      	ands	r1, r3
 800f26c:	4291      	cmp	r1, r2
 800f26e:	d942      	bls.n	800f2f6 <_strtod_l+0xa5e>
 800f270:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f272:	4b47      	ldr	r3, [pc, #284]	@ (800f390 <_strtod_l+0xaf8>)
 800f274:	429a      	cmp	r2, r3
 800f276:	d103      	bne.n	800f280 <_strtod_l+0x9e8>
 800f278:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f27a:	3301      	adds	r3, #1
 800f27c:	f43f ad2f 	beq.w	800ecde <_strtod_l+0x446>
 800f280:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f390 <_strtod_l+0xaf8>
 800f284:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f288:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f28a:	9805      	ldr	r0, [sp, #20]
 800f28c:	f001 fe9e 	bl	8010fcc <_Bfree>
 800f290:	4649      	mov	r1, r9
 800f292:	9805      	ldr	r0, [sp, #20]
 800f294:	f001 fe9a 	bl	8010fcc <_Bfree>
 800f298:	4641      	mov	r1, r8
 800f29a:	9805      	ldr	r0, [sp, #20]
 800f29c:	f001 fe96 	bl	8010fcc <_Bfree>
 800f2a0:	4621      	mov	r1, r4
 800f2a2:	9805      	ldr	r0, [sp, #20]
 800f2a4:	f001 fe92 	bl	8010fcc <_Bfree>
 800f2a8:	e619      	b.n	800eede <_strtod_l+0x646>
 800f2aa:	f1ba 0f01 	cmp.w	sl, #1
 800f2ae:	d103      	bne.n	800f2b8 <_strtod_l+0xa20>
 800f2b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f43f ada6 	beq.w	800ee04 <_strtod_l+0x56c>
 800f2b8:	2600      	movs	r6, #0
 800f2ba:	4f36      	ldr	r7, [pc, #216]	@ (800f394 <_strtod_l+0xafc>)
 800f2bc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f368 <_strtod_l+0xad0>
 800f2c0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f2c4:	e7b1      	b.n	800f22a <_strtod_l+0x992>
 800f2c6:	2600      	movs	r6, #0
 800f2c8:	4f33      	ldr	r7, [pc, #204]	@ (800f398 <_strtod_l+0xb00>)
 800f2ca:	e7aa      	b.n	800f222 <_strtod_l+0x98a>
 800f2cc:	4b32      	ldr	r3, [pc, #200]	@ (800f398 <_strtod_l+0xb00>)
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	4639      	mov	r1, r7
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f7f1 f9a0 	bl	8000618 <__aeabi_dmul>
 800f2d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2da:	4606      	mov	r6, r0
 800f2dc:	460f      	mov	r7, r1
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d09f      	beq.n	800f222 <_strtod_l+0x98a>
 800f2e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f2e6:	e7a0      	b.n	800f22a <_strtod_l+0x992>
 800f2e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f370 <_strtod_l+0xad8>
 800f2ec:	ec57 6b17 	vmov	r6, r7, d7
 800f2f0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f2f4:	e799      	b.n	800f22a <_strtod_l+0x992>
 800f2f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f2fa:	9b08      	ldr	r3, [sp, #32]
 800f2fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1c1      	bne.n	800f288 <_strtod_l+0x9f0>
 800f304:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f308:	0d1b      	lsrs	r3, r3, #20
 800f30a:	051b      	lsls	r3, r3, #20
 800f30c:	429d      	cmp	r5, r3
 800f30e:	d1bb      	bne.n	800f288 <_strtod_l+0x9f0>
 800f310:	4630      	mov	r0, r6
 800f312:	4639      	mov	r1, r7
 800f314:	f7f1 fce0 	bl	8000cd8 <__aeabi_d2lz>
 800f318:	f7f1 f950 	bl	80005bc <__aeabi_l2d>
 800f31c:	4602      	mov	r2, r0
 800f31e:	460b      	mov	r3, r1
 800f320:	4630      	mov	r0, r6
 800f322:	4639      	mov	r1, r7
 800f324:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f328:	f7f0 ffbe 	bl	80002a8 <__aeabi_dsub>
 800f32c:	460b      	mov	r3, r1
 800f32e:	4602      	mov	r2, r0
 800f330:	ea46 060a 	orr.w	r6, r6, sl
 800f334:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f338:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f33a:	431e      	orrs	r6, r3
 800f33c:	d06f      	beq.n	800f41e <_strtod_l+0xb86>
 800f33e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f378 <_strtod_l+0xae0>)
 800f340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f344:	f7f1 fbda 	bl	8000afc <__aeabi_dcmplt>
 800f348:	2800      	cmp	r0, #0
 800f34a:	f47f acd3 	bne.w	800ecf4 <_strtod_l+0x45c>
 800f34e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f380 <_strtod_l+0xae8>)
 800f350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f354:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f358:	f7f1 fbee 	bl	8000b38 <__aeabi_dcmpgt>
 800f35c:	2800      	cmp	r0, #0
 800f35e:	d093      	beq.n	800f288 <_strtod_l+0x9f0>
 800f360:	e4c8      	b.n	800ecf4 <_strtod_l+0x45c>
 800f362:	bf00      	nop
 800f364:	f3af 8000 	nop.w
 800f368:	00000000 	.word	0x00000000
 800f36c:	bff00000 	.word	0xbff00000
 800f370:	00000000 	.word	0x00000000
 800f374:	3ff00000 	.word	0x3ff00000
 800f378:	94a03595 	.word	0x94a03595
 800f37c:	3fdfffff 	.word	0x3fdfffff
 800f380:	35afe535 	.word	0x35afe535
 800f384:	3fe00000 	.word	0x3fe00000
 800f388:	000fffff 	.word	0x000fffff
 800f38c:	7ff00000 	.word	0x7ff00000
 800f390:	7fefffff 	.word	0x7fefffff
 800f394:	3ff00000 	.word	0x3ff00000
 800f398:	3fe00000 	.word	0x3fe00000
 800f39c:	7fe00000 	.word	0x7fe00000
 800f3a0:	7c9fffff 	.word	0x7c9fffff
 800f3a4:	9b08      	ldr	r3, [sp, #32]
 800f3a6:	b323      	cbz	r3, 800f3f2 <_strtod_l+0xb5a>
 800f3a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f3ac:	d821      	bhi.n	800f3f2 <_strtod_l+0xb5a>
 800f3ae:	4630      	mov	r0, r6
 800f3b0:	4639      	mov	r1, r7
 800f3b2:	a327      	add	r3, pc, #156	@ (adr r3, 800f450 <_strtod_l+0xbb8>)
 800f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b8:	f7f1 fbaa 	bl	8000b10 <__aeabi_dcmple>
 800f3bc:	b1a0      	cbz	r0, 800f3e8 <_strtod_l+0xb50>
 800f3be:	4639      	mov	r1, r7
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f7f1 fc01 	bl	8000bc8 <__aeabi_d2uiz>
 800f3c6:	2801      	cmp	r0, #1
 800f3c8:	bf38      	it	cc
 800f3ca:	2001      	movcc	r0, #1
 800f3cc:	f7f1 f8aa 	bl	8000524 <__aeabi_ui2d>
 800f3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3d2:	4606      	mov	r6, r0
 800f3d4:	460f      	mov	r7, r1
 800f3d6:	b9fb      	cbnz	r3, 800f418 <_strtod_l+0xb80>
 800f3d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f3dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800f3de:	9315      	str	r3, [sp, #84]	@ 0x54
 800f3e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f3e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f3e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f3ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f3ee:	1b5b      	subs	r3, r3, r5
 800f3f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f3f2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f3f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f3fa:	f002 f91b 	bl	8011634 <__ulp>
 800f3fe:	4650      	mov	r0, sl
 800f400:	4659      	mov	r1, fp
 800f402:	ec53 2b10 	vmov	r2, r3, d0
 800f406:	f7f1 f907 	bl	8000618 <__aeabi_dmul>
 800f40a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f40e:	f7f0 ff4d 	bl	80002ac <__adddf3>
 800f412:	4682      	mov	sl, r0
 800f414:	468b      	mov	fp, r1
 800f416:	e770      	b.n	800f2fa <_strtod_l+0xa62>
 800f418:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f41c:	e7e0      	b.n	800f3e0 <_strtod_l+0xb48>
 800f41e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f458 <_strtod_l+0xbc0>)
 800f420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f424:	f7f1 fb6a 	bl	8000afc <__aeabi_dcmplt>
 800f428:	e798      	b.n	800f35c <_strtod_l+0xac4>
 800f42a:	2300      	movs	r3, #0
 800f42c:	930e      	str	r3, [sp, #56]	@ 0x38
 800f42e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f430:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f432:	6013      	str	r3, [r2, #0]
 800f434:	f7ff ba6d 	b.w	800e912 <_strtod_l+0x7a>
 800f438:	2a65      	cmp	r2, #101	@ 0x65
 800f43a:	f43f ab67 	beq.w	800eb0c <_strtod_l+0x274>
 800f43e:	2a45      	cmp	r2, #69	@ 0x45
 800f440:	f43f ab64 	beq.w	800eb0c <_strtod_l+0x274>
 800f444:	2301      	movs	r3, #1
 800f446:	f7ff bba0 	b.w	800eb8a <_strtod_l+0x2f2>
 800f44a:	bf00      	nop
 800f44c:	f3af 8000 	nop.w
 800f450:	ffc00000 	.word	0xffc00000
 800f454:	41dfffff 	.word	0x41dfffff
 800f458:	94a03595 	.word	0x94a03595
 800f45c:	3fcfffff 	.word	0x3fcfffff

0800f460 <_strtod_r>:
 800f460:	4b01      	ldr	r3, [pc, #4]	@ (800f468 <_strtod_r+0x8>)
 800f462:	f7ff ba19 	b.w	800e898 <_strtod_l>
 800f466:	bf00      	nop
 800f468:	20000030 	.word	0x20000030

0800f46c <_strtol_l.isra.0>:
 800f46c:	2b24      	cmp	r3, #36	@ 0x24
 800f46e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f472:	4686      	mov	lr, r0
 800f474:	4690      	mov	r8, r2
 800f476:	d801      	bhi.n	800f47c <_strtol_l.isra.0+0x10>
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d106      	bne.n	800f48a <_strtol_l.isra.0+0x1e>
 800f47c:	f000 f8aa 	bl	800f5d4 <__errno>
 800f480:	2316      	movs	r3, #22
 800f482:	6003      	str	r3, [r0, #0]
 800f484:	2000      	movs	r0, #0
 800f486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f48a:	460d      	mov	r5, r1
 800f48c:	4833      	ldr	r0, [pc, #204]	@ (800f55c <_strtol_l.isra.0+0xf0>)
 800f48e:	462a      	mov	r2, r5
 800f490:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f494:	5d06      	ldrb	r6, [r0, r4]
 800f496:	f016 0608 	ands.w	r6, r6, #8
 800f49a:	d1f8      	bne.n	800f48e <_strtol_l.isra.0+0x22>
 800f49c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f49e:	d110      	bne.n	800f4c2 <_strtol_l.isra.0+0x56>
 800f4a0:	782c      	ldrb	r4, [r5, #0]
 800f4a2:	2601      	movs	r6, #1
 800f4a4:	1c95      	adds	r5, r2, #2
 800f4a6:	f033 0210 	bics.w	r2, r3, #16
 800f4aa:	d115      	bne.n	800f4d8 <_strtol_l.isra.0+0x6c>
 800f4ac:	2c30      	cmp	r4, #48	@ 0x30
 800f4ae:	d10d      	bne.n	800f4cc <_strtol_l.isra.0+0x60>
 800f4b0:	782a      	ldrb	r2, [r5, #0]
 800f4b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f4b6:	2a58      	cmp	r2, #88	@ 0x58
 800f4b8:	d108      	bne.n	800f4cc <_strtol_l.isra.0+0x60>
 800f4ba:	786c      	ldrb	r4, [r5, #1]
 800f4bc:	3502      	adds	r5, #2
 800f4be:	2310      	movs	r3, #16
 800f4c0:	e00a      	b.n	800f4d8 <_strtol_l.isra.0+0x6c>
 800f4c2:	2c2b      	cmp	r4, #43	@ 0x2b
 800f4c4:	bf04      	itt	eq
 800f4c6:	782c      	ldrbeq	r4, [r5, #0]
 800f4c8:	1c95      	addeq	r5, r2, #2
 800f4ca:	e7ec      	b.n	800f4a6 <_strtol_l.isra.0+0x3a>
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1f6      	bne.n	800f4be <_strtol_l.isra.0+0x52>
 800f4d0:	2c30      	cmp	r4, #48	@ 0x30
 800f4d2:	bf14      	ite	ne
 800f4d4:	230a      	movne	r3, #10
 800f4d6:	2308      	moveq	r3, #8
 800f4d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f4dc:	2200      	movs	r2, #0
 800f4de:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f4e2:	4610      	mov	r0, r2
 800f4e4:	fbbc f9f3 	udiv	r9, ip, r3
 800f4e8:	fb03 ca19 	mls	sl, r3, r9, ip
 800f4ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f4f0:	2f09      	cmp	r7, #9
 800f4f2:	d80f      	bhi.n	800f514 <_strtol_l.isra.0+0xa8>
 800f4f4:	463c      	mov	r4, r7
 800f4f6:	42a3      	cmp	r3, r4
 800f4f8:	dd1b      	ble.n	800f532 <_strtol_l.isra.0+0xc6>
 800f4fa:	1c57      	adds	r7, r2, #1
 800f4fc:	d007      	beq.n	800f50e <_strtol_l.isra.0+0xa2>
 800f4fe:	4581      	cmp	r9, r0
 800f500:	d314      	bcc.n	800f52c <_strtol_l.isra.0+0xc0>
 800f502:	d101      	bne.n	800f508 <_strtol_l.isra.0+0x9c>
 800f504:	45a2      	cmp	sl, r4
 800f506:	db11      	blt.n	800f52c <_strtol_l.isra.0+0xc0>
 800f508:	fb00 4003 	mla	r0, r0, r3, r4
 800f50c:	2201      	movs	r2, #1
 800f50e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f512:	e7eb      	b.n	800f4ec <_strtol_l.isra.0+0x80>
 800f514:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f518:	2f19      	cmp	r7, #25
 800f51a:	d801      	bhi.n	800f520 <_strtol_l.isra.0+0xb4>
 800f51c:	3c37      	subs	r4, #55	@ 0x37
 800f51e:	e7ea      	b.n	800f4f6 <_strtol_l.isra.0+0x8a>
 800f520:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f524:	2f19      	cmp	r7, #25
 800f526:	d804      	bhi.n	800f532 <_strtol_l.isra.0+0xc6>
 800f528:	3c57      	subs	r4, #87	@ 0x57
 800f52a:	e7e4      	b.n	800f4f6 <_strtol_l.isra.0+0x8a>
 800f52c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f530:	e7ed      	b.n	800f50e <_strtol_l.isra.0+0xa2>
 800f532:	1c53      	adds	r3, r2, #1
 800f534:	d108      	bne.n	800f548 <_strtol_l.isra.0+0xdc>
 800f536:	2322      	movs	r3, #34	@ 0x22
 800f538:	4660      	mov	r0, ip
 800f53a:	f8ce 3000 	str.w	r3, [lr]
 800f53e:	f1b8 0f00 	cmp.w	r8, #0
 800f542:	d0a0      	beq.n	800f486 <_strtol_l.isra.0+0x1a>
 800f544:	1e69      	subs	r1, r5, #1
 800f546:	e006      	b.n	800f556 <_strtol_l.isra.0+0xea>
 800f548:	b106      	cbz	r6, 800f54c <_strtol_l.isra.0+0xe0>
 800f54a:	4240      	negs	r0, r0
 800f54c:	f1b8 0f00 	cmp.w	r8, #0
 800f550:	d099      	beq.n	800f486 <_strtol_l.isra.0+0x1a>
 800f552:	2a00      	cmp	r2, #0
 800f554:	d1f6      	bne.n	800f544 <_strtol_l.isra.0+0xd8>
 800f556:	f8c8 1000 	str.w	r1, [r8]
 800f55a:	e794      	b.n	800f486 <_strtol_l.isra.0+0x1a>
 800f55c:	08013e69 	.word	0x08013e69

0800f560 <_strtol_r>:
 800f560:	f7ff bf84 	b.w	800f46c <_strtol_l.isra.0>

0800f564 <_fwalk_sglue>:
 800f564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f568:	4607      	mov	r7, r0
 800f56a:	4688      	mov	r8, r1
 800f56c:	4614      	mov	r4, r2
 800f56e:	2600      	movs	r6, #0
 800f570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f574:	f1b9 0901 	subs.w	r9, r9, #1
 800f578:	d505      	bpl.n	800f586 <_fwalk_sglue+0x22>
 800f57a:	6824      	ldr	r4, [r4, #0]
 800f57c:	2c00      	cmp	r4, #0
 800f57e:	d1f7      	bne.n	800f570 <_fwalk_sglue+0xc>
 800f580:	4630      	mov	r0, r6
 800f582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f586:	89ab      	ldrh	r3, [r5, #12]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d907      	bls.n	800f59c <_fwalk_sglue+0x38>
 800f58c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f590:	3301      	adds	r3, #1
 800f592:	d003      	beq.n	800f59c <_fwalk_sglue+0x38>
 800f594:	4629      	mov	r1, r5
 800f596:	4638      	mov	r0, r7
 800f598:	47c0      	blx	r8
 800f59a:	4306      	orrs	r6, r0
 800f59c:	3568      	adds	r5, #104	@ 0x68
 800f59e:	e7e9      	b.n	800f574 <_fwalk_sglue+0x10>

0800f5a0 <memset>:
 800f5a0:	4402      	add	r2, r0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d100      	bne.n	800f5aa <memset+0xa>
 800f5a8:	4770      	bx	lr
 800f5aa:	f803 1b01 	strb.w	r1, [r3], #1
 800f5ae:	e7f9      	b.n	800f5a4 <memset+0x4>

0800f5b0 <strncmp>:
 800f5b0:	b510      	push	{r4, lr}
 800f5b2:	b16a      	cbz	r2, 800f5d0 <strncmp+0x20>
 800f5b4:	3901      	subs	r1, #1
 800f5b6:	1884      	adds	r4, r0, r2
 800f5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d103      	bne.n	800f5cc <strncmp+0x1c>
 800f5c4:	42a0      	cmp	r0, r4
 800f5c6:	d001      	beq.n	800f5cc <strncmp+0x1c>
 800f5c8:	2a00      	cmp	r2, #0
 800f5ca:	d1f5      	bne.n	800f5b8 <strncmp+0x8>
 800f5cc:	1ad0      	subs	r0, r2, r3
 800f5ce:	bd10      	pop	{r4, pc}
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	e7fc      	b.n	800f5ce <strncmp+0x1e>

0800f5d4 <__errno>:
 800f5d4:	4b01      	ldr	r3, [pc, #4]	@ (800f5dc <__errno+0x8>)
 800f5d6:	6818      	ldr	r0, [r3, #0]
 800f5d8:	4770      	bx	lr
 800f5da:	bf00      	nop
 800f5dc:	2000019c 	.word	0x2000019c

0800f5e0 <__libc_init_array>:
 800f5e0:	b570      	push	{r4, r5, r6, lr}
 800f5e2:	4d0d      	ldr	r5, [pc, #52]	@ (800f618 <__libc_init_array+0x38>)
 800f5e4:	2600      	movs	r6, #0
 800f5e6:	4c0d      	ldr	r4, [pc, #52]	@ (800f61c <__libc_init_array+0x3c>)
 800f5e8:	1b64      	subs	r4, r4, r5
 800f5ea:	10a4      	asrs	r4, r4, #2
 800f5ec:	42a6      	cmp	r6, r4
 800f5ee:	d109      	bne.n	800f604 <__libc_init_array+0x24>
 800f5f0:	4d0b      	ldr	r5, [pc, #44]	@ (800f620 <__libc_init_array+0x40>)
 800f5f2:	2600      	movs	r6, #0
 800f5f4:	4c0b      	ldr	r4, [pc, #44]	@ (800f624 <__libc_init_array+0x44>)
 800f5f6:	f004 f899 	bl	801372c <_init>
 800f5fa:	1b64      	subs	r4, r4, r5
 800f5fc:	10a4      	asrs	r4, r4, #2
 800f5fe:	42a6      	cmp	r6, r4
 800f600:	d105      	bne.n	800f60e <__libc_init_array+0x2e>
 800f602:	bd70      	pop	{r4, r5, r6, pc}
 800f604:	f855 3b04 	ldr.w	r3, [r5], #4
 800f608:	3601      	adds	r6, #1
 800f60a:	4798      	blx	r3
 800f60c:	e7ee      	b.n	800f5ec <__libc_init_array+0xc>
 800f60e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f612:	3601      	adds	r6, #1
 800f614:	4798      	blx	r3
 800f616:	e7f2      	b.n	800f5fe <__libc_init_array+0x1e>
 800f618:	08014490 	.word	0x08014490
 800f61c:	08014490 	.word	0x08014490
 800f620:	08014490 	.word	0x08014490
 800f624:	08014494 	.word	0x08014494

0800f628 <__retarget_lock_init_recursive>:
 800f628:	4770      	bx	lr

0800f62a <__retarget_lock_acquire_recursive>:
 800f62a:	4770      	bx	lr

0800f62c <__retarget_lock_release_recursive>:
 800f62c:	4770      	bx	lr
	...

0800f630 <_localeconv_r>:
 800f630:	4800      	ldr	r0, [pc, #0]	@ (800f634 <_localeconv_r+0x4>)
 800f632:	4770      	bx	lr
 800f634:	20000120 	.word	0x20000120

0800f638 <memchr>:
 800f638:	b2c9      	uxtb	r1, r1
 800f63a:	4603      	mov	r3, r0
 800f63c:	4402      	add	r2, r0
 800f63e:	b510      	push	{r4, lr}
 800f640:	4293      	cmp	r3, r2
 800f642:	4618      	mov	r0, r3
 800f644:	d101      	bne.n	800f64a <memchr+0x12>
 800f646:	2000      	movs	r0, #0
 800f648:	e003      	b.n	800f652 <memchr+0x1a>
 800f64a:	7804      	ldrb	r4, [r0, #0]
 800f64c:	3301      	adds	r3, #1
 800f64e:	428c      	cmp	r4, r1
 800f650:	d1f6      	bne.n	800f640 <memchr+0x8>
 800f652:	bd10      	pop	{r4, pc}

0800f654 <memcpy>:
 800f654:	440a      	add	r2, r1
 800f656:	1e43      	subs	r3, r0, #1
 800f658:	4291      	cmp	r1, r2
 800f65a:	d100      	bne.n	800f65e <memcpy+0xa>
 800f65c:	4770      	bx	lr
 800f65e:	b510      	push	{r4, lr}
 800f660:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f664:	4291      	cmp	r1, r2
 800f666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f66a:	d1f9      	bne.n	800f660 <memcpy+0xc>
 800f66c:	bd10      	pop	{r4, pc}
	...

0800f670 <nan>:
 800f670:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f678 <nan+0x8>
 800f674:	4770      	bx	lr
 800f676:	bf00      	nop
 800f678:	00000000 	.word	0x00000000
 800f67c:	7ff80000 	.word	0x7ff80000

0800f680 <nanf>:
 800f680:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f688 <nanf+0x8>
 800f684:	4770      	bx	lr
 800f686:	bf00      	nop
 800f688:	7fc00000 	.word	0x7fc00000

0800f68c <quorem>:
 800f68c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f690:	6903      	ldr	r3, [r0, #16]
 800f692:	4607      	mov	r7, r0
 800f694:	690c      	ldr	r4, [r1, #16]
 800f696:	42a3      	cmp	r3, r4
 800f698:	f2c0 8083 	blt.w	800f7a2 <quorem+0x116>
 800f69c:	3c01      	subs	r4, #1
 800f69e:	f100 0514 	add.w	r5, r0, #20
 800f6a2:	f101 0814 	add.w	r8, r1, #20
 800f6a6:	00a3      	lsls	r3, r4, #2
 800f6a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f6b0:	9300      	str	r3, [sp, #0]
 800f6b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6b6:	9301      	str	r3, [sp, #4]
 800f6b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f6c4:	d331      	bcc.n	800f72a <quorem+0x9e>
 800f6c6:	f04f 0a00 	mov.w	sl, #0
 800f6ca:	46c4      	mov	ip, r8
 800f6cc:	46ae      	mov	lr, r5
 800f6ce:	46d3      	mov	fp, sl
 800f6d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f6d4:	b298      	uxth	r0, r3
 800f6d6:	45e1      	cmp	r9, ip
 800f6d8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800f6dc:	fb06 a000 	mla	r0, r6, r0, sl
 800f6e0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800f6e4:	b280      	uxth	r0, r0
 800f6e6:	fb06 2303 	mla	r3, r6, r3, r2
 800f6ea:	f8de 2000 	ldr.w	r2, [lr]
 800f6ee:	b292      	uxth	r2, r2
 800f6f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6f4:	eba2 0200 	sub.w	r2, r2, r0
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	f8de 0000 	ldr.w	r0, [lr]
 800f6fe:	445a      	add	r2, fp
 800f700:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f704:	b292      	uxth	r2, r2
 800f706:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f70a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f70e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f712:	f84e 2b04 	str.w	r2, [lr], #4
 800f716:	d2db      	bcs.n	800f6d0 <quorem+0x44>
 800f718:	9b00      	ldr	r3, [sp, #0]
 800f71a:	58eb      	ldr	r3, [r5, r3]
 800f71c:	b92b      	cbnz	r3, 800f72a <quorem+0x9e>
 800f71e:	9b01      	ldr	r3, [sp, #4]
 800f720:	3b04      	subs	r3, #4
 800f722:	429d      	cmp	r5, r3
 800f724:	461a      	mov	r2, r3
 800f726:	d330      	bcc.n	800f78a <quorem+0xfe>
 800f728:	613c      	str	r4, [r7, #16]
 800f72a:	4638      	mov	r0, r7
 800f72c:	f001 fece 	bl	80114cc <__mcmp>
 800f730:	2800      	cmp	r0, #0
 800f732:	db26      	blt.n	800f782 <quorem+0xf6>
 800f734:	4629      	mov	r1, r5
 800f736:	2000      	movs	r0, #0
 800f738:	f858 2b04 	ldr.w	r2, [r8], #4
 800f73c:	f8d1 c000 	ldr.w	ip, [r1]
 800f740:	fa1f fe82 	uxth.w	lr, r2
 800f744:	45c1      	cmp	r9, r8
 800f746:	fa1f f38c 	uxth.w	r3, ip
 800f74a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800f74e:	eba3 030e 	sub.w	r3, r3, lr
 800f752:	4403      	add	r3, r0
 800f754:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f758:	b29b      	uxth	r3, r3
 800f75a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f75e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f762:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f766:	f841 3b04 	str.w	r3, [r1], #4
 800f76a:	d2e5      	bcs.n	800f738 <quorem+0xac>
 800f76c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f770:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f774:	b922      	cbnz	r2, 800f780 <quorem+0xf4>
 800f776:	3b04      	subs	r3, #4
 800f778:	429d      	cmp	r5, r3
 800f77a:	461a      	mov	r2, r3
 800f77c:	d30b      	bcc.n	800f796 <quorem+0x10a>
 800f77e:	613c      	str	r4, [r7, #16]
 800f780:	3601      	adds	r6, #1
 800f782:	4630      	mov	r0, r6
 800f784:	b003      	add	sp, #12
 800f786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f78a:	6812      	ldr	r2, [r2, #0]
 800f78c:	3b04      	subs	r3, #4
 800f78e:	2a00      	cmp	r2, #0
 800f790:	d1ca      	bne.n	800f728 <quorem+0x9c>
 800f792:	3c01      	subs	r4, #1
 800f794:	e7c5      	b.n	800f722 <quorem+0x96>
 800f796:	6812      	ldr	r2, [r2, #0]
 800f798:	3b04      	subs	r3, #4
 800f79a:	2a00      	cmp	r2, #0
 800f79c:	d1ef      	bne.n	800f77e <quorem+0xf2>
 800f79e:	3c01      	subs	r4, #1
 800f7a0:	e7ea      	b.n	800f778 <quorem+0xec>
 800f7a2:	2000      	movs	r0, #0
 800f7a4:	e7ee      	b.n	800f784 <quorem+0xf8>
	...

0800f7a8 <_dtoa_r>:
 800f7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ac:	69c7      	ldr	r7, [r0, #28]
 800f7ae:	b097      	sub	sp, #92	@ 0x5c
 800f7b0:	4681      	mov	r9, r0
 800f7b2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f7b4:	9107      	str	r1, [sp, #28]
 800f7b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f7b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f7ba:	ec55 4b10 	vmov	r4, r5, d0
 800f7be:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f7c2:	b97f      	cbnz	r7, 800f7e4 <_dtoa_r+0x3c>
 800f7c4:	2010      	movs	r0, #16
 800f7c6:	f001 fa4d 	bl	8010c64 <malloc>
 800f7ca:	4602      	mov	r2, r0
 800f7cc:	f8c9 001c 	str.w	r0, [r9, #28]
 800f7d0:	b920      	cbnz	r0, 800f7dc <_dtoa_r+0x34>
 800f7d2:	4ba9      	ldr	r3, [pc, #676]	@ (800fa78 <_dtoa_r+0x2d0>)
 800f7d4:	21ef      	movs	r1, #239	@ 0xef
 800f7d6:	48a9      	ldr	r0, [pc, #676]	@ (800fa7c <_dtoa_r+0x2d4>)
 800f7d8:	f002 f95c 	bl	8011a94 <__assert_func>
 800f7dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f7e0:	6007      	str	r7, [r0, #0]
 800f7e2:	60c7      	str	r7, [r0, #12]
 800f7e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f7e8:	6819      	ldr	r1, [r3, #0]
 800f7ea:	b159      	cbz	r1, 800f804 <_dtoa_r+0x5c>
 800f7ec:	685a      	ldr	r2, [r3, #4]
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	4648      	mov	r0, r9
 800f7f2:	4093      	lsls	r3, r2
 800f7f4:	604a      	str	r2, [r1, #4]
 800f7f6:	608b      	str	r3, [r1, #8]
 800f7f8:	f001 fbe8 	bl	8010fcc <_Bfree>
 800f7fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f800:	2200      	movs	r2, #0
 800f802:	601a      	str	r2, [r3, #0]
 800f804:	1e2b      	subs	r3, r5, #0
 800f806:	bfb7      	itett	lt
 800f808:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f80c:	2300      	movge	r3, #0
 800f80e:	2201      	movlt	r2, #1
 800f810:	9305      	strlt	r3, [sp, #20]
 800f812:	bfa8      	it	ge
 800f814:	6033      	strge	r3, [r6, #0]
 800f816:	9f05      	ldr	r7, [sp, #20]
 800f818:	4b99      	ldr	r3, [pc, #612]	@ (800fa80 <_dtoa_r+0x2d8>)
 800f81a:	bfb8      	it	lt
 800f81c:	6032      	strlt	r2, [r6, #0]
 800f81e:	43bb      	bics	r3, r7
 800f820:	d112      	bne.n	800f848 <_dtoa_r+0xa0>
 800f822:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f826:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f82e:	4323      	orrs	r3, r4
 800f830:	f000 855a 	beq.w	80102e8 <_dtoa_r+0xb40>
 800f834:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f836:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fa94 <_dtoa_r+0x2ec>
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f000 855c 	beq.w	80102f8 <_dtoa_r+0xb50>
 800f840:	f10a 0303 	add.w	r3, sl, #3
 800f844:	f000 bd56 	b.w	80102f4 <_dtoa_r+0xb4c>
 800f848:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f84c:	2200      	movs	r2, #0
 800f84e:	2300      	movs	r3, #0
 800f850:	ec51 0b17 	vmov	r0, r1, d7
 800f854:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f858:	f7f1 f946 	bl	8000ae8 <__aeabi_dcmpeq>
 800f85c:	4680      	mov	r8, r0
 800f85e:	b158      	cbz	r0, 800f878 <_dtoa_r+0xd0>
 800f860:	2301      	movs	r3, #1
 800f862:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f864:	6013      	str	r3, [r2, #0]
 800f866:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f868:	b113      	cbz	r3, 800f870 <_dtoa_r+0xc8>
 800f86a:	4b86      	ldr	r3, [pc, #536]	@ (800fa84 <_dtoa_r+0x2dc>)
 800f86c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f86e:	6013      	str	r3, [r2, #0]
 800f870:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800fa98 <_dtoa_r+0x2f0>
 800f874:	f000 bd40 	b.w	80102f8 <_dtoa_r+0xb50>
 800f878:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f87c:	aa14      	add	r2, sp, #80	@ 0x50
 800f87e:	a915      	add	r1, sp, #84	@ 0x54
 800f880:	4648      	mov	r0, r9
 800f882:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f886:	f001 ff49 	bl	801171c <__d2b>
 800f88a:	9002      	str	r0, [sp, #8]
 800f88c:	2e00      	cmp	r6, #0
 800f88e:	d076      	beq.n	800f97e <_dtoa_r+0x1d6>
 800f890:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f892:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f896:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f89a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f89e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f8a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f8a6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	4b76      	ldr	r3, [pc, #472]	@ (800fa88 <_dtoa_r+0x2e0>)
 800f8b0:	f7f0 fcfa 	bl	80002a8 <__aeabi_dsub>
 800f8b4:	a36a      	add	r3, pc, #424	@ (adr r3, 800fa60 <_dtoa_r+0x2b8>)
 800f8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ba:	f7f0 fead 	bl	8000618 <__aeabi_dmul>
 800f8be:	a36a      	add	r3, pc, #424	@ (adr r3, 800fa68 <_dtoa_r+0x2c0>)
 800f8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c4:	f7f0 fcf2 	bl	80002ac <__adddf3>
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	460d      	mov	r5, r1
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f7f0 fe39 	bl	8000544 <__aeabi_i2d>
 800f8d2:	a367      	add	r3, pc, #412	@ (adr r3, 800fa70 <_dtoa_r+0x2c8>)
 800f8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d8:	f7f0 fe9e 	bl	8000618 <__aeabi_dmul>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	460b      	mov	r3, r1
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	4629      	mov	r1, r5
 800f8e4:	f7f0 fce2 	bl	80002ac <__adddf3>
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	460d      	mov	r5, r1
 800f8ec:	f7f1 f944 	bl	8000b78 <__aeabi_d2iz>
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	4607      	mov	r7, r0
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	f7f1 f8ff 	bl	8000afc <__aeabi_dcmplt>
 800f8fe:	b140      	cbz	r0, 800f912 <_dtoa_r+0x16a>
 800f900:	4638      	mov	r0, r7
 800f902:	f7f0 fe1f 	bl	8000544 <__aeabi_i2d>
 800f906:	4622      	mov	r2, r4
 800f908:	462b      	mov	r3, r5
 800f90a:	f7f1 f8ed 	bl	8000ae8 <__aeabi_dcmpeq>
 800f90e:	b900      	cbnz	r0, 800f912 <_dtoa_r+0x16a>
 800f910:	3f01      	subs	r7, #1
 800f912:	2f16      	cmp	r7, #22
 800f914:	d852      	bhi.n	800f9bc <_dtoa_r+0x214>
 800f916:	4b5d      	ldr	r3, [pc, #372]	@ (800fa8c <_dtoa_r+0x2e4>)
 800f918:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f91c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f924:	f7f1 f8ea 	bl	8000afc <__aeabi_dcmplt>
 800f928:	2800      	cmp	r0, #0
 800f92a:	d049      	beq.n	800f9c0 <_dtoa_r+0x218>
 800f92c:	3f01      	subs	r7, #1
 800f92e:	2300      	movs	r3, #0
 800f930:	9310      	str	r3, [sp, #64]	@ 0x40
 800f932:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f934:	1b9b      	subs	r3, r3, r6
 800f936:	1e5a      	subs	r2, r3, #1
 800f938:	bf4c      	ite	mi
 800f93a:	f1c3 0301 	rsbmi	r3, r3, #1
 800f93e:	2300      	movpl	r3, #0
 800f940:	9206      	str	r2, [sp, #24]
 800f942:	bf45      	ittet	mi
 800f944:	9300      	strmi	r3, [sp, #0]
 800f946:	2300      	movmi	r3, #0
 800f948:	9300      	strpl	r3, [sp, #0]
 800f94a:	9306      	strmi	r3, [sp, #24]
 800f94c:	2f00      	cmp	r7, #0
 800f94e:	db39      	blt.n	800f9c4 <_dtoa_r+0x21c>
 800f950:	9b06      	ldr	r3, [sp, #24]
 800f952:	970d      	str	r7, [sp, #52]	@ 0x34
 800f954:	443b      	add	r3, r7
 800f956:	9306      	str	r3, [sp, #24]
 800f958:	2300      	movs	r3, #0
 800f95a:	9308      	str	r3, [sp, #32]
 800f95c:	9b07      	ldr	r3, [sp, #28]
 800f95e:	2b09      	cmp	r3, #9
 800f960:	d863      	bhi.n	800fa2a <_dtoa_r+0x282>
 800f962:	2b05      	cmp	r3, #5
 800f964:	bfc5      	ittet	gt
 800f966:	3b04      	subgt	r3, #4
 800f968:	2400      	movgt	r4, #0
 800f96a:	2401      	movle	r4, #1
 800f96c:	9307      	strgt	r3, [sp, #28]
 800f96e:	9b07      	ldr	r3, [sp, #28]
 800f970:	3b02      	subs	r3, #2
 800f972:	2b03      	cmp	r3, #3
 800f974:	d865      	bhi.n	800fa42 <_dtoa_r+0x29a>
 800f976:	e8df f003 	tbb	[pc, r3]
 800f97a:	5654      	.short	0x5654
 800f97c:	2d39      	.short	0x2d39
 800f97e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f982:	441e      	add	r6, r3
 800f984:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f988:	2b20      	cmp	r3, #32
 800f98a:	bfc9      	itett	gt
 800f98c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f990:	f1c3 0320 	rsble	r3, r3, #32
 800f994:	409f      	lslgt	r7, r3
 800f996:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f99a:	bfd8      	it	le
 800f99c:	fa04 f003 	lslle.w	r0, r4, r3
 800f9a0:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800f9a4:	bfc4      	itt	gt
 800f9a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f9aa:	ea47 0003 	orrgt.w	r0, r7, r3
 800f9ae:	f7f0 fdb9 	bl	8000524 <__aeabi_ui2d>
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f9b8:	9212      	str	r2, [sp, #72]	@ 0x48
 800f9ba:	e776      	b.n	800f8aa <_dtoa_r+0x102>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e7b7      	b.n	800f930 <_dtoa_r+0x188>
 800f9c0:	9010      	str	r0, [sp, #64]	@ 0x40
 800f9c2:	e7b6      	b.n	800f932 <_dtoa_r+0x18a>
 800f9c4:	9b00      	ldr	r3, [sp, #0]
 800f9c6:	1bdb      	subs	r3, r3, r7
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	427b      	negs	r3, r7
 800f9cc:	9308      	str	r3, [sp, #32]
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	930d      	str	r3, [sp, #52]	@ 0x34
 800f9d2:	e7c3      	b.n	800f95c <_dtoa_r+0x1b4>
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9da:	eb07 0b03 	add.w	fp, r7, r3
 800f9de:	f10b 0301 	add.w	r3, fp, #1
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	9303      	str	r3, [sp, #12]
 800f9e6:	bfb8      	it	lt
 800f9e8:	2301      	movlt	r3, #1
 800f9ea:	e006      	b.n	800f9fa <_dtoa_r+0x252>
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	dd28      	ble.n	800fa48 <_dtoa_r+0x2a0>
 800f9f6:	469b      	mov	fp, r3
 800f9f8:	9303      	str	r3, [sp, #12]
 800f9fa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f9fe:	2100      	movs	r1, #0
 800fa00:	2204      	movs	r2, #4
 800fa02:	f102 0514 	add.w	r5, r2, #20
 800fa06:	429d      	cmp	r5, r3
 800fa08:	d926      	bls.n	800fa58 <_dtoa_r+0x2b0>
 800fa0a:	6041      	str	r1, [r0, #4]
 800fa0c:	4648      	mov	r0, r9
 800fa0e:	f001 fa9d 	bl	8010f4c <_Balloc>
 800fa12:	4682      	mov	sl, r0
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d141      	bne.n	800fa9c <_dtoa_r+0x2f4>
 800fa18:	4b1d      	ldr	r3, [pc, #116]	@ (800fa90 <_dtoa_r+0x2e8>)
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	f240 11af 	movw	r1, #431	@ 0x1af
 800fa20:	e6d9      	b.n	800f7d6 <_dtoa_r+0x2e>
 800fa22:	2300      	movs	r3, #0
 800fa24:	e7e3      	b.n	800f9ee <_dtoa_r+0x246>
 800fa26:	2300      	movs	r3, #0
 800fa28:	e7d5      	b.n	800f9d6 <_dtoa_r+0x22e>
 800fa2a:	2401      	movs	r4, #1
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	9409      	str	r4, [sp, #36]	@ 0x24
 800fa30:	9307      	str	r3, [sp, #28]
 800fa32:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fa36:	2200      	movs	r2, #0
 800fa38:	2312      	movs	r3, #18
 800fa3a:	f8cd b00c 	str.w	fp, [sp, #12]
 800fa3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fa40:	e7db      	b.n	800f9fa <_dtoa_r+0x252>
 800fa42:	2301      	movs	r3, #1
 800fa44:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa46:	e7f4      	b.n	800fa32 <_dtoa_r+0x28a>
 800fa48:	f04f 0b01 	mov.w	fp, #1
 800fa4c:	465b      	mov	r3, fp
 800fa4e:	f8cd b00c 	str.w	fp, [sp, #12]
 800fa52:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fa56:	e7d0      	b.n	800f9fa <_dtoa_r+0x252>
 800fa58:	3101      	adds	r1, #1
 800fa5a:	0052      	lsls	r2, r2, #1
 800fa5c:	e7d1      	b.n	800fa02 <_dtoa_r+0x25a>
 800fa5e:	bf00      	nop
 800fa60:	636f4361 	.word	0x636f4361
 800fa64:	3fd287a7 	.word	0x3fd287a7
 800fa68:	8b60c8b3 	.word	0x8b60c8b3
 800fa6c:	3fc68a28 	.word	0x3fc68a28
 800fa70:	509f79fb 	.word	0x509f79fb
 800fa74:	3fd34413 	.word	0x3fd34413
 800fa78:	08013c90 	.word	0x08013c90
 800fa7c:	08013ca7 	.word	0x08013ca7
 800fa80:	7ff00000 	.word	0x7ff00000
 800fa84:	08013c51 	.word	0x08013c51
 800fa88:	3ff80000 	.word	0x3ff80000
 800fa8c:	08013fa0 	.word	0x08013fa0
 800fa90:	08013cff 	.word	0x08013cff
 800fa94:	08013c8c 	.word	0x08013c8c
 800fa98:	08013c50 	.word	0x08013c50
 800fa9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800faa0:	6018      	str	r0, [r3, #0]
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	2b0e      	cmp	r3, #14
 800faa6:	f200 80a1 	bhi.w	800fbec <_dtoa_r+0x444>
 800faaa:	2c00      	cmp	r4, #0
 800faac:	f000 809e 	beq.w	800fbec <_dtoa_r+0x444>
 800fab0:	2f00      	cmp	r7, #0
 800fab2:	dd33      	ble.n	800fb1c <_dtoa_r+0x374>
 800fab4:	f007 020f 	and.w	r2, r7, #15
 800fab8:	4b9b      	ldr	r3, [pc, #620]	@ (800fd28 <_dtoa_r+0x580>)
 800faba:	05f8      	lsls	r0, r7, #23
 800fabc:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fac4:	ed93 7b00 	vldr	d7, [r3]
 800fac8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800facc:	d516      	bpl.n	800fafc <_dtoa_r+0x354>
 800face:	4b97      	ldr	r3, [pc, #604]	@ (800fd2c <_dtoa_r+0x584>)
 800fad0:	f004 040f 	and.w	r4, r4, #15
 800fad4:	2603      	movs	r6, #3
 800fad6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fada:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fade:	f7f0 fec5 	bl	800086c <__aeabi_ddiv>
 800fae2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fae6:	4d91      	ldr	r5, [pc, #580]	@ (800fd2c <_dtoa_r+0x584>)
 800fae8:	b954      	cbnz	r4, 800fb00 <_dtoa_r+0x358>
 800faea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800faee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800faf2:	f7f0 febb 	bl	800086c <__aeabi_ddiv>
 800faf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fafa:	e028      	b.n	800fb4e <_dtoa_r+0x3a6>
 800fafc:	2602      	movs	r6, #2
 800fafe:	e7f2      	b.n	800fae6 <_dtoa_r+0x33e>
 800fb00:	07e1      	lsls	r1, r4, #31
 800fb02:	d508      	bpl.n	800fb16 <_dtoa_r+0x36e>
 800fb04:	3601      	adds	r6, #1
 800fb06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fb0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fb0e:	f7f0 fd83 	bl	8000618 <__aeabi_dmul>
 800fb12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fb16:	1064      	asrs	r4, r4, #1
 800fb18:	3508      	adds	r5, #8
 800fb1a:	e7e5      	b.n	800fae8 <_dtoa_r+0x340>
 800fb1c:	f000 80af 	beq.w	800fc7e <_dtoa_r+0x4d6>
 800fb20:	427c      	negs	r4, r7
 800fb22:	4b81      	ldr	r3, [pc, #516]	@ (800fd28 <_dtoa_r+0x580>)
 800fb24:	4d81      	ldr	r5, [pc, #516]	@ (800fd2c <_dtoa_r+0x584>)
 800fb26:	2602      	movs	r6, #2
 800fb28:	f004 020f 	and.w	r2, r4, #15
 800fb2c:	1124      	asrs	r4, r4, #4
 800fb2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3a:	f7f0 fd6d 	bl	8000618 <__aeabi_dmul>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb44:	2c00      	cmp	r4, #0
 800fb46:	f040 808f 	bne.w	800fc68 <_dtoa_r+0x4c0>
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d1d3      	bne.n	800faf6 <_dtoa_r+0x34e>
 800fb4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fb50:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f000 8094 	beq.w	800fc82 <_dtoa_r+0x4da>
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	4b74      	ldr	r3, [pc, #464]	@ (800fd30 <_dtoa_r+0x588>)
 800fb5e:	4620      	mov	r0, r4
 800fb60:	4629      	mov	r1, r5
 800fb62:	f7f0 ffcb 	bl	8000afc <__aeabi_dcmplt>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	f000 808b 	beq.w	800fc82 <_dtoa_r+0x4da>
 800fb6c:	9b03      	ldr	r3, [sp, #12]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f000 8087 	beq.w	800fc82 <_dtoa_r+0x4da>
 800fb74:	f1bb 0f00 	cmp.w	fp, #0
 800fb78:	dd34      	ble.n	800fbe4 <_dtoa_r+0x43c>
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800fb80:	3601      	adds	r6, #1
 800fb82:	465c      	mov	r4, fp
 800fb84:	2200      	movs	r2, #0
 800fb86:	4b6b      	ldr	r3, [pc, #428]	@ (800fd34 <_dtoa_r+0x58c>)
 800fb88:	4629      	mov	r1, r5
 800fb8a:	f7f0 fd45 	bl	8000618 <__aeabi_dmul>
 800fb8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb92:	4630      	mov	r0, r6
 800fb94:	f7f0 fcd6 	bl	8000544 <__aeabi_i2d>
 800fb98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb9c:	f7f0 fd3c 	bl	8000618 <__aeabi_dmul>
 800fba0:	2200      	movs	r2, #0
 800fba2:	4b65      	ldr	r3, [pc, #404]	@ (800fd38 <_dtoa_r+0x590>)
 800fba4:	f7f0 fb82 	bl	80002ac <__adddf3>
 800fba8:	4605      	mov	r5, r0
 800fbaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fbae:	2c00      	cmp	r4, #0
 800fbb0:	d16a      	bne.n	800fc88 <_dtoa_r+0x4e0>
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	4b61      	ldr	r3, [pc, #388]	@ (800fd3c <_dtoa_r+0x594>)
 800fbb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fbba:	f7f0 fb75 	bl	80002a8 <__aeabi_dsub>
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fbc6:	462a      	mov	r2, r5
 800fbc8:	4633      	mov	r3, r6
 800fbca:	f7f0 ffb5 	bl	8000b38 <__aeabi_dcmpgt>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	f040 8298 	bne.w	8010104 <_dtoa_r+0x95c>
 800fbd4:	462a      	mov	r2, r5
 800fbd6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fbda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fbde:	f7f0 ff8d 	bl	8000afc <__aeabi_dcmplt>
 800fbe2:	bb38      	cbnz	r0, 800fc34 <_dtoa_r+0x48c>
 800fbe4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800fbe8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fbec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f2c0 8157 	blt.w	800fea2 <_dtoa_r+0x6fa>
 800fbf4:	2f0e      	cmp	r7, #14
 800fbf6:	f300 8154 	bgt.w	800fea2 <_dtoa_r+0x6fa>
 800fbfa:	4b4b      	ldr	r3, [pc, #300]	@ (800fd28 <_dtoa_r+0x580>)
 800fbfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fc00:	ed93 7b00 	vldr	d7, [r3]
 800fc04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	ed8d 7b00 	vstr	d7, [sp]
 800fc0c:	f280 80e5 	bge.w	800fdda <_dtoa_r+0x632>
 800fc10:	9b03      	ldr	r3, [sp, #12]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	f300 80e1 	bgt.w	800fdda <_dtoa_r+0x632>
 800fc18:	d10c      	bne.n	800fc34 <_dtoa_r+0x48c>
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	4b47      	ldr	r3, [pc, #284]	@ (800fd3c <_dtoa_r+0x594>)
 800fc1e:	ec51 0b17 	vmov	r0, r1, d7
 800fc22:	f7f0 fcf9 	bl	8000618 <__aeabi_dmul>
 800fc26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc2a:	f7f0 ff7b 	bl	8000b24 <__aeabi_dcmpge>
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	f000 8266 	beq.w	8010100 <_dtoa_r+0x958>
 800fc34:	2400      	movs	r4, #0
 800fc36:	4625      	mov	r5, r4
 800fc38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc3a:	4656      	mov	r6, sl
 800fc3c:	ea6f 0803 	mvn.w	r8, r3
 800fc40:	2700      	movs	r7, #0
 800fc42:	4621      	mov	r1, r4
 800fc44:	4648      	mov	r0, r9
 800fc46:	f001 f9c1 	bl	8010fcc <_Bfree>
 800fc4a:	2d00      	cmp	r5, #0
 800fc4c:	f000 80bd 	beq.w	800fdca <_dtoa_r+0x622>
 800fc50:	b12f      	cbz	r7, 800fc5e <_dtoa_r+0x4b6>
 800fc52:	42af      	cmp	r7, r5
 800fc54:	d003      	beq.n	800fc5e <_dtoa_r+0x4b6>
 800fc56:	4639      	mov	r1, r7
 800fc58:	4648      	mov	r0, r9
 800fc5a:	f001 f9b7 	bl	8010fcc <_Bfree>
 800fc5e:	4629      	mov	r1, r5
 800fc60:	4648      	mov	r0, r9
 800fc62:	f001 f9b3 	bl	8010fcc <_Bfree>
 800fc66:	e0b0      	b.n	800fdca <_dtoa_r+0x622>
 800fc68:	07e2      	lsls	r2, r4, #31
 800fc6a:	d505      	bpl.n	800fc78 <_dtoa_r+0x4d0>
 800fc6c:	3601      	adds	r6, #1
 800fc6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fc72:	f7f0 fcd1 	bl	8000618 <__aeabi_dmul>
 800fc76:	2301      	movs	r3, #1
 800fc78:	1064      	asrs	r4, r4, #1
 800fc7a:	3508      	adds	r5, #8
 800fc7c:	e762      	b.n	800fb44 <_dtoa_r+0x39c>
 800fc7e:	2602      	movs	r6, #2
 800fc80:	e765      	b.n	800fb4e <_dtoa_r+0x3a6>
 800fc82:	46b8      	mov	r8, r7
 800fc84:	9c03      	ldr	r4, [sp, #12]
 800fc86:	e784      	b.n	800fb92 <_dtoa_r+0x3ea>
 800fc88:	4b27      	ldr	r3, [pc, #156]	@ (800fd28 <_dtoa_r+0x580>)
 800fc8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc90:	4454      	add	r4, sl
 800fc92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fc96:	2900      	cmp	r1, #0
 800fc98:	d054      	beq.n	800fd44 <_dtoa_r+0x59c>
 800fc9a:	2000      	movs	r0, #0
 800fc9c:	4928      	ldr	r1, [pc, #160]	@ (800fd40 <_dtoa_r+0x598>)
 800fc9e:	f7f0 fde5 	bl	800086c <__aeabi_ddiv>
 800fca2:	4633      	mov	r3, r6
 800fca4:	4656      	mov	r6, sl
 800fca6:	462a      	mov	r2, r5
 800fca8:	f7f0 fafe 	bl	80002a8 <__aeabi_dsub>
 800fcac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fcb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcb4:	f7f0 ff60 	bl	8000b78 <__aeabi_d2iz>
 800fcb8:	4605      	mov	r5, r0
 800fcba:	f7f0 fc43 	bl	8000544 <__aeabi_i2d>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	3530      	adds	r5, #48	@ 0x30
 800fcc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcc8:	f7f0 faee 	bl	80002a8 <__aeabi_dsub>
 800fccc:	4602      	mov	r2, r0
 800fcce:	460b      	mov	r3, r1
 800fcd0:	f806 5b01 	strb.w	r5, [r6], #1
 800fcd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fcd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fcdc:	f7f0 ff0e 	bl	8000afc <__aeabi_dcmplt>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d172      	bne.n	800fdca <_dtoa_r+0x622>
 800fce4:	2000      	movs	r0, #0
 800fce6:	4912      	ldr	r1, [pc, #72]	@ (800fd30 <_dtoa_r+0x588>)
 800fce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcec:	f7f0 fadc 	bl	80002a8 <__aeabi_dsub>
 800fcf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fcf4:	f7f0 ff02 	bl	8000afc <__aeabi_dcmplt>
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	f040 80b4 	bne.w	800fe66 <_dtoa_r+0x6be>
 800fcfe:	42a6      	cmp	r6, r4
 800fd00:	f43f af70 	beq.w	800fbe4 <_dtoa_r+0x43c>
 800fd04:	2200      	movs	r2, #0
 800fd06:	4b0b      	ldr	r3, [pc, #44]	@ (800fd34 <_dtoa_r+0x58c>)
 800fd08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fd0c:	f7f0 fc84 	bl	8000618 <__aeabi_dmul>
 800fd10:	2200      	movs	r2, #0
 800fd12:	4b08      	ldr	r3, [pc, #32]	@ (800fd34 <_dtoa_r+0x58c>)
 800fd14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fd18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd1c:	f7f0 fc7c 	bl	8000618 <__aeabi_dmul>
 800fd20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd24:	e7c4      	b.n	800fcb0 <_dtoa_r+0x508>
 800fd26:	bf00      	nop
 800fd28:	08013fa0 	.word	0x08013fa0
 800fd2c:	08013f78 	.word	0x08013f78
 800fd30:	3ff00000 	.word	0x3ff00000
 800fd34:	40240000 	.word	0x40240000
 800fd38:	401c0000 	.word	0x401c0000
 800fd3c:	40140000 	.word	0x40140000
 800fd40:	3fe00000 	.word	0x3fe00000
 800fd44:	4631      	mov	r1, r6
 800fd46:	4656      	mov	r6, sl
 800fd48:	4628      	mov	r0, r5
 800fd4a:	f7f0 fc65 	bl	8000618 <__aeabi_dmul>
 800fd4e:	9413      	str	r4, [sp, #76]	@ 0x4c
 800fd50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fd54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd58:	f7f0 ff0e 	bl	8000b78 <__aeabi_d2iz>
 800fd5c:	4605      	mov	r5, r0
 800fd5e:	f7f0 fbf1 	bl	8000544 <__aeabi_i2d>
 800fd62:	4602      	mov	r2, r0
 800fd64:	3530      	adds	r5, #48	@ 0x30
 800fd66:	460b      	mov	r3, r1
 800fd68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd6c:	f7f0 fa9c 	bl	80002a8 <__aeabi_dsub>
 800fd70:	f806 5b01 	strb.w	r5, [r6], #1
 800fd74:	4602      	mov	r2, r0
 800fd76:	460b      	mov	r3, r1
 800fd78:	42a6      	cmp	r6, r4
 800fd7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd7e:	f04f 0200 	mov.w	r2, #0
 800fd82:	d124      	bne.n	800fdce <_dtoa_r+0x626>
 800fd84:	4baf      	ldr	r3, [pc, #700]	@ (8010044 <_dtoa_r+0x89c>)
 800fd86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fd8a:	f7f0 fa8f 	bl	80002ac <__adddf3>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	460b      	mov	r3, r1
 800fd92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd96:	f7f0 fecf 	bl	8000b38 <__aeabi_dcmpgt>
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	d163      	bne.n	800fe66 <_dtoa_r+0x6be>
 800fd9e:	2000      	movs	r0, #0
 800fda0:	49a8      	ldr	r1, [pc, #672]	@ (8010044 <_dtoa_r+0x89c>)
 800fda2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fda6:	f7f0 fa7f 	bl	80002a8 <__aeabi_dsub>
 800fdaa:	4602      	mov	r2, r0
 800fdac:	460b      	mov	r3, r1
 800fdae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdb2:	f7f0 fea3 	bl	8000afc <__aeabi_dcmplt>
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	f43f af14 	beq.w	800fbe4 <_dtoa_r+0x43c>
 800fdbc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800fdbe:	1e73      	subs	r3, r6, #1
 800fdc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fdc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fdc6:	2b30      	cmp	r3, #48	@ 0x30
 800fdc8:	d0f8      	beq.n	800fdbc <_dtoa_r+0x614>
 800fdca:	4647      	mov	r7, r8
 800fdcc:	e03b      	b.n	800fe46 <_dtoa_r+0x69e>
 800fdce:	4b9e      	ldr	r3, [pc, #632]	@ (8010048 <_dtoa_r+0x8a0>)
 800fdd0:	f7f0 fc22 	bl	8000618 <__aeabi_dmul>
 800fdd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fdd8:	e7bc      	b.n	800fd54 <_dtoa_r+0x5ac>
 800fdda:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fdde:	4656      	mov	r6, sl
 800fde0:	4620      	mov	r0, r4
 800fde2:	4629      	mov	r1, r5
 800fde4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fde8:	f7f0 fd40 	bl	800086c <__aeabi_ddiv>
 800fdec:	f7f0 fec4 	bl	8000b78 <__aeabi_d2iz>
 800fdf0:	4680      	mov	r8, r0
 800fdf2:	f7f0 fba7 	bl	8000544 <__aeabi_i2d>
 800fdf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdfa:	f7f0 fc0d 	bl	8000618 <__aeabi_dmul>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	4620      	mov	r0, r4
 800fe02:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fe06:	460b      	mov	r3, r1
 800fe08:	4629      	mov	r1, r5
 800fe0a:	f7f0 fa4d 	bl	80002a8 <__aeabi_dsub>
 800fe0e:	9d03      	ldr	r5, [sp, #12]
 800fe10:	f806 4b01 	strb.w	r4, [r6], #1
 800fe14:	eba6 040a 	sub.w	r4, r6, sl
 800fe18:	4602      	mov	r2, r0
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	42a5      	cmp	r5, r4
 800fe1e:	d133      	bne.n	800fe88 <_dtoa_r+0x6e0>
 800fe20:	f7f0 fa44 	bl	80002ac <__adddf3>
 800fe24:	4604      	mov	r4, r0
 800fe26:	460d      	mov	r5, r1
 800fe28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe2c:	f7f0 fe84 	bl	8000b38 <__aeabi_dcmpgt>
 800fe30:	b9c0      	cbnz	r0, 800fe64 <_dtoa_r+0x6bc>
 800fe32:	4620      	mov	r0, r4
 800fe34:	4629      	mov	r1, r5
 800fe36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe3a:	f7f0 fe55 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe3e:	b110      	cbz	r0, 800fe46 <_dtoa_r+0x69e>
 800fe40:	f018 0f01 	tst.w	r8, #1
 800fe44:	d10e      	bne.n	800fe64 <_dtoa_r+0x6bc>
 800fe46:	9902      	ldr	r1, [sp, #8]
 800fe48:	4648      	mov	r0, r9
 800fe4a:	f001 f8bf 	bl	8010fcc <_Bfree>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	3701      	adds	r7, #1
 800fe52:	7033      	strb	r3, [r6, #0]
 800fe54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fe56:	601f      	str	r7, [r3, #0]
 800fe58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	f000 824c 	beq.w	80102f8 <_dtoa_r+0xb50>
 800fe60:	601e      	str	r6, [r3, #0]
 800fe62:	e249      	b.n	80102f8 <_dtoa_r+0xb50>
 800fe64:	46b8      	mov	r8, r7
 800fe66:	4633      	mov	r3, r6
 800fe68:	461e      	mov	r6, r3
 800fe6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe6e:	2a39      	cmp	r2, #57	@ 0x39
 800fe70:	d106      	bne.n	800fe80 <_dtoa_r+0x6d8>
 800fe72:	459a      	cmp	sl, r3
 800fe74:	d1f8      	bne.n	800fe68 <_dtoa_r+0x6c0>
 800fe76:	2230      	movs	r2, #48	@ 0x30
 800fe78:	f108 0801 	add.w	r8, r8, #1
 800fe7c:	f88a 2000 	strb.w	r2, [sl]
 800fe80:	781a      	ldrb	r2, [r3, #0]
 800fe82:	3201      	adds	r2, #1
 800fe84:	701a      	strb	r2, [r3, #0]
 800fe86:	e7a0      	b.n	800fdca <_dtoa_r+0x622>
 800fe88:	2200      	movs	r2, #0
 800fe8a:	4b6f      	ldr	r3, [pc, #444]	@ (8010048 <_dtoa_r+0x8a0>)
 800fe8c:	f7f0 fbc4 	bl	8000618 <__aeabi_dmul>
 800fe90:	2200      	movs	r2, #0
 800fe92:	2300      	movs	r3, #0
 800fe94:	4604      	mov	r4, r0
 800fe96:	460d      	mov	r5, r1
 800fe98:	f7f0 fe26 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	d09f      	beq.n	800fde0 <_dtoa_r+0x638>
 800fea0:	e7d1      	b.n	800fe46 <_dtoa_r+0x69e>
 800fea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fea4:	2a00      	cmp	r2, #0
 800fea6:	f000 80ea 	beq.w	801007e <_dtoa_r+0x8d6>
 800feaa:	9a07      	ldr	r2, [sp, #28]
 800feac:	2a01      	cmp	r2, #1
 800feae:	f300 80cd 	bgt.w	801004c <_dtoa_r+0x8a4>
 800feb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800feb4:	2a00      	cmp	r2, #0
 800feb6:	f000 80c1 	beq.w	801003c <_dtoa_r+0x894>
 800feba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800febe:	9c08      	ldr	r4, [sp, #32]
 800fec0:	9e00      	ldr	r6, [sp, #0]
 800fec2:	9a00      	ldr	r2, [sp, #0]
 800fec4:	2101      	movs	r1, #1
 800fec6:	4648      	mov	r0, r9
 800fec8:	441a      	add	r2, r3
 800feca:	9200      	str	r2, [sp, #0]
 800fecc:	9a06      	ldr	r2, [sp, #24]
 800fece:	441a      	add	r2, r3
 800fed0:	9206      	str	r2, [sp, #24]
 800fed2:	f001 f97b 	bl	80111cc <__i2b>
 800fed6:	4605      	mov	r5, r0
 800fed8:	b166      	cbz	r6, 800fef4 <_dtoa_r+0x74c>
 800feda:	9b06      	ldr	r3, [sp, #24]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	dd09      	ble.n	800fef4 <_dtoa_r+0x74c>
 800fee0:	42b3      	cmp	r3, r6
 800fee2:	9a00      	ldr	r2, [sp, #0]
 800fee4:	bfa8      	it	ge
 800fee6:	4633      	movge	r3, r6
 800fee8:	1ad2      	subs	r2, r2, r3
 800feea:	1af6      	subs	r6, r6, r3
 800feec:	9200      	str	r2, [sp, #0]
 800feee:	9a06      	ldr	r2, [sp, #24]
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	9306      	str	r3, [sp, #24]
 800fef4:	9b08      	ldr	r3, [sp, #32]
 800fef6:	b30b      	cbz	r3, 800ff3c <_dtoa_r+0x794>
 800fef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	f000 80c6 	beq.w	801008c <_dtoa_r+0x8e4>
 800ff00:	2c00      	cmp	r4, #0
 800ff02:	f000 80c0 	beq.w	8010086 <_dtoa_r+0x8de>
 800ff06:	4629      	mov	r1, r5
 800ff08:	4622      	mov	r2, r4
 800ff0a:	4648      	mov	r0, r9
 800ff0c:	f001 fa18 	bl	8011340 <__pow5mult>
 800ff10:	9a02      	ldr	r2, [sp, #8]
 800ff12:	4601      	mov	r1, r0
 800ff14:	4605      	mov	r5, r0
 800ff16:	4648      	mov	r0, r9
 800ff18:	f001 f96e 	bl	80111f8 <__multiply>
 800ff1c:	9902      	ldr	r1, [sp, #8]
 800ff1e:	4680      	mov	r8, r0
 800ff20:	4648      	mov	r0, r9
 800ff22:	f001 f853 	bl	8010fcc <_Bfree>
 800ff26:	9b08      	ldr	r3, [sp, #32]
 800ff28:	1b1b      	subs	r3, r3, r4
 800ff2a:	9308      	str	r3, [sp, #32]
 800ff2c:	f000 80b1 	beq.w	8010092 <_dtoa_r+0x8ea>
 800ff30:	9a08      	ldr	r2, [sp, #32]
 800ff32:	4641      	mov	r1, r8
 800ff34:	4648      	mov	r0, r9
 800ff36:	f001 fa03 	bl	8011340 <__pow5mult>
 800ff3a:	9002      	str	r0, [sp, #8]
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	4648      	mov	r0, r9
 800ff40:	f001 f944 	bl	80111cc <__i2b>
 800ff44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff46:	4604      	mov	r4, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f000 81d9 	beq.w	8010300 <_dtoa_r+0xb58>
 800ff4e:	461a      	mov	r2, r3
 800ff50:	4601      	mov	r1, r0
 800ff52:	4648      	mov	r0, r9
 800ff54:	f001 f9f4 	bl	8011340 <__pow5mult>
 800ff58:	9b07      	ldr	r3, [sp, #28]
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	f300 809f 	bgt.w	80100a0 <_dtoa_r+0x8f8>
 800ff62:	9b04      	ldr	r3, [sp, #16]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f040 8097 	bne.w	8010098 <_dtoa_r+0x8f0>
 800ff6a:	9b05      	ldr	r3, [sp, #20]
 800ff6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	f040 8093 	bne.w	801009c <_dtoa_r+0x8f4>
 800ff76:	9b05      	ldr	r3, [sp, #20]
 800ff78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff7c:	0d1b      	lsrs	r3, r3, #20
 800ff7e:	051b      	lsls	r3, r3, #20
 800ff80:	b133      	cbz	r3, 800ff90 <_dtoa_r+0x7e8>
 800ff82:	9b00      	ldr	r3, [sp, #0]
 800ff84:	3301      	adds	r3, #1
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	9b06      	ldr	r3, [sp, #24]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	9306      	str	r3, [sp, #24]
 800ff8e:	2301      	movs	r3, #1
 800ff90:	9308      	str	r3, [sp, #32]
 800ff92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f000 81b9 	beq.w	801030c <_dtoa_r+0xb64>
 800ff9a:	6923      	ldr	r3, [r4, #16]
 800ff9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ffa0:	6918      	ldr	r0, [r3, #16]
 800ffa2:	f001 f8c7 	bl	8011134 <__hi0bits>
 800ffa6:	f1c0 0020 	rsb	r0, r0, #32
 800ffaa:	9b06      	ldr	r3, [sp, #24]
 800ffac:	4418      	add	r0, r3
 800ffae:	f010 001f 	ands.w	r0, r0, #31
 800ffb2:	f000 8082 	beq.w	80100ba <_dtoa_r+0x912>
 800ffb6:	f1c0 0320 	rsb	r3, r0, #32
 800ffba:	2b04      	cmp	r3, #4
 800ffbc:	dd73      	ble.n	80100a6 <_dtoa_r+0x8fe>
 800ffbe:	f1c0 001c 	rsb	r0, r0, #28
 800ffc2:	9b00      	ldr	r3, [sp, #0]
 800ffc4:	4403      	add	r3, r0
 800ffc6:	4406      	add	r6, r0
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	9b06      	ldr	r3, [sp, #24]
 800ffcc:	4403      	add	r3, r0
 800ffce:	9306      	str	r3, [sp, #24]
 800ffd0:	9b00      	ldr	r3, [sp, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	dd05      	ble.n	800ffe2 <_dtoa_r+0x83a>
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	9902      	ldr	r1, [sp, #8]
 800ffda:	4648      	mov	r0, r9
 800ffdc:	f001 fa0a 	bl	80113f4 <__lshift>
 800ffe0:	9002      	str	r0, [sp, #8]
 800ffe2:	9b06      	ldr	r3, [sp, #24]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	dd05      	ble.n	800fff4 <_dtoa_r+0x84c>
 800ffe8:	4621      	mov	r1, r4
 800ffea:	461a      	mov	r2, r3
 800ffec:	4648      	mov	r0, r9
 800ffee:	f001 fa01 	bl	80113f4 <__lshift>
 800fff2:	4604      	mov	r4, r0
 800fff4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d061      	beq.n	80100be <_dtoa_r+0x916>
 800fffa:	4621      	mov	r1, r4
 800fffc:	9802      	ldr	r0, [sp, #8]
 800fffe:	f001 fa65 	bl	80114cc <__mcmp>
 8010002:	2800      	cmp	r0, #0
 8010004:	da5b      	bge.n	80100be <_dtoa_r+0x916>
 8010006:	2300      	movs	r3, #0
 8010008:	220a      	movs	r2, #10
 801000a:	9902      	ldr	r1, [sp, #8]
 801000c:	4648      	mov	r0, r9
 801000e:	f000 ffff 	bl	8011010 <__multadd>
 8010012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010014:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8010018:	9002      	str	r0, [sp, #8]
 801001a:	2b00      	cmp	r3, #0
 801001c:	f000 8178 	beq.w	8010310 <_dtoa_r+0xb68>
 8010020:	4629      	mov	r1, r5
 8010022:	2300      	movs	r3, #0
 8010024:	220a      	movs	r2, #10
 8010026:	4648      	mov	r0, r9
 8010028:	f000 fff2 	bl	8011010 <__multadd>
 801002c:	f1bb 0f00 	cmp.w	fp, #0
 8010030:	4605      	mov	r5, r0
 8010032:	dc6f      	bgt.n	8010114 <_dtoa_r+0x96c>
 8010034:	9b07      	ldr	r3, [sp, #28]
 8010036:	2b02      	cmp	r3, #2
 8010038:	dc49      	bgt.n	80100ce <_dtoa_r+0x926>
 801003a:	e06b      	b.n	8010114 <_dtoa_r+0x96c>
 801003c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801003e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010042:	e73c      	b.n	800febe <_dtoa_r+0x716>
 8010044:	3fe00000 	.word	0x3fe00000
 8010048:	40240000 	.word	0x40240000
 801004c:	9b03      	ldr	r3, [sp, #12]
 801004e:	1e5c      	subs	r4, r3, #1
 8010050:	9b08      	ldr	r3, [sp, #32]
 8010052:	42a3      	cmp	r3, r4
 8010054:	db09      	blt.n	801006a <_dtoa_r+0x8c2>
 8010056:	1b1c      	subs	r4, r3, r4
 8010058:	9b03      	ldr	r3, [sp, #12]
 801005a:	2b00      	cmp	r3, #0
 801005c:	f6bf af30 	bge.w	800fec0 <_dtoa_r+0x718>
 8010060:	9b00      	ldr	r3, [sp, #0]
 8010062:	9a03      	ldr	r2, [sp, #12]
 8010064:	1a9e      	subs	r6, r3, r2
 8010066:	2300      	movs	r3, #0
 8010068:	e72b      	b.n	800fec2 <_dtoa_r+0x71a>
 801006a:	9b08      	ldr	r3, [sp, #32]
 801006c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801006e:	1ae3      	subs	r3, r4, r3
 8010070:	9408      	str	r4, [sp, #32]
 8010072:	9e00      	ldr	r6, [sp, #0]
 8010074:	2400      	movs	r4, #0
 8010076:	441a      	add	r2, r3
 8010078:	9b03      	ldr	r3, [sp, #12]
 801007a:	920d      	str	r2, [sp, #52]	@ 0x34
 801007c:	e721      	b.n	800fec2 <_dtoa_r+0x71a>
 801007e:	9c08      	ldr	r4, [sp, #32]
 8010080:	9e00      	ldr	r6, [sp, #0]
 8010082:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010084:	e728      	b.n	800fed8 <_dtoa_r+0x730>
 8010086:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801008a:	e751      	b.n	800ff30 <_dtoa_r+0x788>
 801008c:	9a08      	ldr	r2, [sp, #32]
 801008e:	9902      	ldr	r1, [sp, #8]
 8010090:	e750      	b.n	800ff34 <_dtoa_r+0x78c>
 8010092:	f8cd 8008 	str.w	r8, [sp, #8]
 8010096:	e751      	b.n	800ff3c <_dtoa_r+0x794>
 8010098:	2300      	movs	r3, #0
 801009a:	e779      	b.n	800ff90 <_dtoa_r+0x7e8>
 801009c:	9b04      	ldr	r3, [sp, #16]
 801009e:	e777      	b.n	800ff90 <_dtoa_r+0x7e8>
 80100a0:	2300      	movs	r3, #0
 80100a2:	9308      	str	r3, [sp, #32]
 80100a4:	e779      	b.n	800ff9a <_dtoa_r+0x7f2>
 80100a6:	d093      	beq.n	800ffd0 <_dtoa_r+0x828>
 80100a8:	331c      	adds	r3, #28
 80100aa:	9a00      	ldr	r2, [sp, #0]
 80100ac:	441a      	add	r2, r3
 80100ae:	441e      	add	r6, r3
 80100b0:	9200      	str	r2, [sp, #0]
 80100b2:	9a06      	ldr	r2, [sp, #24]
 80100b4:	441a      	add	r2, r3
 80100b6:	9206      	str	r2, [sp, #24]
 80100b8:	e78a      	b.n	800ffd0 <_dtoa_r+0x828>
 80100ba:	4603      	mov	r3, r0
 80100bc:	e7f4      	b.n	80100a8 <_dtoa_r+0x900>
 80100be:	9b03      	ldr	r3, [sp, #12]
 80100c0:	46b8      	mov	r8, r7
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	dc20      	bgt.n	8010108 <_dtoa_r+0x960>
 80100c6:	469b      	mov	fp, r3
 80100c8:	9b07      	ldr	r3, [sp, #28]
 80100ca:	2b02      	cmp	r3, #2
 80100cc:	dd1e      	ble.n	801010c <_dtoa_r+0x964>
 80100ce:	f1bb 0f00 	cmp.w	fp, #0
 80100d2:	f47f adb1 	bne.w	800fc38 <_dtoa_r+0x490>
 80100d6:	4621      	mov	r1, r4
 80100d8:	465b      	mov	r3, fp
 80100da:	2205      	movs	r2, #5
 80100dc:	4648      	mov	r0, r9
 80100de:	f000 ff97 	bl	8011010 <__multadd>
 80100e2:	4601      	mov	r1, r0
 80100e4:	4604      	mov	r4, r0
 80100e6:	9802      	ldr	r0, [sp, #8]
 80100e8:	f001 f9f0 	bl	80114cc <__mcmp>
 80100ec:	2800      	cmp	r0, #0
 80100ee:	f77f ada3 	ble.w	800fc38 <_dtoa_r+0x490>
 80100f2:	4656      	mov	r6, sl
 80100f4:	2331      	movs	r3, #49	@ 0x31
 80100f6:	f108 0801 	add.w	r8, r8, #1
 80100fa:	f806 3b01 	strb.w	r3, [r6], #1
 80100fe:	e59f      	b.n	800fc40 <_dtoa_r+0x498>
 8010100:	46b8      	mov	r8, r7
 8010102:	9c03      	ldr	r4, [sp, #12]
 8010104:	4625      	mov	r5, r4
 8010106:	e7f4      	b.n	80100f2 <_dtoa_r+0x94a>
 8010108:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801010c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801010e:	2b00      	cmp	r3, #0
 8010110:	f000 8102 	beq.w	8010318 <_dtoa_r+0xb70>
 8010114:	2e00      	cmp	r6, #0
 8010116:	dd05      	ble.n	8010124 <_dtoa_r+0x97c>
 8010118:	4629      	mov	r1, r5
 801011a:	4632      	mov	r2, r6
 801011c:	4648      	mov	r0, r9
 801011e:	f001 f969 	bl	80113f4 <__lshift>
 8010122:	4605      	mov	r5, r0
 8010124:	9b08      	ldr	r3, [sp, #32]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d05c      	beq.n	80101e4 <_dtoa_r+0xa3c>
 801012a:	6869      	ldr	r1, [r5, #4]
 801012c:	4648      	mov	r0, r9
 801012e:	f000 ff0d 	bl	8010f4c <_Balloc>
 8010132:	4606      	mov	r6, r0
 8010134:	b928      	cbnz	r0, 8010142 <_dtoa_r+0x99a>
 8010136:	4b83      	ldr	r3, [pc, #524]	@ (8010344 <_dtoa_r+0xb9c>)
 8010138:	4602      	mov	r2, r0
 801013a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801013e:	f7ff bb4a 	b.w	800f7d6 <_dtoa_r+0x2e>
 8010142:	692a      	ldr	r2, [r5, #16]
 8010144:	f105 010c 	add.w	r1, r5, #12
 8010148:	300c      	adds	r0, #12
 801014a:	3202      	adds	r2, #2
 801014c:	0092      	lsls	r2, r2, #2
 801014e:	f7ff fa81 	bl	800f654 <memcpy>
 8010152:	2201      	movs	r2, #1
 8010154:	4631      	mov	r1, r6
 8010156:	4648      	mov	r0, r9
 8010158:	f001 f94c 	bl	80113f4 <__lshift>
 801015c:	f10a 0301 	add.w	r3, sl, #1
 8010160:	462f      	mov	r7, r5
 8010162:	4605      	mov	r5, r0
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	eb0a 030b 	add.w	r3, sl, fp
 801016a:	9308      	str	r3, [sp, #32]
 801016c:	9b04      	ldr	r3, [sp, #16]
 801016e:	f003 0301 	and.w	r3, r3, #1
 8010172:	9306      	str	r3, [sp, #24]
 8010174:	9b00      	ldr	r3, [sp, #0]
 8010176:	4621      	mov	r1, r4
 8010178:	9802      	ldr	r0, [sp, #8]
 801017a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801017e:	f7ff fa85 	bl	800f68c <quorem>
 8010182:	4603      	mov	r3, r0
 8010184:	4639      	mov	r1, r7
 8010186:	9003      	str	r0, [sp, #12]
 8010188:	3330      	adds	r3, #48	@ 0x30
 801018a:	9802      	ldr	r0, [sp, #8]
 801018c:	9309      	str	r3, [sp, #36]	@ 0x24
 801018e:	f001 f99d 	bl	80114cc <__mcmp>
 8010192:	462a      	mov	r2, r5
 8010194:	9004      	str	r0, [sp, #16]
 8010196:	4621      	mov	r1, r4
 8010198:	4648      	mov	r0, r9
 801019a:	f001 f9b3 	bl	8011504 <__mdiff>
 801019e:	68c2      	ldr	r2, [r0, #12]
 80101a0:	4606      	mov	r6, r0
 80101a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101a4:	bb02      	cbnz	r2, 80101e8 <_dtoa_r+0xa40>
 80101a6:	4601      	mov	r1, r0
 80101a8:	9802      	ldr	r0, [sp, #8]
 80101aa:	f001 f98f 	bl	80114cc <__mcmp>
 80101ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101b0:	4602      	mov	r2, r0
 80101b2:	4631      	mov	r1, r6
 80101b4:	4648      	mov	r0, r9
 80101b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80101b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80101ba:	f000 ff07 	bl	8010fcc <_Bfree>
 80101be:	9b07      	ldr	r3, [sp, #28]
 80101c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80101c2:	9e00      	ldr	r6, [sp, #0]
 80101c4:	ea42 0103 	orr.w	r1, r2, r3
 80101c8:	9b06      	ldr	r3, [sp, #24]
 80101ca:	4319      	orrs	r1, r3
 80101cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101ce:	d10d      	bne.n	80101ec <_dtoa_r+0xa44>
 80101d0:	2b39      	cmp	r3, #57	@ 0x39
 80101d2:	d027      	beq.n	8010224 <_dtoa_r+0xa7c>
 80101d4:	9a04      	ldr	r2, [sp, #16]
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	dd01      	ble.n	80101de <_dtoa_r+0xa36>
 80101da:	9b03      	ldr	r3, [sp, #12]
 80101dc:	3331      	adds	r3, #49	@ 0x31
 80101de:	f88b 3000 	strb.w	r3, [fp]
 80101e2:	e52e      	b.n	800fc42 <_dtoa_r+0x49a>
 80101e4:	4628      	mov	r0, r5
 80101e6:	e7b9      	b.n	801015c <_dtoa_r+0x9b4>
 80101e8:	2201      	movs	r2, #1
 80101ea:	e7e2      	b.n	80101b2 <_dtoa_r+0xa0a>
 80101ec:	9904      	ldr	r1, [sp, #16]
 80101ee:	2900      	cmp	r1, #0
 80101f0:	db04      	blt.n	80101fc <_dtoa_r+0xa54>
 80101f2:	9807      	ldr	r0, [sp, #28]
 80101f4:	4301      	orrs	r1, r0
 80101f6:	9806      	ldr	r0, [sp, #24]
 80101f8:	4301      	orrs	r1, r0
 80101fa:	d120      	bne.n	801023e <_dtoa_r+0xa96>
 80101fc:	2a00      	cmp	r2, #0
 80101fe:	ddee      	ble.n	80101de <_dtoa_r+0xa36>
 8010200:	2201      	movs	r2, #1
 8010202:	9902      	ldr	r1, [sp, #8]
 8010204:	4648      	mov	r0, r9
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	f001 f8f4 	bl	80113f4 <__lshift>
 801020c:	4621      	mov	r1, r4
 801020e:	9002      	str	r0, [sp, #8]
 8010210:	f001 f95c 	bl	80114cc <__mcmp>
 8010214:	2800      	cmp	r0, #0
 8010216:	9b00      	ldr	r3, [sp, #0]
 8010218:	dc02      	bgt.n	8010220 <_dtoa_r+0xa78>
 801021a:	d1e0      	bne.n	80101de <_dtoa_r+0xa36>
 801021c:	07da      	lsls	r2, r3, #31
 801021e:	d5de      	bpl.n	80101de <_dtoa_r+0xa36>
 8010220:	2b39      	cmp	r3, #57	@ 0x39
 8010222:	d1da      	bne.n	80101da <_dtoa_r+0xa32>
 8010224:	2339      	movs	r3, #57	@ 0x39
 8010226:	f88b 3000 	strb.w	r3, [fp]
 801022a:	4633      	mov	r3, r6
 801022c:	461e      	mov	r6, r3
 801022e:	3b01      	subs	r3, #1
 8010230:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010234:	2a39      	cmp	r2, #57	@ 0x39
 8010236:	d04f      	beq.n	80102d8 <_dtoa_r+0xb30>
 8010238:	3201      	adds	r2, #1
 801023a:	701a      	strb	r2, [r3, #0]
 801023c:	e501      	b.n	800fc42 <_dtoa_r+0x49a>
 801023e:	2a00      	cmp	r2, #0
 8010240:	dd03      	ble.n	801024a <_dtoa_r+0xaa2>
 8010242:	2b39      	cmp	r3, #57	@ 0x39
 8010244:	d0ee      	beq.n	8010224 <_dtoa_r+0xa7c>
 8010246:	3301      	adds	r3, #1
 8010248:	e7c9      	b.n	80101de <_dtoa_r+0xa36>
 801024a:	9a00      	ldr	r2, [sp, #0]
 801024c:	9908      	ldr	r1, [sp, #32]
 801024e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010252:	428a      	cmp	r2, r1
 8010254:	d029      	beq.n	80102aa <_dtoa_r+0xb02>
 8010256:	2300      	movs	r3, #0
 8010258:	220a      	movs	r2, #10
 801025a:	9902      	ldr	r1, [sp, #8]
 801025c:	4648      	mov	r0, r9
 801025e:	f000 fed7 	bl	8011010 <__multadd>
 8010262:	42af      	cmp	r7, r5
 8010264:	9002      	str	r0, [sp, #8]
 8010266:	f04f 0300 	mov.w	r3, #0
 801026a:	f04f 020a 	mov.w	r2, #10
 801026e:	4639      	mov	r1, r7
 8010270:	4648      	mov	r0, r9
 8010272:	d107      	bne.n	8010284 <_dtoa_r+0xadc>
 8010274:	f000 fecc 	bl	8011010 <__multadd>
 8010278:	4607      	mov	r7, r0
 801027a:	4605      	mov	r5, r0
 801027c:	9b00      	ldr	r3, [sp, #0]
 801027e:	3301      	adds	r3, #1
 8010280:	9300      	str	r3, [sp, #0]
 8010282:	e777      	b.n	8010174 <_dtoa_r+0x9cc>
 8010284:	f000 fec4 	bl	8011010 <__multadd>
 8010288:	4629      	mov	r1, r5
 801028a:	4607      	mov	r7, r0
 801028c:	2300      	movs	r3, #0
 801028e:	220a      	movs	r2, #10
 8010290:	4648      	mov	r0, r9
 8010292:	f000 febd 	bl	8011010 <__multadd>
 8010296:	4605      	mov	r5, r0
 8010298:	e7f0      	b.n	801027c <_dtoa_r+0xad4>
 801029a:	f1bb 0f00 	cmp.w	fp, #0
 801029e:	f04f 0700 	mov.w	r7, #0
 80102a2:	bfcc      	ite	gt
 80102a4:	465e      	movgt	r6, fp
 80102a6:	2601      	movle	r6, #1
 80102a8:	4456      	add	r6, sl
 80102aa:	2201      	movs	r2, #1
 80102ac:	9902      	ldr	r1, [sp, #8]
 80102ae:	4648      	mov	r0, r9
 80102b0:	9300      	str	r3, [sp, #0]
 80102b2:	f001 f89f 	bl	80113f4 <__lshift>
 80102b6:	4621      	mov	r1, r4
 80102b8:	9002      	str	r0, [sp, #8]
 80102ba:	f001 f907 	bl	80114cc <__mcmp>
 80102be:	2800      	cmp	r0, #0
 80102c0:	dcb3      	bgt.n	801022a <_dtoa_r+0xa82>
 80102c2:	d102      	bne.n	80102ca <_dtoa_r+0xb22>
 80102c4:	9b00      	ldr	r3, [sp, #0]
 80102c6:	07db      	lsls	r3, r3, #31
 80102c8:	d4af      	bmi.n	801022a <_dtoa_r+0xa82>
 80102ca:	4633      	mov	r3, r6
 80102cc:	461e      	mov	r6, r3
 80102ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102d2:	2a30      	cmp	r2, #48	@ 0x30
 80102d4:	d0fa      	beq.n	80102cc <_dtoa_r+0xb24>
 80102d6:	e4b4      	b.n	800fc42 <_dtoa_r+0x49a>
 80102d8:	459a      	cmp	sl, r3
 80102da:	d1a7      	bne.n	801022c <_dtoa_r+0xa84>
 80102dc:	2331      	movs	r3, #49	@ 0x31
 80102de:	f108 0801 	add.w	r8, r8, #1
 80102e2:	f88a 3000 	strb.w	r3, [sl]
 80102e6:	e4ac      	b.n	800fc42 <_dtoa_r+0x49a>
 80102e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80102ea:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010348 <_dtoa_r+0xba0>
 80102ee:	b11b      	cbz	r3, 80102f8 <_dtoa_r+0xb50>
 80102f0:	f10a 0308 	add.w	r3, sl, #8
 80102f4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80102f6:	6013      	str	r3, [r2, #0]
 80102f8:	4650      	mov	r0, sl
 80102fa:	b017      	add	sp, #92	@ 0x5c
 80102fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010300:	9b07      	ldr	r3, [sp, #28]
 8010302:	2b01      	cmp	r3, #1
 8010304:	f77f ae2d 	ble.w	800ff62 <_dtoa_r+0x7ba>
 8010308:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801030a:	9308      	str	r3, [sp, #32]
 801030c:	2001      	movs	r0, #1
 801030e:	e64c      	b.n	800ffaa <_dtoa_r+0x802>
 8010310:	f1bb 0f00 	cmp.w	fp, #0
 8010314:	f77f aed8 	ble.w	80100c8 <_dtoa_r+0x920>
 8010318:	4656      	mov	r6, sl
 801031a:	4621      	mov	r1, r4
 801031c:	9802      	ldr	r0, [sp, #8]
 801031e:	f7ff f9b5 	bl	800f68c <quorem>
 8010322:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010326:	f806 3b01 	strb.w	r3, [r6], #1
 801032a:	eba6 020a 	sub.w	r2, r6, sl
 801032e:	4593      	cmp	fp, r2
 8010330:	ddb3      	ble.n	801029a <_dtoa_r+0xaf2>
 8010332:	2300      	movs	r3, #0
 8010334:	220a      	movs	r2, #10
 8010336:	9902      	ldr	r1, [sp, #8]
 8010338:	4648      	mov	r0, r9
 801033a:	f000 fe69 	bl	8011010 <__multadd>
 801033e:	9002      	str	r0, [sp, #8]
 8010340:	e7eb      	b.n	801031a <_dtoa_r+0xb72>
 8010342:	bf00      	nop
 8010344:	08013cff 	.word	0x08013cff
 8010348:	08013c83 	.word	0x08013c83

0801034c <rshift>:
 801034c:	6903      	ldr	r3, [r0, #16]
 801034e:	114a      	asrs	r2, r1, #5
 8010350:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010358:	f100 0414 	add.w	r4, r0, #20
 801035c:	dd45      	ble.n	80103ea <rshift+0x9e>
 801035e:	f011 011f 	ands.w	r1, r1, #31
 8010362:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010366:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801036a:	d10c      	bne.n	8010386 <rshift+0x3a>
 801036c:	f100 0710 	add.w	r7, r0, #16
 8010370:	4629      	mov	r1, r5
 8010372:	42b1      	cmp	r1, r6
 8010374:	d334      	bcc.n	80103e0 <rshift+0x94>
 8010376:	1a9b      	subs	r3, r3, r2
 8010378:	1eea      	subs	r2, r5, #3
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	4296      	cmp	r6, r2
 801037e:	bf38      	it	cc
 8010380:	2300      	movcc	r3, #0
 8010382:	4423      	add	r3, r4
 8010384:	e015      	b.n	80103b2 <rshift+0x66>
 8010386:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801038a:	f1c1 0820 	rsb	r8, r1, #32
 801038e:	f105 0e04 	add.w	lr, r5, #4
 8010392:	46a1      	mov	r9, r4
 8010394:	40cf      	lsrs	r7, r1
 8010396:	4576      	cmp	r6, lr
 8010398:	46f4      	mov	ip, lr
 801039a:	d815      	bhi.n	80103c8 <rshift+0x7c>
 801039c:	1a9a      	subs	r2, r3, r2
 801039e:	3501      	adds	r5, #1
 80103a0:	0092      	lsls	r2, r2, #2
 80103a2:	3a04      	subs	r2, #4
 80103a4:	42ae      	cmp	r6, r5
 80103a6:	bf38      	it	cc
 80103a8:	2200      	movcc	r2, #0
 80103aa:	18a3      	adds	r3, r4, r2
 80103ac:	50a7      	str	r7, [r4, r2]
 80103ae:	b107      	cbz	r7, 80103b2 <rshift+0x66>
 80103b0:	3304      	adds	r3, #4
 80103b2:	1b1a      	subs	r2, r3, r4
 80103b4:	42a3      	cmp	r3, r4
 80103b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80103ba:	bf08      	it	eq
 80103bc:	2300      	moveq	r3, #0
 80103be:	6102      	str	r2, [r0, #16]
 80103c0:	bf08      	it	eq
 80103c2:	6143      	streq	r3, [r0, #20]
 80103c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103c8:	f8dc c000 	ldr.w	ip, [ip]
 80103cc:	fa0c fc08 	lsl.w	ip, ip, r8
 80103d0:	ea4c 0707 	orr.w	r7, ip, r7
 80103d4:	f849 7b04 	str.w	r7, [r9], #4
 80103d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80103dc:	40cf      	lsrs	r7, r1
 80103de:	e7da      	b.n	8010396 <rshift+0x4a>
 80103e0:	f851 cb04 	ldr.w	ip, [r1], #4
 80103e4:	f847 cf04 	str.w	ip, [r7, #4]!
 80103e8:	e7c3      	b.n	8010372 <rshift+0x26>
 80103ea:	4623      	mov	r3, r4
 80103ec:	e7e1      	b.n	80103b2 <rshift+0x66>

080103ee <__hexdig_fun>:
 80103ee:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80103f2:	2b09      	cmp	r3, #9
 80103f4:	d802      	bhi.n	80103fc <__hexdig_fun+0xe>
 80103f6:	3820      	subs	r0, #32
 80103f8:	b2c0      	uxtb	r0, r0
 80103fa:	4770      	bx	lr
 80103fc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010400:	2b05      	cmp	r3, #5
 8010402:	d801      	bhi.n	8010408 <__hexdig_fun+0x1a>
 8010404:	3847      	subs	r0, #71	@ 0x47
 8010406:	e7f7      	b.n	80103f8 <__hexdig_fun+0xa>
 8010408:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801040c:	2b05      	cmp	r3, #5
 801040e:	d801      	bhi.n	8010414 <__hexdig_fun+0x26>
 8010410:	3827      	subs	r0, #39	@ 0x27
 8010412:	e7f1      	b.n	80103f8 <__hexdig_fun+0xa>
 8010414:	2000      	movs	r0, #0
 8010416:	4770      	bx	lr

08010418 <__gethex>:
 8010418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801041c:	b085      	sub	sp, #20
 801041e:	468a      	mov	sl, r1
 8010420:	4690      	mov	r8, r2
 8010422:	9302      	str	r3, [sp, #8]
 8010424:	680b      	ldr	r3, [r1, #0]
 8010426:	9001      	str	r0, [sp, #4]
 8010428:	1c9c      	adds	r4, r3, #2
 801042a:	46a1      	mov	r9, r4
 801042c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010430:	2830      	cmp	r0, #48	@ 0x30
 8010432:	d0fa      	beq.n	801042a <__gethex+0x12>
 8010434:	eba9 0303 	sub.w	r3, r9, r3
 8010438:	f1a3 0b02 	sub.w	fp, r3, #2
 801043c:	f7ff ffd7 	bl	80103ee <__hexdig_fun>
 8010440:	4605      	mov	r5, r0
 8010442:	2800      	cmp	r0, #0
 8010444:	d166      	bne.n	8010514 <__gethex+0xfc>
 8010446:	2201      	movs	r2, #1
 8010448:	499e      	ldr	r1, [pc, #632]	@ (80106c4 <__gethex+0x2ac>)
 801044a:	4648      	mov	r0, r9
 801044c:	f7ff f8b0 	bl	800f5b0 <strncmp>
 8010450:	4607      	mov	r7, r0
 8010452:	2800      	cmp	r0, #0
 8010454:	d165      	bne.n	8010522 <__gethex+0x10a>
 8010456:	f899 0001 	ldrb.w	r0, [r9, #1]
 801045a:	4626      	mov	r6, r4
 801045c:	f7ff ffc7 	bl	80103ee <__hexdig_fun>
 8010460:	2800      	cmp	r0, #0
 8010462:	d060      	beq.n	8010526 <__gethex+0x10e>
 8010464:	4623      	mov	r3, r4
 8010466:	7818      	ldrb	r0, [r3, #0]
 8010468:	4699      	mov	r9, r3
 801046a:	3301      	adds	r3, #1
 801046c:	2830      	cmp	r0, #48	@ 0x30
 801046e:	d0fa      	beq.n	8010466 <__gethex+0x4e>
 8010470:	f7ff ffbd 	bl	80103ee <__hexdig_fun>
 8010474:	fab0 f580 	clz	r5, r0
 8010478:	f04f 0b01 	mov.w	fp, #1
 801047c:	096d      	lsrs	r5, r5, #5
 801047e:	464a      	mov	r2, r9
 8010480:	4616      	mov	r6, r2
 8010482:	3201      	adds	r2, #1
 8010484:	7830      	ldrb	r0, [r6, #0]
 8010486:	f7ff ffb2 	bl	80103ee <__hexdig_fun>
 801048a:	2800      	cmp	r0, #0
 801048c:	d1f8      	bne.n	8010480 <__gethex+0x68>
 801048e:	2201      	movs	r2, #1
 8010490:	498c      	ldr	r1, [pc, #560]	@ (80106c4 <__gethex+0x2ac>)
 8010492:	4630      	mov	r0, r6
 8010494:	f7ff f88c 	bl	800f5b0 <strncmp>
 8010498:	2800      	cmp	r0, #0
 801049a:	d13e      	bne.n	801051a <__gethex+0x102>
 801049c:	b944      	cbnz	r4, 80104b0 <__gethex+0x98>
 801049e:	1c74      	adds	r4, r6, #1
 80104a0:	4622      	mov	r2, r4
 80104a2:	4616      	mov	r6, r2
 80104a4:	3201      	adds	r2, #1
 80104a6:	7830      	ldrb	r0, [r6, #0]
 80104a8:	f7ff ffa1 	bl	80103ee <__hexdig_fun>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d1f8      	bne.n	80104a2 <__gethex+0x8a>
 80104b0:	1ba4      	subs	r4, r4, r6
 80104b2:	00a7      	lsls	r7, r4, #2
 80104b4:	7833      	ldrb	r3, [r6, #0]
 80104b6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80104ba:	2b50      	cmp	r3, #80	@ 0x50
 80104bc:	d13d      	bne.n	801053a <__gethex+0x122>
 80104be:	7873      	ldrb	r3, [r6, #1]
 80104c0:	2b2b      	cmp	r3, #43	@ 0x2b
 80104c2:	d032      	beq.n	801052a <__gethex+0x112>
 80104c4:	2b2d      	cmp	r3, #45	@ 0x2d
 80104c6:	d033      	beq.n	8010530 <__gethex+0x118>
 80104c8:	1c71      	adds	r1, r6, #1
 80104ca:	2400      	movs	r4, #0
 80104cc:	7808      	ldrb	r0, [r1, #0]
 80104ce:	f7ff ff8e 	bl	80103ee <__hexdig_fun>
 80104d2:	1e43      	subs	r3, r0, #1
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	2b18      	cmp	r3, #24
 80104d8:	d82f      	bhi.n	801053a <__gethex+0x122>
 80104da:	f1a0 0210 	sub.w	r2, r0, #16
 80104de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80104e2:	f7ff ff84 	bl	80103ee <__hexdig_fun>
 80104e6:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80104ea:	230a      	movs	r3, #10
 80104ec:	fa5f fc8c 	uxtb.w	ip, ip
 80104f0:	f1bc 0f18 	cmp.w	ip, #24
 80104f4:	d91e      	bls.n	8010534 <__gethex+0x11c>
 80104f6:	b104      	cbz	r4, 80104fa <__gethex+0xe2>
 80104f8:	4252      	negs	r2, r2
 80104fa:	4417      	add	r7, r2
 80104fc:	f8ca 1000 	str.w	r1, [sl]
 8010500:	b1ed      	cbz	r5, 801053e <__gethex+0x126>
 8010502:	f1bb 0f00 	cmp.w	fp, #0
 8010506:	bf0c      	ite	eq
 8010508:	2506      	moveq	r5, #6
 801050a:	2500      	movne	r5, #0
 801050c:	4628      	mov	r0, r5
 801050e:	b005      	add	sp, #20
 8010510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010514:	2500      	movs	r5, #0
 8010516:	462c      	mov	r4, r5
 8010518:	e7b1      	b.n	801047e <__gethex+0x66>
 801051a:	2c00      	cmp	r4, #0
 801051c:	d1c8      	bne.n	80104b0 <__gethex+0x98>
 801051e:	4627      	mov	r7, r4
 8010520:	e7c8      	b.n	80104b4 <__gethex+0x9c>
 8010522:	464e      	mov	r6, r9
 8010524:	462f      	mov	r7, r5
 8010526:	2501      	movs	r5, #1
 8010528:	e7c4      	b.n	80104b4 <__gethex+0x9c>
 801052a:	2400      	movs	r4, #0
 801052c:	1cb1      	adds	r1, r6, #2
 801052e:	e7cd      	b.n	80104cc <__gethex+0xb4>
 8010530:	2401      	movs	r4, #1
 8010532:	e7fb      	b.n	801052c <__gethex+0x114>
 8010534:	fb03 0002 	mla	r0, r3, r2, r0
 8010538:	e7cf      	b.n	80104da <__gethex+0xc2>
 801053a:	4631      	mov	r1, r6
 801053c:	e7de      	b.n	80104fc <__gethex+0xe4>
 801053e:	eba6 0309 	sub.w	r3, r6, r9
 8010542:	4629      	mov	r1, r5
 8010544:	3b01      	subs	r3, #1
 8010546:	2b07      	cmp	r3, #7
 8010548:	dc0a      	bgt.n	8010560 <__gethex+0x148>
 801054a:	9801      	ldr	r0, [sp, #4]
 801054c:	f000 fcfe 	bl	8010f4c <_Balloc>
 8010550:	4604      	mov	r4, r0
 8010552:	b940      	cbnz	r0, 8010566 <__gethex+0x14e>
 8010554:	4b5c      	ldr	r3, [pc, #368]	@ (80106c8 <__gethex+0x2b0>)
 8010556:	4602      	mov	r2, r0
 8010558:	21e4      	movs	r1, #228	@ 0xe4
 801055a:	485c      	ldr	r0, [pc, #368]	@ (80106cc <__gethex+0x2b4>)
 801055c:	f001 fa9a 	bl	8011a94 <__assert_func>
 8010560:	3101      	adds	r1, #1
 8010562:	105b      	asrs	r3, r3, #1
 8010564:	e7ef      	b.n	8010546 <__gethex+0x12e>
 8010566:	f100 0a14 	add.w	sl, r0, #20
 801056a:	2300      	movs	r3, #0
 801056c:	4655      	mov	r5, sl
 801056e:	469b      	mov	fp, r3
 8010570:	45b1      	cmp	r9, r6
 8010572:	d337      	bcc.n	80105e4 <__gethex+0x1cc>
 8010574:	f845 bb04 	str.w	fp, [r5], #4
 8010578:	eba5 050a 	sub.w	r5, r5, sl
 801057c:	4658      	mov	r0, fp
 801057e:	10ad      	asrs	r5, r5, #2
 8010580:	6125      	str	r5, [r4, #16]
 8010582:	016d      	lsls	r5, r5, #5
 8010584:	f000 fdd6 	bl	8011134 <__hi0bits>
 8010588:	f8d8 6000 	ldr.w	r6, [r8]
 801058c:	1a2d      	subs	r5, r5, r0
 801058e:	42b5      	cmp	r5, r6
 8010590:	dd54      	ble.n	801063c <__gethex+0x224>
 8010592:	1bad      	subs	r5, r5, r6
 8010594:	4620      	mov	r0, r4
 8010596:	4629      	mov	r1, r5
 8010598:	f001 f96d 	bl	8011876 <__any_on>
 801059c:	4681      	mov	r9, r0
 801059e:	b178      	cbz	r0, 80105c0 <__gethex+0x1a8>
 80105a0:	1e6b      	subs	r3, r5, #1
 80105a2:	f04f 0901 	mov.w	r9, #1
 80105a6:	1159      	asrs	r1, r3, #5
 80105a8:	f003 021f 	and.w	r2, r3, #31
 80105ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80105b0:	fa09 f202 	lsl.w	r2, r9, r2
 80105b4:	420a      	tst	r2, r1
 80105b6:	d003      	beq.n	80105c0 <__gethex+0x1a8>
 80105b8:	454b      	cmp	r3, r9
 80105ba:	dc36      	bgt.n	801062a <__gethex+0x212>
 80105bc:	f04f 0902 	mov.w	r9, #2
 80105c0:	442f      	add	r7, r5
 80105c2:	4629      	mov	r1, r5
 80105c4:	4620      	mov	r0, r4
 80105c6:	f7ff fec1 	bl	801034c <rshift>
 80105ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80105ce:	42bb      	cmp	r3, r7
 80105d0:	da42      	bge.n	8010658 <__gethex+0x240>
 80105d2:	4621      	mov	r1, r4
 80105d4:	9801      	ldr	r0, [sp, #4]
 80105d6:	f000 fcf9 	bl	8010fcc <_Bfree>
 80105da:	2300      	movs	r3, #0
 80105dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105de:	25a3      	movs	r5, #163	@ 0xa3
 80105e0:	6013      	str	r3, [r2, #0]
 80105e2:	e793      	b.n	801050c <__gethex+0xf4>
 80105e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80105e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80105ea:	d012      	beq.n	8010612 <__gethex+0x1fa>
 80105ec:	2b20      	cmp	r3, #32
 80105ee:	d104      	bne.n	80105fa <__gethex+0x1e2>
 80105f0:	f845 bb04 	str.w	fp, [r5], #4
 80105f4:	f04f 0b00 	mov.w	fp, #0
 80105f8:	465b      	mov	r3, fp
 80105fa:	7830      	ldrb	r0, [r6, #0]
 80105fc:	9303      	str	r3, [sp, #12]
 80105fe:	f7ff fef6 	bl	80103ee <__hexdig_fun>
 8010602:	9b03      	ldr	r3, [sp, #12]
 8010604:	f000 000f 	and.w	r0, r0, #15
 8010608:	4098      	lsls	r0, r3
 801060a:	3304      	adds	r3, #4
 801060c:	ea4b 0b00 	orr.w	fp, fp, r0
 8010610:	e7ae      	b.n	8010570 <__gethex+0x158>
 8010612:	45b1      	cmp	r9, r6
 8010614:	d8ea      	bhi.n	80105ec <__gethex+0x1d4>
 8010616:	2201      	movs	r2, #1
 8010618:	492a      	ldr	r1, [pc, #168]	@ (80106c4 <__gethex+0x2ac>)
 801061a:	4630      	mov	r0, r6
 801061c:	9303      	str	r3, [sp, #12]
 801061e:	f7fe ffc7 	bl	800f5b0 <strncmp>
 8010622:	9b03      	ldr	r3, [sp, #12]
 8010624:	2800      	cmp	r0, #0
 8010626:	d1e1      	bne.n	80105ec <__gethex+0x1d4>
 8010628:	e7a2      	b.n	8010570 <__gethex+0x158>
 801062a:	1ea9      	subs	r1, r5, #2
 801062c:	4620      	mov	r0, r4
 801062e:	f001 f922 	bl	8011876 <__any_on>
 8010632:	2800      	cmp	r0, #0
 8010634:	d0c2      	beq.n	80105bc <__gethex+0x1a4>
 8010636:	f04f 0903 	mov.w	r9, #3
 801063a:	e7c1      	b.n	80105c0 <__gethex+0x1a8>
 801063c:	da09      	bge.n	8010652 <__gethex+0x23a>
 801063e:	1b75      	subs	r5, r6, r5
 8010640:	4621      	mov	r1, r4
 8010642:	9801      	ldr	r0, [sp, #4]
 8010644:	462a      	mov	r2, r5
 8010646:	1b7f      	subs	r7, r7, r5
 8010648:	f000 fed4 	bl	80113f4 <__lshift>
 801064c:	4604      	mov	r4, r0
 801064e:	f100 0a14 	add.w	sl, r0, #20
 8010652:	f04f 0900 	mov.w	r9, #0
 8010656:	e7b8      	b.n	80105ca <__gethex+0x1b2>
 8010658:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801065c:	42bd      	cmp	r5, r7
 801065e:	dd6f      	ble.n	8010740 <__gethex+0x328>
 8010660:	1bed      	subs	r5, r5, r7
 8010662:	42ae      	cmp	r6, r5
 8010664:	dc34      	bgt.n	80106d0 <__gethex+0x2b8>
 8010666:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801066a:	2b02      	cmp	r3, #2
 801066c:	d022      	beq.n	80106b4 <__gethex+0x29c>
 801066e:	2b03      	cmp	r3, #3
 8010670:	d024      	beq.n	80106bc <__gethex+0x2a4>
 8010672:	2b01      	cmp	r3, #1
 8010674:	d115      	bne.n	80106a2 <__gethex+0x28a>
 8010676:	42ae      	cmp	r6, r5
 8010678:	d113      	bne.n	80106a2 <__gethex+0x28a>
 801067a:	2e01      	cmp	r6, #1
 801067c:	d10b      	bne.n	8010696 <__gethex+0x27e>
 801067e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010682:	2562      	movs	r5, #98	@ 0x62
 8010684:	9a02      	ldr	r2, [sp, #8]
 8010686:	6013      	str	r3, [r2, #0]
 8010688:	2301      	movs	r3, #1
 801068a:	6123      	str	r3, [r4, #16]
 801068c:	f8ca 3000 	str.w	r3, [sl]
 8010690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010692:	601c      	str	r4, [r3, #0]
 8010694:	e73a      	b.n	801050c <__gethex+0xf4>
 8010696:	1e71      	subs	r1, r6, #1
 8010698:	4620      	mov	r0, r4
 801069a:	f001 f8ec 	bl	8011876 <__any_on>
 801069e:	2800      	cmp	r0, #0
 80106a0:	d1ed      	bne.n	801067e <__gethex+0x266>
 80106a2:	4621      	mov	r1, r4
 80106a4:	9801      	ldr	r0, [sp, #4]
 80106a6:	f000 fc91 	bl	8010fcc <_Bfree>
 80106aa:	2300      	movs	r3, #0
 80106ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106ae:	2550      	movs	r5, #80	@ 0x50
 80106b0:	6013      	str	r3, [r2, #0]
 80106b2:	e72b      	b.n	801050c <__gethex+0xf4>
 80106b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d1f3      	bne.n	80106a2 <__gethex+0x28a>
 80106ba:	e7e0      	b.n	801067e <__gethex+0x266>
 80106bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1dd      	bne.n	801067e <__gethex+0x266>
 80106c2:	e7ee      	b.n	80106a2 <__gethex+0x28a>
 80106c4:	08013c79 	.word	0x08013c79
 80106c8:	08013cff 	.word	0x08013cff
 80106cc:	08013d10 	.word	0x08013d10
 80106d0:	1e6f      	subs	r7, r5, #1
 80106d2:	f1b9 0f00 	cmp.w	r9, #0
 80106d6:	d130      	bne.n	801073a <__gethex+0x322>
 80106d8:	b127      	cbz	r7, 80106e4 <__gethex+0x2cc>
 80106da:	4639      	mov	r1, r7
 80106dc:	4620      	mov	r0, r4
 80106de:	f001 f8ca 	bl	8011876 <__any_on>
 80106e2:	4681      	mov	r9, r0
 80106e4:	117a      	asrs	r2, r7, #5
 80106e6:	2301      	movs	r3, #1
 80106e8:	f007 071f 	and.w	r7, r7, #31
 80106ec:	4629      	mov	r1, r5
 80106ee:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80106f2:	4620      	mov	r0, r4
 80106f4:	40bb      	lsls	r3, r7
 80106f6:	1b76      	subs	r6, r6, r5
 80106f8:	2502      	movs	r5, #2
 80106fa:	4213      	tst	r3, r2
 80106fc:	bf18      	it	ne
 80106fe:	f049 0902 	orrne.w	r9, r9, #2
 8010702:	f7ff fe23 	bl	801034c <rshift>
 8010706:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801070a:	f1b9 0f00 	cmp.w	r9, #0
 801070e:	d047      	beq.n	80107a0 <__gethex+0x388>
 8010710:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010714:	2b02      	cmp	r3, #2
 8010716:	d015      	beq.n	8010744 <__gethex+0x32c>
 8010718:	2b03      	cmp	r3, #3
 801071a:	d017      	beq.n	801074c <__gethex+0x334>
 801071c:	2b01      	cmp	r3, #1
 801071e:	d109      	bne.n	8010734 <__gethex+0x31c>
 8010720:	f019 0f02 	tst.w	r9, #2
 8010724:	d006      	beq.n	8010734 <__gethex+0x31c>
 8010726:	f8da 3000 	ldr.w	r3, [sl]
 801072a:	ea49 0903 	orr.w	r9, r9, r3
 801072e:	f019 0f01 	tst.w	r9, #1
 8010732:	d10e      	bne.n	8010752 <__gethex+0x33a>
 8010734:	f045 0510 	orr.w	r5, r5, #16
 8010738:	e032      	b.n	80107a0 <__gethex+0x388>
 801073a:	f04f 0901 	mov.w	r9, #1
 801073e:	e7d1      	b.n	80106e4 <__gethex+0x2cc>
 8010740:	2501      	movs	r5, #1
 8010742:	e7e2      	b.n	801070a <__gethex+0x2f2>
 8010744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010746:	f1c3 0301 	rsb	r3, r3, #1
 801074a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801074c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801074e:	2b00      	cmp	r3, #0
 8010750:	d0f0      	beq.n	8010734 <__gethex+0x31c>
 8010752:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010756:	f104 0314 	add.w	r3, r4, #20
 801075a:	f04f 0c00 	mov.w	ip, #0
 801075e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010762:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010766:	4618      	mov	r0, r3
 8010768:	f853 2b04 	ldr.w	r2, [r3], #4
 801076c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010770:	d01b      	beq.n	80107aa <__gethex+0x392>
 8010772:	3201      	adds	r2, #1
 8010774:	6002      	str	r2, [r0, #0]
 8010776:	2d02      	cmp	r5, #2
 8010778:	f104 0314 	add.w	r3, r4, #20
 801077c:	d13c      	bne.n	80107f8 <__gethex+0x3e0>
 801077e:	f8d8 2000 	ldr.w	r2, [r8]
 8010782:	3a01      	subs	r2, #1
 8010784:	42b2      	cmp	r2, r6
 8010786:	d109      	bne.n	801079c <__gethex+0x384>
 8010788:	1171      	asrs	r1, r6, #5
 801078a:	2201      	movs	r2, #1
 801078c:	f006 061f 	and.w	r6, r6, #31
 8010790:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010794:	fa02 f606 	lsl.w	r6, r2, r6
 8010798:	421e      	tst	r6, r3
 801079a:	d13a      	bne.n	8010812 <__gethex+0x3fa>
 801079c:	f045 0520 	orr.w	r5, r5, #32
 80107a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107a2:	601c      	str	r4, [r3, #0]
 80107a4:	9b02      	ldr	r3, [sp, #8]
 80107a6:	601f      	str	r7, [r3, #0]
 80107a8:	e6b0      	b.n	801050c <__gethex+0xf4>
 80107aa:	4299      	cmp	r1, r3
 80107ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80107b0:	d8d9      	bhi.n	8010766 <__gethex+0x34e>
 80107b2:	68a3      	ldr	r3, [r4, #8]
 80107b4:	459b      	cmp	fp, r3
 80107b6:	db17      	blt.n	80107e8 <__gethex+0x3d0>
 80107b8:	6861      	ldr	r1, [r4, #4]
 80107ba:	9801      	ldr	r0, [sp, #4]
 80107bc:	3101      	adds	r1, #1
 80107be:	f000 fbc5 	bl	8010f4c <_Balloc>
 80107c2:	4681      	mov	r9, r0
 80107c4:	b918      	cbnz	r0, 80107ce <__gethex+0x3b6>
 80107c6:	4b1a      	ldr	r3, [pc, #104]	@ (8010830 <__gethex+0x418>)
 80107c8:	4602      	mov	r2, r0
 80107ca:	2184      	movs	r1, #132	@ 0x84
 80107cc:	e6c5      	b.n	801055a <__gethex+0x142>
 80107ce:	6922      	ldr	r2, [r4, #16]
 80107d0:	f104 010c 	add.w	r1, r4, #12
 80107d4:	300c      	adds	r0, #12
 80107d6:	3202      	adds	r2, #2
 80107d8:	0092      	lsls	r2, r2, #2
 80107da:	f7fe ff3b 	bl	800f654 <memcpy>
 80107de:	4621      	mov	r1, r4
 80107e0:	464c      	mov	r4, r9
 80107e2:	9801      	ldr	r0, [sp, #4]
 80107e4:	f000 fbf2 	bl	8010fcc <_Bfree>
 80107e8:	6923      	ldr	r3, [r4, #16]
 80107ea:	1c5a      	adds	r2, r3, #1
 80107ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80107f0:	6122      	str	r2, [r4, #16]
 80107f2:	2201      	movs	r2, #1
 80107f4:	615a      	str	r2, [r3, #20]
 80107f6:	e7be      	b.n	8010776 <__gethex+0x35e>
 80107f8:	6922      	ldr	r2, [r4, #16]
 80107fa:	455a      	cmp	r2, fp
 80107fc:	dd0b      	ble.n	8010816 <__gethex+0x3fe>
 80107fe:	2101      	movs	r1, #1
 8010800:	4620      	mov	r0, r4
 8010802:	f7ff fda3 	bl	801034c <rshift>
 8010806:	3701      	adds	r7, #1
 8010808:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801080c:	42bb      	cmp	r3, r7
 801080e:	f6ff aee0 	blt.w	80105d2 <__gethex+0x1ba>
 8010812:	2501      	movs	r5, #1
 8010814:	e7c2      	b.n	801079c <__gethex+0x384>
 8010816:	f016 061f 	ands.w	r6, r6, #31
 801081a:	d0fa      	beq.n	8010812 <__gethex+0x3fa>
 801081c:	4453      	add	r3, sl
 801081e:	f1c6 0620 	rsb	r6, r6, #32
 8010822:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010826:	f000 fc85 	bl	8011134 <__hi0bits>
 801082a:	42b0      	cmp	r0, r6
 801082c:	dbe7      	blt.n	80107fe <__gethex+0x3e6>
 801082e:	e7f0      	b.n	8010812 <__gethex+0x3fa>
 8010830:	08013cff 	.word	0x08013cff

08010834 <L_shift>:
 8010834:	f1c2 0208 	rsb	r2, r2, #8
 8010838:	0092      	lsls	r2, r2, #2
 801083a:	b570      	push	{r4, r5, r6, lr}
 801083c:	f1c2 0620 	rsb	r6, r2, #32
 8010840:	6843      	ldr	r3, [r0, #4]
 8010842:	6804      	ldr	r4, [r0, #0]
 8010844:	fa03 f506 	lsl.w	r5, r3, r6
 8010848:	40d3      	lsrs	r3, r2
 801084a:	432c      	orrs	r4, r5
 801084c:	6004      	str	r4, [r0, #0]
 801084e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010852:	4288      	cmp	r0, r1
 8010854:	d3f4      	bcc.n	8010840 <L_shift+0xc>
 8010856:	bd70      	pop	{r4, r5, r6, pc}

08010858 <__match>:
 8010858:	6803      	ldr	r3, [r0, #0]
 801085a:	3301      	adds	r3, #1
 801085c:	b530      	push	{r4, r5, lr}
 801085e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010862:	b914      	cbnz	r4, 801086a <__match+0x12>
 8010864:	6003      	str	r3, [r0, #0]
 8010866:	2001      	movs	r0, #1
 8010868:	bd30      	pop	{r4, r5, pc}
 801086a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801086e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010872:	2d19      	cmp	r5, #25
 8010874:	bf98      	it	ls
 8010876:	3220      	addls	r2, #32
 8010878:	42a2      	cmp	r2, r4
 801087a:	d0f0      	beq.n	801085e <__match+0x6>
 801087c:	2000      	movs	r0, #0
 801087e:	e7f3      	b.n	8010868 <__match+0x10>

08010880 <__hexnan>:
 8010880:	680b      	ldr	r3, [r1, #0]
 8010882:	6801      	ldr	r1, [r0, #0]
 8010884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010888:	115e      	asrs	r6, r3, #5
 801088a:	f013 031f 	ands.w	r3, r3, #31
 801088e:	f04f 0500 	mov.w	r5, #0
 8010892:	b087      	sub	sp, #28
 8010894:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010898:	4682      	mov	sl, r0
 801089a:	4690      	mov	r8, r2
 801089c:	46ab      	mov	fp, r5
 801089e:	bf18      	it	ne
 80108a0:	3604      	addne	r6, #4
 80108a2:	9301      	str	r3, [sp, #4]
 80108a4:	9502      	str	r5, [sp, #8]
 80108a6:	1f37      	subs	r7, r6, #4
 80108a8:	f846 5c04 	str.w	r5, [r6, #-4]
 80108ac:	46b9      	mov	r9, r7
 80108ae:	463c      	mov	r4, r7
 80108b0:	1c4b      	adds	r3, r1, #1
 80108b2:	784a      	ldrb	r2, [r1, #1]
 80108b4:	9303      	str	r3, [sp, #12]
 80108b6:	b342      	cbz	r2, 801090a <__hexnan+0x8a>
 80108b8:	4610      	mov	r0, r2
 80108ba:	9105      	str	r1, [sp, #20]
 80108bc:	9204      	str	r2, [sp, #16]
 80108be:	f7ff fd96 	bl	80103ee <__hexdig_fun>
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d151      	bne.n	801096a <__hexnan+0xea>
 80108c6:	9a04      	ldr	r2, [sp, #16]
 80108c8:	9905      	ldr	r1, [sp, #20]
 80108ca:	2a20      	cmp	r2, #32
 80108cc:	d818      	bhi.n	8010900 <__hexnan+0x80>
 80108ce:	9b02      	ldr	r3, [sp, #8]
 80108d0:	459b      	cmp	fp, r3
 80108d2:	dd13      	ble.n	80108fc <__hexnan+0x7c>
 80108d4:	454c      	cmp	r4, r9
 80108d6:	d206      	bcs.n	80108e6 <__hexnan+0x66>
 80108d8:	2d07      	cmp	r5, #7
 80108da:	dc04      	bgt.n	80108e6 <__hexnan+0x66>
 80108dc:	462a      	mov	r2, r5
 80108de:	4649      	mov	r1, r9
 80108e0:	4620      	mov	r0, r4
 80108e2:	f7ff ffa7 	bl	8010834 <L_shift>
 80108e6:	4544      	cmp	r4, r8
 80108e8:	d951      	bls.n	801098e <__hexnan+0x10e>
 80108ea:	2300      	movs	r3, #0
 80108ec:	f1a4 0904 	sub.w	r9, r4, #4
 80108f0:	f8cd b008 	str.w	fp, [sp, #8]
 80108f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80108f8:	461d      	mov	r5, r3
 80108fa:	464c      	mov	r4, r9
 80108fc:	9903      	ldr	r1, [sp, #12]
 80108fe:	e7d7      	b.n	80108b0 <__hexnan+0x30>
 8010900:	2a29      	cmp	r2, #41	@ 0x29
 8010902:	d156      	bne.n	80109b2 <__hexnan+0x132>
 8010904:	3102      	adds	r1, #2
 8010906:	f8ca 1000 	str.w	r1, [sl]
 801090a:	f1bb 0f00 	cmp.w	fp, #0
 801090e:	d050      	beq.n	80109b2 <__hexnan+0x132>
 8010910:	454c      	cmp	r4, r9
 8010912:	d206      	bcs.n	8010922 <__hexnan+0xa2>
 8010914:	2d07      	cmp	r5, #7
 8010916:	dc04      	bgt.n	8010922 <__hexnan+0xa2>
 8010918:	462a      	mov	r2, r5
 801091a:	4649      	mov	r1, r9
 801091c:	4620      	mov	r0, r4
 801091e:	f7ff ff89 	bl	8010834 <L_shift>
 8010922:	4544      	cmp	r4, r8
 8010924:	d935      	bls.n	8010992 <__hexnan+0x112>
 8010926:	f1a8 0204 	sub.w	r2, r8, #4
 801092a:	4623      	mov	r3, r4
 801092c:	f853 1b04 	ldr.w	r1, [r3], #4
 8010930:	429f      	cmp	r7, r3
 8010932:	f842 1f04 	str.w	r1, [r2, #4]!
 8010936:	d2f9      	bcs.n	801092c <__hexnan+0xac>
 8010938:	1b3b      	subs	r3, r7, r4
 801093a:	3e03      	subs	r6, #3
 801093c:	3401      	adds	r4, #1
 801093e:	2200      	movs	r2, #0
 8010940:	f023 0303 	bic.w	r3, r3, #3
 8010944:	3304      	adds	r3, #4
 8010946:	42b4      	cmp	r4, r6
 8010948:	bf88      	it	hi
 801094a:	2304      	movhi	r3, #4
 801094c:	4443      	add	r3, r8
 801094e:	f843 2b04 	str.w	r2, [r3], #4
 8010952:	429f      	cmp	r7, r3
 8010954:	d2fb      	bcs.n	801094e <__hexnan+0xce>
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	b91b      	cbnz	r3, 8010962 <__hexnan+0xe2>
 801095a:	4547      	cmp	r7, r8
 801095c:	d127      	bne.n	80109ae <__hexnan+0x12e>
 801095e:	2301      	movs	r3, #1
 8010960:	603b      	str	r3, [r7, #0]
 8010962:	2005      	movs	r0, #5
 8010964:	b007      	add	sp, #28
 8010966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801096a:	3501      	adds	r5, #1
 801096c:	f10b 0b01 	add.w	fp, fp, #1
 8010970:	2d08      	cmp	r5, #8
 8010972:	dd05      	ble.n	8010980 <__hexnan+0x100>
 8010974:	4544      	cmp	r4, r8
 8010976:	d9c1      	bls.n	80108fc <__hexnan+0x7c>
 8010978:	2300      	movs	r3, #0
 801097a:	3c04      	subs	r4, #4
 801097c:	2501      	movs	r5, #1
 801097e:	6023      	str	r3, [r4, #0]
 8010980:	6822      	ldr	r2, [r4, #0]
 8010982:	f000 000f 	and.w	r0, r0, #15
 8010986:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801098a:	6020      	str	r0, [r4, #0]
 801098c:	e7b6      	b.n	80108fc <__hexnan+0x7c>
 801098e:	2508      	movs	r5, #8
 8010990:	e7b4      	b.n	80108fc <__hexnan+0x7c>
 8010992:	9b01      	ldr	r3, [sp, #4]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d0de      	beq.n	8010956 <__hexnan+0xd6>
 8010998:	f1c3 0320 	rsb	r3, r3, #32
 801099c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80109a0:	40da      	lsrs	r2, r3
 80109a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80109a6:	4013      	ands	r3, r2
 80109a8:	f846 3c04 	str.w	r3, [r6, #-4]
 80109ac:	e7d3      	b.n	8010956 <__hexnan+0xd6>
 80109ae:	3f04      	subs	r7, #4
 80109b0:	e7d1      	b.n	8010956 <__hexnan+0xd6>
 80109b2:	2004      	movs	r0, #4
 80109b4:	e7d6      	b.n	8010964 <__hexnan+0xe4>

080109b6 <__ssputs_r>:
 80109b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109ba:	461f      	mov	r7, r3
 80109bc:	688e      	ldr	r6, [r1, #8]
 80109be:	4682      	mov	sl, r0
 80109c0:	460c      	mov	r4, r1
 80109c2:	42be      	cmp	r6, r7
 80109c4:	4690      	mov	r8, r2
 80109c6:	680b      	ldr	r3, [r1, #0]
 80109c8:	d82d      	bhi.n	8010a26 <__ssputs_r+0x70>
 80109ca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109ce:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80109d2:	d026      	beq.n	8010a22 <__ssputs_r+0x6c>
 80109d4:	6965      	ldr	r5, [r4, #20]
 80109d6:	6909      	ldr	r1, [r1, #16]
 80109d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109dc:	eba3 0901 	sub.w	r9, r3, r1
 80109e0:	1c7b      	adds	r3, r7, #1
 80109e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80109e6:	444b      	add	r3, r9
 80109e8:	106d      	asrs	r5, r5, #1
 80109ea:	429d      	cmp	r5, r3
 80109ec:	bf38      	it	cc
 80109ee:	461d      	movcc	r5, r3
 80109f0:	0553      	lsls	r3, r2, #21
 80109f2:	d527      	bpl.n	8010a44 <__ssputs_r+0x8e>
 80109f4:	4629      	mov	r1, r5
 80109f6:	f000 f95f 	bl	8010cb8 <_malloc_r>
 80109fa:	4606      	mov	r6, r0
 80109fc:	b360      	cbz	r0, 8010a58 <__ssputs_r+0xa2>
 80109fe:	464a      	mov	r2, r9
 8010a00:	6921      	ldr	r1, [r4, #16]
 8010a02:	f7fe fe27 	bl	800f654 <memcpy>
 8010a06:	89a3      	ldrh	r3, [r4, #12]
 8010a08:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a10:	81a3      	strh	r3, [r4, #12]
 8010a12:	6126      	str	r6, [r4, #16]
 8010a14:	444e      	add	r6, r9
 8010a16:	6165      	str	r5, [r4, #20]
 8010a18:	eba5 0509 	sub.w	r5, r5, r9
 8010a1c:	6026      	str	r6, [r4, #0]
 8010a1e:	463e      	mov	r6, r7
 8010a20:	60a5      	str	r5, [r4, #8]
 8010a22:	42be      	cmp	r6, r7
 8010a24:	d900      	bls.n	8010a28 <__ssputs_r+0x72>
 8010a26:	463e      	mov	r6, r7
 8010a28:	4632      	mov	r2, r6
 8010a2a:	4641      	mov	r1, r8
 8010a2c:	6820      	ldr	r0, [r4, #0]
 8010a2e:	f000 ffc1 	bl	80119b4 <memmove>
 8010a32:	68a3      	ldr	r3, [r4, #8]
 8010a34:	2000      	movs	r0, #0
 8010a36:	1b9b      	subs	r3, r3, r6
 8010a38:	60a3      	str	r3, [r4, #8]
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	4433      	add	r3, r6
 8010a3e:	6023      	str	r3, [r4, #0]
 8010a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a44:	462a      	mov	r2, r5
 8010a46:	f000 ff7a 	bl	801193e <_realloc_r>
 8010a4a:	4606      	mov	r6, r0
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	d1e0      	bne.n	8010a12 <__ssputs_r+0x5c>
 8010a50:	6921      	ldr	r1, [r4, #16]
 8010a52:	4650      	mov	r0, sl
 8010a54:	f001 f850 	bl	8011af8 <_free_r>
 8010a58:	230c      	movs	r3, #12
 8010a5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a5e:	f8ca 3000 	str.w	r3, [sl]
 8010a62:	89a3      	ldrh	r3, [r4, #12]
 8010a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a68:	81a3      	strh	r3, [r4, #12]
 8010a6a:	e7e9      	b.n	8010a40 <__ssputs_r+0x8a>

08010a6c <_svfiprintf_r>:
 8010a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a70:	4698      	mov	r8, r3
 8010a72:	898b      	ldrh	r3, [r1, #12]
 8010a74:	b09d      	sub	sp, #116	@ 0x74
 8010a76:	4607      	mov	r7, r0
 8010a78:	061b      	lsls	r3, r3, #24
 8010a7a:	460d      	mov	r5, r1
 8010a7c:	4614      	mov	r4, r2
 8010a7e:	d510      	bpl.n	8010aa2 <_svfiprintf_r+0x36>
 8010a80:	690b      	ldr	r3, [r1, #16]
 8010a82:	b973      	cbnz	r3, 8010aa2 <_svfiprintf_r+0x36>
 8010a84:	2140      	movs	r1, #64	@ 0x40
 8010a86:	f000 f917 	bl	8010cb8 <_malloc_r>
 8010a8a:	6028      	str	r0, [r5, #0]
 8010a8c:	6128      	str	r0, [r5, #16]
 8010a8e:	b930      	cbnz	r0, 8010a9e <_svfiprintf_r+0x32>
 8010a90:	230c      	movs	r3, #12
 8010a92:	603b      	str	r3, [r7, #0]
 8010a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a98:	b01d      	add	sp, #116	@ 0x74
 8010a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9e:	2340      	movs	r3, #64	@ 0x40
 8010aa0:	616b      	str	r3, [r5, #20]
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aa8:	f04f 0901 	mov.w	r9, #1
 8010aac:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010c50 <_svfiprintf_r+0x1e4>
 8010ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ab2:	2320      	movs	r3, #32
 8010ab4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ab8:	2330      	movs	r3, #48	@ 0x30
 8010aba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010abe:	4623      	mov	r3, r4
 8010ac0:	469a      	mov	sl, r3
 8010ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ac6:	b10a      	cbz	r2, 8010acc <_svfiprintf_r+0x60>
 8010ac8:	2a25      	cmp	r2, #37	@ 0x25
 8010aca:	d1f9      	bne.n	8010ac0 <_svfiprintf_r+0x54>
 8010acc:	ebba 0b04 	subs.w	fp, sl, r4
 8010ad0:	d00b      	beq.n	8010aea <_svfiprintf_r+0x7e>
 8010ad2:	465b      	mov	r3, fp
 8010ad4:	4622      	mov	r2, r4
 8010ad6:	4629      	mov	r1, r5
 8010ad8:	4638      	mov	r0, r7
 8010ada:	f7ff ff6c 	bl	80109b6 <__ssputs_r>
 8010ade:	3001      	adds	r0, #1
 8010ae0:	f000 80a7 	beq.w	8010c32 <_svfiprintf_r+0x1c6>
 8010ae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ae6:	445a      	add	r2, fp
 8010ae8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010aea:	f89a 3000 	ldrb.w	r3, [sl]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f000 809f 	beq.w	8010c32 <_svfiprintf_r+0x1c6>
 8010af4:	2300      	movs	r3, #0
 8010af6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010afa:	f10a 0a01 	add.w	sl, sl, #1
 8010afe:	9304      	str	r3, [sp, #16]
 8010b00:	9307      	str	r3, [sp, #28]
 8010b02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b06:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b0c:	4654      	mov	r4, sl
 8010b0e:	2205      	movs	r2, #5
 8010b10:	484f      	ldr	r0, [pc, #316]	@ (8010c50 <_svfiprintf_r+0x1e4>)
 8010b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b16:	f7fe fd8f 	bl	800f638 <memchr>
 8010b1a:	9a04      	ldr	r2, [sp, #16]
 8010b1c:	b9d8      	cbnz	r0, 8010b56 <_svfiprintf_r+0xea>
 8010b1e:	06d0      	lsls	r0, r2, #27
 8010b20:	bf44      	itt	mi
 8010b22:	2320      	movmi	r3, #32
 8010b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b28:	0711      	lsls	r1, r2, #28
 8010b2a:	bf44      	itt	mi
 8010b2c:	232b      	movmi	r3, #43	@ 0x2b
 8010b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b32:	f89a 3000 	ldrb.w	r3, [sl]
 8010b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b38:	d015      	beq.n	8010b66 <_svfiprintf_r+0xfa>
 8010b3a:	9a07      	ldr	r2, [sp, #28]
 8010b3c:	4654      	mov	r4, sl
 8010b3e:	2000      	movs	r0, #0
 8010b40:	f04f 0c0a 	mov.w	ip, #10
 8010b44:	4621      	mov	r1, r4
 8010b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b4a:	3b30      	subs	r3, #48	@ 0x30
 8010b4c:	2b09      	cmp	r3, #9
 8010b4e:	d94b      	bls.n	8010be8 <_svfiprintf_r+0x17c>
 8010b50:	b1b0      	cbz	r0, 8010b80 <_svfiprintf_r+0x114>
 8010b52:	9207      	str	r2, [sp, #28]
 8010b54:	e014      	b.n	8010b80 <_svfiprintf_r+0x114>
 8010b56:	eba0 0308 	sub.w	r3, r0, r8
 8010b5a:	46a2      	mov	sl, r4
 8010b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8010b60:	4313      	orrs	r3, r2
 8010b62:	9304      	str	r3, [sp, #16]
 8010b64:	e7d2      	b.n	8010b0c <_svfiprintf_r+0xa0>
 8010b66:	9b03      	ldr	r3, [sp, #12]
 8010b68:	1d19      	adds	r1, r3, #4
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	9103      	str	r1, [sp, #12]
 8010b70:	bfbb      	ittet	lt
 8010b72:	425b      	neglt	r3, r3
 8010b74:	f042 0202 	orrlt.w	r2, r2, #2
 8010b78:	9307      	strge	r3, [sp, #28]
 8010b7a:	9307      	strlt	r3, [sp, #28]
 8010b7c:	bfb8      	it	lt
 8010b7e:	9204      	strlt	r2, [sp, #16]
 8010b80:	7823      	ldrb	r3, [r4, #0]
 8010b82:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b84:	d10a      	bne.n	8010b9c <_svfiprintf_r+0x130>
 8010b86:	7863      	ldrb	r3, [r4, #1]
 8010b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b8a:	d132      	bne.n	8010bf2 <_svfiprintf_r+0x186>
 8010b8c:	9b03      	ldr	r3, [sp, #12]
 8010b8e:	3402      	adds	r4, #2
 8010b90:	1d1a      	adds	r2, r3, #4
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b98:	9203      	str	r2, [sp, #12]
 8010b9a:	9305      	str	r3, [sp, #20]
 8010b9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010c60 <_svfiprintf_r+0x1f4>
 8010ba0:	2203      	movs	r2, #3
 8010ba2:	7821      	ldrb	r1, [r4, #0]
 8010ba4:	4650      	mov	r0, sl
 8010ba6:	f7fe fd47 	bl	800f638 <memchr>
 8010baa:	b138      	cbz	r0, 8010bbc <_svfiprintf_r+0x150>
 8010bac:	eba0 000a 	sub.w	r0, r0, sl
 8010bb0:	2240      	movs	r2, #64	@ 0x40
 8010bb2:	9b04      	ldr	r3, [sp, #16]
 8010bb4:	3401      	adds	r4, #1
 8010bb6:	4082      	lsls	r2, r0
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	9304      	str	r3, [sp, #16]
 8010bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bc0:	2206      	movs	r2, #6
 8010bc2:	4824      	ldr	r0, [pc, #144]	@ (8010c54 <_svfiprintf_r+0x1e8>)
 8010bc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010bc8:	f7fe fd36 	bl	800f638 <memchr>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d036      	beq.n	8010c3e <_svfiprintf_r+0x1d2>
 8010bd0:	4b21      	ldr	r3, [pc, #132]	@ (8010c58 <_svfiprintf_r+0x1ec>)
 8010bd2:	bb1b      	cbnz	r3, 8010c1c <_svfiprintf_r+0x1b0>
 8010bd4:	9b03      	ldr	r3, [sp, #12]
 8010bd6:	3307      	adds	r3, #7
 8010bd8:	f023 0307 	bic.w	r3, r3, #7
 8010bdc:	3308      	adds	r3, #8
 8010bde:	9303      	str	r3, [sp, #12]
 8010be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010be2:	4433      	add	r3, r6
 8010be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010be6:	e76a      	b.n	8010abe <_svfiprintf_r+0x52>
 8010be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bec:	460c      	mov	r4, r1
 8010bee:	2001      	movs	r0, #1
 8010bf0:	e7a8      	b.n	8010b44 <_svfiprintf_r+0xd8>
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	3401      	adds	r4, #1
 8010bf6:	f04f 0c0a 	mov.w	ip, #10
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	9305      	str	r3, [sp, #20]
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c04:	3a30      	subs	r2, #48	@ 0x30
 8010c06:	2a09      	cmp	r2, #9
 8010c08:	d903      	bls.n	8010c12 <_svfiprintf_r+0x1a6>
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d0c6      	beq.n	8010b9c <_svfiprintf_r+0x130>
 8010c0e:	9105      	str	r1, [sp, #20]
 8010c10:	e7c4      	b.n	8010b9c <_svfiprintf_r+0x130>
 8010c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c16:	4604      	mov	r4, r0
 8010c18:	2301      	movs	r3, #1
 8010c1a:	e7f0      	b.n	8010bfe <_svfiprintf_r+0x192>
 8010c1c:	ab03      	add	r3, sp, #12
 8010c1e:	462a      	mov	r2, r5
 8010c20:	a904      	add	r1, sp, #16
 8010c22:	4638      	mov	r0, r7
 8010c24:	9300      	str	r3, [sp, #0]
 8010c26:	4b0d      	ldr	r3, [pc, #52]	@ (8010c5c <_svfiprintf_r+0x1f0>)
 8010c28:	f7fc ff54 	bl	800dad4 <_printf_float>
 8010c2c:	1c42      	adds	r2, r0, #1
 8010c2e:	4606      	mov	r6, r0
 8010c30:	d1d6      	bne.n	8010be0 <_svfiprintf_r+0x174>
 8010c32:	89ab      	ldrh	r3, [r5, #12]
 8010c34:	065b      	lsls	r3, r3, #25
 8010c36:	f53f af2d 	bmi.w	8010a94 <_svfiprintf_r+0x28>
 8010c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c3c:	e72c      	b.n	8010a98 <_svfiprintf_r+0x2c>
 8010c3e:	ab03      	add	r3, sp, #12
 8010c40:	462a      	mov	r2, r5
 8010c42:	a904      	add	r1, sp, #16
 8010c44:	4638      	mov	r0, r7
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	4b04      	ldr	r3, [pc, #16]	@ (8010c5c <_svfiprintf_r+0x1f0>)
 8010c4a:	f7fd f9df 	bl	800e00c <_printf_i>
 8010c4e:	e7ed      	b.n	8010c2c <_svfiprintf_r+0x1c0>
 8010c50:	08013d70 	.word	0x08013d70
 8010c54:	08013d7a 	.word	0x08013d7a
 8010c58:	0800dad5 	.word	0x0800dad5
 8010c5c:	080109b7 	.word	0x080109b7
 8010c60:	08013d76 	.word	0x08013d76

08010c64 <malloc>:
 8010c64:	4b02      	ldr	r3, [pc, #8]	@ (8010c70 <malloc+0xc>)
 8010c66:	4601      	mov	r1, r0
 8010c68:	6818      	ldr	r0, [r3, #0]
 8010c6a:	f000 b825 	b.w	8010cb8 <_malloc_r>
 8010c6e:	bf00      	nop
 8010c70:	2000019c 	.word	0x2000019c

08010c74 <sbrk_aligned>:
 8010c74:	b570      	push	{r4, r5, r6, lr}
 8010c76:	4e0f      	ldr	r6, [pc, #60]	@ (8010cb4 <sbrk_aligned+0x40>)
 8010c78:	460c      	mov	r4, r1
 8010c7a:	4605      	mov	r5, r0
 8010c7c:	6831      	ldr	r1, [r6, #0]
 8010c7e:	b911      	cbnz	r1, 8010c86 <sbrk_aligned+0x12>
 8010c80:	f000 fed6 	bl	8011a30 <_sbrk_r>
 8010c84:	6030      	str	r0, [r6, #0]
 8010c86:	4621      	mov	r1, r4
 8010c88:	4628      	mov	r0, r5
 8010c8a:	f000 fed1 	bl	8011a30 <_sbrk_r>
 8010c8e:	1c43      	adds	r3, r0, #1
 8010c90:	d103      	bne.n	8010c9a <sbrk_aligned+0x26>
 8010c92:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010c96:	4620      	mov	r0, r4
 8010c98:	bd70      	pop	{r4, r5, r6, pc}
 8010c9a:	1cc4      	adds	r4, r0, #3
 8010c9c:	f024 0403 	bic.w	r4, r4, #3
 8010ca0:	42a0      	cmp	r0, r4
 8010ca2:	d0f8      	beq.n	8010c96 <sbrk_aligned+0x22>
 8010ca4:	1a21      	subs	r1, r4, r0
 8010ca6:	4628      	mov	r0, r5
 8010ca8:	f000 fec2 	bl	8011a30 <_sbrk_r>
 8010cac:	3001      	adds	r0, #1
 8010cae:	d1f2      	bne.n	8010c96 <sbrk_aligned+0x22>
 8010cb0:	e7ef      	b.n	8010c92 <sbrk_aligned+0x1e>
 8010cb2:	bf00      	nop
 8010cb4:	20000614 	.word	0x20000614

08010cb8 <_malloc_r>:
 8010cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cbc:	1ccd      	adds	r5, r1, #3
 8010cbe:	4606      	mov	r6, r0
 8010cc0:	f025 0503 	bic.w	r5, r5, #3
 8010cc4:	3508      	adds	r5, #8
 8010cc6:	2d0c      	cmp	r5, #12
 8010cc8:	bf38      	it	cc
 8010cca:	250c      	movcc	r5, #12
 8010ccc:	2d00      	cmp	r5, #0
 8010cce:	db01      	blt.n	8010cd4 <_malloc_r+0x1c>
 8010cd0:	42a9      	cmp	r1, r5
 8010cd2:	d904      	bls.n	8010cde <_malloc_r+0x26>
 8010cd4:	230c      	movs	r3, #12
 8010cd6:	6033      	str	r3, [r6, #0]
 8010cd8:	2000      	movs	r0, #0
 8010cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010db4 <_malloc_r+0xfc>
 8010ce2:	f000 f927 	bl	8010f34 <__malloc_lock>
 8010ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8010cea:	461c      	mov	r4, r3
 8010cec:	bb44      	cbnz	r4, 8010d40 <_malloc_r+0x88>
 8010cee:	4629      	mov	r1, r5
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	f7ff ffbf 	bl	8010c74 <sbrk_aligned>
 8010cf6:	1c43      	adds	r3, r0, #1
 8010cf8:	4604      	mov	r4, r0
 8010cfa:	d158      	bne.n	8010dae <_malloc_r+0xf6>
 8010cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8010d00:	4627      	mov	r7, r4
 8010d02:	2f00      	cmp	r7, #0
 8010d04:	d143      	bne.n	8010d8e <_malloc_r+0xd6>
 8010d06:	2c00      	cmp	r4, #0
 8010d08:	d04b      	beq.n	8010da2 <_malloc_r+0xea>
 8010d0a:	6823      	ldr	r3, [r4, #0]
 8010d0c:	4639      	mov	r1, r7
 8010d0e:	4630      	mov	r0, r6
 8010d10:	eb04 0903 	add.w	r9, r4, r3
 8010d14:	f000 fe8c 	bl	8011a30 <_sbrk_r>
 8010d18:	4581      	cmp	r9, r0
 8010d1a:	d142      	bne.n	8010da2 <_malloc_r+0xea>
 8010d1c:	6821      	ldr	r1, [r4, #0]
 8010d1e:	4630      	mov	r0, r6
 8010d20:	1a6d      	subs	r5, r5, r1
 8010d22:	4629      	mov	r1, r5
 8010d24:	f7ff ffa6 	bl	8010c74 <sbrk_aligned>
 8010d28:	3001      	adds	r0, #1
 8010d2a:	d03a      	beq.n	8010da2 <_malloc_r+0xea>
 8010d2c:	6823      	ldr	r3, [r4, #0]
 8010d2e:	442b      	add	r3, r5
 8010d30:	6023      	str	r3, [r4, #0]
 8010d32:	f8d8 3000 	ldr.w	r3, [r8]
 8010d36:	685a      	ldr	r2, [r3, #4]
 8010d38:	bb62      	cbnz	r2, 8010d94 <_malloc_r+0xdc>
 8010d3a:	f8c8 7000 	str.w	r7, [r8]
 8010d3e:	e00f      	b.n	8010d60 <_malloc_r+0xa8>
 8010d40:	6822      	ldr	r2, [r4, #0]
 8010d42:	1b52      	subs	r2, r2, r5
 8010d44:	d420      	bmi.n	8010d88 <_malloc_r+0xd0>
 8010d46:	2a0b      	cmp	r2, #11
 8010d48:	d917      	bls.n	8010d7a <_malloc_r+0xc2>
 8010d4a:	1961      	adds	r1, r4, r5
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	6025      	str	r5, [r4, #0]
 8010d50:	bf18      	it	ne
 8010d52:	6059      	strne	r1, [r3, #4]
 8010d54:	6863      	ldr	r3, [r4, #4]
 8010d56:	bf08      	it	eq
 8010d58:	f8c8 1000 	streq.w	r1, [r8]
 8010d5c:	5162      	str	r2, [r4, r5]
 8010d5e:	604b      	str	r3, [r1, #4]
 8010d60:	4630      	mov	r0, r6
 8010d62:	f000 f8ed 	bl	8010f40 <__malloc_unlock>
 8010d66:	f104 000b 	add.w	r0, r4, #11
 8010d6a:	1d23      	adds	r3, r4, #4
 8010d6c:	f020 0007 	bic.w	r0, r0, #7
 8010d70:	1ac2      	subs	r2, r0, r3
 8010d72:	bf1c      	itt	ne
 8010d74:	1a1b      	subne	r3, r3, r0
 8010d76:	50a3      	strne	r3, [r4, r2]
 8010d78:	e7af      	b.n	8010cda <_malloc_r+0x22>
 8010d7a:	6862      	ldr	r2, [r4, #4]
 8010d7c:	42a3      	cmp	r3, r4
 8010d7e:	bf0c      	ite	eq
 8010d80:	f8c8 2000 	streq.w	r2, [r8]
 8010d84:	605a      	strne	r2, [r3, #4]
 8010d86:	e7eb      	b.n	8010d60 <_malloc_r+0xa8>
 8010d88:	4623      	mov	r3, r4
 8010d8a:	6864      	ldr	r4, [r4, #4]
 8010d8c:	e7ae      	b.n	8010cec <_malloc_r+0x34>
 8010d8e:	463c      	mov	r4, r7
 8010d90:	687f      	ldr	r7, [r7, #4]
 8010d92:	e7b6      	b.n	8010d02 <_malloc_r+0x4a>
 8010d94:	461a      	mov	r2, r3
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	42a3      	cmp	r3, r4
 8010d9a:	d1fb      	bne.n	8010d94 <_malloc_r+0xdc>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	6053      	str	r3, [r2, #4]
 8010da0:	e7de      	b.n	8010d60 <_malloc_r+0xa8>
 8010da2:	230c      	movs	r3, #12
 8010da4:	4630      	mov	r0, r6
 8010da6:	6033      	str	r3, [r6, #0]
 8010da8:	f000 f8ca 	bl	8010f40 <__malloc_unlock>
 8010dac:	e794      	b.n	8010cd8 <_malloc_r+0x20>
 8010dae:	6005      	str	r5, [r0, #0]
 8010db0:	e7d6      	b.n	8010d60 <_malloc_r+0xa8>
 8010db2:	bf00      	nop
 8010db4:	20000618 	.word	0x20000618

08010db8 <__ascii_mbtowc>:
 8010db8:	b082      	sub	sp, #8
 8010dba:	b901      	cbnz	r1, 8010dbe <__ascii_mbtowc+0x6>
 8010dbc:	a901      	add	r1, sp, #4
 8010dbe:	b142      	cbz	r2, 8010dd2 <__ascii_mbtowc+0x1a>
 8010dc0:	b14b      	cbz	r3, 8010dd6 <__ascii_mbtowc+0x1e>
 8010dc2:	7813      	ldrb	r3, [r2, #0]
 8010dc4:	600b      	str	r3, [r1, #0]
 8010dc6:	7812      	ldrb	r2, [r2, #0]
 8010dc8:	1e10      	subs	r0, r2, #0
 8010dca:	bf18      	it	ne
 8010dcc:	2001      	movne	r0, #1
 8010dce:	b002      	add	sp, #8
 8010dd0:	4770      	bx	lr
 8010dd2:	4610      	mov	r0, r2
 8010dd4:	e7fb      	b.n	8010dce <__ascii_mbtowc+0x16>
 8010dd6:	f06f 0001 	mvn.w	r0, #1
 8010dda:	e7f8      	b.n	8010dce <__ascii_mbtowc+0x16>

08010ddc <__sflush_r>:
 8010ddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010de4:	0716      	lsls	r6, r2, #28
 8010de6:	4605      	mov	r5, r0
 8010de8:	460c      	mov	r4, r1
 8010dea:	d454      	bmi.n	8010e96 <__sflush_r+0xba>
 8010dec:	684b      	ldr	r3, [r1, #4]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	dc02      	bgt.n	8010df8 <__sflush_r+0x1c>
 8010df2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	dd48      	ble.n	8010e8a <__sflush_r+0xae>
 8010df8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010dfa:	2e00      	cmp	r6, #0
 8010dfc:	d045      	beq.n	8010e8a <__sflush_r+0xae>
 8010dfe:	2300      	movs	r3, #0
 8010e00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010e04:	682f      	ldr	r7, [r5, #0]
 8010e06:	6a21      	ldr	r1, [r4, #32]
 8010e08:	602b      	str	r3, [r5, #0]
 8010e0a:	d030      	beq.n	8010e6e <__sflush_r+0x92>
 8010e0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010e0e:	89a3      	ldrh	r3, [r4, #12]
 8010e10:	0759      	lsls	r1, r3, #29
 8010e12:	d505      	bpl.n	8010e20 <__sflush_r+0x44>
 8010e14:	6863      	ldr	r3, [r4, #4]
 8010e16:	1ad2      	subs	r2, r2, r3
 8010e18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010e1a:	b10b      	cbz	r3, 8010e20 <__sflush_r+0x44>
 8010e1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010e1e:	1ad2      	subs	r2, r2, r3
 8010e20:	2300      	movs	r3, #0
 8010e22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e24:	6a21      	ldr	r1, [r4, #32]
 8010e26:	4628      	mov	r0, r5
 8010e28:	47b0      	blx	r6
 8010e2a:	1c43      	adds	r3, r0, #1
 8010e2c:	89a3      	ldrh	r3, [r4, #12]
 8010e2e:	d106      	bne.n	8010e3e <__sflush_r+0x62>
 8010e30:	6829      	ldr	r1, [r5, #0]
 8010e32:	291d      	cmp	r1, #29
 8010e34:	d82b      	bhi.n	8010e8e <__sflush_r+0xb2>
 8010e36:	4a2a      	ldr	r2, [pc, #168]	@ (8010ee0 <__sflush_r+0x104>)
 8010e38:	40ca      	lsrs	r2, r1
 8010e3a:	07d6      	lsls	r6, r2, #31
 8010e3c:	d527      	bpl.n	8010e8e <__sflush_r+0xb2>
 8010e3e:	2200      	movs	r2, #0
 8010e40:	04d9      	lsls	r1, r3, #19
 8010e42:	6062      	str	r2, [r4, #4]
 8010e44:	6922      	ldr	r2, [r4, #16]
 8010e46:	6022      	str	r2, [r4, #0]
 8010e48:	d504      	bpl.n	8010e54 <__sflush_r+0x78>
 8010e4a:	1c42      	adds	r2, r0, #1
 8010e4c:	d101      	bne.n	8010e52 <__sflush_r+0x76>
 8010e4e:	682b      	ldr	r3, [r5, #0]
 8010e50:	b903      	cbnz	r3, 8010e54 <__sflush_r+0x78>
 8010e52:	6560      	str	r0, [r4, #84]	@ 0x54
 8010e54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e56:	602f      	str	r7, [r5, #0]
 8010e58:	b1b9      	cbz	r1, 8010e8a <__sflush_r+0xae>
 8010e5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e5e:	4299      	cmp	r1, r3
 8010e60:	d002      	beq.n	8010e68 <__sflush_r+0x8c>
 8010e62:	4628      	mov	r0, r5
 8010e64:	f000 fe48 	bl	8011af8 <_free_r>
 8010e68:	2300      	movs	r3, #0
 8010e6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e6c:	e00d      	b.n	8010e8a <__sflush_r+0xae>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	4628      	mov	r0, r5
 8010e72:	47b0      	blx	r6
 8010e74:	4602      	mov	r2, r0
 8010e76:	1c50      	adds	r0, r2, #1
 8010e78:	d1c9      	bne.n	8010e0e <__sflush_r+0x32>
 8010e7a:	682b      	ldr	r3, [r5, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d0c6      	beq.n	8010e0e <__sflush_r+0x32>
 8010e80:	2b1d      	cmp	r3, #29
 8010e82:	d001      	beq.n	8010e88 <__sflush_r+0xac>
 8010e84:	2b16      	cmp	r3, #22
 8010e86:	d11d      	bne.n	8010ec4 <__sflush_r+0xe8>
 8010e88:	602f      	str	r7, [r5, #0]
 8010e8a:	2000      	movs	r0, #0
 8010e8c:	e021      	b.n	8010ed2 <__sflush_r+0xf6>
 8010e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e92:	b21b      	sxth	r3, r3
 8010e94:	e01a      	b.n	8010ecc <__sflush_r+0xf0>
 8010e96:	690f      	ldr	r7, [r1, #16]
 8010e98:	2f00      	cmp	r7, #0
 8010e9a:	d0f6      	beq.n	8010e8a <__sflush_r+0xae>
 8010e9c:	0793      	lsls	r3, r2, #30
 8010e9e:	680e      	ldr	r6, [r1, #0]
 8010ea0:	600f      	str	r7, [r1, #0]
 8010ea2:	bf0c      	ite	eq
 8010ea4:	694b      	ldreq	r3, [r1, #20]
 8010ea6:	2300      	movne	r3, #0
 8010ea8:	eba6 0807 	sub.w	r8, r6, r7
 8010eac:	608b      	str	r3, [r1, #8]
 8010eae:	f1b8 0f00 	cmp.w	r8, #0
 8010eb2:	ddea      	ble.n	8010e8a <__sflush_r+0xae>
 8010eb4:	4643      	mov	r3, r8
 8010eb6:	463a      	mov	r2, r7
 8010eb8:	6a21      	ldr	r1, [r4, #32]
 8010eba:	4628      	mov	r0, r5
 8010ebc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010ebe:	47b0      	blx	r6
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	dc08      	bgt.n	8010ed6 <__sflush_r+0xfa>
 8010ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ed0:	81a3      	strh	r3, [r4, #12]
 8010ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ed6:	4407      	add	r7, r0
 8010ed8:	eba8 0800 	sub.w	r8, r8, r0
 8010edc:	e7e7      	b.n	8010eae <__sflush_r+0xd2>
 8010ede:	bf00      	nop
 8010ee0:	20400001 	.word	0x20400001

08010ee4 <_fflush_r>:
 8010ee4:	b538      	push	{r3, r4, r5, lr}
 8010ee6:	690b      	ldr	r3, [r1, #16]
 8010ee8:	4605      	mov	r5, r0
 8010eea:	460c      	mov	r4, r1
 8010eec:	b913      	cbnz	r3, 8010ef4 <_fflush_r+0x10>
 8010eee:	2500      	movs	r5, #0
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	bd38      	pop	{r3, r4, r5, pc}
 8010ef4:	b118      	cbz	r0, 8010efe <_fflush_r+0x1a>
 8010ef6:	6a03      	ldr	r3, [r0, #32]
 8010ef8:	b90b      	cbnz	r3, 8010efe <_fflush_r+0x1a>
 8010efa:	f7fd fc97 	bl	800e82c <__sinit>
 8010efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d0f3      	beq.n	8010eee <_fflush_r+0xa>
 8010f06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010f08:	07d0      	lsls	r0, r2, #31
 8010f0a:	d404      	bmi.n	8010f16 <_fflush_r+0x32>
 8010f0c:	0599      	lsls	r1, r3, #22
 8010f0e:	d402      	bmi.n	8010f16 <_fflush_r+0x32>
 8010f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f12:	f7fe fb8a 	bl	800f62a <__retarget_lock_acquire_recursive>
 8010f16:	4628      	mov	r0, r5
 8010f18:	4621      	mov	r1, r4
 8010f1a:	f7ff ff5f 	bl	8010ddc <__sflush_r>
 8010f1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f20:	4605      	mov	r5, r0
 8010f22:	07da      	lsls	r2, r3, #31
 8010f24:	d4e4      	bmi.n	8010ef0 <_fflush_r+0xc>
 8010f26:	89a3      	ldrh	r3, [r4, #12]
 8010f28:	059b      	lsls	r3, r3, #22
 8010f2a:	d4e1      	bmi.n	8010ef0 <_fflush_r+0xc>
 8010f2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f2e:	f7fe fb7d 	bl	800f62c <__retarget_lock_release_recursive>
 8010f32:	e7dd      	b.n	8010ef0 <_fflush_r+0xc>

08010f34 <__malloc_lock>:
 8010f34:	4801      	ldr	r0, [pc, #4]	@ (8010f3c <__malloc_lock+0x8>)
 8010f36:	f7fe bb78 	b.w	800f62a <__retarget_lock_acquire_recursive>
 8010f3a:	bf00      	nop
 8010f3c:	20000610 	.word	0x20000610

08010f40 <__malloc_unlock>:
 8010f40:	4801      	ldr	r0, [pc, #4]	@ (8010f48 <__malloc_unlock+0x8>)
 8010f42:	f7fe bb73 	b.w	800f62c <__retarget_lock_release_recursive>
 8010f46:	bf00      	nop
 8010f48:	20000610 	.word	0x20000610

08010f4c <_Balloc>:
 8010f4c:	b570      	push	{r4, r5, r6, lr}
 8010f4e:	69c6      	ldr	r6, [r0, #28]
 8010f50:	4604      	mov	r4, r0
 8010f52:	460d      	mov	r5, r1
 8010f54:	b976      	cbnz	r6, 8010f74 <_Balloc+0x28>
 8010f56:	2010      	movs	r0, #16
 8010f58:	f7ff fe84 	bl	8010c64 <malloc>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	61e0      	str	r0, [r4, #28]
 8010f60:	b920      	cbnz	r0, 8010f6c <_Balloc+0x20>
 8010f62:	4b18      	ldr	r3, [pc, #96]	@ (8010fc4 <_Balloc+0x78>)
 8010f64:	216b      	movs	r1, #107	@ 0x6b
 8010f66:	4818      	ldr	r0, [pc, #96]	@ (8010fc8 <_Balloc+0x7c>)
 8010f68:	f000 fd94 	bl	8011a94 <__assert_func>
 8010f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010f70:	6006      	str	r6, [r0, #0]
 8010f72:	60c6      	str	r6, [r0, #12]
 8010f74:	69e6      	ldr	r6, [r4, #28]
 8010f76:	68f3      	ldr	r3, [r6, #12]
 8010f78:	b183      	cbz	r3, 8010f9c <_Balloc+0x50>
 8010f7a:	69e3      	ldr	r3, [r4, #28]
 8010f7c:	68db      	ldr	r3, [r3, #12]
 8010f7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010f82:	b9b8      	cbnz	r0, 8010fb4 <_Balloc+0x68>
 8010f84:	2101      	movs	r1, #1
 8010f86:	4620      	mov	r0, r4
 8010f88:	fa01 f605 	lsl.w	r6, r1, r5
 8010f8c:	1d72      	adds	r2, r6, #5
 8010f8e:	0092      	lsls	r2, r2, #2
 8010f90:	f000 fd9e 	bl	8011ad0 <_calloc_r>
 8010f94:	b160      	cbz	r0, 8010fb0 <_Balloc+0x64>
 8010f96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010f9a:	e00e      	b.n	8010fba <_Balloc+0x6e>
 8010f9c:	2221      	movs	r2, #33	@ 0x21
 8010f9e:	2104      	movs	r1, #4
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f000 fd95 	bl	8011ad0 <_calloc_r>
 8010fa6:	69e3      	ldr	r3, [r4, #28]
 8010fa8:	60f0      	str	r0, [r6, #12]
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d1e4      	bne.n	8010f7a <_Balloc+0x2e>
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	bd70      	pop	{r4, r5, r6, pc}
 8010fb4:	6802      	ldr	r2, [r0, #0]
 8010fb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fba:	2300      	movs	r3, #0
 8010fbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010fc0:	e7f7      	b.n	8010fb2 <_Balloc+0x66>
 8010fc2:	bf00      	nop
 8010fc4:	08013c90 	.word	0x08013c90
 8010fc8:	08013d81 	.word	0x08013d81

08010fcc <_Bfree>:
 8010fcc:	b570      	push	{r4, r5, r6, lr}
 8010fce:	69c6      	ldr	r6, [r0, #28]
 8010fd0:	4605      	mov	r5, r0
 8010fd2:	460c      	mov	r4, r1
 8010fd4:	b976      	cbnz	r6, 8010ff4 <_Bfree+0x28>
 8010fd6:	2010      	movs	r0, #16
 8010fd8:	f7ff fe44 	bl	8010c64 <malloc>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	61e8      	str	r0, [r5, #28]
 8010fe0:	b920      	cbnz	r0, 8010fec <_Bfree+0x20>
 8010fe2:	4b09      	ldr	r3, [pc, #36]	@ (8011008 <_Bfree+0x3c>)
 8010fe4:	218f      	movs	r1, #143	@ 0x8f
 8010fe6:	4809      	ldr	r0, [pc, #36]	@ (801100c <_Bfree+0x40>)
 8010fe8:	f000 fd54 	bl	8011a94 <__assert_func>
 8010fec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ff0:	6006      	str	r6, [r0, #0]
 8010ff2:	60c6      	str	r6, [r0, #12]
 8010ff4:	b13c      	cbz	r4, 8011006 <_Bfree+0x3a>
 8010ff6:	69eb      	ldr	r3, [r5, #28]
 8010ff8:	6862      	ldr	r2, [r4, #4]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011000:	6021      	str	r1, [r4, #0]
 8011002:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011006:	bd70      	pop	{r4, r5, r6, pc}
 8011008:	08013c90 	.word	0x08013c90
 801100c:	08013d81 	.word	0x08013d81

08011010 <__multadd>:
 8011010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011014:	f101 0c14 	add.w	ip, r1, #20
 8011018:	4607      	mov	r7, r0
 801101a:	460c      	mov	r4, r1
 801101c:	461e      	mov	r6, r3
 801101e:	690d      	ldr	r5, [r1, #16]
 8011020:	2000      	movs	r0, #0
 8011022:	f8dc 3000 	ldr.w	r3, [ip]
 8011026:	3001      	adds	r0, #1
 8011028:	b299      	uxth	r1, r3
 801102a:	4285      	cmp	r5, r0
 801102c:	fb02 6101 	mla	r1, r2, r1, r6
 8011030:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011034:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8011038:	b289      	uxth	r1, r1
 801103a:	fb02 3306 	mla	r3, r2, r6, r3
 801103e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011042:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011046:	f84c 1b04 	str.w	r1, [ip], #4
 801104a:	dcea      	bgt.n	8011022 <__multadd+0x12>
 801104c:	b30e      	cbz	r6, 8011092 <__multadd+0x82>
 801104e:	68a3      	ldr	r3, [r4, #8]
 8011050:	42ab      	cmp	r3, r5
 8011052:	dc19      	bgt.n	8011088 <__multadd+0x78>
 8011054:	6861      	ldr	r1, [r4, #4]
 8011056:	4638      	mov	r0, r7
 8011058:	3101      	adds	r1, #1
 801105a:	f7ff ff77 	bl	8010f4c <_Balloc>
 801105e:	4680      	mov	r8, r0
 8011060:	b928      	cbnz	r0, 801106e <__multadd+0x5e>
 8011062:	4602      	mov	r2, r0
 8011064:	4b0c      	ldr	r3, [pc, #48]	@ (8011098 <__multadd+0x88>)
 8011066:	21ba      	movs	r1, #186	@ 0xba
 8011068:	480c      	ldr	r0, [pc, #48]	@ (801109c <__multadd+0x8c>)
 801106a:	f000 fd13 	bl	8011a94 <__assert_func>
 801106e:	6922      	ldr	r2, [r4, #16]
 8011070:	f104 010c 	add.w	r1, r4, #12
 8011074:	300c      	adds	r0, #12
 8011076:	3202      	adds	r2, #2
 8011078:	0092      	lsls	r2, r2, #2
 801107a:	f7fe faeb 	bl	800f654 <memcpy>
 801107e:	4621      	mov	r1, r4
 8011080:	4644      	mov	r4, r8
 8011082:	4638      	mov	r0, r7
 8011084:	f7ff ffa2 	bl	8010fcc <_Bfree>
 8011088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801108c:	3501      	adds	r5, #1
 801108e:	615e      	str	r6, [r3, #20]
 8011090:	6125      	str	r5, [r4, #16]
 8011092:	4620      	mov	r0, r4
 8011094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011098:	08013cff 	.word	0x08013cff
 801109c:	08013d81 	.word	0x08013d81

080110a0 <__s2b>:
 80110a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110a4:	4615      	mov	r5, r2
 80110a6:	461f      	mov	r7, r3
 80110a8:	2209      	movs	r2, #9
 80110aa:	3308      	adds	r3, #8
 80110ac:	460c      	mov	r4, r1
 80110ae:	4606      	mov	r6, r0
 80110b0:	2100      	movs	r1, #0
 80110b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80110b6:	2201      	movs	r2, #1
 80110b8:	429a      	cmp	r2, r3
 80110ba:	db09      	blt.n	80110d0 <__s2b+0x30>
 80110bc:	4630      	mov	r0, r6
 80110be:	f7ff ff45 	bl	8010f4c <_Balloc>
 80110c2:	b940      	cbnz	r0, 80110d6 <__s2b+0x36>
 80110c4:	4602      	mov	r2, r0
 80110c6:	4b19      	ldr	r3, [pc, #100]	@ (801112c <__s2b+0x8c>)
 80110c8:	21d3      	movs	r1, #211	@ 0xd3
 80110ca:	4819      	ldr	r0, [pc, #100]	@ (8011130 <__s2b+0x90>)
 80110cc:	f000 fce2 	bl	8011a94 <__assert_func>
 80110d0:	0052      	lsls	r2, r2, #1
 80110d2:	3101      	adds	r1, #1
 80110d4:	e7f0      	b.n	80110b8 <__s2b+0x18>
 80110d6:	9b08      	ldr	r3, [sp, #32]
 80110d8:	2d09      	cmp	r5, #9
 80110da:	6143      	str	r3, [r0, #20]
 80110dc:	f04f 0301 	mov.w	r3, #1
 80110e0:	6103      	str	r3, [r0, #16]
 80110e2:	dd16      	ble.n	8011112 <__s2b+0x72>
 80110e4:	f104 0909 	add.w	r9, r4, #9
 80110e8:	442c      	add	r4, r5
 80110ea:	46c8      	mov	r8, r9
 80110ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80110f0:	4601      	mov	r1, r0
 80110f2:	220a      	movs	r2, #10
 80110f4:	4630      	mov	r0, r6
 80110f6:	3b30      	subs	r3, #48	@ 0x30
 80110f8:	f7ff ff8a 	bl	8011010 <__multadd>
 80110fc:	45a0      	cmp	r8, r4
 80110fe:	d1f5      	bne.n	80110ec <__s2b+0x4c>
 8011100:	f1a5 0408 	sub.w	r4, r5, #8
 8011104:	444c      	add	r4, r9
 8011106:	1b2d      	subs	r5, r5, r4
 8011108:	1963      	adds	r3, r4, r5
 801110a:	42bb      	cmp	r3, r7
 801110c:	db04      	blt.n	8011118 <__s2b+0x78>
 801110e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011112:	340a      	adds	r4, #10
 8011114:	2509      	movs	r5, #9
 8011116:	e7f6      	b.n	8011106 <__s2b+0x66>
 8011118:	f814 3b01 	ldrb.w	r3, [r4], #1
 801111c:	4601      	mov	r1, r0
 801111e:	220a      	movs	r2, #10
 8011120:	4630      	mov	r0, r6
 8011122:	3b30      	subs	r3, #48	@ 0x30
 8011124:	f7ff ff74 	bl	8011010 <__multadd>
 8011128:	e7ee      	b.n	8011108 <__s2b+0x68>
 801112a:	bf00      	nop
 801112c:	08013cff 	.word	0x08013cff
 8011130:	08013d81 	.word	0x08013d81

08011134 <__hi0bits>:
 8011134:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011138:	4603      	mov	r3, r0
 801113a:	bf36      	itet	cc
 801113c:	0403      	lslcc	r3, r0, #16
 801113e:	2000      	movcs	r0, #0
 8011140:	2010      	movcc	r0, #16
 8011142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011146:	bf3c      	itt	cc
 8011148:	021b      	lslcc	r3, r3, #8
 801114a:	3008      	addcc	r0, #8
 801114c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011150:	bf3c      	itt	cc
 8011152:	011b      	lslcc	r3, r3, #4
 8011154:	3004      	addcc	r0, #4
 8011156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801115a:	bf3c      	itt	cc
 801115c:	009b      	lslcc	r3, r3, #2
 801115e:	3002      	addcc	r0, #2
 8011160:	2b00      	cmp	r3, #0
 8011162:	db05      	blt.n	8011170 <__hi0bits+0x3c>
 8011164:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011168:	f100 0001 	add.w	r0, r0, #1
 801116c:	bf08      	it	eq
 801116e:	2020      	moveq	r0, #32
 8011170:	4770      	bx	lr

08011172 <__lo0bits>:
 8011172:	6803      	ldr	r3, [r0, #0]
 8011174:	4602      	mov	r2, r0
 8011176:	f013 0007 	ands.w	r0, r3, #7
 801117a:	d00b      	beq.n	8011194 <__lo0bits+0x22>
 801117c:	07d9      	lsls	r1, r3, #31
 801117e:	d421      	bmi.n	80111c4 <__lo0bits+0x52>
 8011180:	0798      	lsls	r0, r3, #30
 8011182:	bf47      	ittee	mi
 8011184:	085b      	lsrmi	r3, r3, #1
 8011186:	2001      	movmi	r0, #1
 8011188:	089b      	lsrpl	r3, r3, #2
 801118a:	2002      	movpl	r0, #2
 801118c:	bf4c      	ite	mi
 801118e:	6013      	strmi	r3, [r2, #0]
 8011190:	6013      	strpl	r3, [r2, #0]
 8011192:	4770      	bx	lr
 8011194:	b299      	uxth	r1, r3
 8011196:	b909      	cbnz	r1, 801119c <__lo0bits+0x2a>
 8011198:	0c1b      	lsrs	r3, r3, #16
 801119a:	2010      	movs	r0, #16
 801119c:	b2d9      	uxtb	r1, r3
 801119e:	b909      	cbnz	r1, 80111a4 <__lo0bits+0x32>
 80111a0:	3008      	adds	r0, #8
 80111a2:	0a1b      	lsrs	r3, r3, #8
 80111a4:	0719      	lsls	r1, r3, #28
 80111a6:	bf04      	itt	eq
 80111a8:	091b      	lsreq	r3, r3, #4
 80111aa:	3004      	addeq	r0, #4
 80111ac:	0799      	lsls	r1, r3, #30
 80111ae:	bf04      	itt	eq
 80111b0:	089b      	lsreq	r3, r3, #2
 80111b2:	3002      	addeq	r0, #2
 80111b4:	07d9      	lsls	r1, r3, #31
 80111b6:	d403      	bmi.n	80111c0 <__lo0bits+0x4e>
 80111b8:	085b      	lsrs	r3, r3, #1
 80111ba:	f100 0001 	add.w	r0, r0, #1
 80111be:	d003      	beq.n	80111c8 <__lo0bits+0x56>
 80111c0:	6013      	str	r3, [r2, #0]
 80111c2:	4770      	bx	lr
 80111c4:	2000      	movs	r0, #0
 80111c6:	4770      	bx	lr
 80111c8:	2020      	movs	r0, #32
 80111ca:	4770      	bx	lr

080111cc <__i2b>:
 80111cc:	b510      	push	{r4, lr}
 80111ce:	460c      	mov	r4, r1
 80111d0:	2101      	movs	r1, #1
 80111d2:	f7ff febb 	bl	8010f4c <_Balloc>
 80111d6:	4602      	mov	r2, r0
 80111d8:	b928      	cbnz	r0, 80111e6 <__i2b+0x1a>
 80111da:	4b05      	ldr	r3, [pc, #20]	@ (80111f0 <__i2b+0x24>)
 80111dc:	f240 1145 	movw	r1, #325	@ 0x145
 80111e0:	4804      	ldr	r0, [pc, #16]	@ (80111f4 <__i2b+0x28>)
 80111e2:	f000 fc57 	bl	8011a94 <__assert_func>
 80111e6:	2301      	movs	r3, #1
 80111e8:	6144      	str	r4, [r0, #20]
 80111ea:	6103      	str	r3, [r0, #16]
 80111ec:	bd10      	pop	{r4, pc}
 80111ee:	bf00      	nop
 80111f0:	08013cff 	.word	0x08013cff
 80111f4:	08013d81 	.word	0x08013d81

080111f8 <__multiply>:
 80111f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111fc:	4617      	mov	r7, r2
 80111fe:	690a      	ldr	r2, [r1, #16]
 8011200:	4689      	mov	r9, r1
 8011202:	b085      	sub	sp, #20
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	429a      	cmp	r2, r3
 8011208:	bfa2      	ittt	ge
 801120a:	463b      	movge	r3, r7
 801120c:	460f      	movge	r7, r1
 801120e:	4699      	movge	r9, r3
 8011210:	693d      	ldr	r5, [r7, #16]
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011218:	6879      	ldr	r1, [r7, #4]
 801121a:	eb05 060a 	add.w	r6, r5, sl
 801121e:	42b3      	cmp	r3, r6
 8011220:	bfb8      	it	lt
 8011222:	3101      	addlt	r1, #1
 8011224:	f7ff fe92 	bl	8010f4c <_Balloc>
 8011228:	b930      	cbnz	r0, 8011238 <__multiply+0x40>
 801122a:	4602      	mov	r2, r0
 801122c:	4b42      	ldr	r3, [pc, #264]	@ (8011338 <__multiply+0x140>)
 801122e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011232:	4842      	ldr	r0, [pc, #264]	@ (801133c <__multiply+0x144>)
 8011234:	f000 fc2e 	bl	8011a94 <__assert_func>
 8011238:	f100 0414 	add.w	r4, r0, #20
 801123c:	2200      	movs	r2, #0
 801123e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011242:	4623      	mov	r3, r4
 8011244:	4573      	cmp	r3, lr
 8011246:	d320      	bcc.n	801128a <__multiply+0x92>
 8011248:	f107 0814 	add.w	r8, r7, #20
 801124c:	f109 0114 	add.w	r1, r9, #20
 8011250:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011254:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011258:	9302      	str	r3, [sp, #8]
 801125a:	1beb      	subs	r3, r5, r7
 801125c:	3715      	adds	r7, #21
 801125e:	3b15      	subs	r3, #21
 8011260:	f023 0303 	bic.w	r3, r3, #3
 8011264:	3304      	adds	r3, #4
 8011266:	42bd      	cmp	r5, r7
 8011268:	bf38      	it	cc
 801126a:	2304      	movcc	r3, #4
 801126c:	9301      	str	r3, [sp, #4]
 801126e:	9b02      	ldr	r3, [sp, #8]
 8011270:	9103      	str	r1, [sp, #12]
 8011272:	428b      	cmp	r3, r1
 8011274:	d80c      	bhi.n	8011290 <__multiply+0x98>
 8011276:	2e00      	cmp	r6, #0
 8011278:	dd03      	ble.n	8011282 <__multiply+0x8a>
 801127a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801127e:	2b00      	cmp	r3, #0
 8011280:	d057      	beq.n	8011332 <__multiply+0x13a>
 8011282:	6106      	str	r6, [r0, #16]
 8011284:	b005      	add	sp, #20
 8011286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801128a:	f843 2b04 	str.w	r2, [r3], #4
 801128e:	e7d9      	b.n	8011244 <__multiply+0x4c>
 8011290:	f8b1 a000 	ldrh.w	sl, [r1]
 8011294:	f1ba 0f00 	cmp.w	sl, #0
 8011298:	d021      	beq.n	80112de <__multiply+0xe6>
 801129a:	46c4      	mov	ip, r8
 801129c:	46a1      	mov	r9, r4
 801129e:	2700      	movs	r7, #0
 80112a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80112a4:	f8d9 3000 	ldr.w	r3, [r9]
 80112a8:	fa1f fb82 	uxth.w	fp, r2
 80112ac:	4565      	cmp	r5, ip
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80112b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80112b8:	443b      	add	r3, r7
 80112ba:	f8d9 7000 	ldr.w	r7, [r9]
 80112be:	ea4f 4717 	mov.w	r7, r7, lsr #16
 80112c2:	fb0a 7202 	mla	r2, sl, r2, r7
 80112c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80112d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112d4:	f849 3b04 	str.w	r3, [r9], #4
 80112d8:	d8e2      	bhi.n	80112a0 <__multiply+0xa8>
 80112da:	9b01      	ldr	r3, [sp, #4]
 80112dc:	50e7      	str	r7, [r4, r3]
 80112de:	9b03      	ldr	r3, [sp, #12]
 80112e0:	3104      	adds	r1, #4
 80112e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80112e6:	f1b9 0f00 	cmp.w	r9, #0
 80112ea:	d020      	beq.n	801132e <__multiply+0x136>
 80112ec:	6823      	ldr	r3, [r4, #0]
 80112ee:	4647      	mov	r7, r8
 80112f0:	46a4      	mov	ip, r4
 80112f2:	f04f 0a00 	mov.w	sl, #0
 80112f6:	f8b7 b000 	ldrh.w	fp, [r7]
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011300:	fb09 220b 	mla	r2, r9, fp, r2
 8011304:	4452      	add	r2, sl
 8011306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801130a:	f84c 3b04 	str.w	r3, [ip], #4
 801130e:	f857 3b04 	ldr.w	r3, [r7], #4
 8011312:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011316:	f8bc 3000 	ldrh.w	r3, [ip]
 801131a:	42bd      	cmp	r5, r7
 801131c:	fb09 330a 	mla	r3, r9, sl, r3
 8011320:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011324:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011328:	d8e5      	bhi.n	80112f6 <__multiply+0xfe>
 801132a:	9a01      	ldr	r2, [sp, #4]
 801132c:	50a3      	str	r3, [r4, r2]
 801132e:	3404      	adds	r4, #4
 8011330:	e79d      	b.n	801126e <__multiply+0x76>
 8011332:	3e01      	subs	r6, #1
 8011334:	e79f      	b.n	8011276 <__multiply+0x7e>
 8011336:	bf00      	nop
 8011338:	08013cff 	.word	0x08013cff
 801133c:	08013d81 	.word	0x08013d81

08011340 <__pow5mult>:
 8011340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011344:	4615      	mov	r5, r2
 8011346:	f012 0203 	ands.w	r2, r2, #3
 801134a:	4607      	mov	r7, r0
 801134c:	460e      	mov	r6, r1
 801134e:	d007      	beq.n	8011360 <__pow5mult+0x20>
 8011350:	3a01      	subs	r2, #1
 8011352:	4c25      	ldr	r4, [pc, #148]	@ (80113e8 <__pow5mult+0xa8>)
 8011354:	2300      	movs	r3, #0
 8011356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801135a:	f7ff fe59 	bl	8011010 <__multadd>
 801135e:	4606      	mov	r6, r0
 8011360:	10ad      	asrs	r5, r5, #2
 8011362:	d03d      	beq.n	80113e0 <__pow5mult+0xa0>
 8011364:	69fc      	ldr	r4, [r7, #28]
 8011366:	b97c      	cbnz	r4, 8011388 <__pow5mult+0x48>
 8011368:	2010      	movs	r0, #16
 801136a:	f7ff fc7b 	bl	8010c64 <malloc>
 801136e:	4602      	mov	r2, r0
 8011370:	61f8      	str	r0, [r7, #28]
 8011372:	b928      	cbnz	r0, 8011380 <__pow5mult+0x40>
 8011374:	4b1d      	ldr	r3, [pc, #116]	@ (80113ec <__pow5mult+0xac>)
 8011376:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801137a:	481d      	ldr	r0, [pc, #116]	@ (80113f0 <__pow5mult+0xb0>)
 801137c:	f000 fb8a 	bl	8011a94 <__assert_func>
 8011380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011384:	6004      	str	r4, [r0, #0]
 8011386:	60c4      	str	r4, [r0, #12]
 8011388:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801138c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011390:	b94c      	cbnz	r4, 80113a6 <__pow5mult+0x66>
 8011392:	f240 2171 	movw	r1, #625	@ 0x271
 8011396:	4638      	mov	r0, r7
 8011398:	f7ff ff18 	bl	80111cc <__i2b>
 801139c:	2300      	movs	r3, #0
 801139e:	4604      	mov	r4, r0
 80113a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80113a4:	6003      	str	r3, [r0, #0]
 80113a6:	f04f 0900 	mov.w	r9, #0
 80113aa:	07eb      	lsls	r3, r5, #31
 80113ac:	d50a      	bpl.n	80113c4 <__pow5mult+0x84>
 80113ae:	4631      	mov	r1, r6
 80113b0:	4622      	mov	r2, r4
 80113b2:	4638      	mov	r0, r7
 80113b4:	f7ff ff20 	bl	80111f8 <__multiply>
 80113b8:	4680      	mov	r8, r0
 80113ba:	4631      	mov	r1, r6
 80113bc:	4638      	mov	r0, r7
 80113be:	4646      	mov	r6, r8
 80113c0:	f7ff fe04 	bl	8010fcc <_Bfree>
 80113c4:	106d      	asrs	r5, r5, #1
 80113c6:	d00b      	beq.n	80113e0 <__pow5mult+0xa0>
 80113c8:	6820      	ldr	r0, [r4, #0]
 80113ca:	b938      	cbnz	r0, 80113dc <__pow5mult+0x9c>
 80113cc:	4622      	mov	r2, r4
 80113ce:	4621      	mov	r1, r4
 80113d0:	4638      	mov	r0, r7
 80113d2:	f7ff ff11 	bl	80111f8 <__multiply>
 80113d6:	6020      	str	r0, [r4, #0]
 80113d8:	f8c0 9000 	str.w	r9, [r0]
 80113dc:	4604      	mov	r4, r0
 80113de:	e7e4      	b.n	80113aa <__pow5mult+0x6a>
 80113e0:	4630      	mov	r0, r6
 80113e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113e6:	bf00      	nop
 80113e8:	08013f6c 	.word	0x08013f6c
 80113ec:	08013c90 	.word	0x08013c90
 80113f0:	08013d81 	.word	0x08013d81

080113f4 <__lshift>:
 80113f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f8:	460c      	mov	r4, r1
 80113fa:	4607      	mov	r7, r0
 80113fc:	4691      	mov	r9, r2
 80113fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011402:	6923      	ldr	r3, [r4, #16]
 8011404:	6849      	ldr	r1, [r1, #4]
 8011406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801140a:	68a3      	ldr	r3, [r4, #8]
 801140c:	f108 0601 	add.w	r6, r8, #1
 8011410:	42b3      	cmp	r3, r6
 8011412:	db0b      	blt.n	801142c <__lshift+0x38>
 8011414:	4638      	mov	r0, r7
 8011416:	f7ff fd99 	bl	8010f4c <_Balloc>
 801141a:	4605      	mov	r5, r0
 801141c:	b948      	cbnz	r0, 8011432 <__lshift+0x3e>
 801141e:	4602      	mov	r2, r0
 8011420:	4b28      	ldr	r3, [pc, #160]	@ (80114c4 <__lshift+0xd0>)
 8011422:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011426:	4828      	ldr	r0, [pc, #160]	@ (80114c8 <__lshift+0xd4>)
 8011428:	f000 fb34 	bl	8011a94 <__assert_func>
 801142c:	3101      	adds	r1, #1
 801142e:	005b      	lsls	r3, r3, #1
 8011430:	e7ee      	b.n	8011410 <__lshift+0x1c>
 8011432:	2300      	movs	r3, #0
 8011434:	f100 0114 	add.w	r1, r0, #20
 8011438:	f100 0210 	add.w	r2, r0, #16
 801143c:	4618      	mov	r0, r3
 801143e:	4553      	cmp	r3, sl
 8011440:	db33      	blt.n	80114aa <__lshift+0xb6>
 8011442:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011446:	f104 0314 	add.w	r3, r4, #20
 801144a:	6920      	ldr	r0, [r4, #16]
 801144c:	f019 091f 	ands.w	r9, r9, #31
 8011450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011458:	d02b      	beq.n	80114b2 <__lshift+0xbe>
 801145a:	f1c9 0e20 	rsb	lr, r9, #32
 801145e:	468a      	mov	sl, r1
 8011460:	2200      	movs	r2, #0
 8011462:	6818      	ldr	r0, [r3, #0]
 8011464:	fa00 f009 	lsl.w	r0, r0, r9
 8011468:	4310      	orrs	r0, r2
 801146a:	f84a 0b04 	str.w	r0, [sl], #4
 801146e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011472:	459c      	cmp	ip, r3
 8011474:	fa22 f20e 	lsr.w	r2, r2, lr
 8011478:	d8f3      	bhi.n	8011462 <__lshift+0x6e>
 801147a:	ebac 0304 	sub.w	r3, ip, r4
 801147e:	f104 0015 	add.w	r0, r4, #21
 8011482:	3b15      	subs	r3, #21
 8011484:	f023 0303 	bic.w	r3, r3, #3
 8011488:	3304      	adds	r3, #4
 801148a:	4560      	cmp	r0, ip
 801148c:	bf88      	it	hi
 801148e:	2304      	movhi	r3, #4
 8011490:	50ca      	str	r2, [r1, r3]
 8011492:	b10a      	cbz	r2, 8011498 <__lshift+0xa4>
 8011494:	f108 0602 	add.w	r6, r8, #2
 8011498:	3e01      	subs	r6, #1
 801149a:	4638      	mov	r0, r7
 801149c:	4621      	mov	r1, r4
 801149e:	612e      	str	r6, [r5, #16]
 80114a0:	f7ff fd94 	bl	8010fcc <_Bfree>
 80114a4:	4628      	mov	r0, r5
 80114a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114aa:	3301      	adds	r3, #1
 80114ac:	f842 0f04 	str.w	r0, [r2, #4]!
 80114b0:	e7c5      	b.n	801143e <__lshift+0x4a>
 80114b2:	3904      	subs	r1, #4
 80114b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80114b8:	459c      	cmp	ip, r3
 80114ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80114be:	d8f9      	bhi.n	80114b4 <__lshift+0xc0>
 80114c0:	e7ea      	b.n	8011498 <__lshift+0xa4>
 80114c2:	bf00      	nop
 80114c4:	08013cff 	.word	0x08013cff
 80114c8:	08013d81 	.word	0x08013d81

080114cc <__mcmp>:
 80114cc:	4603      	mov	r3, r0
 80114ce:	690a      	ldr	r2, [r1, #16]
 80114d0:	6900      	ldr	r0, [r0, #16]
 80114d2:	1a80      	subs	r0, r0, r2
 80114d4:	b530      	push	{r4, r5, lr}
 80114d6:	d10e      	bne.n	80114f6 <__mcmp+0x2a>
 80114d8:	3314      	adds	r3, #20
 80114da:	3114      	adds	r1, #20
 80114dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80114e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80114e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80114e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80114ec:	4295      	cmp	r5, r2
 80114ee:	d003      	beq.n	80114f8 <__mcmp+0x2c>
 80114f0:	d205      	bcs.n	80114fe <__mcmp+0x32>
 80114f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80114f6:	bd30      	pop	{r4, r5, pc}
 80114f8:	42a3      	cmp	r3, r4
 80114fa:	d3f3      	bcc.n	80114e4 <__mcmp+0x18>
 80114fc:	e7fb      	b.n	80114f6 <__mcmp+0x2a>
 80114fe:	2001      	movs	r0, #1
 8011500:	e7f9      	b.n	80114f6 <__mcmp+0x2a>
	...

08011504 <__mdiff>:
 8011504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011508:	4689      	mov	r9, r1
 801150a:	4606      	mov	r6, r0
 801150c:	4611      	mov	r1, r2
 801150e:	4614      	mov	r4, r2
 8011510:	4648      	mov	r0, r9
 8011512:	f7ff ffdb 	bl	80114cc <__mcmp>
 8011516:	1e05      	subs	r5, r0, #0
 8011518:	d112      	bne.n	8011540 <__mdiff+0x3c>
 801151a:	4629      	mov	r1, r5
 801151c:	4630      	mov	r0, r6
 801151e:	f7ff fd15 	bl	8010f4c <_Balloc>
 8011522:	4602      	mov	r2, r0
 8011524:	b928      	cbnz	r0, 8011532 <__mdiff+0x2e>
 8011526:	4b41      	ldr	r3, [pc, #260]	@ (801162c <__mdiff+0x128>)
 8011528:	f240 2137 	movw	r1, #567	@ 0x237
 801152c:	4840      	ldr	r0, [pc, #256]	@ (8011630 <__mdiff+0x12c>)
 801152e:	f000 fab1 	bl	8011a94 <__assert_func>
 8011532:	2301      	movs	r3, #1
 8011534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011538:	4610      	mov	r0, r2
 801153a:	b003      	add	sp, #12
 801153c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011540:	bfbc      	itt	lt
 8011542:	464b      	movlt	r3, r9
 8011544:	46a1      	movlt	r9, r4
 8011546:	4630      	mov	r0, r6
 8011548:	bfb8      	it	lt
 801154a:	2501      	movlt	r5, #1
 801154c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011550:	bfb4      	ite	lt
 8011552:	461c      	movlt	r4, r3
 8011554:	2500      	movge	r5, #0
 8011556:	f7ff fcf9 	bl	8010f4c <_Balloc>
 801155a:	4602      	mov	r2, r0
 801155c:	b918      	cbnz	r0, 8011566 <__mdiff+0x62>
 801155e:	4b33      	ldr	r3, [pc, #204]	@ (801162c <__mdiff+0x128>)
 8011560:	f240 2145 	movw	r1, #581	@ 0x245
 8011564:	e7e2      	b.n	801152c <__mdiff+0x28>
 8011566:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801156a:	f104 0e14 	add.w	lr, r4, #20
 801156e:	6926      	ldr	r6, [r4, #16]
 8011570:	f100 0b14 	add.w	fp, r0, #20
 8011574:	60c5      	str	r5, [r0, #12]
 8011576:	f109 0514 	add.w	r5, r9, #20
 801157a:	f109 0310 	add.w	r3, r9, #16
 801157e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011582:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011586:	46d9      	mov	r9, fp
 8011588:	f04f 0c00 	mov.w	ip, #0
 801158c:	9301      	str	r3, [sp, #4]
 801158e:	9b01      	ldr	r3, [sp, #4]
 8011590:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011594:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011598:	4576      	cmp	r6, lr
 801159a:	9301      	str	r3, [sp, #4]
 801159c:	fa1f f38a 	uxth.w	r3, sl
 80115a0:	4619      	mov	r1, r3
 80115a2:	b283      	uxth	r3, r0
 80115a4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80115a8:	eba1 0303 	sub.w	r3, r1, r3
 80115ac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80115b0:	4463      	add	r3, ip
 80115b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80115bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80115c0:	f849 3b04 	str.w	r3, [r9], #4
 80115c4:	d8e3      	bhi.n	801158e <__mdiff+0x8a>
 80115c6:	1b33      	subs	r3, r6, r4
 80115c8:	3415      	adds	r4, #21
 80115ca:	3b15      	subs	r3, #21
 80115cc:	f023 0303 	bic.w	r3, r3, #3
 80115d0:	3304      	adds	r3, #4
 80115d2:	42a6      	cmp	r6, r4
 80115d4:	bf38      	it	cc
 80115d6:	2304      	movcc	r3, #4
 80115d8:	441d      	add	r5, r3
 80115da:	445b      	add	r3, fp
 80115dc:	462c      	mov	r4, r5
 80115de:	461e      	mov	r6, r3
 80115e0:	4544      	cmp	r4, r8
 80115e2:	d30e      	bcc.n	8011602 <__mdiff+0xfe>
 80115e4:	f108 0103 	add.w	r1, r8, #3
 80115e8:	1b49      	subs	r1, r1, r5
 80115ea:	3d03      	subs	r5, #3
 80115ec:	f021 0103 	bic.w	r1, r1, #3
 80115f0:	45a8      	cmp	r8, r5
 80115f2:	bf38      	it	cc
 80115f4:	2100      	movcc	r1, #0
 80115f6:	440b      	add	r3, r1
 80115f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80115fc:	b199      	cbz	r1, 8011626 <__mdiff+0x122>
 80115fe:	6117      	str	r7, [r2, #16]
 8011600:	e79a      	b.n	8011538 <__mdiff+0x34>
 8011602:	f854 1b04 	ldr.w	r1, [r4], #4
 8011606:	46e6      	mov	lr, ip
 8011608:	fa1f fc81 	uxth.w	ip, r1
 801160c:	0c08      	lsrs	r0, r1, #16
 801160e:	4471      	add	r1, lr
 8011610:	44f4      	add	ip, lr
 8011612:	b289      	uxth	r1, r1
 8011614:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011618:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801161c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011620:	f846 1b04 	str.w	r1, [r6], #4
 8011624:	e7dc      	b.n	80115e0 <__mdiff+0xdc>
 8011626:	3f01      	subs	r7, #1
 8011628:	e7e6      	b.n	80115f8 <__mdiff+0xf4>
 801162a:	bf00      	nop
 801162c:	08013cff 	.word	0x08013cff
 8011630:	08013d81 	.word	0x08013d81

08011634 <__ulp>:
 8011634:	b082      	sub	sp, #8
 8011636:	4b11      	ldr	r3, [pc, #68]	@ (801167c <__ulp+0x48>)
 8011638:	ed8d 0b00 	vstr	d0, [sp]
 801163c:	9a01      	ldr	r2, [sp, #4]
 801163e:	4013      	ands	r3, r2
 8011640:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011644:	2b00      	cmp	r3, #0
 8011646:	dc08      	bgt.n	801165a <__ulp+0x26>
 8011648:	425b      	negs	r3, r3
 801164a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801164e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011652:	da04      	bge.n	801165e <__ulp+0x2a>
 8011654:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011658:	4113      	asrs	r3, r2
 801165a:	2200      	movs	r2, #0
 801165c:	e008      	b.n	8011670 <__ulp+0x3c>
 801165e:	f1a2 0314 	sub.w	r3, r2, #20
 8011662:	2b1e      	cmp	r3, #30
 8011664:	bfd6      	itet	le
 8011666:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801166a:	2201      	movgt	r2, #1
 801166c:	40da      	lsrle	r2, r3
 801166e:	2300      	movs	r3, #0
 8011670:	4619      	mov	r1, r3
 8011672:	4610      	mov	r0, r2
 8011674:	ec41 0b10 	vmov	d0, r0, r1
 8011678:	b002      	add	sp, #8
 801167a:	4770      	bx	lr
 801167c:	7ff00000 	.word	0x7ff00000

08011680 <__b2d>:
 8011680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011684:	6906      	ldr	r6, [r0, #16]
 8011686:	f100 0814 	add.w	r8, r0, #20
 801168a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801168e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011692:	1f37      	subs	r7, r6, #4
 8011694:	4610      	mov	r0, r2
 8011696:	f7ff fd4d 	bl	8011134 <__hi0bits>
 801169a:	f1c0 0320 	rsb	r3, r0, #32
 801169e:	280a      	cmp	r0, #10
 80116a0:	600b      	str	r3, [r1, #0]
 80116a2:	491d      	ldr	r1, [pc, #116]	@ (8011718 <__b2d+0x98>)
 80116a4:	dc16      	bgt.n	80116d4 <__b2d+0x54>
 80116a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80116aa:	45b8      	cmp	r8, r7
 80116ac:	f100 0015 	add.w	r0, r0, #21
 80116b0:	fa22 f30c 	lsr.w	r3, r2, ip
 80116b4:	fa02 f000 	lsl.w	r0, r2, r0
 80116b8:	ea43 0501 	orr.w	r5, r3, r1
 80116bc:	bf34      	ite	cc
 80116be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116c2:	2300      	movcs	r3, #0
 80116c4:	fa23 f30c 	lsr.w	r3, r3, ip
 80116c8:	4303      	orrs	r3, r0
 80116ca:	461c      	mov	r4, r3
 80116cc:	ec45 4b10 	vmov	d0, r4, r5
 80116d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d4:	45b8      	cmp	r8, r7
 80116d6:	bf3a      	itte	cc
 80116d8:	f1a6 0708 	subcc.w	r7, r6, #8
 80116dc:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80116e0:	2300      	movcs	r3, #0
 80116e2:	380b      	subs	r0, #11
 80116e4:	d014      	beq.n	8011710 <__b2d+0x90>
 80116e6:	f1c0 0120 	rsb	r1, r0, #32
 80116ea:	4082      	lsls	r2, r0
 80116ec:	4547      	cmp	r7, r8
 80116ee:	fa23 f401 	lsr.w	r4, r3, r1
 80116f2:	fa03 f300 	lsl.w	r3, r3, r0
 80116f6:	ea42 0204 	orr.w	r2, r2, r4
 80116fa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80116fe:	bf8c      	ite	hi
 8011700:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011704:	2200      	movls	r2, #0
 8011706:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801170a:	40ca      	lsrs	r2, r1
 801170c:	4313      	orrs	r3, r2
 801170e:	e7dc      	b.n	80116ca <__b2d+0x4a>
 8011710:	ea42 0501 	orr.w	r5, r2, r1
 8011714:	e7d9      	b.n	80116ca <__b2d+0x4a>
 8011716:	bf00      	nop
 8011718:	3ff00000 	.word	0x3ff00000

0801171c <__d2b>:
 801171c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011720:	460f      	mov	r7, r1
 8011722:	2101      	movs	r1, #1
 8011724:	4616      	mov	r6, r2
 8011726:	ec59 8b10 	vmov	r8, r9, d0
 801172a:	f7ff fc0f 	bl	8010f4c <_Balloc>
 801172e:	4604      	mov	r4, r0
 8011730:	b930      	cbnz	r0, 8011740 <__d2b+0x24>
 8011732:	4602      	mov	r2, r0
 8011734:	4b23      	ldr	r3, [pc, #140]	@ (80117c4 <__d2b+0xa8>)
 8011736:	f240 310f 	movw	r1, #783	@ 0x30f
 801173a:	4823      	ldr	r0, [pc, #140]	@ (80117c8 <__d2b+0xac>)
 801173c:	f000 f9aa 	bl	8011a94 <__assert_func>
 8011740:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011744:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011748:	b10d      	cbz	r5, 801174e <__d2b+0x32>
 801174a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801174e:	9301      	str	r3, [sp, #4]
 8011750:	f1b8 0300 	subs.w	r3, r8, #0
 8011754:	d023      	beq.n	801179e <__d2b+0x82>
 8011756:	4668      	mov	r0, sp
 8011758:	9300      	str	r3, [sp, #0]
 801175a:	f7ff fd0a 	bl	8011172 <__lo0bits>
 801175e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011762:	b1d0      	cbz	r0, 801179a <__d2b+0x7e>
 8011764:	f1c0 0320 	rsb	r3, r0, #32
 8011768:	fa02 f303 	lsl.w	r3, r2, r3
 801176c:	40c2      	lsrs	r2, r0
 801176e:	430b      	orrs	r3, r1
 8011770:	9201      	str	r2, [sp, #4]
 8011772:	6163      	str	r3, [r4, #20]
 8011774:	9b01      	ldr	r3, [sp, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	61a3      	str	r3, [r4, #24]
 801177a:	bf0c      	ite	eq
 801177c:	2201      	moveq	r2, #1
 801177e:	2202      	movne	r2, #2
 8011780:	6122      	str	r2, [r4, #16]
 8011782:	b1a5      	cbz	r5, 80117ae <__d2b+0x92>
 8011784:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011788:	4405      	add	r5, r0
 801178a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801178e:	603d      	str	r5, [r7, #0]
 8011790:	6030      	str	r0, [r6, #0]
 8011792:	4620      	mov	r0, r4
 8011794:	b003      	add	sp, #12
 8011796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801179a:	6161      	str	r1, [r4, #20]
 801179c:	e7ea      	b.n	8011774 <__d2b+0x58>
 801179e:	a801      	add	r0, sp, #4
 80117a0:	f7ff fce7 	bl	8011172 <__lo0bits>
 80117a4:	9b01      	ldr	r3, [sp, #4]
 80117a6:	3020      	adds	r0, #32
 80117a8:	2201      	movs	r2, #1
 80117aa:	6163      	str	r3, [r4, #20]
 80117ac:	e7e8      	b.n	8011780 <__d2b+0x64>
 80117ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80117b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80117b6:	6038      	str	r0, [r7, #0]
 80117b8:	6918      	ldr	r0, [r3, #16]
 80117ba:	f7ff fcbb 	bl	8011134 <__hi0bits>
 80117be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80117c2:	e7e5      	b.n	8011790 <__d2b+0x74>
 80117c4:	08013cff 	.word	0x08013cff
 80117c8:	08013d81 	.word	0x08013d81

080117cc <__ratio>:
 80117cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d0:	b085      	sub	sp, #20
 80117d2:	e9cd 1000 	strd	r1, r0, [sp]
 80117d6:	a902      	add	r1, sp, #8
 80117d8:	f7ff ff52 	bl	8011680 <__b2d>
 80117dc:	a903      	add	r1, sp, #12
 80117de:	9800      	ldr	r0, [sp, #0]
 80117e0:	ec55 4b10 	vmov	r4, r5, d0
 80117e4:	f7ff ff4c 	bl	8011680 <__b2d>
 80117e8:	9b01      	ldr	r3, [sp, #4]
 80117ea:	462f      	mov	r7, r5
 80117ec:	4620      	mov	r0, r4
 80117ee:	6919      	ldr	r1, [r3, #16]
 80117f0:	9b00      	ldr	r3, [sp, #0]
 80117f2:	691b      	ldr	r3, [r3, #16]
 80117f4:	1ac9      	subs	r1, r1, r3
 80117f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80117fa:	ec5b ab10 	vmov	sl, fp, d0
 80117fe:	1a9b      	subs	r3, r3, r2
 8011800:	46d9      	mov	r9, fp
 8011802:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011806:	2b00      	cmp	r3, #0
 8011808:	bfcd      	iteet	gt
 801180a:	462a      	movgt	r2, r5
 801180c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011810:	465a      	movle	r2, fp
 8011812:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011816:	bfd8      	it	le
 8011818:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801181c:	4652      	mov	r2, sl
 801181e:	4639      	mov	r1, r7
 8011820:	464b      	mov	r3, r9
 8011822:	f7ef f823 	bl	800086c <__aeabi_ddiv>
 8011826:	ec41 0b10 	vmov	d0, r0, r1
 801182a:	b005      	add	sp, #20
 801182c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011830 <__copybits>:
 8011830:	3901      	subs	r1, #1
 8011832:	f102 0314 	add.w	r3, r2, #20
 8011836:	1149      	asrs	r1, r1, #5
 8011838:	b570      	push	{r4, r5, r6, lr}
 801183a:	3101      	adds	r1, #1
 801183c:	6914      	ldr	r4, [r2, #16]
 801183e:	1f05      	subs	r5, r0, #4
 8011840:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011844:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011848:	42a3      	cmp	r3, r4
 801184a:	d30c      	bcc.n	8011866 <__copybits+0x36>
 801184c:	1aa3      	subs	r3, r4, r2
 801184e:	3211      	adds	r2, #17
 8011850:	3b11      	subs	r3, #17
 8011852:	f023 0303 	bic.w	r3, r3, #3
 8011856:	42a2      	cmp	r2, r4
 8011858:	bf88      	it	hi
 801185a:	2300      	movhi	r3, #0
 801185c:	4418      	add	r0, r3
 801185e:	2300      	movs	r3, #0
 8011860:	4288      	cmp	r0, r1
 8011862:	d305      	bcc.n	8011870 <__copybits+0x40>
 8011864:	bd70      	pop	{r4, r5, r6, pc}
 8011866:	f853 6b04 	ldr.w	r6, [r3], #4
 801186a:	f845 6f04 	str.w	r6, [r5, #4]!
 801186e:	e7eb      	b.n	8011848 <__copybits+0x18>
 8011870:	f840 3b04 	str.w	r3, [r0], #4
 8011874:	e7f4      	b.n	8011860 <__copybits+0x30>

08011876 <__any_on>:
 8011876:	f100 0214 	add.w	r2, r0, #20
 801187a:	114b      	asrs	r3, r1, #5
 801187c:	6900      	ldr	r0, [r0, #16]
 801187e:	4298      	cmp	r0, r3
 8011880:	b510      	push	{r4, lr}
 8011882:	db11      	blt.n	80118a8 <__any_on+0x32>
 8011884:	dd0a      	ble.n	801189c <__any_on+0x26>
 8011886:	f011 011f 	ands.w	r1, r1, #31
 801188a:	d007      	beq.n	801189c <__any_on+0x26>
 801188c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011890:	fa24 f001 	lsr.w	r0, r4, r1
 8011894:	fa00 f101 	lsl.w	r1, r0, r1
 8011898:	428c      	cmp	r4, r1
 801189a:	d10b      	bne.n	80118b4 <__any_on+0x3e>
 801189c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d803      	bhi.n	80118ac <__any_on+0x36>
 80118a4:	2000      	movs	r0, #0
 80118a6:	bd10      	pop	{r4, pc}
 80118a8:	4603      	mov	r3, r0
 80118aa:	e7f7      	b.n	801189c <__any_on+0x26>
 80118ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118b0:	2900      	cmp	r1, #0
 80118b2:	d0f5      	beq.n	80118a0 <__any_on+0x2a>
 80118b4:	2001      	movs	r0, #1
 80118b6:	e7f6      	b.n	80118a6 <__any_on+0x30>

080118b8 <__sread>:
 80118b8:	b510      	push	{r4, lr}
 80118ba:	460c      	mov	r4, r1
 80118bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118c0:	f000 f8a4 	bl	8011a0c <_read_r>
 80118c4:	2800      	cmp	r0, #0
 80118c6:	bfab      	itete	ge
 80118c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80118ca:	89a3      	ldrhlt	r3, [r4, #12]
 80118cc:	181b      	addge	r3, r3, r0
 80118ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80118d2:	bfac      	ite	ge
 80118d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80118d6:	81a3      	strhlt	r3, [r4, #12]
 80118d8:	bd10      	pop	{r4, pc}

080118da <__swrite>:
 80118da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118de:	461f      	mov	r7, r3
 80118e0:	898b      	ldrh	r3, [r1, #12]
 80118e2:	4605      	mov	r5, r0
 80118e4:	460c      	mov	r4, r1
 80118e6:	05db      	lsls	r3, r3, #23
 80118e8:	4616      	mov	r6, r2
 80118ea:	d505      	bpl.n	80118f8 <__swrite+0x1e>
 80118ec:	2302      	movs	r3, #2
 80118ee:	2200      	movs	r2, #0
 80118f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118f4:	f000 f878 	bl	80119e8 <_lseek_r>
 80118f8:	89a3      	ldrh	r3, [r4, #12]
 80118fa:	4632      	mov	r2, r6
 80118fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011900:	4628      	mov	r0, r5
 8011902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011906:	81a3      	strh	r3, [r4, #12]
 8011908:	463b      	mov	r3, r7
 801190a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801190e:	f000 b89f 	b.w	8011a50 <_write_r>

08011912 <__sseek>:
 8011912:	b510      	push	{r4, lr}
 8011914:	460c      	mov	r4, r1
 8011916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801191a:	f000 f865 	bl	80119e8 <_lseek_r>
 801191e:	1c43      	adds	r3, r0, #1
 8011920:	89a3      	ldrh	r3, [r4, #12]
 8011922:	bf15      	itete	ne
 8011924:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011926:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801192a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801192e:	81a3      	strheq	r3, [r4, #12]
 8011930:	bf18      	it	ne
 8011932:	81a3      	strhne	r3, [r4, #12]
 8011934:	bd10      	pop	{r4, pc}

08011936 <__sclose>:
 8011936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801193a:	f000 b89b 	b.w	8011a74 <_close_r>

0801193e <_realloc_r>:
 801193e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011942:	4607      	mov	r7, r0
 8011944:	4614      	mov	r4, r2
 8011946:	460d      	mov	r5, r1
 8011948:	b921      	cbnz	r1, 8011954 <_realloc_r+0x16>
 801194a:	4611      	mov	r1, r2
 801194c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011950:	f7ff b9b2 	b.w	8010cb8 <_malloc_r>
 8011954:	b92a      	cbnz	r2, 8011962 <_realloc_r+0x24>
 8011956:	4625      	mov	r5, r4
 8011958:	f000 f8ce 	bl	8011af8 <_free_r>
 801195c:	4628      	mov	r0, r5
 801195e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011962:	f000 f913 	bl	8011b8c <_malloc_usable_size_r>
 8011966:	4284      	cmp	r4, r0
 8011968:	4606      	mov	r6, r0
 801196a:	d802      	bhi.n	8011972 <_realloc_r+0x34>
 801196c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011970:	d8f4      	bhi.n	801195c <_realloc_r+0x1e>
 8011972:	4621      	mov	r1, r4
 8011974:	4638      	mov	r0, r7
 8011976:	f7ff f99f 	bl	8010cb8 <_malloc_r>
 801197a:	4680      	mov	r8, r0
 801197c:	b908      	cbnz	r0, 8011982 <_realloc_r+0x44>
 801197e:	4645      	mov	r5, r8
 8011980:	e7ec      	b.n	801195c <_realloc_r+0x1e>
 8011982:	42b4      	cmp	r4, r6
 8011984:	4622      	mov	r2, r4
 8011986:	4629      	mov	r1, r5
 8011988:	bf28      	it	cs
 801198a:	4632      	movcs	r2, r6
 801198c:	f7fd fe62 	bl	800f654 <memcpy>
 8011990:	4629      	mov	r1, r5
 8011992:	4638      	mov	r0, r7
 8011994:	f000 f8b0 	bl	8011af8 <_free_r>
 8011998:	e7f1      	b.n	801197e <_realloc_r+0x40>

0801199a <__ascii_wctomb>:
 801199a:	4603      	mov	r3, r0
 801199c:	4608      	mov	r0, r1
 801199e:	b141      	cbz	r1, 80119b2 <__ascii_wctomb+0x18>
 80119a0:	2aff      	cmp	r2, #255	@ 0xff
 80119a2:	d904      	bls.n	80119ae <__ascii_wctomb+0x14>
 80119a4:	228a      	movs	r2, #138	@ 0x8a
 80119a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80119aa:	601a      	str	r2, [r3, #0]
 80119ac:	4770      	bx	lr
 80119ae:	2001      	movs	r0, #1
 80119b0:	700a      	strb	r2, [r1, #0]
 80119b2:	4770      	bx	lr

080119b4 <memmove>:
 80119b4:	4288      	cmp	r0, r1
 80119b6:	b510      	push	{r4, lr}
 80119b8:	eb01 0402 	add.w	r4, r1, r2
 80119bc:	d902      	bls.n	80119c4 <memmove+0x10>
 80119be:	4284      	cmp	r4, r0
 80119c0:	4623      	mov	r3, r4
 80119c2:	d807      	bhi.n	80119d4 <memmove+0x20>
 80119c4:	1e43      	subs	r3, r0, #1
 80119c6:	42a1      	cmp	r1, r4
 80119c8:	d008      	beq.n	80119dc <memmove+0x28>
 80119ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119d2:	e7f8      	b.n	80119c6 <memmove+0x12>
 80119d4:	4402      	add	r2, r0
 80119d6:	4601      	mov	r1, r0
 80119d8:	428a      	cmp	r2, r1
 80119da:	d100      	bne.n	80119de <memmove+0x2a>
 80119dc:	bd10      	pop	{r4, pc}
 80119de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119e6:	e7f7      	b.n	80119d8 <memmove+0x24>

080119e8 <_lseek_r>:
 80119e8:	b538      	push	{r3, r4, r5, lr}
 80119ea:	4604      	mov	r4, r0
 80119ec:	4d06      	ldr	r5, [pc, #24]	@ (8011a08 <_lseek_r+0x20>)
 80119ee:	4608      	mov	r0, r1
 80119f0:	4611      	mov	r1, r2
 80119f2:	2200      	movs	r2, #0
 80119f4:	602a      	str	r2, [r5, #0]
 80119f6:	461a      	mov	r2, r3
 80119f8:	f7f3 fe93 	bl	8005722 <_lseek>
 80119fc:	1c43      	adds	r3, r0, #1
 80119fe:	d102      	bne.n	8011a06 <_lseek_r+0x1e>
 8011a00:	682b      	ldr	r3, [r5, #0]
 8011a02:	b103      	cbz	r3, 8011a06 <_lseek_r+0x1e>
 8011a04:	6023      	str	r3, [r4, #0]
 8011a06:	bd38      	pop	{r3, r4, r5, pc}
 8011a08:	2000061c 	.word	0x2000061c

08011a0c <_read_r>:
 8011a0c:	b538      	push	{r3, r4, r5, lr}
 8011a0e:	4604      	mov	r4, r0
 8011a10:	4d06      	ldr	r5, [pc, #24]	@ (8011a2c <_read_r+0x20>)
 8011a12:	4608      	mov	r0, r1
 8011a14:	4611      	mov	r1, r2
 8011a16:	2200      	movs	r2, #0
 8011a18:	602a      	str	r2, [r5, #0]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	f7f3 fe21 	bl	8005662 <_read>
 8011a20:	1c43      	adds	r3, r0, #1
 8011a22:	d102      	bne.n	8011a2a <_read_r+0x1e>
 8011a24:	682b      	ldr	r3, [r5, #0]
 8011a26:	b103      	cbz	r3, 8011a2a <_read_r+0x1e>
 8011a28:	6023      	str	r3, [r4, #0]
 8011a2a:	bd38      	pop	{r3, r4, r5, pc}
 8011a2c:	2000061c 	.word	0x2000061c

08011a30 <_sbrk_r>:
 8011a30:	b538      	push	{r3, r4, r5, lr}
 8011a32:	2300      	movs	r3, #0
 8011a34:	4d05      	ldr	r5, [pc, #20]	@ (8011a4c <_sbrk_r+0x1c>)
 8011a36:	4604      	mov	r4, r0
 8011a38:	4608      	mov	r0, r1
 8011a3a:	602b      	str	r3, [r5, #0]
 8011a3c:	f7f3 fe7e 	bl	800573c <_sbrk>
 8011a40:	1c43      	adds	r3, r0, #1
 8011a42:	d102      	bne.n	8011a4a <_sbrk_r+0x1a>
 8011a44:	682b      	ldr	r3, [r5, #0]
 8011a46:	b103      	cbz	r3, 8011a4a <_sbrk_r+0x1a>
 8011a48:	6023      	str	r3, [r4, #0]
 8011a4a:	bd38      	pop	{r3, r4, r5, pc}
 8011a4c:	2000061c 	.word	0x2000061c

08011a50 <_write_r>:
 8011a50:	b538      	push	{r3, r4, r5, lr}
 8011a52:	4604      	mov	r4, r0
 8011a54:	4d06      	ldr	r5, [pc, #24]	@ (8011a70 <_write_r+0x20>)
 8011a56:	4608      	mov	r0, r1
 8011a58:	4611      	mov	r1, r2
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	602a      	str	r2, [r5, #0]
 8011a5e:	461a      	mov	r2, r3
 8011a60:	f7f3 fe1c 	bl	800569c <_write>
 8011a64:	1c43      	adds	r3, r0, #1
 8011a66:	d102      	bne.n	8011a6e <_write_r+0x1e>
 8011a68:	682b      	ldr	r3, [r5, #0]
 8011a6a:	b103      	cbz	r3, 8011a6e <_write_r+0x1e>
 8011a6c:	6023      	str	r3, [r4, #0]
 8011a6e:	bd38      	pop	{r3, r4, r5, pc}
 8011a70:	2000061c 	.word	0x2000061c

08011a74 <_close_r>:
 8011a74:	b538      	push	{r3, r4, r5, lr}
 8011a76:	2300      	movs	r3, #0
 8011a78:	4d05      	ldr	r5, [pc, #20]	@ (8011a90 <_close_r+0x1c>)
 8011a7a:	4604      	mov	r4, r0
 8011a7c:	4608      	mov	r0, r1
 8011a7e:	602b      	str	r3, [r5, #0]
 8011a80:	f7f3 fe28 	bl	80056d4 <_close>
 8011a84:	1c43      	adds	r3, r0, #1
 8011a86:	d102      	bne.n	8011a8e <_close_r+0x1a>
 8011a88:	682b      	ldr	r3, [r5, #0]
 8011a8a:	b103      	cbz	r3, 8011a8e <_close_r+0x1a>
 8011a8c:	6023      	str	r3, [r4, #0]
 8011a8e:	bd38      	pop	{r3, r4, r5, pc}
 8011a90:	2000061c 	.word	0x2000061c

08011a94 <__assert_func>:
 8011a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a96:	4614      	mov	r4, r2
 8011a98:	461a      	mov	r2, r3
 8011a9a:	4b09      	ldr	r3, [pc, #36]	@ (8011ac0 <__assert_func+0x2c>)
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	68d8      	ldr	r0, [r3, #12]
 8011aa2:	b14c      	cbz	r4, 8011ab8 <__assert_func+0x24>
 8011aa4:	4b07      	ldr	r3, [pc, #28]	@ (8011ac4 <__assert_func+0x30>)
 8011aa6:	9100      	str	r1, [sp, #0]
 8011aa8:	4907      	ldr	r1, [pc, #28]	@ (8011ac8 <__assert_func+0x34>)
 8011aaa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011aae:	462b      	mov	r3, r5
 8011ab0:	f000 f874 	bl	8011b9c <fiprintf>
 8011ab4:	f000 f884 	bl	8011bc0 <abort>
 8011ab8:	4b04      	ldr	r3, [pc, #16]	@ (8011acc <__assert_func+0x38>)
 8011aba:	461c      	mov	r4, r3
 8011abc:	e7f3      	b.n	8011aa6 <__assert_func+0x12>
 8011abe:	bf00      	nop
 8011ac0:	2000019c 	.word	0x2000019c
 8011ac4:	08013dda 	.word	0x08013dda
 8011ac8:	08013de7 	.word	0x08013de7
 8011acc:	08013e15 	.word	0x08013e15

08011ad0 <_calloc_r>:
 8011ad0:	b570      	push	{r4, r5, r6, lr}
 8011ad2:	fba1 5402 	umull	r5, r4, r1, r2
 8011ad6:	b934      	cbnz	r4, 8011ae6 <_calloc_r+0x16>
 8011ad8:	4629      	mov	r1, r5
 8011ada:	f7ff f8ed 	bl	8010cb8 <_malloc_r>
 8011ade:	4606      	mov	r6, r0
 8011ae0:	b928      	cbnz	r0, 8011aee <_calloc_r+0x1e>
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	bd70      	pop	{r4, r5, r6, pc}
 8011ae6:	220c      	movs	r2, #12
 8011ae8:	2600      	movs	r6, #0
 8011aea:	6002      	str	r2, [r0, #0]
 8011aec:	e7f9      	b.n	8011ae2 <_calloc_r+0x12>
 8011aee:	462a      	mov	r2, r5
 8011af0:	4621      	mov	r1, r4
 8011af2:	f7fd fd55 	bl	800f5a0 <memset>
 8011af6:	e7f4      	b.n	8011ae2 <_calloc_r+0x12>

08011af8 <_free_r>:
 8011af8:	b538      	push	{r3, r4, r5, lr}
 8011afa:	4605      	mov	r5, r0
 8011afc:	2900      	cmp	r1, #0
 8011afe:	d041      	beq.n	8011b84 <_free_r+0x8c>
 8011b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b04:	1f0c      	subs	r4, r1, #4
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	bfb8      	it	lt
 8011b0a:	18e4      	addlt	r4, r4, r3
 8011b0c:	f7ff fa12 	bl	8010f34 <__malloc_lock>
 8011b10:	4a1d      	ldr	r2, [pc, #116]	@ (8011b88 <_free_r+0x90>)
 8011b12:	6813      	ldr	r3, [r2, #0]
 8011b14:	b933      	cbnz	r3, 8011b24 <_free_r+0x2c>
 8011b16:	6063      	str	r3, [r4, #4]
 8011b18:	6014      	str	r4, [r2, #0]
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b20:	f7ff ba0e 	b.w	8010f40 <__malloc_unlock>
 8011b24:	42a3      	cmp	r3, r4
 8011b26:	d908      	bls.n	8011b3a <_free_r+0x42>
 8011b28:	6820      	ldr	r0, [r4, #0]
 8011b2a:	1821      	adds	r1, r4, r0
 8011b2c:	428b      	cmp	r3, r1
 8011b2e:	bf01      	itttt	eq
 8011b30:	6819      	ldreq	r1, [r3, #0]
 8011b32:	685b      	ldreq	r3, [r3, #4]
 8011b34:	1809      	addeq	r1, r1, r0
 8011b36:	6021      	streq	r1, [r4, #0]
 8011b38:	e7ed      	b.n	8011b16 <_free_r+0x1e>
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	b10b      	cbz	r3, 8011b44 <_free_r+0x4c>
 8011b40:	42a3      	cmp	r3, r4
 8011b42:	d9fa      	bls.n	8011b3a <_free_r+0x42>
 8011b44:	6811      	ldr	r1, [r2, #0]
 8011b46:	1850      	adds	r0, r2, r1
 8011b48:	42a0      	cmp	r0, r4
 8011b4a:	d10b      	bne.n	8011b64 <_free_r+0x6c>
 8011b4c:	6820      	ldr	r0, [r4, #0]
 8011b4e:	4401      	add	r1, r0
 8011b50:	1850      	adds	r0, r2, r1
 8011b52:	6011      	str	r1, [r2, #0]
 8011b54:	4283      	cmp	r3, r0
 8011b56:	d1e0      	bne.n	8011b1a <_free_r+0x22>
 8011b58:	6818      	ldr	r0, [r3, #0]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	4408      	add	r0, r1
 8011b5e:	6053      	str	r3, [r2, #4]
 8011b60:	6010      	str	r0, [r2, #0]
 8011b62:	e7da      	b.n	8011b1a <_free_r+0x22>
 8011b64:	d902      	bls.n	8011b6c <_free_r+0x74>
 8011b66:	230c      	movs	r3, #12
 8011b68:	602b      	str	r3, [r5, #0]
 8011b6a:	e7d6      	b.n	8011b1a <_free_r+0x22>
 8011b6c:	6820      	ldr	r0, [r4, #0]
 8011b6e:	1821      	adds	r1, r4, r0
 8011b70:	428b      	cmp	r3, r1
 8011b72:	bf02      	ittt	eq
 8011b74:	6819      	ldreq	r1, [r3, #0]
 8011b76:	685b      	ldreq	r3, [r3, #4]
 8011b78:	1809      	addeq	r1, r1, r0
 8011b7a:	6063      	str	r3, [r4, #4]
 8011b7c:	bf08      	it	eq
 8011b7e:	6021      	streq	r1, [r4, #0]
 8011b80:	6054      	str	r4, [r2, #4]
 8011b82:	e7ca      	b.n	8011b1a <_free_r+0x22>
 8011b84:	bd38      	pop	{r3, r4, r5, pc}
 8011b86:	bf00      	nop
 8011b88:	20000618 	.word	0x20000618

08011b8c <_malloc_usable_size_r>:
 8011b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b90:	1f18      	subs	r0, r3, #4
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	bfbc      	itt	lt
 8011b96:	580b      	ldrlt	r3, [r1, r0]
 8011b98:	18c0      	addlt	r0, r0, r3
 8011b9a:	4770      	bx	lr

08011b9c <fiprintf>:
 8011b9c:	b40e      	push	{r1, r2, r3}
 8011b9e:	b503      	push	{r0, r1, lr}
 8011ba0:	ab03      	add	r3, sp, #12
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	4805      	ldr	r0, [pc, #20]	@ (8011bbc <fiprintf+0x20>)
 8011ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011baa:	6800      	ldr	r0, [r0, #0]
 8011bac:	9301      	str	r3, [sp, #4]
 8011bae:	f000 f837 	bl	8011c20 <_vfiprintf_r>
 8011bb2:	b002      	add	sp, #8
 8011bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bb8:	b003      	add	sp, #12
 8011bba:	4770      	bx	lr
 8011bbc:	2000019c 	.word	0x2000019c

08011bc0 <abort>:
 8011bc0:	2006      	movs	r0, #6
 8011bc2:	b508      	push	{r3, lr}
 8011bc4:	f000 fa62 	bl	801208c <raise>
 8011bc8:	2001      	movs	r0, #1
 8011bca:	f7f3 fd3f 	bl	800564c <_exit>

08011bce <__sfputc_r>:
 8011bce:	6893      	ldr	r3, [r2, #8]
 8011bd0:	3b01      	subs	r3, #1
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	b410      	push	{r4}
 8011bd6:	6093      	str	r3, [r2, #8]
 8011bd8:	da08      	bge.n	8011bec <__sfputc_r+0x1e>
 8011bda:	6994      	ldr	r4, [r2, #24]
 8011bdc:	42a3      	cmp	r3, r4
 8011bde:	db01      	blt.n	8011be4 <__sfputc_r+0x16>
 8011be0:	290a      	cmp	r1, #10
 8011be2:	d103      	bne.n	8011bec <__sfputc_r+0x1e>
 8011be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011be8:	f000 b932 	b.w	8011e50 <__swbuf_r>
 8011bec:	6813      	ldr	r3, [r2, #0]
 8011bee:	1c58      	adds	r0, r3, #1
 8011bf0:	6010      	str	r0, [r2, #0]
 8011bf2:	4608      	mov	r0, r1
 8011bf4:	7019      	strb	r1, [r3, #0]
 8011bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bfa:	4770      	bx	lr

08011bfc <__sfputs_r>:
 8011bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bfe:	4606      	mov	r6, r0
 8011c00:	460f      	mov	r7, r1
 8011c02:	4614      	mov	r4, r2
 8011c04:	18d5      	adds	r5, r2, r3
 8011c06:	42ac      	cmp	r4, r5
 8011c08:	d101      	bne.n	8011c0e <__sfputs_r+0x12>
 8011c0a:	2000      	movs	r0, #0
 8011c0c:	e007      	b.n	8011c1e <__sfputs_r+0x22>
 8011c0e:	463a      	mov	r2, r7
 8011c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c14:	4630      	mov	r0, r6
 8011c16:	f7ff ffda 	bl	8011bce <__sfputc_r>
 8011c1a:	1c43      	adds	r3, r0, #1
 8011c1c:	d1f3      	bne.n	8011c06 <__sfputs_r+0xa>
 8011c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c20 <_vfiprintf_r>:
 8011c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c24:	460d      	mov	r5, r1
 8011c26:	b09d      	sub	sp, #116	@ 0x74
 8011c28:	4614      	mov	r4, r2
 8011c2a:	4698      	mov	r8, r3
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	b118      	cbz	r0, 8011c38 <_vfiprintf_r+0x18>
 8011c30:	6a03      	ldr	r3, [r0, #32]
 8011c32:	b90b      	cbnz	r3, 8011c38 <_vfiprintf_r+0x18>
 8011c34:	f7fc fdfa 	bl	800e82c <__sinit>
 8011c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c3a:	07d9      	lsls	r1, r3, #31
 8011c3c:	d405      	bmi.n	8011c4a <_vfiprintf_r+0x2a>
 8011c3e:	89ab      	ldrh	r3, [r5, #12]
 8011c40:	059a      	lsls	r2, r3, #22
 8011c42:	d402      	bmi.n	8011c4a <_vfiprintf_r+0x2a>
 8011c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c46:	f7fd fcf0 	bl	800f62a <__retarget_lock_acquire_recursive>
 8011c4a:	89ab      	ldrh	r3, [r5, #12]
 8011c4c:	071b      	lsls	r3, r3, #28
 8011c4e:	d501      	bpl.n	8011c54 <_vfiprintf_r+0x34>
 8011c50:	692b      	ldr	r3, [r5, #16]
 8011c52:	b99b      	cbnz	r3, 8011c7c <_vfiprintf_r+0x5c>
 8011c54:	4629      	mov	r1, r5
 8011c56:	4630      	mov	r0, r6
 8011c58:	f000 f938 	bl	8011ecc <__swsetup_r>
 8011c5c:	b170      	cbz	r0, 8011c7c <_vfiprintf_r+0x5c>
 8011c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c60:	07dc      	lsls	r4, r3, #31
 8011c62:	d504      	bpl.n	8011c6e <_vfiprintf_r+0x4e>
 8011c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c68:	b01d      	add	sp, #116	@ 0x74
 8011c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c6e:	89ab      	ldrh	r3, [r5, #12]
 8011c70:	0598      	lsls	r0, r3, #22
 8011c72:	d4f7      	bmi.n	8011c64 <_vfiprintf_r+0x44>
 8011c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c76:	f7fd fcd9 	bl	800f62c <__retarget_lock_release_recursive>
 8011c7a:	e7f3      	b.n	8011c64 <_vfiprintf_r+0x44>
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c82:	f04f 0901 	mov.w	r9, #1
 8011c86:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011e3c <_vfiprintf_r+0x21c>
 8011c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c8c:	2320      	movs	r3, #32
 8011c8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c92:	2330      	movs	r3, #48	@ 0x30
 8011c94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c98:	4623      	mov	r3, r4
 8011c9a:	469a      	mov	sl, r3
 8011c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ca0:	b10a      	cbz	r2, 8011ca6 <_vfiprintf_r+0x86>
 8011ca2:	2a25      	cmp	r2, #37	@ 0x25
 8011ca4:	d1f9      	bne.n	8011c9a <_vfiprintf_r+0x7a>
 8011ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8011caa:	d00b      	beq.n	8011cc4 <_vfiprintf_r+0xa4>
 8011cac:	465b      	mov	r3, fp
 8011cae:	4622      	mov	r2, r4
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	f7ff ffa2 	bl	8011bfc <__sfputs_r>
 8011cb8:	3001      	adds	r0, #1
 8011cba:	f000 80a7 	beq.w	8011e0c <_vfiprintf_r+0x1ec>
 8011cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cc0:	445a      	add	r2, fp
 8011cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	f000 809f 	beq.w	8011e0c <_vfiprintf_r+0x1ec>
 8011cce:	2300      	movs	r3, #0
 8011cd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011cd4:	f10a 0a01 	add.w	sl, sl, #1
 8011cd8:	9304      	str	r3, [sp, #16]
 8011cda:	9307      	str	r3, [sp, #28]
 8011cdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ce0:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ce2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ce6:	4654      	mov	r4, sl
 8011ce8:	2205      	movs	r2, #5
 8011cea:	4854      	ldr	r0, [pc, #336]	@ (8011e3c <_vfiprintf_r+0x21c>)
 8011cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cf0:	f7fd fca2 	bl	800f638 <memchr>
 8011cf4:	9a04      	ldr	r2, [sp, #16]
 8011cf6:	b9d8      	cbnz	r0, 8011d30 <_vfiprintf_r+0x110>
 8011cf8:	06d1      	lsls	r1, r2, #27
 8011cfa:	bf44      	itt	mi
 8011cfc:	2320      	movmi	r3, #32
 8011cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d02:	0713      	lsls	r3, r2, #28
 8011d04:	bf44      	itt	mi
 8011d06:	232b      	movmi	r3, #43	@ 0x2b
 8011d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8011d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d12:	d015      	beq.n	8011d40 <_vfiprintf_r+0x120>
 8011d14:	9a07      	ldr	r2, [sp, #28]
 8011d16:	4654      	mov	r4, sl
 8011d18:	2000      	movs	r0, #0
 8011d1a:	f04f 0c0a 	mov.w	ip, #10
 8011d1e:	4621      	mov	r1, r4
 8011d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d24:	3b30      	subs	r3, #48	@ 0x30
 8011d26:	2b09      	cmp	r3, #9
 8011d28:	d94b      	bls.n	8011dc2 <_vfiprintf_r+0x1a2>
 8011d2a:	b1b0      	cbz	r0, 8011d5a <_vfiprintf_r+0x13a>
 8011d2c:	9207      	str	r2, [sp, #28]
 8011d2e:	e014      	b.n	8011d5a <_vfiprintf_r+0x13a>
 8011d30:	eba0 0308 	sub.w	r3, r0, r8
 8011d34:	46a2      	mov	sl, r4
 8011d36:	fa09 f303 	lsl.w	r3, r9, r3
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	9304      	str	r3, [sp, #16]
 8011d3e:	e7d2      	b.n	8011ce6 <_vfiprintf_r+0xc6>
 8011d40:	9b03      	ldr	r3, [sp, #12]
 8011d42:	1d19      	adds	r1, r3, #4
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	9103      	str	r1, [sp, #12]
 8011d4a:	bfbb      	ittet	lt
 8011d4c:	425b      	neglt	r3, r3
 8011d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8011d52:	9307      	strge	r3, [sp, #28]
 8011d54:	9307      	strlt	r3, [sp, #28]
 8011d56:	bfb8      	it	lt
 8011d58:	9204      	strlt	r2, [sp, #16]
 8011d5a:	7823      	ldrb	r3, [r4, #0]
 8011d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d5e:	d10a      	bne.n	8011d76 <_vfiprintf_r+0x156>
 8011d60:	7863      	ldrb	r3, [r4, #1]
 8011d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d64:	d132      	bne.n	8011dcc <_vfiprintf_r+0x1ac>
 8011d66:	9b03      	ldr	r3, [sp, #12]
 8011d68:	3402      	adds	r4, #2
 8011d6a:	1d1a      	adds	r2, r3, #4
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d72:	9203      	str	r2, [sp, #12]
 8011d74:	9305      	str	r3, [sp, #20]
 8011d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011e4c <_vfiprintf_r+0x22c>
 8011d7a:	2203      	movs	r2, #3
 8011d7c:	7821      	ldrb	r1, [r4, #0]
 8011d7e:	4650      	mov	r0, sl
 8011d80:	f7fd fc5a 	bl	800f638 <memchr>
 8011d84:	b138      	cbz	r0, 8011d96 <_vfiprintf_r+0x176>
 8011d86:	eba0 000a 	sub.w	r0, r0, sl
 8011d8a:	2240      	movs	r2, #64	@ 0x40
 8011d8c:	9b04      	ldr	r3, [sp, #16]
 8011d8e:	3401      	adds	r4, #1
 8011d90:	4082      	lsls	r2, r0
 8011d92:	4313      	orrs	r3, r2
 8011d94:	9304      	str	r3, [sp, #16]
 8011d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d9a:	2206      	movs	r2, #6
 8011d9c:	4828      	ldr	r0, [pc, #160]	@ (8011e40 <_vfiprintf_r+0x220>)
 8011d9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011da2:	f7fd fc49 	bl	800f638 <memchr>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d03f      	beq.n	8011e2a <_vfiprintf_r+0x20a>
 8011daa:	4b26      	ldr	r3, [pc, #152]	@ (8011e44 <_vfiprintf_r+0x224>)
 8011dac:	bb1b      	cbnz	r3, 8011df6 <_vfiprintf_r+0x1d6>
 8011dae:	9b03      	ldr	r3, [sp, #12]
 8011db0:	3307      	adds	r3, #7
 8011db2:	f023 0307 	bic.w	r3, r3, #7
 8011db6:	3308      	adds	r3, #8
 8011db8:	9303      	str	r3, [sp, #12]
 8011dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dbc:	443b      	add	r3, r7
 8011dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dc0:	e76a      	b.n	8011c98 <_vfiprintf_r+0x78>
 8011dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dc6:	460c      	mov	r4, r1
 8011dc8:	2001      	movs	r0, #1
 8011dca:	e7a8      	b.n	8011d1e <_vfiprintf_r+0xfe>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	3401      	adds	r4, #1
 8011dd0:	f04f 0c0a 	mov.w	ip, #10
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	9305      	str	r3, [sp, #20]
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dde:	3a30      	subs	r2, #48	@ 0x30
 8011de0:	2a09      	cmp	r2, #9
 8011de2:	d903      	bls.n	8011dec <_vfiprintf_r+0x1cc>
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d0c6      	beq.n	8011d76 <_vfiprintf_r+0x156>
 8011de8:	9105      	str	r1, [sp, #20]
 8011dea:	e7c4      	b.n	8011d76 <_vfiprintf_r+0x156>
 8011dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8011df0:	4604      	mov	r4, r0
 8011df2:	2301      	movs	r3, #1
 8011df4:	e7f0      	b.n	8011dd8 <_vfiprintf_r+0x1b8>
 8011df6:	ab03      	add	r3, sp, #12
 8011df8:	462a      	mov	r2, r5
 8011dfa:	a904      	add	r1, sp, #16
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	9300      	str	r3, [sp, #0]
 8011e00:	4b11      	ldr	r3, [pc, #68]	@ (8011e48 <_vfiprintf_r+0x228>)
 8011e02:	f7fb fe67 	bl	800dad4 <_printf_float>
 8011e06:	4607      	mov	r7, r0
 8011e08:	1c78      	adds	r0, r7, #1
 8011e0a:	d1d6      	bne.n	8011dba <_vfiprintf_r+0x19a>
 8011e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e0e:	07d9      	lsls	r1, r3, #31
 8011e10:	d405      	bmi.n	8011e1e <_vfiprintf_r+0x1fe>
 8011e12:	89ab      	ldrh	r3, [r5, #12]
 8011e14:	059a      	lsls	r2, r3, #22
 8011e16:	d402      	bmi.n	8011e1e <_vfiprintf_r+0x1fe>
 8011e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e1a:	f7fd fc07 	bl	800f62c <__retarget_lock_release_recursive>
 8011e1e:	89ab      	ldrh	r3, [r5, #12]
 8011e20:	065b      	lsls	r3, r3, #25
 8011e22:	f53f af1f 	bmi.w	8011c64 <_vfiprintf_r+0x44>
 8011e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e28:	e71e      	b.n	8011c68 <_vfiprintf_r+0x48>
 8011e2a:	ab03      	add	r3, sp, #12
 8011e2c:	462a      	mov	r2, r5
 8011e2e:	a904      	add	r1, sp, #16
 8011e30:	4630      	mov	r0, r6
 8011e32:	9300      	str	r3, [sp, #0]
 8011e34:	4b04      	ldr	r3, [pc, #16]	@ (8011e48 <_vfiprintf_r+0x228>)
 8011e36:	f7fc f8e9 	bl	800e00c <_printf_i>
 8011e3a:	e7e4      	b.n	8011e06 <_vfiprintf_r+0x1e6>
 8011e3c:	08013d70 	.word	0x08013d70
 8011e40:	08013d7a 	.word	0x08013d7a
 8011e44:	0800dad5 	.word	0x0800dad5
 8011e48:	08011bfd 	.word	0x08011bfd
 8011e4c:	08013d76 	.word	0x08013d76

08011e50 <__swbuf_r>:
 8011e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e52:	460e      	mov	r6, r1
 8011e54:	4614      	mov	r4, r2
 8011e56:	4605      	mov	r5, r0
 8011e58:	b118      	cbz	r0, 8011e62 <__swbuf_r+0x12>
 8011e5a:	6a03      	ldr	r3, [r0, #32]
 8011e5c:	b90b      	cbnz	r3, 8011e62 <__swbuf_r+0x12>
 8011e5e:	f7fc fce5 	bl	800e82c <__sinit>
 8011e62:	69a3      	ldr	r3, [r4, #24]
 8011e64:	60a3      	str	r3, [r4, #8]
 8011e66:	89a3      	ldrh	r3, [r4, #12]
 8011e68:	071a      	lsls	r2, r3, #28
 8011e6a:	d501      	bpl.n	8011e70 <__swbuf_r+0x20>
 8011e6c:	6923      	ldr	r3, [r4, #16]
 8011e6e:	b943      	cbnz	r3, 8011e82 <__swbuf_r+0x32>
 8011e70:	4621      	mov	r1, r4
 8011e72:	4628      	mov	r0, r5
 8011e74:	f000 f82a 	bl	8011ecc <__swsetup_r>
 8011e78:	b118      	cbz	r0, 8011e82 <__swbuf_r+0x32>
 8011e7a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011e7e:	4638      	mov	r0, r7
 8011e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e82:	6823      	ldr	r3, [r4, #0]
 8011e84:	b2f6      	uxtb	r6, r6
 8011e86:	6922      	ldr	r2, [r4, #16]
 8011e88:	4637      	mov	r7, r6
 8011e8a:	1a98      	subs	r0, r3, r2
 8011e8c:	6963      	ldr	r3, [r4, #20]
 8011e8e:	4283      	cmp	r3, r0
 8011e90:	dc05      	bgt.n	8011e9e <__swbuf_r+0x4e>
 8011e92:	4621      	mov	r1, r4
 8011e94:	4628      	mov	r0, r5
 8011e96:	f7ff f825 	bl	8010ee4 <_fflush_r>
 8011e9a:	2800      	cmp	r0, #0
 8011e9c:	d1ed      	bne.n	8011e7a <__swbuf_r+0x2a>
 8011e9e:	68a3      	ldr	r3, [r4, #8]
 8011ea0:	3b01      	subs	r3, #1
 8011ea2:	60a3      	str	r3, [r4, #8]
 8011ea4:	6823      	ldr	r3, [r4, #0]
 8011ea6:	1c5a      	adds	r2, r3, #1
 8011ea8:	6022      	str	r2, [r4, #0]
 8011eaa:	701e      	strb	r6, [r3, #0]
 8011eac:	1c43      	adds	r3, r0, #1
 8011eae:	6962      	ldr	r2, [r4, #20]
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	d004      	beq.n	8011ebe <__swbuf_r+0x6e>
 8011eb4:	89a3      	ldrh	r3, [r4, #12]
 8011eb6:	07db      	lsls	r3, r3, #31
 8011eb8:	d5e1      	bpl.n	8011e7e <__swbuf_r+0x2e>
 8011eba:	2e0a      	cmp	r6, #10
 8011ebc:	d1df      	bne.n	8011e7e <__swbuf_r+0x2e>
 8011ebe:	4621      	mov	r1, r4
 8011ec0:	4628      	mov	r0, r5
 8011ec2:	f7ff f80f 	bl	8010ee4 <_fflush_r>
 8011ec6:	2800      	cmp	r0, #0
 8011ec8:	d0d9      	beq.n	8011e7e <__swbuf_r+0x2e>
 8011eca:	e7d6      	b.n	8011e7a <__swbuf_r+0x2a>

08011ecc <__swsetup_r>:
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	4b29      	ldr	r3, [pc, #164]	@ (8011f74 <__swsetup_r+0xa8>)
 8011ed0:	4605      	mov	r5, r0
 8011ed2:	460c      	mov	r4, r1
 8011ed4:	6818      	ldr	r0, [r3, #0]
 8011ed6:	b118      	cbz	r0, 8011ee0 <__swsetup_r+0x14>
 8011ed8:	6a03      	ldr	r3, [r0, #32]
 8011eda:	b90b      	cbnz	r3, 8011ee0 <__swsetup_r+0x14>
 8011edc:	f7fc fca6 	bl	800e82c <__sinit>
 8011ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ee4:	0719      	lsls	r1, r3, #28
 8011ee6:	d422      	bmi.n	8011f2e <__swsetup_r+0x62>
 8011ee8:	06da      	lsls	r2, r3, #27
 8011eea:	d407      	bmi.n	8011efc <__swsetup_r+0x30>
 8011eec:	2209      	movs	r2, #9
 8011eee:	602a      	str	r2, [r5, #0]
 8011ef0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ef8:	81a3      	strh	r3, [r4, #12]
 8011efa:	e033      	b.n	8011f64 <__swsetup_r+0x98>
 8011efc:	0758      	lsls	r0, r3, #29
 8011efe:	d512      	bpl.n	8011f26 <__swsetup_r+0x5a>
 8011f00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f02:	b141      	cbz	r1, 8011f16 <__swsetup_r+0x4a>
 8011f04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f08:	4299      	cmp	r1, r3
 8011f0a:	d002      	beq.n	8011f12 <__swsetup_r+0x46>
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	f7ff fdf3 	bl	8011af8 <_free_r>
 8011f12:	2300      	movs	r3, #0
 8011f14:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f16:	89a3      	ldrh	r3, [r4, #12]
 8011f18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011f1c:	81a3      	strh	r3, [r4, #12]
 8011f1e:	2300      	movs	r3, #0
 8011f20:	6063      	str	r3, [r4, #4]
 8011f22:	6923      	ldr	r3, [r4, #16]
 8011f24:	6023      	str	r3, [r4, #0]
 8011f26:	89a3      	ldrh	r3, [r4, #12]
 8011f28:	f043 0308 	orr.w	r3, r3, #8
 8011f2c:	81a3      	strh	r3, [r4, #12]
 8011f2e:	6923      	ldr	r3, [r4, #16]
 8011f30:	b94b      	cbnz	r3, 8011f46 <__swsetup_r+0x7a>
 8011f32:	89a3      	ldrh	r3, [r4, #12]
 8011f34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f3c:	d003      	beq.n	8011f46 <__swsetup_r+0x7a>
 8011f3e:	4621      	mov	r1, r4
 8011f40:	4628      	mov	r0, r5
 8011f42:	f000 f83e 	bl	8011fc2 <__smakebuf_r>
 8011f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f4a:	f013 0201 	ands.w	r2, r3, #1
 8011f4e:	d00a      	beq.n	8011f66 <__swsetup_r+0x9a>
 8011f50:	2200      	movs	r2, #0
 8011f52:	60a2      	str	r2, [r4, #8]
 8011f54:	6962      	ldr	r2, [r4, #20]
 8011f56:	4252      	negs	r2, r2
 8011f58:	61a2      	str	r2, [r4, #24]
 8011f5a:	6922      	ldr	r2, [r4, #16]
 8011f5c:	b942      	cbnz	r2, 8011f70 <__swsetup_r+0xa4>
 8011f5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011f62:	d1c5      	bne.n	8011ef0 <__swsetup_r+0x24>
 8011f64:	bd38      	pop	{r3, r4, r5, pc}
 8011f66:	0799      	lsls	r1, r3, #30
 8011f68:	bf58      	it	pl
 8011f6a:	6962      	ldrpl	r2, [r4, #20]
 8011f6c:	60a2      	str	r2, [r4, #8]
 8011f6e:	e7f4      	b.n	8011f5a <__swsetup_r+0x8e>
 8011f70:	2000      	movs	r0, #0
 8011f72:	e7f7      	b.n	8011f64 <__swsetup_r+0x98>
 8011f74:	2000019c 	.word	0x2000019c

08011f78 <__swhatbuf_r>:
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	460c      	mov	r4, r1
 8011f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f80:	b096      	sub	sp, #88	@ 0x58
 8011f82:	4615      	mov	r5, r2
 8011f84:	2900      	cmp	r1, #0
 8011f86:	461e      	mov	r6, r3
 8011f88:	da0c      	bge.n	8011fa4 <__swhatbuf_r+0x2c>
 8011f8a:	89a3      	ldrh	r3, [r4, #12]
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011f92:	bf14      	ite	ne
 8011f94:	2340      	movne	r3, #64	@ 0x40
 8011f96:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	6031      	str	r1, [r6, #0]
 8011f9e:	602b      	str	r3, [r5, #0]
 8011fa0:	b016      	add	sp, #88	@ 0x58
 8011fa2:	bd70      	pop	{r4, r5, r6, pc}
 8011fa4:	466a      	mov	r2, sp
 8011fa6:	f000 f89d 	bl	80120e4 <_fstat_r>
 8011faa:	2800      	cmp	r0, #0
 8011fac:	dbed      	blt.n	8011f8a <__swhatbuf_r+0x12>
 8011fae:	9901      	ldr	r1, [sp, #4]
 8011fb0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011fb4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011fb8:	4259      	negs	r1, r3
 8011fba:	4159      	adcs	r1, r3
 8011fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011fc0:	e7eb      	b.n	8011f9a <__swhatbuf_r+0x22>

08011fc2 <__smakebuf_r>:
 8011fc2:	898b      	ldrh	r3, [r1, #12]
 8011fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fc6:	079d      	lsls	r5, r3, #30
 8011fc8:	4606      	mov	r6, r0
 8011fca:	460c      	mov	r4, r1
 8011fcc:	d507      	bpl.n	8011fde <__smakebuf_r+0x1c>
 8011fce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011fd2:	6023      	str	r3, [r4, #0]
 8011fd4:	6123      	str	r3, [r4, #16]
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	6163      	str	r3, [r4, #20]
 8011fda:	b003      	add	sp, #12
 8011fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fde:	ab01      	add	r3, sp, #4
 8011fe0:	466a      	mov	r2, sp
 8011fe2:	f7ff ffc9 	bl	8011f78 <__swhatbuf_r>
 8011fe6:	9f00      	ldr	r7, [sp, #0]
 8011fe8:	4605      	mov	r5, r0
 8011fea:	4630      	mov	r0, r6
 8011fec:	4639      	mov	r1, r7
 8011fee:	f7fe fe63 	bl	8010cb8 <_malloc_r>
 8011ff2:	b948      	cbnz	r0, 8012008 <__smakebuf_r+0x46>
 8011ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ff8:	059a      	lsls	r2, r3, #22
 8011ffa:	d4ee      	bmi.n	8011fda <__smakebuf_r+0x18>
 8011ffc:	f023 0303 	bic.w	r3, r3, #3
 8012000:	f043 0302 	orr.w	r3, r3, #2
 8012004:	81a3      	strh	r3, [r4, #12]
 8012006:	e7e2      	b.n	8011fce <__smakebuf_r+0xc>
 8012008:	89a3      	ldrh	r3, [r4, #12]
 801200a:	6020      	str	r0, [r4, #0]
 801200c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012010:	81a3      	strh	r3, [r4, #12]
 8012012:	9b01      	ldr	r3, [sp, #4]
 8012014:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012018:	b15b      	cbz	r3, 8012032 <__smakebuf_r+0x70>
 801201a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801201e:	4630      	mov	r0, r6
 8012020:	f000 f83c 	bl	801209c <_isatty_r>
 8012024:	b128      	cbz	r0, 8012032 <__smakebuf_r+0x70>
 8012026:	89a3      	ldrh	r3, [r4, #12]
 8012028:	f023 0303 	bic.w	r3, r3, #3
 801202c:	f043 0301 	orr.w	r3, r3, #1
 8012030:	81a3      	strh	r3, [r4, #12]
 8012032:	89a3      	ldrh	r3, [r4, #12]
 8012034:	431d      	orrs	r5, r3
 8012036:	81a5      	strh	r5, [r4, #12]
 8012038:	e7cf      	b.n	8011fda <__smakebuf_r+0x18>

0801203a <_raise_r>:
 801203a:	291f      	cmp	r1, #31
 801203c:	b538      	push	{r3, r4, r5, lr}
 801203e:	4605      	mov	r5, r0
 8012040:	460c      	mov	r4, r1
 8012042:	d904      	bls.n	801204e <_raise_r+0x14>
 8012044:	2316      	movs	r3, #22
 8012046:	6003      	str	r3, [r0, #0]
 8012048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801204c:	bd38      	pop	{r3, r4, r5, pc}
 801204e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012050:	b112      	cbz	r2, 8012058 <_raise_r+0x1e>
 8012052:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012056:	b94b      	cbnz	r3, 801206c <_raise_r+0x32>
 8012058:	4628      	mov	r0, r5
 801205a:	f000 f841 	bl	80120e0 <_getpid_r>
 801205e:	4622      	mov	r2, r4
 8012060:	4601      	mov	r1, r0
 8012062:	4628      	mov	r0, r5
 8012064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012068:	f000 b828 	b.w	80120bc <_kill_r>
 801206c:	2b01      	cmp	r3, #1
 801206e:	d00a      	beq.n	8012086 <_raise_r+0x4c>
 8012070:	1c59      	adds	r1, r3, #1
 8012072:	d103      	bne.n	801207c <_raise_r+0x42>
 8012074:	2316      	movs	r3, #22
 8012076:	6003      	str	r3, [r0, #0]
 8012078:	2001      	movs	r0, #1
 801207a:	e7e7      	b.n	801204c <_raise_r+0x12>
 801207c:	2100      	movs	r1, #0
 801207e:	4620      	mov	r0, r4
 8012080:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012084:	4798      	blx	r3
 8012086:	2000      	movs	r0, #0
 8012088:	e7e0      	b.n	801204c <_raise_r+0x12>
	...

0801208c <raise>:
 801208c:	4b02      	ldr	r3, [pc, #8]	@ (8012098 <raise+0xc>)
 801208e:	4601      	mov	r1, r0
 8012090:	6818      	ldr	r0, [r3, #0]
 8012092:	f7ff bfd2 	b.w	801203a <_raise_r>
 8012096:	bf00      	nop
 8012098:	2000019c 	.word	0x2000019c

0801209c <_isatty_r>:
 801209c:	b538      	push	{r3, r4, r5, lr}
 801209e:	2300      	movs	r3, #0
 80120a0:	4d05      	ldr	r5, [pc, #20]	@ (80120b8 <_isatty_r+0x1c>)
 80120a2:	4604      	mov	r4, r0
 80120a4:	4608      	mov	r0, r1
 80120a6:	602b      	str	r3, [r5, #0]
 80120a8:	f7f3 fb30 	bl	800570c <_isatty>
 80120ac:	1c43      	adds	r3, r0, #1
 80120ae:	d102      	bne.n	80120b6 <_isatty_r+0x1a>
 80120b0:	682b      	ldr	r3, [r5, #0]
 80120b2:	b103      	cbz	r3, 80120b6 <_isatty_r+0x1a>
 80120b4:	6023      	str	r3, [r4, #0]
 80120b6:	bd38      	pop	{r3, r4, r5, pc}
 80120b8:	2000061c 	.word	0x2000061c

080120bc <_kill_r>:
 80120bc:	b538      	push	{r3, r4, r5, lr}
 80120be:	2300      	movs	r3, #0
 80120c0:	4d06      	ldr	r5, [pc, #24]	@ (80120dc <_kill_r+0x20>)
 80120c2:	4604      	mov	r4, r0
 80120c4:	4608      	mov	r0, r1
 80120c6:	4611      	mov	r1, r2
 80120c8:	602b      	str	r3, [r5, #0]
 80120ca:	f7f3 faaf 	bl	800562c <_kill>
 80120ce:	1c43      	adds	r3, r0, #1
 80120d0:	d102      	bne.n	80120d8 <_kill_r+0x1c>
 80120d2:	682b      	ldr	r3, [r5, #0]
 80120d4:	b103      	cbz	r3, 80120d8 <_kill_r+0x1c>
 80120d6:	6023      	str	r3, [r4, #0]
 80120d8:	bd38      	pop	{r3, r4, r5, pc}
 80120da:	bf00      	nop
 80120dc:	2000061c 	.word	0x2000061c

080120e0 <_getpid_r>:
 80120e0:	f7f3 ba9c 	b.w	800561c <_getpid>

080120e4 <_fstat_r>:
 80120e4:	b538      	push	{r3, r4, r5, lr}
 80120e6:	2300      	movs	r3, #0
 80120e8:	4d06      	ldr	r5, [pc, #24]	@ (8012104 <_fstat_r+0x20>)
 80120ea:	4604      	mov	r4, r0
 80120ec:	4608      	mov	r0, r1
 80120ee:	4611      	mov	r1, r2
 80120f0:	602b      	str	r3, [r5, #0]
 80120f2:	f7f3 fafb 	bl	80056ec <_fstat>
 80120f6:	1c43      	adds	r3, r0, #1
 80120f8:	d102      	bne.n	8012100 <_fstat_r+0x1c>
 80120fa:	682b      	ldr	r3, [r5, #0]
 80120fc:	b103      	cbz	r3, 8012100 <_fstat_r+0x1c>
 80120fe:	6023      	str	r3, [r4, #0]
 8012100:	bd38      	pop	{r3, r4, r5, pc}
 8012102:	bf00      	nop
 8012104:	2000061c 	.word	0x2000061c

08012108 <asinf>:
 8012108:	b508      	push	{r3, lr}
 801210a:	ed2d 8b02 	vpush	{d8}
 801210e:	eeb0 8a40 	vmov.f32	s16, s0
 8012112:	f000 f9bb 	bl	801248c <__ieee754_asinf>
 8012116:	eef0 8a40 	vmov.f32	s17, s0
 801211a:	eeb4 8a48 	vcmp.f32	s16, s16
 801211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012122:	d615      	bvs.n	8012150 <asinf+0x48>
 8012124:	eeb0 0a48 	vmov.f32	s0, s16
 8012128:	f000 f8c2 	bl	80122b0 <fabsf>
 801212c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012130:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012138:	dd0a      	ble.n	8012150 <asinf+0x48>
 801213a:	f7fd fa4b 	bl	800f5d4 <__errno>
 801213e:	2321      	movs	r3, #33	@ 0x21
 8012140:	ecbd 8b02 	vpop	{d8}
 8012144:	6003      	str	r3, [r0, #0]
 8012146:	4805      	ldr	r0, [pc, #20]	@ (801215c <asinf+0x54>)
 8012148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801214c:	f7fd ba98 	b.w	800f680 <nanf>
 8012150:	eeb0 0a68 	vmov.f32	s0, s17
 8012154:	ecbd 8b02 	vpop	{d8}
 8012158:	bd08      	pop	{r3, pc}
 801215a:	bf00      	nop
 801215c:	08013e15 	.word	0x08013e15

08012160 <atan2f>:
 8012160:	f000 ba78 	b.w	8012654 <__ieee754_atan2f>

08012164 <powf>:
 8012164:	b508      	push	{r3, lr}
 8012166:	ed2d 8b04 	vpush	{d8-d9}
 801216a:	eeb0 8a60 	vmov.f32	s16, s1
 801216e:	eeb0 9a40 	vmov.f32	s18, s0
 8012172:	f000 fb11 	bl	8012798 <__ieee754_powf>
 8012176:	eef0 8a40 	vmov.f32	s17, s0
 801217a:	eeb4 8a48 	vcmp.f32	s16, s16
 801217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012182:	d63e      	bvs.n	8012202 <powf+0x9e>
 8012184:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218c:	d112      	bne.n	80121b4 <powf+0x50>
 801218e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012196:	d039      	beq.n	801220c <powf+0xa8>
 8012198:	eeb0 0a48 	vmov.f32	s0, s16
 801219c:	f000 f839 	bl	8012212 <finitef>
 80121a0:	b378      	cbz	r0, 8012202 <powf+0x9e>
 80121a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80121a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121aa:	d52a      	bpl.n	8012202 <powf+0x9e>
 80121ac:	f7fd fa12 	bl	800f5d4 <__errno>
 80121b0:	2322      	movs	r3, #34	@ 0x22
 80121b2:	e014      	b.n	80121de <powf+0x7a>
 80121b4:	f000 f82d 	bl	8012212 <finitef>
 80121b8:	b998      	cbnz	r0, 80121e2 <powf+0x7e>
 80121ba:	eeb0 0a49 	vmov.f32	s0, s18
 80121be:	f000 f828 	bl	8012212 <finitef>
 80121c2:	b170      	cbz	r0, 80121e2 <powf+0x7e>
 80121c4:	eeb0 0a48 	vmov.f32	s0, s16
 80121c8:	f000 f823 	bl	8012212 <finitef>
 80121cc:	b148      	cbz	r0, 80121e2 <powf+0x7e>
 80121ce:	eef4 8a68 	vcmp.f32	s17, s17
 80121d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d6:	d7e9      	bvc.n	80121ac <powf+0x48>
 80121d8:	f7fd f9fc 	bl	800f5d4 <__errno>
 80121dc:	2321      	movs	r3, #33	@ 0x21
 80121de:	6003      	str	r3, [r0, #0]
 80121e0:	e00f      	b.n	8012202 <powf+0x9e>
 80121e2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80121e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ea:	d10a      	bne.n	8012202 <powf+0x9e>
 80121ec:	eeb0 0a49 	vmov.f32	s0, s18
 80121f0:	f000 f80f 	bl	8012212 <finitef>
 80121f4:	b128      	cbz	r0, 8012202 <powf+0x9e>
 80121f6:	eeb0 0a48 	vmov.f32	s0, s16
 80121fa:	f000 f80a 	bl	8012212 <finitef>
 80121fe:	2800      	cmp	r0, #0
 8012200:	d1d4      	bne.n	80121ac <powf+0x48>
 8012202:	eeb0 0a68 	vmov.f32	s0, s17
 8012206:	ecbd 8b04 	vpop	{d8-d9}
 801220a:	bd08      	pop	{r3, pc}
 801220c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8012210:	e7f7      	b.n	8012202 <powf+0x9e>

08012212 <finitef>:
 8012212:	ee10 3a10 	vmov	r3, s0
 8012216:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801221a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801221e:	bfac      	ite	ge
 8012220:	2000      	movge	r0, #0
 8012222:	2001      	movlt	r0, #1
 8012224:	4770      	bx	lr
	...

08012228 <cosf>:
 8012228:	ee10 3a10 	vmov	r3, s0
 801222c:	b507      	push	{r0, r1, r2, lr}
 801222e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012232:	4a1d      	ldr	r2, [pc, #116]	@ (80122a8 <cosf+0x80>)
 8012234:	4293      	cmp	r3, r2
 8012236:	d806      	bhi.n	8012246 <cosf+0x1e>
 8012238:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80122ac <cosf+0x84>
 801223c:	b003      	add	sp, #12
 801223e:	f85d eb04 	ldr.w	lr, [sp], #4
 8012242:	f000 b883 	b.w	801234c <__kernel_cosf>
 8012246:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801224a:	d304      	bcc.n	8012256 <cosf+0x2e>
 801224c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012250:	b003      	add	sp, #12
 8012252:	f85d fb04 	ldr.w	pc, [sp], #4
 8012256:	4668      	mov	r0, sp
 8012258:	f000 fd6e 	bl	8012d38 <__ieee754_rem_pio2f>
 801225c:	f000 0003 	and.w	r0, r0, #3
 8012260:	2801      	cmp	r0, #1
 8012262:	d009      	beq.n	8012278 <cosf+0x50>
 8012264:	2802      	cmp	r0, #2
 8012266:	d010      	beq.n	801228a <cosf+0x62>
 8012268:	b9b0      	cbnz	r0, 8012298 <cosf+0x70>
 801226a:	eddd 0a01 	vldr	s1, [sp, #4]
 801226e:	ed9d 0a00 	vldr	s0, [sp]
 8012272:	f000 f86b 	bl	801234c <__kernel_cosf>
 8012276:	e7eb      	b.n	8012250 <cosf+0x28>
 8012278:	eddd 0a01 	vldr	s1, [sp, #4]
 801227c:	ed9d 0a00 	vldr	s0, [sp]
 8012280:	f000 f8bc 	bl	80123fc <__kernel_sinf>
 8012284:	eeb1 0a40 	vneg.f32	s0, s0
 8012288:	e7e2      	b.n	8012250 <cosf+0x28>
 801228a:	eddd 0a01 	vldr	s1, [sp, #4]
 801228e:	ed9d 0a00 	vldr	s0, [sp]
 8012292:	f000 f85b 	bl	801234c <__kernel_cosf>
 8012296:	e7f5      	b.n	8012284 <cosf+0x5c>
 8012298:	2001      	movs	r0, #1
 801229a:	eddd 0a01 	vldr	s1, [sp, #4]
 801229e:	ed9d 0a00 	vldr	s0, [sp]
 80122a2:	f000 f8ab 	bl	80123fc <__kernel_sinf>
 80122a6:	e7d3      	b.n	8012250 <cosf+0x28>
 80122a8:	3f490fd8 	.word	0x3f490fd8
 80122ac:	00000000 	.word	0x00000000

080122b0 <fabsf>:
 80122b0:	ee10 3a10 	vmov	r3, s0
 80122b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80122b8:	ee00 3a10 	vmov	s0, r3
 80122bc:	4770      	bx	lr
	...

080122c0 <sinf>:
 80122c0:	ee10 3a10 	vmov	r3, s0
 80122c4:	b507      	push	{r0, r1, r2, lr}
 80122c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80122ca:	4a1e      	ldr	r2, [pc, #120]	@ (8012344 <sinf+0x84>)
 80122cc:	4293      	cmp	r3, r2
 80122ce:	d807      	bhi.n	80122e0 <sinf+0x20>
 80122d0:	2000      	movs	r0, #0
 80122d2:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012348 <sinf+0x88>
 80122d6:	b003      	add	sp, #12
 80122d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80122dc:	f000 b88e 	b.w	80123fc <__kernel_sinf>
 80122e0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80122e4:	d304      	bcc.n	80122f0 <sinf+0x30>
 80122e6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80122ea:	b003      	add	sp, #12
 80122ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80122f0:	4668      	mov	r0, sp
 80122f2:	f000 fd21 	bl	8012d38 <__ieee754_rem_pio2f>
 80122f6:	f000 0003 	and.w	r0, r0, #3
 80122fa:	2801      	cmp	r0, #1
 80122fc:	d00a      	beq.n	8012314 <sinf+0x54>
 80122fe:	2802      	cmp	r0, #2
 8012300:	d00f      	beq.n	8012322 <sinf+0x62>
 8012302:	b9c0      	cbnz	r0, 8012336 <sinf+0x76>
 8012304:	2001      	movs	r0, #1
 8012306:	eddd 0a01 	vldr	s1, [sp, #4]
 801230a:	ed9d 0a00 	vldr	s0, [sp]
 801230e:	f000 f875 	bl	80123fc <__kernel_sinf>
 8012312:	e7ea      	b.n	80122ea <sinf+0x2a>
 8012314:	eddd 0a01 	vldr	s1, [sp, #4]
 8012318:	ed9d 0a00 	vldr	s0, [sp]
 801231c:	f000 f816 	bl	801234c <__kernel_cosf>
 8012320:	e7e3      	b.n	80122ea <sinf+0x2a>
 8012322:	2001      	movs	r0, #1
 8012324:	eddd 0a01 	vldr	s1, [sp, #4]
 8012328:	ed9d 0a00 	vldr	s0, [sp]
 801232c:	f000 f866 	bl	80123fc <__kernel_sinf>
 8012330:	eeb1 0a40 	vneg.f32	s0, s0
 8012334:	e7d9      	b.n	80122ea <sinf+0x2a>
 8012336:	eddd 0a01 	vldr	s1, [sp, #4]
 801233a:	ed9d 0a00 	vldr	s0, [sp]
 801233e:	f000 f805 	bl	801234c <__kernel_cosf>
 8012342:	e7f5      	b.n	8012330 <sinf+0x70>
 8012344:	3f490fd8 	.word	0x3f490fd8
 8012348:	00000000 	.word	0x00000000

0801234c <__kernel_cosf>:
 801234c:	ee10 3a10 	vmov	r3, s0
 8012350:	eef0 6a40 	vmov.f32	s13, s0
 8012354:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012358:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801235c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012360:	d204      	bcs.n	801236c <__kernel_cosf+0x20>
 8012362:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012366:	ee17 2a90 	vmov	r2, s15
 801236a:	b342      	cbz	r2, 80123be <__kernel_cosf+0x72>
 801236c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012370:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80123dc <__kernel_cosf+0x90>
 8012374:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80123e0 <__kernel_cosf+0x94>
 8012378:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801237c:	4a19      	ldr	r2, [pc, #100]	@ (80123e4 <__kernel_cosf+0x98>)
 801237e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012382:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80123e8 <__kernel_cosf+0x9c>
 8012386:	4293      	cmp	r3, r2
 8012388:	eee6 7a07 	vfma.f32	s15, s12, s14
 801238c:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 80123ec <__kernel_cosf+0xa0>
 8012390:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012394:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80123f0 <__kernel_cosf+0xa4>
 8012398:	eee6 7a07 	vfma.f32	s15, s12, s14
 801239c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80123f4 <__kernel_cosf+0xa8>
 80123a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80123a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80123a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123ac:	ee26 6a07 	vmul.f32	s12, s12, s14
 80123b0:	eee7 0a06 	vfma.f32	s1, s14, s12
 80123b4:	d804      	bhi.n	80123c0 <__kernel_cosf+0x74>
 80123b6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80123ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80123be:	4770      	bx	lr
 80123c0:	4a0d      	ldr	r2, [pc, #52]	@ (80123f8 <__kernel_cosf+0xac>)
 80123c2:	4293      	cmp	r3, r2
 80123c4:	bf96      	itet	ls
 80123c6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80123ca:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80123ce:	ee07 3a10 	vmovls	s14, r3
 80123d2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80123d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80123da:	e7ec      	b.n	80123b6 <__kernel_cosf+0x6a>
 80123dc:	ad47d74e 	.word	0xad47d74e
 80123e0:	310f74f6 	.word	0x310f74f6
 80123e4:	3e999999 	.word	0x3e999999
 80123e8:	b493f27c 	.word	0xb493f27c
 80123ec:	37d00d01 	.word	0x37d00d01
 80123f0:	bab60b61 	.word	0xbab60b61
 80123f4:	3d2aaaab 	.word	0x3d2aaaab
 80123f8:	3f480000 	.word	0x3f480000

080123fc <__kernel_sinf>:
 80123fc:	ee10 3a10 	vmov	r3, s0
 8012400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012404:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012408:	d204      	bcs.n	8012414 <__kernel_sinf+0x18>
 801240a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801240e:	ee17 3a90 	vmov	r3, s15
 8012412:	b35b      	cbz	r3, 801246c <__kernel_sinf+0x70>
 8012414:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012418:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012470 <__kernel_sinf+0x74>
 801241c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012474 <__kernel_sinf+0x78>
 8012420:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012424:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8012478 <__kernel_sinf+0x7c>
 8012428:	ee60 6a07 	vmul.f32	s13, s0, s14
 801242c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012430:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 801247c <__kernel_sinf+0x80>
 8012434:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012438:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012480 <__kernel_sinf+0x84>
 801243c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012440:	b930      	cbnz	r0, 8012450 <__kernel_sinf+0x54>
 8012442:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8012484 <__kernel_sinf+0x88>
 8012446:	eea7 6a27 	vfma.f32	s12, s14, s15
 801244a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801244e:	4770      	bx	lr
 8012450:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012454:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012458:	eee0 7a86 	vfma.f32	s15, s1, s12
 801245c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012460:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012488 <__kernel_sinf+0x8c>
 8012464:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012468:	ee30 0a60 	vsub.f32	s0, s0, s1
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop
 8012470:	2f2ec9d3 	.word	0x2f2ec9d3
 8012474:	b2d72f34 	.word	0xb2d72f34
 8012478:	3638ef1b 	.word	0x3638ef1b
 801247c:	b9500d01 	.word	0xb9500d01
 8012480:	3c088889 	.word	0x3c088889
 8012484:	be2aaaab 	.word	0xbe2aaaab
 8012488:	3e2aaaab 	.word	0x3e2aaaab

0801248c <__ieee754_asinf>:
 801248c:	b538      	push	{r3, r4, r5, lr}
 801248e:	ee10 5a10 	vmov	r5, s0
 8012492:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8012496:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801249a:	ed2d 8b04 	vpush	{d8-d9}
 801249e:	d10c      	bne.n	80124ba <__ieee754_asinf+0x2e>
 80124a0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012614 <__ieee754_asinf+0x188>
 80124a4:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8012618 <__ieee754_asinf+0x18c>
 80124a8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80124ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 80124b0:	eeb0 0a67 	vmov.f32	s0, s15
 80124b4:	ecbd 8b04 	vpop	{d8-d9}
 80124b8:	bd38      	pop	{r3, r4, r5, pc}
 80124ba:	d904      	bls.n	80124c6 <__ieee754_asinf+0x3a>
 80124bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80124c0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80124c4:	e7f6      	b.n	80124b4 <__ieee754_asinf+0x28>
 80124c6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80124ca:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80124ce:	d20b      	bcs.n	80124e8 <__ieee754_asinf+0x5c>
 80124d0:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80124d4:	d252      	bcs.n	801257c <__ieee754_asinf+0xf0>
 80124d6:	eddf 7a51 	vldr	s15, [pc, #324]	@ 801261c <__ieee754_asinf+0x190>
 80124da:	ee70 7a27 	vadd.f32	s15, s0, s15
 80124de:	eef4 7ae8 	vcmpe.f32	s15, s17
 80124e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e6:	dce5      	bgt.n	80124b4 <__ieee754_asinf+0x28>
 80124e8:	f7ff fee2 	bl	80122b0 <fabsf>
 80124ec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80124f0:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80124f4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8012620 <__ieee754_asinf+0x194>
 80124f8:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8012624 <__ieee754_asinf+0x198>
 80124fc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012500:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8012628 <__ieee754_asinf+0x19c>
 8012504:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012508:	eddf 7a48 	vldr	s15, [pc, #288]	@ 801262c <__ieee754_asinf+0x1a0>
 801250c:	eeb0 0a48 	vmov.f32	s0, s16
 8012510:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012514:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8012630 <__ieee754_asinf+0x1a4>
 8012518:	eea7 7a88 	vfma.f32	s14, s15, s16
 801251c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8012634 <__ieee754_asinf+0x1a8>
 8012520:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012524:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8012638 <__ieee754_asinf+0x1ac>
 8012528:	eea7 9a88 	vfma.f32	s18, s15, s16
 801252c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801263c <__ieee754_asinf+0x1b0>
 8012530:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012534:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8012640 <__ieee754_asinf+0x1b4>
 8012538:	ee29 9a08 	vmul.f32	s18, s18, s16
 801253c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012540:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8012644 <__ieee754_asinf+0x1b8>
 8012544:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012548:	eee7 8a88 	vfma.f32	s17, s15, s16
 801254c:	f000 f920 	bl	8012790 <__ieee754_sqrtf>
 8012550:	4b3d      	ldr	r3, [pc, #244]	@ (8012648 <__ieee754_asinf+0x1bc>)
 8012552:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012556:	429c      	cmp	r4, r3
 8012558:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801255c:	d93d      	bls.n	80125da <__ieee754_asinf+0x14e>
 801255e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801264c <__ieee754_asinf+0x1c0>
 8012562:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012566:	eee0 7a26 	vfma.f32	s15, s0, s13
 801256a:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8012618 <__ieee754_asinf+0x18c>
 801256e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012572:	2d00      	cmp	r5, #0
 8012574:	bfd8      	it	le
 8012576:	eeb1 0a40 	vnegle.f32	s0, s0
 801257a:	e79b      	b.n	80124b4 <__ieee754_asinf+0x28>
 801257c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012580:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8012628 <__ieee754_asinf+0x19c>
 8012584:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8012620 <__ieee754_asinf+0x194>
 8012588:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8012638 <__ieee754_asinf+0x1ac>
 801258c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012590:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801262c <__ieee754_asinf+0x1a0>
 8012594:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012598:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8012630 <__ieee754_asinf+0x1a4>
 801259c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80125a0:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8012634 <__ieee754_asinf+0x1a8>
 80125a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80125a8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8012624 <__ieee754_asinf+0x198>
 80125ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80125b0:	eddf 6a22 	vldr	s13, [pc, #136]	@ 801263c <__ieee754_asinf+0x1b0>
 80125b4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80125b8:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8012640 <__ieee754_asinf+0x1b4>
 80125bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80125c0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80125c4:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8012644 <__ieee754_asinf+0x1b8>
 80125c8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80125cc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80125d0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80125d4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80125d8:	e76c      	b.n	80124b4 <__ieee754_asinf+0x28>
 80125da:	ee10 3a10 	vmov	r3, s0
 80125de:	ee70 5a00 	vadd.f32	s11, s0, s0
 80125e2:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8012614 <__ieee754_asinf+0x188>
 80125e6:	f36f 030b 	bfc	r3, #0, #12
 80125ea:	ee07 3a10 	vmov	s14, r3
 80125ee:	eea7 8a47 	vfms.f32	s16, s14, s14
 80125f2:	ee30 0a07 	vadd.f32	s0, s0, s14
 80125f6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80125fa:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8012650 <__ieee754_asinf+0x1c4>
 80125fe:	eee5 7a66 	vfms.f32	s15, s10, s13
 8012602:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8012606:	eeb0 6a40 	vmov.f32	s12, s0
 801260a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801260e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012612:	e7ac      	b.n	801256e <__ieee754_asinf+0xe2>
 8012614:	b33bbd2e 	.word	0xb33bbd2e
 8012618:	3fc90fdb 	.word	0x3fc90fdb
 801261c:	7149f2ca 	.word	0x7149f2ca
 8012620:	3a4f7f04 	.word	0x3a4f7f04
 8012624:	3e2aaaab 	.word	0x3e2aaaab
 8012628:	3811ef08 	.word	0x3811ef08
 801262c:	bd241146 	.word	0xbd241146
 8012630:	3e4e0aa8 	.word	0x3e4e0aa8
 8012634:	bea6b090 	.word	0xbea6b090
 8012638:	3d9dc62e 	.word	0x3d9dc62e
 801263c:	bf303361 	.word	0xbf303361
 8012640:	4001572d 	.word	0x4001572d
 8012644:	c019d139 	.word	0xc019d139
 8012648:	3f799999 	.word	0x3f799999
 801264c:	333bbd2e 	.word	0x333bbd2e
 8012650:	3f490fdb 	.word	0x3f490fdb

08012654 <__ieee754_atan2f>:
 8012654:	ee10 2a90 	vmov	r2, s1
 8012658:	eef0 7a40 	vmov.f32	s15, s0
 801265c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8012660:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012664:	b510      	push	{r4, lr}
 8012666:	d806      	bhi.n	8012676 <__ieee754_atan2f+0x22>
 8012668:	ee10 0a10 	vmov	r0, s0
 801266c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8012670:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012674:	d904      	bls.n	8012680 <__ieee754_atan2f+0x2c>
 8012676:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801267a:	eeb0 0a67 	vmov.f32	s0, s15
 801267e:	bd10      	pop	{r4, pc}
 8012680:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012684:	d103      	bne.n	801268e <__ieee754_atan2f+0x3a>
 8012686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801268a:	f000 bd0d 	b.w	80130a8 <atanf>
 801268e:	1794      	asrs	r4, r2, #30
 8012690:	f004 0402 	and.w	r4, r4, #2
 8012694:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012698:	b93b      	cbnz	r3, 80126aa <__ieee754_atan2f+0x56>
 801269a:	2c02      	cmp	r4, #2
 801269c:	d05c      	beq.n	8012758 <__ieee754_atan2f+0x104>
 801269e:	2c03      	cmp	r4, #3
 80126a0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801276c <__ieee754_atan2f+0x118>
 80126a4:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80126a8:	e7e7      	b.n	801267a <__ieee754_atan2f+0x26>
 80126aa:	b939      	cbnz	r1, 80126bc <__ieee754_atan2f+0x68>
 80126ac:	2800      	cmp	r0, #0
 80126ae:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8012770 <__ieee754_atan2f+0x11c>
 80126b2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8012774 <__ieee754_atan2f+0x120>
 80126b6:	fe67 7a27 	vselge.f32	s15, s14, s15
 80126ba:	e7de      	b.n	801267a <__ieee754_atan2f+0x26>
 80126bc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80126c0:	d110      	bne.n	80126e4 <__ieee754_atan2f+0x90>
 80126c2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80126c6:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80126ca:	d107      	bne.n	80126dc <__ieee754_atan2f+0x88>
 80126cc:	2c02      	cmp	r4, #2
 80126ce:	d846      	bhi.n	801275e <__ieee754_atan2f+0x10a>
 80126d0:	4b29      	ldr	r3, [pc, #164]	@ (8012778 <__ieee754_atan2f+0x124>)
 80126d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80126d6:	edd3 7a00 	vldr	s15, [r3]
 80126da:	e7ce      	b.n	801267a <__ieee754_atan2f+0x26>
 80126dc:	2c02      	cmp	r4, #2
 80126de:	d841      	bhi.n	8012764 <__ieee754_atan2f+0x110>
 80126e0:	4b26      	ldr	r3, [pc, #152]	@ (801277c <__ieee754_atan2f+0x128>)
 80126e2:	e7f6      	b.n	80126d2 <__ieee754_atan2f+0x7e>
 80126e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80126e8:	d0e0      	beq.n	80126ac <__ieee754_atan2f+0x58>
 80126ea:	1a5b      	subs	r3, r3, r1
 80126ec:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80126f0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80126f4:	da1a      	bge.n	801272c <__ieee754_atan2f+0xd8>
 80126f6:	2a00      	cmp	r2, #0
 80126f8:	da01      	bge.n	80126fe <__ieee754_atan2f+0xaa>
 80126fa:	313c      	adds	r1, #60	@ 0x3c
 80126fc:	db19      	blt.n	8012732 <__ieee754_atan2f+0xde>
 80126fe:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012702:	f7ff fdd5 	bl	80122b0 <fabsf>
 8012706:	f000 fccf 	bl	80130a8 <atanf>
 801270a:	eef0 7a40 	vmov.f32	s15, s0
 801270e:	2c01      	cmp	r4, #1
 8012710:	d012      	beq.n	8012738 <__ieee754_atan2f+0xe4>
 8012712:	2c02      	cmp	r4, #2
 8012714:	d017      	beq.n	8012746 <__ieee754_atan2f+0xf2>
 8012716:	2c00      	cmp	r4, #0
 8012718:	d0af      	beq.n	801267a <__ieee754_atan2f+0x26>
 801271a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8012780 <__ieee754_atan2f+0x12c>
 801271e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012722:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8012784 <__ieee754_atan2f+0x130>
 8012726:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801272a:	e7a6      	b.n	801267a <__ieee754_atan2f+0x26>
 801272c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012774 <__ieee754_atan2f+0x120>
 8012730:	e7ed      	b.n	801270e <__ieee754_atan2f+0xba>
 8012732:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012788 <__ieee754_atan2f+0x134>
 8012736:	e7ea      	b.n	801270e <__ieee754_atan2f+0xba>
 8012738:	ee17 3a90 	vmov	r3, s15
 801273c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012740:	ee07 3a90 	vmov	s15, r3
 8012744:	e799      	b.n	801267a <__ieee754_atan2f+0x26>
 8012746:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012780 <__ieee754_atan2f+0x12c>
 801274a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801274e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8012784 <__ieee754_atan2f+0x130>
 8012752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012756:	e790      	b.n	801267a <__ieee754_atan2f+0x26>
 8012758:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8012784 <__ieee754_atan2f+0x130>
 801275c:	e78d      	b.n	801267a <__ieee754_atan2f+0x26>
 801275e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801278c <__ieee754_atan2f+0x138>
 8012762:	e78a      	b.n	801267a <__ieee754_atan2f+0x26>
 8012764:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8012788 <__ieee754_atan2f+0x134>
 8012768:	e787      	b.n	801267a <__ieee754_atan2f+0x26>
 801276a:	bf00      	nop
 801276c:	c0490fdb 	.word	0xc0490fdb
 8012770:	bfc90fdb 	.word	0xbfc90fdb
 8012774:	3fc90fdb 	.word	0x3fc90fdb
 8012778:	08014074 	.word	0x08014074
 801277c:	08014068 	.word	0x08014068
 8012780:	33bbbd2e 	.word	0x33bbbd2e
 8012784:	40490fdb 	.word	0x40490fdb
 8012788:	00000000 	.word	0x00000000
 801278c:	3f490fdb 	.word	0x3f490fdb

08012790 <__ieee754_sqrtf>:
 8012790:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012794:	4770      	bx	lr
	...

08012798 <__ieee754_powf>:
 8012798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801279c:	ee10 4a90 	vmov	r4, s1
 80127a0:	ee10 6a10 	vmov	r6, s0
 80127a4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80127a8:	ed2d 8b02 	vpush	{d8}
 80127ac:	eeb0 8a40 	vmov.f32	s16, s0
 80127b0:	eef0 8a60 	vmov.f32	s17, s1
 80127b4:	d10c      	bne.n	80127d0 <__ieee754_powf+0x38>
 80127b6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80127ba:	0076      	lsls	r6, r6, #1
 80127bc:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80127c0:	f240 8275 	bls.w	8012cae <__ieee754_powf+0x516>
 80127c4:	ee38 0a28 	vadd.f32	s0, s16, s17
 80127c8:	ecbd 8b02 	vpop	{d8}
 80127cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127d0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80127d4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80127d8:	d802      	bhi.n	80127e0 <__ieee754_powf+0x48>
 80127da:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80127de:	d908      	bls.n	80127f2 <__ieee754_powf+0x5a>
 80127e0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80127e4:	d1ee      	bne.n	80127c4 <__ieee754_powf+0x2c>
 80127e6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80127ea:	0064      	lsls	r4, r4, #1
 80127ec:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80127f0:	e7e6      	b.n	80127c0 <__ieee754_powf+0x28>
 80127f2:	2e00      	cmp	r6, #0
 80127f4:	da1f      	bge.n	8012836 <__ieee754_powf+0x9e>
 80127f6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80127fa:	f080 8261 	bcs.w	8012cc0 <__ieee754_powf+0x528>
 80127fe:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8012802:	d32e      	bcc.n	8012862 <__ieee754_powf+0xca>
 8012804:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8012808:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801280c:	fa49 f503 	asr.w	r5, r9, r3
 8012810:	fa05 f303 	lsl.w	r3, r5, r3
 8012814:	454b      	cmp	r3, r9
 8012816:	d122      	bne.n	801285e <__ieee754_powf+0xc6>
 8012818:	f005 0501 	and.w	r5, r5, #1
 801281c:	f1c5 0502 	rsb	r5, r5, #2
 8012820:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8012824:	d11e      	bne.n	8012864 <__ieee754_powf+0xcc>
 8012826:	2c00      	cmp	r4, #0
 8012828:	f280 8247 	bge.w	8012cba <__ieee754_powf+0x522>
 801282c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012830:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012834:	e7c8      	b.n	80127c8 <__ieee754_powf+0x30>
 8012836:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801283a:	d110      	bne.n	801285e <__ieee754_powf+0xc6>
 801283c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8012840:	f000 8235 	beq.w	8012cae <__ieee754_powf+0x516>
 8012844:	d905      	bls.n	8012852 <__ieee754_powf+0xba>
 8012846:	2c00      	cmp	r4, #0
 8012848:	ed9f 0ac2 	vldr	s0, [pc, #776]	@ 8012b54 <__ieee754_powf+0x3bc>
 801284c:	fe28 0a80 	vselge.f32	s0, s17, s0
 8012850:	e7ba      	b.n	80127c8 <__ieee754_powf+0x30>
 8012852:	2c00      	cmp	r4, #0
 8012854:	f280 822e 	bge.w	8012cb4 <__ieee754_powf+0x51c>
 8012858:	eeb1 0a68 	vneg.f32	s0, s17
 801285c:	e7b4      	b.n	80127c8 <__ieee754_powf+0x30>
 801285e:	2500      	movs	r5, #0
 8012860:	e7de      	b.n	8012820 <__ieee754_powf+0x88>
 8012862:	2500      	movs	r5, #0
 8012864:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012868:	d102      	bne.n	8012870 <__ieee754_powf+0xd8>
 801286a:	ee28 0a08 	vmul.f32	s0, s16, s16
 801286e:	e7ab      	b.n	80127c8 <__ieee754_powf+0x30>
 8012870:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8012874:	f040 8229 	bne.w	8012cca <__ieee754_powf+0x532>
 8012878:	2e00      	cmp	r6, #0
 801287a:	f2c0 8226 	blt.w	8012cca <__ieee754_powf+0x532>
 801287e:	eeb0 0a48 	vmov.f32	s0, s16
 8012882:	ecbd 8b02 	vpop	{d8}
 8012886:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801288a:	f7ff bf81 	b.w	8012790 <__ieee754_sqrtf>
 801288e:	2d01      	cmp	r5, #1
 8012890:	d19a      	bne.n	80127c8 <__ieee754_powf+0x30>
 8012892:	eeb1 0a40 	vneg.f32	s0, s0
 8012896:	e797      	b.n	80127c8 <__ieee754_powf+0x30>
 8012898:	0ff0      	lsrs	r0, r6, #31
 801289a:	3801      	subs	r0, #1
 801289c:	ea55 0300 	orrs.w	r3, r5, r0
 80128a0:	d104      	bne.n	80128ac <__ieee754_powf+0x114>
 80128a2:	ee38 8a48 	vsub.f32	s16, s16, s16
 80128a6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80128aa:	e78d      	b.n	80127c8 <__ieee754_powf+0x30>
 80128ac:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80128b0:	d96c      	bls.n	801298c <__ieee754_powf+0x1f4>
 80128b2:	4ba9      	ldr	r3, [pc, #676]	@ (8012b58 <__ieee754_powf+0x3c0>)
 80128b4:	4598      	cmp	r8, r3
 80128b6:	d808      	bhi.n	80128ca <__ieee754_powf+0x132>
 80128b8:	2c00      	cmp	r4, #0
 80128ba:	da0b      	bge.n	80128d4 <__ieee754_powf+0x13c>
 80128bc:	2000      	movs	r0, #0
 80128be:	ecbd 8b02 	vpop	{d8}
 80128c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128c6:	f000 bb85 	b.w	8012fd4 <__math_oflowf>
 80128ca:	4ba4      	ldr	r3, [pc, #656]	@ (8012b5c <__ieee754_powf+0x3c4>)
 80128cc:	4598      	cmp	r8, r3
 80128ce:	d908      	bls.n	80128e2 <__ieee754_powf+0x14a>
 80128d0:	2c00      	cmp	r4, #0
 80128d2:	dcf3      	bgt.n	80128bc <__ieee754_powf+0x124>
 80128d4:	2000      	movs	r0, #0
 80128d6:	ecbd 8b02 	vpop	{d8}
 80128da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128de:	f000 bb73 	b.w	8012fc8 <__math_uflowf>
 80128e2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80128e6:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8012b60 <__ieee754_powf+0x3c8>
 80128ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80128ee:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80128f2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80128f6:	eee0 6a67 	vfms.f32	s13, s0, s15
 80128fa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80128fe:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8012902:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8012b64 <__ieee754_powf+0x3cc>
 8012906:	ee27 7a27 	vmul.f32	s14, s14, s15
 801290a:	eddf 7a97 	vldr	s15, [pc, #604]	@ 8012b68 <__ieee754_powf+0x3d0>
 801290e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8012912:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8012b6c <__ieee754_powf+0x3d4>
 8012916:	eee0 7a07 	vfma.f32	s15, s0, s14
 801291a:	eeb0 7a67 	vmov.f32	s14, s15
 801291e:	eea0 7a26 	vfma.f32	s14, s0, s13
 8012922:	ee17 3a10 	vmov	r3, s14
 8012926:	f36f 030b 	bfc	r3, #0, #12
 801292a:	ee07 3a10 	vmov	s14, r3
 801292e:	eeb0 6a47 	vmov.f32	s12, s14
 8012932:	eea0 6a66 	vfms.f32	s12, s0, s13
 8012936:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801293a:	3d01      	subs	r5, #1
 801293c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012940:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8012944:	f36f 040b 	bfc	r4, #0, #12
 8012948:	4305      	orrs	r5, r0
 801294a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801294e:	fe08 8a26 	vseleq.f32	s16, s16, s13
 8012952:	ee06 4a90 	vmov	s13, r4
 8012956:	ee38 6ae6 	vsub.f32	s12, s17, s13
 801295a:	ee67 7a26 	vmul.f32	s15, s14, s13
 801295e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8012962:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8012966:	ee17 1a10 	vmov	r1, s14
 801296a:	2900      	cmp	r1, #0
 801296c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012970:	f340 80dc 	ble.w	8012b2c <__ieee754_powf+0x394>
 8012974:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8012978:	f240 80c9 	bls.w	8012b0e <__ieee754_powf+0x376>
 801297c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012984:	bf4c      	ite	mi
 8012986:	2001      	movmi	r0, #1
 8012988:	2000      	movpl	r0, #0
 801298a:	e798      	b.n	80128be <__ieee754_powf+0x126>
 801298c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8012990:	bf05      	ittet	eq
 8012992:	eddf 7a77 	vldreq	s15, [pc, #476]	@ 8012b70 <__ieee754_powf+0x3d8>
 8012996:	f06f 0317 	mvneq.w	r3, #23
 801299a:	2300      	movne	r3, #0
 801299c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80129a0:	bf08      	it	eq
 80129a2:	ee17 7a90 	vmoveq	r7, s15
 80129a6:	15fa      	asrs	r2, r7, #23
 80129a8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80129ac:	3a7f      	subs	r2, #127	@ 0x7f
 80129ae:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80129b2:	441a      	add	r2, r3
 80129b4:	4b6f      	ldr	r3, [pc, #444]	@ (8012b74 <__ieee754_powf+0x3dc>)
 80129b6:	429f      	cmp	r7, r3
 80129b8:	dd06      	ble.n	80129c8 <__ieee754_powf+0x230>
 80129ba:	4b6f      	ldr	r3, [pc, #444]	@ (8012b78 <__ieee754_powf+0x3e0>)
 80129bc:	429f      	cmp	r7, r3
 80129be:	f340 80a4 	ble.w	8012b0a <__ieee754_powf+0x372>
 80129c2:	3201      	adds	r2, #1
 80129c4:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80129c8:	2600      	movs	r6, #0
 80129ca:	4b6c      	ldr	r3, [pc, #432]	@ (8012b7c <__ieee754_powf+0x3e4>)
 80129cc:	ee07 1a10 	vmov	s14, r1
 80129d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80129d4:	1049      	asrs	r1, r1, #1
 80129d6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80129da:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80129de:	edd3 5a00 	vldr	s11, [r3]
 80129e2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80129e6:	4b66      	ldr	r3, [pc, #408]	@ (8012b80 <__ieee754_powf+0x3e8>)
 80129e8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80129ec:	ee37 6a65 	vsub.f32	s12, s14, s11
 80129f0:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80129f4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80129f8:	ee07 1a90 	vmov	s15, r1
 80129fc:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8012a00:	ee37 7a65 	vsub.f32	s14, s14, s11
 8012a04:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 8012b84 <__ieee754_powf+0x3ec>
 8012a08:	ee26 5a24 	vmul.f32	s10, s12, s9
 8012a0c:	ee15 7a10 	vmov	r7, s10
 8012a10:	401f      	ands	r7, r3
 8012a12:	ee06 7a90 	vmov	s13, r7
 8012a16:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8012a1a:	ee65 7a05 	vmul.f32	s15, s10, s10
 8012a1e:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8012a22:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8012b88 <__ieee754_powf+0x3f0>
 8012a26:	eee7 5a87 	vfma.f32	s11, s15, s14
 8012a2a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8012b8c <__ieee754_powf+0x3f4>
 8012a2e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012a32:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8012a36:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012a3a:	eddf 5a49 	vldr	s11, [pc, #292]	@ 8012b60 <__ieee754_powf+0x3c8>
 8012a3e:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012a42:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8012b90 <__ieee754_powf+0x3f8>
 8012a46:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012a4a:	eddf 5a52 	vldr	s11, [pc, #328]	@ 8012b94 <__ieee754_powf+0x3fc>
 8012a4e:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012a52:	ee35 7a26 	vadd.f32	s14, s10, s13
 8012a56:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8012a5a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012a5e:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8012a62:	eef0 5a67 	vmov.f32	s11, s15
 8012a66:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8012a6a:	ee75 5a87 	vadd.f32	s11, s11, s14
 8012a6e:	ee15 1a90 	vmov	r1, s11
 8012a72:	4019      	ands	r1, r3
 8012a74:	ee05 1a90 	vmov	s11, r1
 8012a78:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8012a7c:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8012a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a84:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012a88:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012a8c:	eeb0 6a67 	vmov.f32	s12, s15
 8012a90:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012a94:	ee16 1a10 	vmov	r1, s12
 8012a98:	4019      	ands	r1, r3
 8012a9a:	ee06 1a10 	vmov	s12, r1
 8012a9e:	493e      	ldr	r1, [pc, #248]	@ (8012b98 <__ieee754_powf+0x400>)
 8012aa0:	eeb0 7a46 	vmov.f32	s14, s12
 8012aa4:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8012aa8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8012aac:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8012b9c <__ieee754_powf+0x404>
 8012ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012ab4:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8012ba0 <__ieee754_powf+0x408>
 8012ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012abc:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8012ba4 <__ieee754_powf+0x40c>
 8012ac0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012ac4:	ed91 7a00 	vldr	s14, [r1]
 8012ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012acc:	ee07 2a10 	vmov	s14, r2
 8012ad0:	4a35      	ldr	r2, [pc, #212]	@ (8012ba8 <__ieee754_powf+0x410>)
 8012ad2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8012ad6:	eeb0 7a67 	vmov.f32	s14, s15
 8012ada:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8012ade:	ed92 5a00 	vldr	s10, [r2]
 8012ae2:	eea6 7a25 	vfma.f32	s14, s12, s11
 8012ae6:	ee37 7a05 	vadd.f32	s14, s14, s10
 8012aea:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012aee:	ee17 2a10 	vmov	r2, s14
 8012af2:	401a      	ands	r2, r3
 8012af4:	ee07 2a10 	vmov	s14, r2
 8012af8:	ee77 6a66 	vsub.f32	s13, s14, s13
 8012afc:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8012b00:	eee6 6a65 	vfms.f32	s13, s12, s11
 8012b04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012b08:	e717      	b.n	801293a <__ieee754_powf+0x1a2>
 8012b0a:	2601      	movs	r6, #1
 8012b0c:	e75d      	b.n	80129ca <__ieee754_powf+0x232>
 8012b0e:	d151      	bne.n	8012bb4 <__ieee754_powf+0x41c>
 8012b10:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8012bac <__ieee754_powf+0x414>
 8012b14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012b18:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8012b1c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b24:	f73f af2a 	bgt.w	801297c <__ieee754_powf+0x1e4>
 8012b28:	2386      	movs	r3, #134	@ 0x86
 8012b2a:	e047      	b.n	8012bbc <__ieee754_powf+0x424>
 8012b2c:	4a20      	ldr	r2, [pc, #128]	@ (8012bb0 <__ieee754_powf+0x418>)
 8012b2e:	4293      	cmp	r3, r2
 8012b30:	d907      	bls.n	8012b42 <__ieee754_powf+0x3aa>
 8012b32:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b3a:	bf4c      	ite	mi
 8012b3c:	2001      	movmi	r0, #1
 8012b3e:	2000      	movpl	r0, #0
 8012b40:	e6c9      	b.n	80128d6 <__ieee754_powf+0x13e>
 8012b42:	d137      	bne.n	8012bb4 <__ieee754_powf+0x41c>
 8012b44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012b48:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8012b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b50:	dbea      	blt.n	8012b28 <__ieee754_powf+0x390>
 8012b52:	e7ee      	b.n	8012b32 <__ieee754_powf+0x39a>
 8012b54:	00000000 	.word	0x00000000
 8012b58:	3f7ffff3 	.word	0x3f7ffff3
 8012b5c:	3f800007 	.word	0x3f800007
 8012b60:	3eaaaaab 	.word	0x3eaaaaab
 8012b64:	3fb8aa00 	.word	0x3fb8aa00
 8012b68:	3fb8aa3b 	.word	0x3fb8aa3b
 8012b6c:	36eca570 	.word	0x36eca570
 8012b70:	4b800000 	.word	0x4b800000
 8012b74:	001cc471 	.word	0x001cc471
 8012b78:	005db3d6 	.word	0x005db3d6
 8012b7c:	08014090 	.word	0x08014090
 8012b80:	fffff000 	.word	0xfffff000
 8012b84:	3e6c3255 	.word	0x3e6c3255
 8012b88:	3e53f142 	.word	0x3e53f142
 8012b8c:	3e8ba305 	.word	0x3e8ba305
 8012b90:	3edb6db7 	.word	0x3edb6db7
 8012b94:	3f19999a 	.word	0x3f19999a
 8012b98:	08014080 	.word	0x08014080
 8012b9c:	3f763800 	.word	0x3f763800
 8012ba0:	3f76384f 	.word	0x3f76384f
 8012ba4:	369dc3a0 	.word	0x369dc3a0
 8012ba8:	08014088 	.word	0x08014088
 8012bac:	3338aa3c 	.word	0x3338aa3c
 8012bb0:	43160000 	.word	0x43160000
 8012bb4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8012bb8:	d974      	bls.n	8012ca4 <__ieee754_powf+0x50c>
 8012bba:	15db      	asrs	r3, r3, #23
 8012bbc:	3b7e      	subs	r3, #126	@ 0x7e
 8012bbe:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8012bc2:	4a53      	ldr	r2, [pc, #332]	@ (8012d10 <__ieee754_powf+0x578>)
 8012bc4:	2900      	cmp	r1, #0
 8012bc6:	fa40 f003 	asr.w	r0, r0, r3
 8012bca:	4408      	add	r0, r1
 8012bcc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8012bd0:	f1a3 037f 	sub.w	r3, r3, #127	@ 0x7f
 8012bd4:	fa42 f203 	asr.w	r2, r2, r3
 8012bd8:	f1c3 0317 	rsb	r3, r3, #23
 8012bdc:	ea02 0200 	and.w	r2, r2, r0
 8012be0:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8012be4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8012be8:	ee07 2a10 	vmov	s14, r2
 8012bec:	fa40 f003 	asr.w	r0, r0, r3
 8012bf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012bf4:	bfb8      	it	lt
 8012bf6:	4240      	neglt	r0, r0
 8012bf8:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8012bfc:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8012d14 <__ieee754_powf+0x57c>
 8012c00:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8012d18 <__ieee754_powf+0x580>
 8012c04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012c08:	ee16 3a90 	vmov	r3, s13
 8012c0c:	f36f 030b 	bfc	r3, #0, #12
 8012c10:	ee06 3a90 	vmov	s13, r3
 8012c14:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012c18:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012c1c:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8012d1c <__ieee754_powf+0x584>
 8012c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c24:	eee0 7a87 	vfma.f32	s15, s1, s14
 8012c28:	eeb0 7a67 	vmov.f32	s14, s15
 8012c2c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8012c30:	eef0 5a47 	vmov.f32	s11, s14
 8012c34:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8012c38:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8012d20 <__ieee754_powf+0x588>
 8012c3c:	ee67 6a07 	vmul.f32	s13, s14, s14
 8012c40:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012c44:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8012d24 <__ieee754_powf+0x58c>
 8012c48:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012c4c:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8012d28 <__ieee754_powf+0x590>
 8012c50:	eee7 7a27 	vfma.f32	s15, s14, s15
 8012c54:	eee6 5a26 	vfma.f32	s11, s12, s13
 8012c58:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8012d2c <__ieee754_powf+0x594>
 8012c5c:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8012c60:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012d30 <__ieee754_powf+0x598>
 8012c64:	eee6 5a26 	vfma.f32	s11, s12, s13
 8012c68:	eeb0 6a47 	vmov.f32	s12, s14
 8012c6c:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8012c70:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012c74:	ee67 5a06 	vmul.f32	s11, s14, s12
 8012c78:	ee36 6a66 	vsub.f32	s12, s12, s13
 8012c7c:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8012c80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c88:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012c8c:	ee10 3a10 	vmov	r3, s0
 8012c90:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8012c94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012c98:	da06      	bge.n	8012ca8 <__ieee754_powf+0x510>
 8012c9a:	f000 f9a1 	bl	8012fe0 <scalbnf>
 8012c9e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012ca2:	e591      	b.n	80127c8 <__ieee754_powf+0x30>
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	e7a7      	b.n	8012bf8 <__ieee754_powf+0x460>
 8012ca8:	ee00 3a10 	vmov	s0, r3
 8012cac:	e7f7      	b.n	8012c9e <__ieee754_powf+0x506>
 8012cae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012cb2:	e589      	b.n	80127c8 <__ieee754_powf+0x30>
 8012cb4:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8012d34 <__ieee754_powf+0x59c>
 8012cb8:	e586      	b.n	80127c8 <__ieee754_powf+0x30>
 8012cba:	eeb0 0a48 	vmov.f32	s0, s16
 8012cbe:	e583      	b.n	80127c8 <__ieee754_powf+0x30>
 8012cc0:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8012cc4:	f43f adba 	beq.w	801283c <__ieee754_powf+0xa4>
 8012cc8:	2502      	movs	r5, #2
 8012cca:	eeb0 0a48 	vmov.f32	s0, s16
 8012cce:	4647      	mov	r7, r8
 8012cd0:	f7ff faee 	bl	80122b0 <fabsf>
 8012cd4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8012cd8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8012cdc:	d003      	beq.n	8012ce6 <__ieee754_powf+0x54e>
 8012cde:	f1b8 0f00 	cmp.w	r8, #0
 8012ce2:	f47f add9 	bne.w	8012898 <__ieee754_powf+0x100>
 8012ce6:	2c00      	cmp	r4, #0
 8012ce8:	bfbc      	itt	lt
 8012cea:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8012cee:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012cf2:	2e00      	cmp	r6, #0
 8012cf4:	f6bf ad68 	bge.w	80127c8 <__ieee754_powf+0x30>
 8012cf8:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8012cfc:	ea58 0805 	orrs.w	r8, r8, r5
 8012d00:	f47f adc5 	bne.w	801288e <__ieee754_powf+0xf6>
 8012d04:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012d08:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012d0c:	e55c      	b.n	80127c8 <__ieee754_powf+0x30>
 8012d0e:	bf00      	nop
 8012d10:	ff800000 	.word	0xff800000
 8012d14:	3f317218 	.word	0x3f317218
 8012d18:	3f317200 	.word	0x3f317200
 8012d1c:	35bfbe8c 	.word	0x35bfbe8c
 8012d20:	b5ddea0e 	.word	0xb5ddea0e
 8012d24:	3331bb4c 	.word	0x3331bb4c
 8012d28:	388ab355 	.word	0x388ab355
 8012d2c:	bb360b61 	.word	0xbb360b61
 8012d30:	3e2aaaab 	.word	0x3e2aaaab
 8012d34:	00000000 	.word	0x00000000

08012d38 <__ieee754_rem_pio2f>:
 8012d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d3a:	ee10 6a10 	vmov	r6, s0
 8012d3e:	4b87      	ldr	r3, [pc, #540]	@ (8012f5c <__ieee754_rem_pio2f+0x224>)
 8012d40:	b087      	sub	sp, #28
 8012d42:	4604      	mov	r4, r0
 8012d44:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8012d48:	429d      	cmp	r5, r3
 8012d4a:	d805      	bhi.n	8012d58 <__ieee754_rem_pio2f+0x20>
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	ed80 0a00 	vstr	s0, [r0]
 8012d52:	6043      	str	r3, [r0, #4]
 8012d54:	2000      	movs	r0, #0
 8012d56:	e022      	b.n	8012d9e <__ieee754_rem_pio2f+0x66>
 8012d58:	4b81      	ldr	r3, [pc, #516]	@ (8012f60 <__ieee754_rem_pio2f+0x228>)
 8012d5a:	429d      	cmp	r5, r3
 8012d5c:	d83a      	bhi.n	8012dd4 <__ieee754_rem_pio2f+0x9c>
 8012d5e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012d62:	2e00      	cmp	r6, #0
 8012d64:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8012f64 <__ieee754_rem_pio2f+0x22c>
 8012d68:	f023 030f 	bic.w	r3, r3, #15
 8012d6c:	4a7e      	ldr	r2, [pc, #504]	@ (8012f68 <__ieee754_rem_pio2f+0x230>)
 8012d6e:	dd18      	ble.n	8012da2 <__ieee754_rem_pio2f+0x6a>
 8012d70:	4293      	cmp	r3, r2
 8012d72:	ee70 7a47 	vsub.f32	s15, s0, s14
 8012d76:	bf09      	itett	eq
 8012d78:	ed9f 7a7c 	vldreq	s14, [pc, #496]	@ 8012f6c <__ieee754_rem_pio2f+0x234>
 8012d7c:	eddf 6a7c 	vldrne	s13, [pc, #496]	@ 8012f70 <__ieee754_rem_pio2f+0x238>
 8012d80:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8012d84:	eddf 6a7b 	vldreq	s13, [pc, #492]	@ 8012f74 <__ieee754_rem_pio2f+0x23c>
 8012d88:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8012d8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d90:	ed80 7a00 	vstr	s14, [r0]
 8012d94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012d98:	edc0 7a01 	vstr	s15, [r0, #4]
 8012d9c:	2001      	movs	r0, #1
 8012d9e:	b007      	add	sp, #28
 8012da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012da2:	4293      	cmp	r3, r2
 8012da4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012da8:	bf09      	itett	eq
 8012daa:	ed9f 7a70 	vldreq	s14, [pc, #448]	@ 8012f6c <__ieee754_rem_pio2f+0x234>
 8012dae:	eddf 6a70 	vldrne	s13, [pc, #448]	@ 8012f70 <__ieee754_rem_pio2f+0x238>
 8012db2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8012db6:	eddf 6a6f 	vldreq	s13, [pc, #444]	@ 8012f74 <__ieee754_rem_pio2f+0x23c>
 8012dba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012dbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012dc2:	ed80 7a00 	vstr	s14, [r0]
 8012dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012dca:	edc0 7a01 	vstr	s15, [r0, #4]
 8012dce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012dd2:	e7e4      	b.n	8012d9e <__ieee754_rem_pio2f+0x66>
 8012dd4:	4b68      	ldr	r3, [pc, #416]	@ (8012f78 <__ieee754_rem_pio2f+0x240>)
 8012dd6:	429d      	cmp	r5, r3
 8012dd8:	d872      	bhi.n	8012ec0 <__ieee754_rem_pio2f+0x188>
 8012dda:	f7ff fa69 	bl	80122b0 <fabsf>
 8012dde:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012de2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8012f7c <__ieee754_rem_pio2f+0x244>
 8012de6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012df2:	ee17 0a90 	vmov	r0, s15
 8012df6:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 8012f64 <__ieee754_rem_pio2f+0x22c>
 8012dfa:	281f      	cmp	r0, #31
 8012dfc:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012e00:	eddf 7a5b 	vldr	s15, [pc, #364]	@ 8012f70 <__ieee754_rem_pio2f+0x238>
 8012e04:	eeb1 6a47 	vneg.f32	s12, s14
 8012e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e0c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012e10:	ee16 1a90 	vmov	r1, s13
 8012e14:	dc09      	bgt.n	8012e2a <__ieee754_rem_pio2f+0xf2>
 8012e16:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012e1a:	1e47      	subs	r7, r0, #1
 8012e1c:	4a58      	ldr	r2, [pc, #352]	@ (8012f80 <__ieee754_rem_pio2f+0x248>)
 8012e1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012e22:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012e26:	4293      	cmp	r3, r2
 8012e28:	d106      	bne.n	8012e38 <__ieee754_rem_pio2f+0x100>
 8012e2a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8012e2e:	15eb      	asrs	r3, r5, #23
 8012e30:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8012e34:	2a08      	cmp	r2, #8
 8012e36:	dc14      	bgt.n	8012e62 <__ieee754_rem_pio2f+0x12a>
 8012e38:	6021      	str	r1, [r4, #0]
 8012e3a:	ed94 7a00 	vldr	s14, [r4]
 8012e3e:	2e00      	cmp	r6, #0
 8012e40:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012e44:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012e48:	ed84 0a01 	vstr	s0, [r4, #4]
 8012e4c:	daa7      	bge.n	8012d9e <__ieee754_rem_pio2f+0x66>
 8012e4e:	eeb1 7a47 	vneg.f32	s14, s14
 8012e52:	eeb1 0a40 	vneg.f32	s0, s0
 8012e56:	ed84 7a00 	vstr	s14, [r4]
 8012e5a:	ed84 0a01 	vstr	s0, [r4, #4]
 8012e5e:	4240      	negs	r0, r0
 8012e60:	e79d      	b.n	8012d9e <__ieee754_rem_pio2f+0x66>
 8012e62:	eef0 6a40 	vmov.f32	s13, s0
 8012e66:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8012f6c <__ieee754_rem_pio2f+0x234>
 8012e6a:	eee6 6a25 	vfma.f32	s13, s12, s11
 8012e6e:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012e72:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012e76:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012f74 <__ieee754_rem_pio2f+0x23c>
 8012e7a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012e7e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8012e82:	ee15 2a90 	vmov	r2, s11
 8012e86:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8012e8a:	1a5b      	subs	r3, r3, r1
 8012e8c:	2b19      	cmp	r3, #25
 8012e8e:	dc04      	bgt.n	8012e9a <__ieee754_rem_pio2f+0x162>
 8012e90:	eeb0 0a66 	vmov.f32	s0, s13
 8012e94:	edc4 5a00 	vstr	s11, [r4]
 8012e98:	e7cf      	b.n	8012e3a <__ieee754_rem_pio2f+0x102>
 8012e9a:	eeb0 0a66 	vmov.f32	s0, s13
 8012e9e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8012f84 <__ieee754_rem_pio2f+0x24c>
 8012ea2:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012ea6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012eaa:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8012f88 <__ieee754_rem_pio2f+0x250>
 8012eae:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012eb2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012eb6:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012eba:	ed84 7a00 	vstr	s14, [r4]
 8012ebe:	e7bc      	b.n	8012e3a <__ieee754_rem_pio2f+0x102>
 8012ec0:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8012ec4:	d306      	bcc.n	8012ed4 <__ieee754_rem_pio2f+0x19c>
 8012ec6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012eca:	edc0 7a01 	vstr	s15, [r0, #4]
 8012ece:	edc0 7a00 	vstr	s15, [r0]
 8012ed2:	e73f      	b.n	8012d54 <__ieee754_rem_pio2f+0x1c>
 8012ed4:	15ea      	asrs	r2, r5, #23
 8012ed6:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8012f8c <__ieee754_rem_pio2f+0x254>
 8012eda:	3a86      	subs	r2, #134	@ 0x86
 8012edc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012ee0:	ee07 3a90 	vmov	s15, r3
 8012ee4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012ee8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012eec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012ef0:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012ef4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012ef8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012efc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012f04:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012f08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012f0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012f10:	edcd 7a05 	vstr	s15, [sp, #20]
 8012f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f18:	d11e      	bne.n	8012f58 <__ieee754_rem_pio2f+0x220>
 8012f1a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f22:	bf0c      	ite	eq
 8012f24:	2301      	moveq	r3, #1
 8012f26:	2302      	movne	r3, #2
 8012f28:	4919      	ldr	r1, [pc, #100]	@ (8012f90 <__ieee754_rem_pio2f+0x258>)
 8012f2a:	a803      	add	r0, sp, #12
 8012f2c:	9101      	str	r1, [sp, #4]
 8012f2e:	2102      	movs	r1, #2
 8012f30:	9100      	str	r1, [sp, #0]
 8012f32:	4621      	mov	r1, r4
 8012f34:	f000 f98c 	bl	8013250 <__kernel_rem_pio2f>
 8012f38:	2e00      	cmp	r6, #0
 8012f3a:	f6bf af30 	bge.w	8012d9e <__ieee754_rem_pio2f+0x66>
 8012f3e:	edd4 7a00 	vldr	s15, [r4]
 8012f42:	eef1 7a67 	vneg.f32	s15, s15
 8012f46:	edc4 7a00 	vstr	s15, [r4]
 8012f4a:	edd4 7a01 	vldr	s15, [r4, #4]
 8012f4e:	eef1 7a67 	vneg.f32	s15, s15
 8012f52:	edc4 7a01 	vstr	s15, [r4, #4]
 8012f56:	e782      	b.n	8012e5e <__ieee754_rem_pio2f+0x126>
 8012f58:	2303      	movs	r3, #3
 8012f5a:	e7e5      	b.n	8012f28 <__ieee754_rem_pio2f+0x1f0>
 8012f5c:	3f490fd8 	.word	0x3f490fd8
 8012f60:	4016cbe3 	.word	0x4016cbe3
 8012f64:	3fc90f80 	.word	0x3fc90f80
 8012f68:	3fc90fd0 	.word	0x3fc90fd0
 8012f6c:	37354400 	.word	0x37354400
 8012f70:	37354443 	.word	0x37354443
 8012f74:	2e85a308 	.word	0x2e85a308
 8012f78:	43490f80 	.word	0x43490f80
 8012f7c:	3f22f984 	.word	0x3f22f984
 8012f80:	08014098 	.word	0x08014098
 8012f84:	2e85a300 	.word	0x2e85a300
 8012f88:	248d3132 	.word	0x248d3132
 8012f8c:	43800000 	.word	0x43800000
 8012f90:	08014118 	.word	0x08014118

08012f94 <with_errnof>:
 8012f94:	b510      	push	{r4, lr}
 8012f96:	ed2d 8b02 	vpush	{d8}
 8012f9a:	eeb0 8a40 	vmov.f32	s16, s0
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	f7fc fb18 	bl	800f5d4 <__errno>
 8012fa4:	6004      	str	r4, [r0, #0]
 8012fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8012faa:	ecbd 8b02 	vpop	{d8}
 8012fae:	bd10      	pop	{r4, pc}

08012fb0 <xflowf>:
 8012fb0:	b130      	cbz	r0, 8012fc0 <xflowf+0x10>
 8012fb2:	eef1 7a40 	vneg.f32	s15, s0
 8012fb6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012fba:	2022      	movs	r0, #34	@ 0x22
 8012fbc:	f7ff bfea 	b.w	8012f94 <with_errnof>
 8012fc0:	eef0 7a40 	vmov.f32	s15, s0
 8012fc4:	e7f7      	b.n	8012fb6 <xflowf+0x6>
	...

08012fc8 <__math_uflowf>:
 8012fc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012fd0 <__math_uflowf+0x8>
 8012fcc:	f7ff bff0 	b.w	8012fb0 <xflowf>
 8012fd0:	10000000 	.word	0x10000000

08012fd4 <__math_oflowf>:
 8012fd4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012fdc <__math_oflowf+0x8>
 8012fd8:	f7ff bfea 	b.w	8012fb0 <xflowf>
 8012fdc:	70000000 	.word	0x70000000

08012fe0 <scalbnf>:
 8012fe0:	ee10 3a10 	vmov	r3, s0
 8012fe4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012fe8:	d02a      	beq.n	8013040 <scalbnf+0x60>
 8012fea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012fee:	d302      	bcc.n	8012ff6 <scalbnf+0x16>
 8012ff0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012ff4:	4770      	bx	lr
 8012ff6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012ffa:	d122      	bne.n	8013042 <scalbnf+0x62>
 8012ffc:	4b23      	ldr	r3, [pc, #140]	@ (801308c <scalbnf+0xac>)
 8012ffe:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8013090 <scalbnf+0xb0>
 8013002:	4298      	cmp	r0, r3
 8013004:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013008:	db16      	blt.n	8013038 <scalbnf+0x58>
 801300a:	ee10 3a10 	vmov	r3, s0
 801300e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013012:	3a19      	subs	r2, #25
 8013014:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013018:	4288      	cmp	r0, r1
 801301a:	dd14      	ble.n	8013046 <scalbnf+0x66>
 801301c:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8013094 <scalbnf+0xb4>
 8013020:	ee10 3a10 	vmov	r3, s0
 8013024:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8013098 <scalbnf+0xb8>
 8013028:	eeb0 7a67 	vmov.f32	s14, s15
 801302c:	2b00      	cmp	r3, #0
 801302e:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8013032:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013036:	4770      	bx	lr
 8013038:	eddf 7a18 	vldr	s15, [pc, #96]	@ 801309c <scalbnf+0xbc>
 801303c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013040:	4770      	bx	lr
 8013042:	0dd2      	lsrs	r2, r2, #23
 8013044:	e7e6      	b.n	8013014 <scalbnf+0x34>
 8013046:	4410      	add	r0, r2
 8013048:	28fe      	cmp	r0, #254	@ 0xfe
 801304a:	dce7      	bgt.n	801301c <scalbnf+0x3c>
 801304c:	2800      	cmp	r0, #0
 801304e:	dd06      	ble.n	801305e <scalbnf+0x7e>
 8013050:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013054:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013058:	ee00 3a10 	vmov	s0, r3
 801305c:	4770      	bx	lr
 801305e:	f110 0f16 	cmn.w	r0, #22
 8013062:	da09      	bge.n	8013078 <scalbnf+0x98>
 8013064:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801309c <scalbnf+0xbc>
 8013068:	ee10 3a10 	vmov	r3, s0
 801306c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80130a0 <scalbnf+0xc0>
 8013070:	eeb0 7a67 	vmov.f32	s14, s15
 8013074:	2b00      	cmp	r3, #0
 8013076:	e7da      	b.n	801302e <scalbnf+0x4e>
 8013078:	3019      	adds	r0, #25
 801307a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801307e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80130a4 <scalbnf+0xc4>
 8013082:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013086:	ee07 3a90 	vmov	s15, r3
 801308a:	e7d7      	b.n	801303c <scalbnf+0x5c>
 801308c:	ffff3cb0 	.word	0xffff3cb0
 8013090:	4c000000 	.word	0x4c000000
 8013094:	7149f2ca 	.word	0x7149f2ca
 8013098:	f149f2ca 	.word	0xf149f2ca
 801309c:	0da24260 	.word	0x0da24260
 80130a0:	8da24260 	.word	0x8da24260
 80130a4:	33000000 	.word	0x33000000

080130a8 <atanf>:
 80130a8:	b538      	push	{r3, r4, r5, lr}
 80130aa:	ee10 5a10 	vmov	r5, s0
 80130ae:	eef0 7a40 	vmov.f32	s15, s0
 80130b2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80130b6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80130ba:	d30f      	bcc.n	80130dc <atanf+0x34>
 80130bc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80130c0:	d904      	bls.n	80130cc <atanf+0x24>
 80130c2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80130c6:	eeb0 0a67 	vmov.f32	s0, s15
 80130ca:	bd38      	pop	{r3, r4, r5, pc}
 80130cc:	2d00      	cmp	r5, #0
 80130ce:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8013204 <atanf+0x15c>
 80130d2:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8013208 <atanf+0x160>
 80130d6:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80130da:	e7f4      	b.n	80130c6 <atanf+0x1e>
 80130dc:	4b4b      	ldr	r3, [pc, #300]	@ (801320c <atanf+0x164>)
 80130de:	429c      	cmp	r4, r3
 80130e0:	d810      	bhi.n	8013104 <atanf+0x5c>
 80130e2:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80130e6:	d20a      	bcs.n	80130fe <atanf+0x56>
 80130e8:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8013210 <atanf+0x168>
 80130ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80130f0:	ee30 7a07 	vadd.f32	s14, s0, s14
 80130f4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80130f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130fc:	dce3      	bgt.n	80130c6 <atanf+0x1e>
 80130fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013102:	e013      	b.n	801312c <atanf+0x84>
 8013104:	f7ff f8d4 	bl	80122b0 <fabsf>
 8013108:	4b42      	ldr	r3, [pc, #264]	@ (8013214 <atanf+0x16c>)
 801310a:	429c      	cmp	r4, r3
 801310c:	d84f      	bhi.n	80131ae <atanf+0x106>
 801310e:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8013112:	429c      	cmp	r4, r3
 8013114:	d841      	bhi.n	801319a <atanf+0xf2>
 8013116:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801311a:	2300      	movs	r3, #0
 801311c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8013120:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013124:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013128:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801312c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8013218 <atanf+0x170>
 8013130:	1c5a      	adds	r2, r3, #1
 8013132:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801321c <atanf+0x174>
 8013136:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8013220 <atanf+0x178>
 801313a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801313e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013142:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013146:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8013224 <atanf+0x17c>
 801314a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801314e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8013228 <atanf+0x180>
 8013152:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013156:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 801322c <atanf+0x184>
 801315a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801315e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013230 <atanf+0x188>
 8013162:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013166:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8013234 <atanf+0x18c>
 801316a:	eea6 5a87 	vfma.f32	s10, s13, s14
 801316e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8013238 <atanf+0x190>
 8013172:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013176:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 801323c <atanf+0x194>
 801317a:	eea7 5a26 	vfma.f32	s10, s14, s13
 801317e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8013240 <atanf+0x198>
 8013182:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013186:	ee27 7a26 	vmul.f32	s14, s14, s13
 801318a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801318e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013192:	d121      	bne.n	80131d8 <atanf+0x130>
 8013194:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013198:	e795      	b.n	80130c6 <atanf+0x1e>
 801319a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801319e:	2301      	movs	r3, #1
 80131a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80131a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80131a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80131ac:	e7be      	b.n	801312c <atanf+0x84>
 80131ae:	4b25      	ldr	r3, [pc, #148]	@ (8013244 <atanf+0x19c>)
 80131b0:	429c      	cmp	r4, r3
 80131b2:	d80b      	bhi.n	80131cc <atanf+0x124>
 80131b4:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80131b8:	2302      	movs	r3, #2
 80131ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80131be:	ee70 6a67 	vsub.f32	s13, s0, s15
 80131c2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80131c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80131ca:	e7af      	b.n	801312c <atanf+0x84>
 80131cc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80131d0:	2303      	movs	r3, #3
 80131d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80131d6:	e7a9      	b.n	801312c <atanf+0x84>
 80131d8:	4a1b      	ldr	r2, [pc, #108]	@ (8013248 <atanf+0x1a0>)
 80131da:	2d00      	cmp	r5, #0
 80131dc:	491b      	ldr	r1, [pc, #108]	@ (801324c <atanf+0x1a4>)
 80131de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80131e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80131e6:	edd3 6a00 	vldr	s13, [r3]
 80131ea:	ee37 7a66 	vsub.f32	s14, s14, s13
 80131ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80131f2:	edd2 7a00 	vldr	s15, [r2]
 80131f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80131fa:	bfb8      	it	lt
 80131fc:	eef1 7a67 	vneglt.f32	s15, s15
 8013200:	e761      	b.n	80130c6 <atanf+0x1e>
 8013202:	bf00      	nop
 8013204:	bfc90fdb 	.word	0xbfc90fdb
 8013208:	3fc90fdb 	.word	0x3fc90fdb
 801320c:	3edfffff 	.word	0x3edfffff
 8013210:	7149f2ca 	.word	0x7149f2ca
 8013214:	3f97ffff 	.word	0x3f97ffff
 8013218:	3c8569d7 	.word	0x3c8569d7
 801321c:	3d4bda59 	.word	0x3d4bda59
 8013220:	bd6ef16b 	.word	0xbd6ef16b
 8013224:	3d886b35 	.word	0x3d886b35
 8013228:	3dba2e6e 	.word	0x3dba2e6e
 801322c:	3e124925 	.word	0x3e124925
 8013230:	3eaaaaab 	.word	0x3eaaaaab
 8013234:	bd15a221 	.word	0xbd15a221
 8013238:	bd9d8795 	.word	0xbd9d8795
 801323c:	bde38e38 	.word	0xbde38e38
 8013240:	be4ccccd 	.word	0xbe4ccccd
 8013244:	401bffff 	.word	0x401bffff
 8013248:	08014440 	.word	0x08014440
 801324c:	08014430 	.word	0x08014430

08013250 <__kernel_rem_pio2f>:
 8013250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013254:	4690      	mov	r8, r2
 8013256:	4ab9      	ldr	r2, [pc, #740]	@ (801353c <__kernel_rem_pio2f+0x2ec>)
 8013258:	460f      	mov	r7, r1
 801325a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801325e:	f118 0f04 	cmn.w	r8, #4
 8013262:	ed2d 8b04 	vpush	{d8-d9}
 8013266:	b0d9      	sub	sp, #356	@ 0x164
 8013268:	9001      	str	r0, [sp, #4]
 801326a:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801326c:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013270:	db26      	blt.n	80132c0 <__kernel_rem_pio2f+0x70>
 8013272:	f1b8 0203 	subs.w	r2, r8, #3
 8013276:	bf48      	it	mi
 8013278:	f108 0204 	addmi.w	r2, r8, #4
 801327c:	10d2      	asrs	r2, r2, #3
 801327e:	1c55      	adds	r5, r2, #1
 8013280:	eba2 060b 	sub.w	r6, r2, fp
 8013284:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013286:	eb0a 0c0b 	add.w	ip, sl, fp
 801328a:	00e8      	lsls	r0, r5, #3
 801328c:	ac1c      	add	r4, sp, #112	@ 0x70
 801328e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8013292:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 801354c <__kernel_rem_pio2f+0x2fc>
 8013296:	9002      	str	r0, [sp, #8]
 8013298:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801329c:	2000      	movs	r0, #0
 801329e:	4560      	cmp	r0, ip
 80132a0:	dd10      	ble.n	80132c4 <__kernel_rem_pio2f+0x74>
 80132a2:	a91c      	add	r1, sp, #112	@ 0x70
 80132a4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80132a8:	2600      	movs	r6, #0
 80132aa:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80132ae:	4556      	cmp	r6, sl
 80132b0:	dc26      	bgt.n	8013300 <__kernel_rem_pio2f+0xb0>
 80132b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80132b6:	4684      	mov	ip, r0
 80132b8:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801354c <__kernel_rem_pio2f+0x2fc>
 80132bc:	2400      	movs	r4, #0
 80132be:	e018      	b.n	80132f2 <__kernel_rem_pio2f+0xa2>
 80132c0:	2200      	movs	r2, #0
 80132c2:	e7dc      	b.n	801327e <__kernel_rem_pio2f+0x2e>
 80132c4:	42c6      	cmn	r6, r0
 80132c6:	bf54      	ite	pl
 80132c8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80132cc:	eef0 7a47 	vmovmi.f32	s15, s14
 80132d0:	f100 0001 	add.w	r0, r0, #1
 80132d4:	bf5c      	itt	pl
 80132d6:	ee07 1a90 	vmovpl	s15, r1
 80132da:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80132de:	ece4 7a01 	vstmia	r4!, {s15}
 80132e2:	e7dc      	b.n	801329e <__kernel_rem_pio2f+0x4e>
 80132e4:	ecfe 6a01 	vldmia	lr!, {s13}
 80132e8:	3401      	adds	r4, #1
 80132ea:	ed3c 7a01 	vldmdb	ip!, {s14}
 80132ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 80132f2:	455c      	cmp	r4, fp
 80132f4:	ddf6      	ble.n	80132e4 <__kernel_rem_pio2f+0x94>
 80132f6:	3601      	adds	r6, #1
 80132f8:	3004      	adds	r0, #4
 80132fa:	ece9 7a01 	vstmia	r9!, {s15}
 80132fe:	e7d6      	b.n	80132ae <__kernel_rem_pio2f+0x5e>
 8013300:	a908      	add	r1, sp, #32
 8013302:	4654      	mov	r4, sl
 8013304:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8013548 <__kernel_rem_pio2f+0x2f8>
 8013308:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801330c:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8013544 <__kernel_rem_pio2f+0x2f4>
 8013310:	9104      	str	r1, [sp, #16]
 8013312:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013314:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013318:	9203      	str	r2, [sp, #12]
 801331a:	00a2      	lsls	r2, r4, #2
 801331c:	a944      	add	r1, sp, #272	@ 0x110
 801331e:	4626      	mov	r6, r4
 8013320:	9205      	str	r2, [sp, #20]
 8013322:	aa58      	add	r2, sp, #352	@ 0x160
 8013324:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013328:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801332c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013330:	aa08      	add	r2, sp, #32
 8013332:	4694      	mov	ip, r2
 8013334:	2e00      	cmp	r6, #0
 8013336:	dc4c      	bgt.n	80133d2 <__kernel_rem_pio2f+0x182>
 8013338:	4628      	mov	r0, r5
 801333a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801333e:	f7ff fe4f 	bl	8012fe0 <scalbnf>
 8013342:	eeb0 8a40 	vmov.f32	s16, s0
 8013346:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801334a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801334e:	f000 f9e9 	bl	8013724 <floorf>
 8013352:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013356:	2d00      	cmp	r5, #0
 8013358:	eea0 8a67 	vfms.f32	s16, s0, s15
 801335c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013360:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013364:	ee17 9a90 	vmov	r9, s15
 8013368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801336c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013370:	dd41      	ble.n	80133f6 <__kernel_rem_pio2f+0x1a6>
 8013372:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8013376:	a908      	add	r1, sp, #32
 8013378:	f1c5 0e08 	rsb	lr, r5, #8
 801337c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013380:	fa46 f00e 	asr.w	r0, r6, lr
 8013384:	4481      	add	r9, r0
 8013386:	fa00 f00e 	lsl.w	r0, r0, lr
 801338a:	1a36      	subs	r6, r6, r0
 801338c:	f1c5 0007 	rsb	r0, r5, #7
 8013390:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013394:	4106      	asrs	r6, r0
 8013396:	2e00      	cmp	r6, #0
 8013398:	dd3c      	ble.n	8013414 <__kernel_rem_pio2f+0x1c4>
 801339a:	f04f 0e00 	mov.w	lr, #0
 801339e:	f109 0901 	add.w	r9, r9, #1
 80133a2:	4670      	mov	r0, lr
 80133a4:	4574      	cmp	r4, lr
 80133a6:	dc68      	bgt.n	801347a <__kernel_rem_pio2f+0x22a>
 80133a8:	2d00      	cmp	r5, #0
 80133aa:	dd03      	ble.n	80133b4 <__kernel_rem_pio2f+0x164>
 80133ac:	2d01      	cmp	r5, #1
 80133ae:	d074      	beq.n	801349a <__kernel_rem_pio2f+0x24a>
 80133b0:	2d02      	cmp	r5, #2
 80133b2:	d07d      	beq.n	80134b0 <__kernel_rem_pio2f+0x260>
 80133b4:	2e02      	cmp	r6, #2
 80133b6:	d12d      	bne.n	8013414 <__kernel_rem_pio2f+0x1c4>
 80133b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80133bc:	ee30 8a48 	vsub.f32	s16, s0, s16
 80133c0:	b340      	cbz	r0, 8013414 <__kernel_rem_pio2f+0x1c4>
 80133c2:	4628      	mov	r0, r5
 80133c4:	9306      	str	r3, [sp, #24]
 80133c6:	f7ff fe0b 	bl	8012fe0 <scalbnf>
 80133ca:	9b06      	ldr	r3, [sp, #24]
 80133cc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80133d0:	e020      	b.n	8013414 <__kernel_rem_pio2f+0x1c4>
 80133d2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80133d6:	3e01      	subs	r6, #1
 80133d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133e0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80133e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80133e8:	ecac 0a01 	vstmia	ip!, {s0}
 80133ec:	ed30 0a01 	vldmdb	r0!, {s0}
 80133f0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80133f4:	e79e      	b.n	8013334 <__kernel_rem_pio2f+0xe4>
 80133f6:	d105      	bne.n	8013404 <__kernel_rem_pio2f+0x1b4>
 80133f8:	1e60      	subs	r0, r4, #1
 80133fa:	a908      	add	r1, sp, #32
 80133fc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8013400:	11f6      	asrs	r6, r6, #7
 8013402:	e7c8      	b.n	8013396 <__kernel_rem_pio2f+0x146>
 8013404:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013408:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013410:	da31      	bge.n	8013476 <__kernel_rem_pio2f+0x226>
 8013412:	2600      	movs	r6, #0
 8013414:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341c:	f040 8098 	bne.w	8013550 <__kernel_rem_pio2f+0x300>
 8013420:	1e60      	subs	r0, r4, #1
 8013422:	2200      	movs	r2, #0
 8013424:	4550      	cmp	r0, sl
 8013426:	da4b      	bge.n	80134c0 <__kernel_rem_pio2f+0x270>
 8013428:	2a00      	cmp	r2, #0
 801342a:	d065      	beq.n	80134f8 <__kernel_rem_pio2f+0x2a8>
 801342c:	3c01      	subs	r4, #1
 801342e:	ab08      	add	r3, sp, #32
 8013430:	3d08      	subs	r5, #8
 8013432:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d0f8      	beq.n	801342c <__kernel_rem_pio2f+0x1dc>
 801343a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801343e:	4628      	mov	r0, r5
 8013440:	f7ff fdce 	bl	8012fe0 <scalbnf>
 8013444:	1c63      	adds	r3, r4, #1
 8013446:	aa44      	add	r2, sp, #272	@ 0x110
 8013448:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8013548 <__kernel_rem_pio2f+0x2f8>
 801344c:	0099      	lsls	r1, r3, #2
 801344e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013452:	4623      	mov	r3, r4
 8013454:	2b00      	cmp	r3, #0
 8013456:	f280 80a9 	bge.w	80135ac <__kernel_rem_pio2f+0x35c>
 801345a:	4623      	mov	r3, r4
 801345c:	2b00      	cmp	r3, #0
 801345e:	f2c0 80c7 	blt.w	80135f0 <__kernel_rem_pio2f+0x3a0>
 8013462:	aa44      	add	r2, sp, #272	@ 0x110
 8013464:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8013540 <__kernel_rem_pio2f+0x2f0>
 8013468:	eddf 7a38 	vldr	s15, [pc, #224]	@ 801354c <__kernel_rem_pio2f+0x2fc>
 801346c:	2000      	movs	r0, #0
 801346e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013472:	1ae2      	subs	r2, r4, r3
 8013474:	e0b1      	b.n	80135da <__kernel_rem_pio2f+0x38a>
 8013476:	2602      	movs	r6, #2
 8013478:	e78f      	b.n	801339a <__kernel_rem_pio2f+0x14a>
 801347a:	f852 1b04 	ldr.w	r1, [r2], #4
 801347e:	b948      	cbnz	r0, 8013494 <__kernel_rem_pio2f+0x244>
 8013480:	b121      	cbz	r1, 801348c <__kernel_rem_pio2f+0x23c>
 8013482:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8013486:	f842 1c04 	str.w	r1, [r2, #-4]
 801348a:	2101      	movs	r1, #1
 801348c:	f10e 0e01 	add.w	lr, lr, #1
 8013490:	4608      	mov	r0, r1
 8013492:	e787      	b.n	80133a4 <__kernel_rem_pio2f+0x154>
 8013494:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013498:	e7f5      	b.n	8013486 <__kernel_rem_pio2f+0x236>
 801349a:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801349e:	aa08      	add	r2, sp, #32
 80134a0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80134a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80134a8:	a908      	add	r1, sp, #32
 80134aa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80134ae:	e781      	b.n	80133b4 <__kernel_rem_pio2f+0x164>
 80134b0:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80134b4:	aa08      	add	r2, sp, #32
 80134b6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80134ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80134be:	e7f3      	b.n	80134a8 <__kernel_rem_pio2f+0x258>
 80134c0:	a908      	add	r1, sp, #32
 80134c2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80134c6:	3801      	subs	r0, #1
 80134c8:	430a      	orrs	r2, r1
 80134ca:	e7ab      	b.n	8013424 <__kernel_rem_pio2f+0x1d4>
 80134cc:	3201      	adds	r2, #1
 80134ce:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80134d2:	2e00      	cmp	r6, #0
 80134d4:	d0fa      	beq.n	80134cc <__kernel_rem_pio2f+0x27c>
 80134d6:	9905      	ldr	r1, [sp, #20]
 80134d8:	18e6      	adds	r6, r4, r3
 80134da:	f104 0c01 	add.w	ip, r4, #1
 80134de:	4422      	add	r2, r4
 80134e0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80134e4:	eb0d 0001 	add.w	r0, sp, r1
 80134e8:	a91c      	add	r1, sp, #112	@ 0x70
 80134ea:	384c      	subs	r0, #76	@ 0x4c
 80134ec:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80134f0:	4562      	cmp	r2, ip
 80134f2:	da04      	bge.n	80134fe <__kernel_rem_pio2f+0x2ae>
 80134f4:	4614      	mov	r4, r2
 80134f6:	e710      	b.n	801331a <__kernel_rem_pio2f+0xca>
 80134f8:	9804      	ldr	r0, [sp, #16]
 80134fa:	2201      	movs	r2, #1
 80134fc:	e7e7      	b.n	80134ce <__kernel_rem_pio2f+0x27e>
 80134fe:	9903      	ldr	r1, [sp, #12]
 8013500:	2400      	movs	r4, #0
 8013502:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013506:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801350a:	ee07 1a90 	vmov	s15, r1
 801350e:	9105      	str	r1, [sp, #20]
 8013510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013514:	ece6 7a01 	vstmia	r6!, {s15}
 8013518:	46b1      	mov	r9, r6
 801351a:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801354c <__kernel_rem_pio2f+0x2fc>
 801351e:	455c      	cmp	r4, fp
 8013520:	dd04      	ble.n	801352c <__kernel_rem_pio2f+0x2dc>
 8013522:	f10c 0c01 	add.w	ip, ip, #1
 8013526:	ece0 7a01 	vstmia	r0!, {s15}
 801352a:	e7e1      	b.n	80134f0 <__kernel_rem_pio2f+0x2a0>
 801352c:	ecfe 6a01 	vldmia	lr!, {s13}
 8013530:	3401      	adds	r4, #1
 8013532:	ed39 7a01 	vldmdb	r9!, {s14}
 8013536:	eee6 7a87 	vfma.f32	s15, s13, s14
 801353a:	e7f0      	b.n	801351e <__kernel_rem_pio2f+0x2ce>
 801353c:	0801447c 	.word	0x0801447c
 8013540:	08014450 	.word	0x08014450
 8013544:	43800000 	.word	0x43800000
 8013548:	3b800000 	.word	0x3b800000
 801354c:	00000000 	.word	0x00000000
 8013550:	9b02      	ldr	r3, [sp, #8]
 8013552:	eeb0 0a48 	vmov.f32	s0, s16
 8013556:	eba3 0008 	sub.w	r0, r3, r8
 801355a:	f7ff fd41 	bl	8012fe0 <scalbnf>
 801355e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8013544 <__kernel_rem_pio2f+0x2f4>
 8013562:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801356a:	db19      	blt.n	80135a0 <__kernel_rem_pio2f+0x350>
 801356c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8013548 <__kernel_rem_pio2f+0x2f8>
 8013570:	aa08      	add	r2, sp, #32
 8013572:	3508      	adds	r5, #8
 8013574:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801357c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013580:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013588:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801358c:	ee10 3a10 	vmov	r3, s0
 8013590:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013594:	3401      	adds	r4, #1
 8013596:	ee17 3a90 	vmov	r3, s15
 801359a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801359e:	e74c      	b.n	801343a <__kernel_rem_pio2f+0x1ea>
 80135a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80135a4:	aa08      	add	r2, sp, #32
 80135a6:	ee10 3a10 	vmov	r3, s0
 80135aa:	e7f6      	b.n	801359a <__kernel_rem_pio2f+0x34a>
 80135ac:	a808      	add	r0, sp, #32
 80135ae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80135b2:	3b01      	subs	r3, #1
 80135b4:	ee07 0a90 	vmov	s15, r0
 80135b8:	9001      	str	r0, [sp, #4]
 80135ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80135c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80135c6:	ed62 7a01 	vstmdb	r2!, {s15}
 80135ca:	e743      	b.n	8013454 <__kernel_rem_pio2f+0x204>
 80135cc:	ecfc 6a01 	vldmia	ip!, {s13}
 80135d0:	3001      	adds	r0, #1
 80135d2:	ecb5 7a01 	vldmia	r5!, {s14}
 80135d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80135da:	4550      	cmp	r0, sl
 80135dc:	dc01      	bgt.n	80135e2 <__kernel_rem_pio2f+0x392>
 80135de:	4290      	cmp	r0, r2
 80135e0:	ddf4      	ble.n	80135cc <__kernel_rem_pio2f+0x37c>
 80135e2:	a858      	add	r0, sp, #352	@ 0x160
 80135e4:	3b01      	subs	r3, #1
 80135e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80135ea:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80135ee:	e735      	b.n	801345c <__kernel_rem_pio2f+0x20c>
 80135f0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80135f2:	2b02      	cmp	r3, #2
 80135f4:	dc09      	bgt.n	801360a <__kernel_rem_pio2f+0x3ba>
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	dc27      	bgt.n	801364a <__kernel_rem_pio2f+0x3fa>
 80135fa:	d040      	beq.n	801367e <__kernel_rem_pio2f+0x42e>
 80135fc:	f009 0007 	and.w	r0, r9, #7
 8013600:	b059      	add	sp, #356	@ 0x164
 8013602:	ecbd 8b04 	vpop	{d8-d9}
 8013606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801360a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801360c:	2b03      	cmp	r3, #3
 801360e:	d1f5      	bne.n	80135fc <__kernel_rem_pio2f+0x3ac>
 8013610:	aa30      	add	r2, sp, #192	@ 0xc0
 8013612:	1f0b      	subs	r3, r1, #4
 8013614:	4620      	mov	r0, r4
 8013616:	4413      	add	r3, r2
 8013618:	461a      	mov	r2, r3
 801361a:	2800      	cmp	r0, #0
 801361c:	dc50      	bgt.n	80136c0 <__kernel_rem_pio2f+0x470>
 801361e:	4622      	mov	r2, r4
 8013620:	2a01      	cmp	r2, #1
 8013622:	dc5d      	bgt.n	80136e0 <__kernel_rem_pio2f+0x490>
 8013624:	ab30      	add	r3, sp, #192	@ 0xc0
 8013626:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801354c <__kernel_rem_pio2f+0x2fc>
 801362a:	440b      	add	r3, r1
 801362c:	2c01      	cmp	r4, #1
 801362e:	dc67      	bgt.n	8013700 <__kernel_rem_pio2f+0x4b0>
 8013630:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013634:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8013638:	2e00      	cmp	r6, #0
 801363a:	d167      	bne.n	801370c <__kernel_rem_pio2f+0x4bc>
 801363c:	edc7 6a00 	vstr	s13, [r7]
 8013640:	ed87 7a01 	vstr	s14, [r7, #4]
 8013644:	edc7 7a02 	vstr	s15, [r7, #8]
 8013648:	e7d8      	b.n	80135fc <__kernel_rem_pio2f+0x3ac>
 801364a:	ab30      	add	r3, sp, #192	@ 0xc0
 801364c:	4622      	mov	r2, r4
 801364e:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801354c <__kernel_rem_pio2f+0x2fc>
 8013652:	440b      	add	r3, r1
 8013654:	2a00      	cmp	r2, #0
 8013656:	da24      	bge.n	80136a2 <__kernel_rem_pio2f+0x452>
 8013658:	b34e      	cbz	r6, 80136ae <__kernel_rem_pio2f+0x45e>
 801365a:	eef1 7a47 	vneg.f32	s15, s14
 801365e:	edc7 7a00 	vstr	s15, [r7]
 8013662:	aa31      	add	r2, sp, #196	@ 0xc4
 8013664:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8013668:	2301      	movs	r3, #1
 801366a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801366e:	429c      	cmp	r4, r3
 8013670:	da20      	bge.n	80136b4 <__kernel_rem_pio2f+0x464>
 8013672:	b10e      	cbz	r6, 8013678 <__kernel_rem_pio2f+0x428>
 8013674:	eef1 7a67 	vneg.f32	s15, s15
 8013678:	edc7 7a01 	vstr	s15, [r7, #4]
 801367c:	e7be      	b.n	80135fc <__kernel_rem_pio2f+0x3ac>
 801367e:	ab30      	add	r3, sp, #192	@ 0xc0
 8013680:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801354c <__kernel_rem_pio2f+0x2fc>
 8013684:	440b      	add	r3, r1
 8013686:	2c00      	cmp	r4, #0
 8013688:	da05      	bge.n	8013696 <__kernel_rem_pio2f+0x446>
 801368a:	b10e      	cbz	r6, 8013690 <__kernel_rem_pio2f+0x440>
 801368c:	eef1 7a67 	vneg.f32	s15, s15
 8013690:	edc7 7a00 	vstr	s15, [r7]
 8013694:	e7b2      	b.n	80135fc <__kernel_rem_pio2f+0x3ac>
 8013696:	ed33 7a01 	vldmdb	r3!, {s14}
 801369a:	3c01      	subs	r4, #1
 801369c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136a0:	e7f1      	b.n	8013686 <__kernel_rem_pio2f+0x436>
 80136a2:	ed73 7a01 	vldmdb	r3!, {s15}
 80136a6:	3a01      	subs	r2, #1
 80136a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80136ac:	e7d2      	b.n	8013654 <__kernel_rem_pio2f+0x404>
 80136ae:	eef0 7a47 	vmov.f32	s15, s14
 80136b2:	e7d4      	b.n	801365e <__kernel_rem_pio2f+0x40e>
 80136b4:	ecb2 7a01 	vldmia	r2!, {s14}
 80136b8:	3301      	adds	r3, #1
 80136ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136be:	e7d6      	b.n	801366e <__kernel_rem_pio2f+0x41e>
 80136c0:	ed72 7a01 	vldmdb	r2!, {s15}
 80136c4:	3801      	subs	r0, #1
 80136c6:	edd2 6a01 	vldr	s13, [r2, #4]
 80136ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80136ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136d2:	ed82 7a00 	vstr	s14, [r2]
 80136d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136da:	edc2 7a01 	vstr	s15, [r2, #4]
 80136de:	e79c      	b.n	801361a <__kernel_rem_pio2f+0x3ca>
 80136e0:	ed73 7a01 	vldmdb	r3!, {s15}
 80136e4:	3a01      	subs	r2, #1
 80136e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80136ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80136ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136f2:	ed83 7a00 	vstr	s14, [r3]
 80136f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136fa:	edc3 7a01 	vstr	s15, [r3, #4]
 80136fe:	e78f      	b.n	8013620 <__kernel_rem_pio2f+0x3d0>
 8013700:	ed33 7a01 	vldmdb	r3!, {s14}
 8013704:	3c01      	subs	r4, #1
 8013706:	ee77 7a87 	vadd.f32	s15, s15, s14
 801370a:	e78f      	b.n	801362c <__kernel_rem_pio2f+0x3dc>
 801370c:	eef1 6a66 	vneg.f32	s13, s13
 8013710:	eeb1 7a47 	vneg.f32	s14, s14
 8013714:	eef1 7a67 	vneg.f32	s15, s15
 8013718:	edc7 6a00 	vstr	s13, [r7]
 801371c:	ed87 7a01 	vstr	s14, [r7, #4]
 8013720:	e790      	b.n	8013644 <__kernel_rem_pio2f+0x3f4>
 8013722:	bf00      	nop

08013724 <floorf>:
 8013724:	febb 0a40 	vrintm.f32	s0, s0
 8013728:	4770      	bx	lr
	...

0801372c <_init>:
 801372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801372e:	bf00      	nop
 8013730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013732:	bc08      	pop	{r3}
 8013734:	469e      	mov	lr, r3
 8013736:	4770      	bx	lr

08013738 <_fini>:
 8013738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801373a:	bf00      	nop
 801373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801373e:	bc08      	pop	{r3}
 8013740:	469e      	mov	lr, r3
 8013742:	4770      	bx	lr
